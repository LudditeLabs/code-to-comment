from __future__ import unicode_literals
 if hasattr ( file , 'mode' ) :
      help = "Squashes an existing set of migrations (from first until specified) into a single new one."
  else :
      class TokenParser ( object ) :
 from django . core . signals import request_finished
 self . old_language = get_language ( )
  else :
  idhost = DNS_NAME
 def __init__ ( self , data = None , files = None , instance = None ,  save_as_new = False , prefix = None , queryset = None , ** kwargs ) :
              self . __offset = timedelta ( minutes = offset )
              escaped = False
  except AmbiguityError :
  except TypeError :
 base16 = BaseConverter ( BASE16_ALPHABET )
              value = tuple ( value )
  return self . _non_form_errors
  from django . core . management . base import BaseCommand
                  raise TemplateSyntaxError ( "Only 'silent' flag is allowed after cycle's name, not '%s'." % args [ - 1 ] )
   if len ( name ) > 255 :
  if response . has_header ( 'Vary' ) :
   def escape ( text ) :
     def has_error ( self , field , code = None ) :
    return [ self . forms [ i ] for i in self . _deleted_form_indexes ]
                  attrs [ 'max' ] = self . max_value
                  file = BytesIO ( data [ 'content' ] )
  if option == 'with' :
              self . blocks [ name ] . insert ( 0 , block )
                              current = current ( )
          self . dict = OrderedDict ( ( ( x , None ) for x in iterable ) if iterable else [ ] )
 open_method , mode = self . compression_formats [ cmp_fmt ]
 app = model . _meta . app_label
  if six . PY2 :
 if name in MEDIA_TYPES :
   def clear ( self ) :
 return self . as_widget ( self . field . hidden_widget ( ) , attrs , ** kwargs )
 def media ( self ) :
 if m :
                      app = 'django'
 none_value = ( 0 , '---' )
   def register ( self , * tags ) :
import warnings
 translators_comment_start = None
          pass
   end = rawdata [ k : endpos ] . strip ( )
              return (  _lazy_proxy_unpickle ,  ( func , self . __args , self . __kw ) + resultclasses  )
                  output . extend ( connection . creation . sql_destroy_model ( model , references_to_delete , style ) )
          return formats . time_format ( value , arg )
 def wrapper ( * args ) :
 super ( TemplateIfParser , self ) . __init__ ( * args , ** kwargs )
      def __init__ ( self , context , * args , ** kwargs ) :
      def __init__ ( self , view_name , args , kwargs , asvar ) :
 i += 1
          iter ( x )
  import cgi
 try :
          if self . options . get ( 'indent' , None ) is not None :
  else :
              handler . addQuickElement ( "description" , item [ 'description' ] )
  return self . _text_words ( length , truncate )
              origin = StringOrigin ( template_string )
 if threading :
 options . update ( kwargs )
   elif dirname == 'locale' :
   def display ( self ) :
 from django . utils . http import cookie_date
    x = 0
              updates . update ( processor ( request ) )
 _empty_value = [ ]
 check_for_migrations ( app_config , connection )
 if isinstance ( unicode_value , six . text_type ) :
          if options [ "daemonize" ] . lower ( ) in ( 'true' , 'yes' , 't' ) :
   class Command ( BaseCommand ) :
   def read ( self , size = None ) :
                        from django . db import connections , DEFAULT_DB_ALIAS
                          pass
          return self . _create_attachments ( self . _create_alternatives ( msg ) )
      def __init__ ( self , variables ) :
 if idstring is None :
  if self . domain == 'djangojs' :
      def strftime ( self , fmt ) :
 if hasattr ( form , 'Meta' ) :
  return None if timeout is None else time . time ( ) + timeout
 max_value = float ( max_value )
                  tried . append ( filepath )
 class URLValidator ( RegexValidator ) :
  if isinstance ( s , ( six . text_type , Promise ) ) :
                  return six . text_type ( self ) % rhs
  except ( ValueError , TypeError ) :
 from django . core . mail . utils import DNS_NAME
  if colors and colors [ - 1 ] in color_names :
               self . _func_path = '.' . join ( [ func . __class__ . __module__ , func . __class__ . __name__ ] )
  elif isinstance ( value , six . string_types ) :
              six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
 self . attachments . append ( ( filename , content , mimetype ) )
  except UnicodeEncodeError :
 pass
 def __init__ ( self , table ) :
 cc = dict ( dictitem ( el ) for el in cc )
  else :
          fd = sys . stdin
            if hasattr ( self , '_choices' ) :
    @ register . filter ( is_safe = True )
  int_part = int_part_gd [ : : - 1 ]
          return fastcgi_help ( )
     kwarg_re = re . compile ( r"(?:(\w+)=)?(.+)" )
          if not hasattr ( e , 'django_template_source' ) :
 def get_commands ( ) :
              return
   def __setitem__ ( self , key , value ) :
    from django . core . exceptions import ValidationError
 httpd . serve_forever ( )
 if settings . DEBUG :
 parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
  else :
  table_output . append ( " " . join ( field_output ) )
          piece = '' . join ( source [ last : ] )
              if isinstance ( sep , unicode ) :
  encoding = self . _encoding
 cmd_options = vars ( options )
   def __repr__ ( self ) :
 while remaining_bits :
 global _supported
 for k , v in data . items ( ) :
  return mark_safe ( self . format_output ( output ) )
 self . make_writeable ( new_path )
              return lang_code
                  handlers = config . get ( 'handlers' , EMPTY_DICT )
          return os . path . exists ( self . path ( name ) )
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
  else :
              for arg in args :
          return len ( self . forms )
              try :
 def deleted_forms ( self ) :
   def _save ( self , name , content ) :
 self . __dict__ [ '_setupfunc' ] = func
  except Exception as e :
 parser . add_option ( '--traceback' , action = 'store_true' ,  help = 'Raise on exception' )
 from django . utils . safestring import SafeData , mark_safe
      compare = lambda self , a , b : a is not b
              try :
  model_fields = Model . _meta . get_all_field_names ( )
                  m = self . DOT_PATTERN . match ( rest )
   def get_meta ( self , table_name ) :
   def __contains__ ( self , key ) :
   if errors_on_separate_row and bf_errors :
 if not config_string :
      elif self . _meta . fields and field not in self . _meta . fields :
      with open ( fn , 'rb' ) as f :
 message = _ ( 'Ensure this value is %(limit_value)s (it is %(show_value)s).' )
   def enter_command ( self , command , token ) :
 lines = value . split ( '\n' )
 self . initial = initial
              pass
  except ValidationError as e :
 s = m . group ( 0 )
 import json
   if formfield :
  self . _regex_validator = validators . RegexValidator ( regex = regex )
              continue
              output . append ( options )
              raise TemplateSyntaxError ( "Second (optional) argument to %s tag"  " must be 'parsed'" % bits [ 0 ] )
                  extra , resolver = resolver . namespace_dict [ ns ]
  return _translations [ language ]
                  try :
   def __bool__ ( self ) :
                use_null_fallback = False
              continue
  _MovedItems . _moved_attributes = _moved_attributes
 import shutil
                  replaces . append ( ( migration . app_label , migration . name ) )
      return force_text ( gettext ( message ) )
  except serializers . SerializerDoesNotExist :
  try :
   def lazy_number ( func , resultclass , number = None , ** kwargs ) :
  except ValidationError :
          return any ( self . dicts )
 def __wrapper__ ( * args , ** kw ) :
  elif str ( level ) == level :
  errors = [ ]
          cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
      def __init__ ( self , regex , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :
  if prefix is None :
    daemon_kwargs = { }
 value = bytes_to_text ( value , self . encoding )
 best_doublecolon_start = doublecolon_start
          super ( BaseTemporalField , self ) . __init__ ( * args , ** kwargs )
  else :
              if options [ 'plain' ] :
  from django . conf import settings
  encoding = property ( lambda self : self . file . encoding )
 leave_locale_alone = True
 if not m :
  def start_serialization ( self ) :
              result [ i ] += piece
     if self . verbosity > 1 :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
                  content = ''
 self . items . append ( item )
                      del self [ key ]
      def abspathu ( path ) :
  else :
     elif subcommand == 'version' or self . argv [ 1 : ] == [ '--version' ] :
 basetype , subtype = mimetype . split ( '/' , 1 )
          return get_supported_language_variant ( settings . LANGUAGE_CODE )
 assert is_iterable ( new_errors ) , (  "The function %r did not return a list. All functions registered "  "with the checks registry must return a list." % check )
  return '' . join ( c )
  widget = self . field . widget
 global _localtime
   class Serializer ( PythonSerializer ) :
 fname = self . _key_to_file ( key , version )
     if att_name == 'id' and extra_params == { 'primary_key' : True } :
                  _locs_ = frame . f_locals
                  try :
                  if name in lib . tags :
 class Media ( object ) :
  _CacheInfo = namedtuple ( "CacheInfo" , [ "hits" , "misses" , "maxsize" , "currsize" ] )
   def get_internal_wsgi_application ( ) :
                  if old_attr is None :
                      out . write ( '# %s' % ' | ' . join ( lineno_comment_map [ comment_lineno_cache ] ) )
  else :
          filelist = _cached_filenames + new_filenames + _error_files
      regex = re . compile (  r'^(?:[a-z0-9\.\-]*)://'  r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}(?<!-)\.?)|'  r'localhost|'  r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}|'  r'\[?[A-F0-9]*:[A-F0-9:]+\]?)'  r'(?::\d+)?'  r'(?:/?|[/?]\S+)$' , re . IGNORECASE )
 from django . db . migrations . writer import MigrationWriter
 self . fields = getattr ( options , 'fields' , None )
 units = len ( tupl [ 1 ] ) - tupl [ 2 ]
  MONTHS = 'jan feb mar apr may jun jul aug sep oct nov dec' . split ( )
   message = "%s\n\nRequest repr(): %s" % ( self . format ( record ) , request_repr )
  def add_arguments ( self , parser ) :
  else :
                          for c in lineno_comment_map [ comment_lineno_cache ] :
                                          cursor . execute ( sql )
 del self . _expire_info [ key ]
              return None
      help = "Prints the DROP TABLE SQL statements for the given app name(s)."
 six . reraise ( os_err_exc_type , os_err_exc_type ( 'Error executing %s: %s' %  ( args [ 0 ] , strerror ) ) , sys . exc_info ( ) [ 2 ] )
 if '()' in config :
          return self
              def load ( self , rawdata ) :
 from pprint import pformat
 return self . id in settings . SILENCED_SYSTEM_CHECKS
              value = bool ( value )
 if value == self . empty_value or value in self . empty_values :
 import sys
 bits = token . split_contents ( )
    def clear ( self ) :
              processors = tuple ( processors )
  raise CommandError ( "Unable to serialize database: %s" % e )
  tried . append ( [ pattern ] )
 if props :
                      compile_func = self . tags [ command ]
 pass
  return sign + int_part + dec_part
  PVOID = c_void_p
  if isinstance ( source , Group ) :
  except ValueError :
          self . close ( )
                              invalid_var_format_string = '%s' in settings . TEMPLATE_STRING_IF_INVALID
      if path is None :
 def __init__ ( self , attrs = None , choices = ( ) ) :
  else :
 return re_camel_case . sub ( r' \1' , value ) . strip ( ) . lower ( )
  mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . MANAGERS ] ,  connection = connection )
              self . stdout . write ( 'examining files with the extensions: %s\n'  % get_text_list ( list ( self . extensions ) , 'and' ) )
     ip_str = _explode_shorthand_ip_string ( ip_str )
              parentloop = { }
  options = params . get ( 'OPTIONS' , { } )
 parser = parser_class ( lexer . tokenize ( ) )
   @ property
 self . _table = table
                                  self . stderr . write ( "    Failed to install index for %s.%s model: %s\n" % ( app_name , model . _meta . object_name , e ) )
          urlconf = get_urlconf ( )
   def add_item ( self , title , link , description , author_email = None ,  author_name = None , author_link = None , pubdate = None , comments = None ,  unique_id = None , unique_id_is_permalink = None , enclosure = None ,  categories = ( ) , item_copyright = None , ttl = None , updateddate = None , ** kwargs ) :
     class ImageField ( FileField ) :
          kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( match . groupdict ( ) ) )
  except ImportError :
          return Field . validate ( self , value )
 ignore = lambda pattern : fnmatch . fnmatchcase ( filename , pattern )
              raise TypeError ( 'other_dict must be a mapping (dictionary-like) object.' )
  elif ch == '.' :
  else :
 return b'' . join ( T ) + F ( l ) [ : r ]
              hextets [ index ] = '0'
    def execute ( self , * args , ** options ) :
          try :
          addr = parseaddr ( force_text ( addr ) )
              if default is not RAISE_ERROR :
  except ImportError as e :
  for location in format_locations :
 self . write_items ( handler )
  view_name = self . view_name . resolve ( context )
 value = self . queryset . get ( ** { key : value } )
 self . code = code
          return getattr ( t , translation_function ) ( singular , plural , number )
  param = '' . join ( name )
 return self . renderer ( name , value , final_attrs , choices )
      def as_string ( self , unixfrom = False ) :
 from django . core . management . sql import sql_all
          return self . number > 1
                      self . stdout . write ( '\n' + self . style . SQL_KEYWORD ( connection . ops . end_transaction_sql ( ) ) )
    tag_re = ( re . compile ( '(%s.*?%s|%s.*?%s|%s.*?%s)' %  ( re . escape ( BLOCK_TAG_START ) , re . escape ( BLOCK_TAG_END ) ,  re . escape ( VARIABLE_TAG_START ) , re . escape ( VARIABLE_TAG_END ) ,  re . escape ( COMMENT_TAG_START ) , re . escape ( COMMENT_TAG_END ) ) ) )
  def __init__ ( self , offset = None , name = None ) :
                              nodelist . append ( node . render ( context ) )
 var_obj = None
  cache_key = _generate_cache_header_key ( key_prefix , request )
 _globs_ = frame . f_globals
              return replacement
 self . pubid = pubid
   return tuple ( app_template_dirs )
          super ( ChoiceField , self ) . __init__ ( required = required , widget = widget , label = label ,  initial = initial , help_text = help_text , * args , ** kwargs )
              regex_compiled = re . compile ( '^%s/' % language_code , re . UNICODE )
   for locale in locales :
              handler . addQuickElement ( "link" , "" , { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )
                  return os . path . getsize ( self . file . name )
  if errors :
   return metaclass ( cls . __name__ , cls . __bases__ , orig_vars )
                      template = get_template_from_string ( template , origin , template_name )
   saved_instances = [ ]
                  new_msg = (  "Database %s couldn't be flushed. Possible reasons:\n"  "  * The database isn't running or isn't configured correctly.\n"  "  * At least one of the expected database tables doesn't exist.\n"  "  * The SQL was invalid.\n"  "Hint: Look at the output of 'django-admin.py sqlflush'. That's the SQL this command wasn't able to run.\n"  "The full error: %s" ) % ( connection . settings_dict [ 'NAME' ] , e )
              if os . fork ( ) > 0 :
  incremental = config . pop ( 'incremental' , False )
 if _cached_modules == module_values :
   def __exit__ ( self , exc_type , exc_value , traceback ) :
   def _iteritems ( self ) :
  value = super ( DictWrapper , self ) . __getitem__ ( key )
              parts = [ ]
  if not ( value is True or value is False or value is None or value == '' ) :
     def unregister_serializer ( format ) :
 while 1 :
          return lookup_view
   if isinstance ( field_value , str ) :
  except Exception :
 _encoding = None
  if help_texts is not None :
   return result
 from django . utils import six
      class BaseModelFormSet ( BaseFormSet ) :
 widget = SelectMultiple
   def _get_media ( self ) :
  return super ( classonlymethod , self ) . __get__ ( instance , owner )
              try :
                  with open ( filename , 'wb' ) as outfile :
  try :
  else :
 return self . choice_input_class ( self . name , self . value , self . attrs . copy ( ) , choice , idx )
 parser . add_argument ( '-a' , '--all' , action = 'store_true' , dest = 'use_base_manager' , default = False ,  help = "Use Django's base manager to dump all models stored in the database, "  "including those that would otherwise be filtered or modified by a custom manager." )
          obj_dict = self . __dict__ . copy ( )
 import re
                  return self . filter_function ( func , ** flags )
 def escape_filter ( value ) :
  data = self . _prepare_data ( data )
     def _post_clean ( self ) :
   def values ( self ) :
 from django . utils . html import conditional_escape , format_html
          j = text . find ( substr , i )
  if stream_created :
 id_ = self . attrs . get ( 'id' , None )
 class BoundField ( object ) :
              raise ValidationError ( errors )
      return _trans . pgettext ( context , message )
 self . base = base
    if resolver . urlconf_module is None :
 return type ( form . __name__ + str ( 'FormSet' ) , ( formset , ) , attrs )
   if not chunks :
    hextets = ip_str . split ( ":" )
    if isinstance ( empty_label , ( list , tuple ) ) :
 pks = set ( force_text ( getattr ( o , key ) ) for o in qs )
   if logging_config :
 if param :
              timeout = self . default_timeout
  return TemplateTagNode ( tag )
 from django . utils . deprecation import RemovedInDjango19Warning
  except Exception as e :
  if finder . find_module ( name ) :
      _cookie_allows_colon_in_names = False
 self . content_type = None
 date_data = ( date . year , date . month , date . day )
                  os . makedirs ( self . file_path )
  self . _stream . unget ( unused_char )
   if self . field . localize :
 self . use_natural_primary_keys = options . pop ( 'use_natural_primary_keys' , False )
              fields = new_class . declared_fields
   def __getitem__ ( self , idx ) :
   class TranslatorCommentWarning ( SyntaxWarning ) :
 known_models = [ ]
 if not model_identifier :
              self . file = BytesIO ( )
  if not self . allow_empty_file and not file_size :
          return all ( getattr ( self , attr ) == getattr ( other , attr )  for attr in [ 'level' , 'msg' , 'hint' , 'obj' , 'id' ] )
          self . style = color_style ( )
          escaper = lambda x : x
   def message ( self ) :
           self . _iterator = iter ( value )
                  attrs = dict ( attrs or { } , ** { 'for' : id_for_label } )
  m2m_data = { }
    result = [ ]
    def custom_sql_for_model ( model , style , connection ) :
              super ( SortedDict , self ) . __init__ ( )
 from django . utils . encoding import force_text
 meta = getattr ( form , 'Meta' , None )
 return importlib_find ( full_module_name , package_path ) is not None
   for field , error_list in error . items ( ) :
 for candidate in ( ( d not in models or d in model_list ) for d in deps ) :
              self [ key ] = result
                          references_to_delete . setdefault ( f . rel . to , [ ] ) . append ( ( model , f ) )
 if fields :
   else :
   class date ( real_date ) :
   from django . core . exceptions import ValidationError
  from django . core . management . base import AppCommand
                          objects = model . _default_manager
 role = role . upper ( )
  connection = connections [ options [ 'database' ] ]
 self . xml . endElement ( "natural" )
              if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
 from __future__ import unicode_literals
 return content
   class Formatter ( object ) :
 yield self . read ( )
   intrans = True
                              out . write ( blankout ( part , 'S' ) )
     loader = MigrationLoader ( None , ignore_no_migrations = True )
                      raise ValueError ( 'Unable to set target handler '  '%r: %s' % ( config [ 'target' ] , e ) )
 for item in sorted_items :
    NamedTemporaryFile = TemporaryFile
              self . cookies [ key ] [ 'secure' ] = True
  return result
                      shutil . copymode ( old_path , new_path )
   def handle_field ( self , obj , field ) :
              self . file . write ( raw_data )
          value = force_text ( value )
 context [ self . target_var ] = func ( * resolved_args , ** resolved_kwargs )
 self . attachments . append ( filename )
   def get_limit_choices_to ( self ) :
 key = bytes_to_text ( key , self . encoding )
              if not form . has_changed ( ) :
 return DefusedExpatParser ( )
              fn ( * args , ** kwargs )
   class UnreadablePostError ( IOError ) :
   def num_items ( self ) :
              self . GET = QueryDict ( mutable = True )
              self . setlist ( k , v )
    def read ( self ) :
 if not etags :
 self . stdout = OutputWrapper ( options . get ( 'stdout' , sys . stdout ) )
              value = to_current_timezone ( value )
          wsgi_opts [ 'bindAddress' ] = ( options [ "host" ] , int ( options [ "port" ] ) )
              return func ( * args , ** kwargs )
 s = s . replace ( "'" , "\\'" )
   @ python_2_unicode_compatible
  level += 1
                  if not isinstance ( messages , ValidationError ) :
 def __init__ ( self , callback ) :
  if isinstance ( stream_or_string , six . string_types ) :
    def static ( request ) :
                  msg . attach ( body_msg )
          while True :
    def extract ( path , to_path = '' ) :
 if self . required and not value :
 obj = Node ( children , connector , negated )
 try :
                  if field . serialize :
 if kwargs :
              tmp = url . rstrip ( '/' )
  return None
          items = _iteritems
 oldvalue = root [ RESULT ]
 if not lib :
                      self . handle_data ( rawdata [ i : j ] )
  if delta < 0 :
from __future__ import unicode_literals
          cache_timeout = 0
  return bool ( value )
 clean = lambda self , x : x
       except self . LibraryValueNotFoundException :
 code = 'max_value'
          zipfile . ZipFile . __init__ ( self , * args , ** kwargs )
 from django . utils . encoding import force_text , smart_text
 def __new__ ( cls , name , this_bases , d ) :
   url = property ( lambda self : self [ 'Location' ] )
              return self . sign + value
  else :
      pass
                      if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
          j = 36 ** factor
 class ErrorList ( UserList , list ) :
          return any ( w . needs_multipart_form for w in self . widgets )
  def render ( self , name , value , attrs = None , choices = ( ) ) :
          neg , value = self . convert ( s , self . digits , self . decimal_digits , self . sign )
          lang_code = get_language_from_path ( request . path_info )
  except ( LookupError , TypeError ) :
      def __init__ ( self , name , nodelist , parent = None ) :
 return res
              if row [ 4 ] is None or row [ 5 ] is None :
              self . _populate ( )
          parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '*' )
                      self . stdout . write ( "  %s:\n" % ( self . style . MIGRATE_LABEL ( writer . filename ) , ) )
  backend_cls = import_string ( backend )
                          if self . selected_fields is None or field . attname in self . selected_fields :
                   if not os . path . exists ( filename ) :
   def accessed_time ( self , name ) :
                      pass
              self . stdout . write ( "Cache table '%s' created." % tablename )
 from django . utils . timezone import template_localtime
 return value . center ( int ( arg ) )
 msguniq_options = [ '--to-code=utf-8' ]
   return dummy ( )
  else :
          return repr ( self . value )
  if DEFAULT_CACHE_ALIAS not in settings . CACHES :
   def clean ( self , value ) :
                               last = root [ PREV ]
 result = super ( TimestampSigner , self ) . unsign ( value )
  except AttributeError :
 if 'file_path' in kwargs :
  models . signals . post_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
          self . _assert_mutable ( )
               if ignore and field_name not in model_fields :
 global templatetags_modules
  def fix ( match ) :
                          out . write ( ' %s ' % p . split ( ':' , 1 ) [ 1 ] )
    def __str__ ( self ) :
   def read ( self ) :
    class EmailInput ( TextInput ) :
 six . reraise ( exc_type , exc_value , sys . exc_info ( ) [ 2 ] )
 self . lineno = None
 sys . stderr . write ( "  installed flup, then make sure you have it in your PYTHONPATH.\n" )
   class ExtendsError ( Exception ) :
              filenames . append ( filename )
   class Command ( AppCommand ) :
   def keys ( self ) :
              return list ( self . iterkeys ( ) )
 if header == 'ACCEPT_LANGUAGE' and is_accept_language_redundant :
 self . location = abspathu ( self . base_location )
 targets = set ( '.' . join ( ( fixture_name , suffix ) ) for suffix in suffixes )
 ASCTIME_DATE = re . compile ( r'^\w{3} %s %s %s %s$' % ( __M , __D2 , __T , __Y ) )
   if p . image :
              raise ValidationError ( errors )
     def incr_version ( self , key , delta = 1 , version = None ) :
 self . event_stream = pulldom . parse ( self . stream , self . _make_parser ( ) )
  if not isinstance ( cookie , http_cookies . BaseCookie ) :
 state [ 'cookies' ] = str ( state [ 'cookies' ] )
    run_syncdb = False
                  pass
              if not unicodedata . combining ( char ) :
  nodelist . append ( node )
      def __init__ ( self , server , params , library , value_not_found_exception ) :
 try :
 exc_value = exc_type (  "Unsupported value: %r. You should install pytz." % dt )
 self . can_write . release ( )
    return mark_safe ( '' . join ( force_text ( n ) for n in nodelist ) )
          name = getattr ( func , "_decorated_function" , func ) . __name__
  except ( ImportError , AttributeError ) :
          return LoaderOrigin ( display_name , loader , name , dirs )
              raise SuspiciousFileOperation ( "Attempted access to '%s' denied." % name )
          return 'form'
   class_name = model . __name__ + str ( 'Form' )
                  raise ValueError ( "JSON can't represent timezone-aware times." )
    if weight >= 6 :
 import os
 __D = r'(?P<day>\d{2})'
 while path :
    if not _cookie_allows_colon_in_names :
 import sys
  return self . _errors
   @ classmethod
              if self . min_value is not None :
                      attrs [ 'class' ] += ' ' + self . form . required_css_class
      def become_daemon ( our_home_dir = '.' , out_log = '/dev/null' ,  err_log = '/dev/null' , umask = 0o022 ) :
 from django . utils . timezone import is_aware , utc
   def T ( self ) :
 if sign in self . digits :
   def has_previous ( self ) :
 for loader in self . loaders :
          return datetime . fromtimestamp ( os . path . getatime ( self . path ( name ) ) )
 outer_html = '<ul{id_attr}>{content}</ul>'
    def has_vary_header ( response , header_query ) :
  if alter_sql :
  else :
 return candidate_pat % candidate_subs
  for i , arg in enumerate ( args ) :
 using_sysrandom = True
        months = ( 'Jan' , 'Feb' , 'Mar' , 'Apr' , 'May' , 'Jun' , 'Jul' , 'Aug' , 'Sep' , 'Oct' , 'Nov' , 'Dec' , )
  self . _upload_handlers = upload_handlers
 from django . utils . encoding import force_text , iri_to_uri
 if timeout == DEFAULT_TIMEOUT :
              if default is None :
 HttpResponse . content . fset ( self , value )
   else :
   else :
  return no
  else :
 shells = [ 'ipython' , 'bpython' ]
   def handle ( self , * fixture_labels , ** options ) :
 _func_code = "__code__"
 self . waiting_writers -= 1
 xreadlines = property ( lambda self : self . file . xreadlines )
          return maybe
  self . fields = fields
 while x > 0 :
          warnings . warn ( '`MergeDict` is deprecated, use `dict.update()` '  'instead.' , RemovedInDjango19Warning , 2 )
  if current_app and current_app in app_list :
   else :
           connection = connections [ options [ 'database' ] ]
 sep = kwargs . pop ( "sep" , None )
    @ register . tag
 from django . http . multipartparser import MultiPartParser , MultiPartParserError
 host = host . lower ( )
   def _should_delete_form ( self , form ) :
 doublecolon_start = - 1
 cache_key = 'views.decorators.cache.cache_page.%s.%s.%s.%s' % (  key_prefix , method , url . hexdigest ( ) , ctx . hexdigest ( ) )
   if consume_next :
  from . . import Warning , register , Tags
                  def __init__ ( self , takes_context , args , kwargs , target_var ) :
           result = ungettext ( singular , plural , number )
  except ImportError :
          parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to '  'introspect. Defaults to using the "default" database.' )
                      bit = next ( bits )
  return value
     def modelform_defines_fields ( form_class ) :
              try :
 if settings . DEBUG :
 if token is None :
 if first :
  if ( 3 , 2 ) < sys . version_info < ( 3 , 3 , 4 ) :
 prec = abs ( p ) + units + 1
              doomed = [ k for ( i , k ) in enumerate ( self . _cache ) if i % self . _cull_frequency == 0 ]
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
  return potfiles
 return FormSet
 def dictsortreversed ( value , arg ) :
 from django . utils . six . moves import xrange
 _dict = func ( * resolved_args , ** resolved_kwargs )
          _dec . __name__ = 'method_decorator(%s)' % decorator . __name__
  IDENTIFIER = re . compile ( '^[a-z_][a-z0-9_]*$' , re . I )
                      new_file . write ( content )
 if not old_style_list :
      class TemporaryFile ( FileProxyMixin ) :
      plist = [ ]
 comment_notes . extend ( notes )
 from django . utils . six import StringIO
    except ValueError :
 if self . body :
    fields . update ( new_class . declared_fields )
 for candidate in glob . iglob ( os . path . join ( fixture_dir , fixture_name + '*' ) ) :
      import bz2
   def add_error ( self , field , error ) :
                  skipped . append ( ( model , deps ) )
   def reload ( self ) :
 self . _namespace_dict = { }
 parser = OptionParser ( prog = prog_name ,  usage = self . usage ( subcommand ) ,  version = self . get_version ( ) )
 __ne__ = new_method_proxy ( operator . ne )
  else :
          sample = f . read ( 4 )
              defaults [ 'data' ] = self . data
     set_script_prefix ( get_script_name ( environ ) )
                          pass
 result = cursor . fetchone ( )
  if flags is not None :
 while self . tokens :
                              return field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * value ) . pk
       class DefusedExpatParser ( _ExpatParser ) :
 self . _cache . delete ( key )
      return import_string ( import_path or settings . DEFAULT_FILE_STORAGE )
              return list ( self . iteritems ( ) )
   def loads ( self , data ) :
 from django . utils . http import urlquote
  app_template_dirs = [ ]
  except ValueError :
 from django . utils . encoding import force_text
            weight = 0
  defaults . update ( kwargs )
              checks = [ check for check in self . registered_checks  if hasattr ( check , 'tags' ) and set ( check . tags ) & set ( tags ) ]
  urlize = allow_lazy ( urlize , six . text_type )
              try :
  return errors
                      self . create_table ( db , cache . _table )
              logger . setLevel ( _checkLevel ( level ) )
 if settings . FORCE_SCRIPT_NAME is not None :
          self . msg = msg
    def attach_file ( self , path , mimetype = None ) :
 text_type = unicode
 return value . strftime ( format )
              if isinstance ( elt , NonCapture ) :
  else :
 @ stringfilter
   elif cwords [ 0 ] in ( 'dumpdata' , 'sql' , 'sqlall' , 'sqlclear' ,  'sqlcustom' , 'sqlindexes' , 'sqlsequencereset' , 'test' ) :
                                       break
   choices = property ( _get_choices , ChoiceField . _set_choices )
  status = '%s %s' % ( response . status_code , response . reason_phrase )
  if item [ 'author_link' ] is not None :
  except KeyError :
   return self . _count
    lang_code = request . COOKIES . get ( settings . LANGUAGE_COOKIE_NAME )
  except TypeError :
              self . file . __enter__ ( )
   else :
                          fh . write ( migration_string )
          return False
              raise IOError ( "%s exists and is not a directory." % directory )
    class HttpResponseNotAllowed ( HttpResponse ) :
          return base64 . urlsafe_b64decode ( s . ljust ( len ( s ) + len ( s ) % 4 , b'=' ) )
  return base , ext
               kwargs . setdefault ( 'widget' , super ( IntegerField , self ) . widget )
 connection = connections [ db ]
   class DjangoUnicodeDecodeError ( UnicodeDecodeError ) :
          return settings . DEBUG
                  for f in sorted ( os . listdir ( self . path ) ) :
  return _wrapper
          from django . core . mail import get_connection
          full_path = self . path ( name )
   def r ( self ) :
 self . xml . startElement ( "field" , {  "name" : field . name ,  "rel" : field . rel . __class__ . __name__ ,  "to" : smart_text ( field . rel . to . _meta ) ,  } )
                  other = other . __cast ( )
              initial = [ ]
                  raise TemplateSyntaxError (  "'%s' received some positional argument(s) after some "  "keyword argument(s)" % name )
   class ClearableFileInput ( FileInput ) :
                  return mark_safe ( func ( * args , ** kwargs ) )
                  raise CommandError ( "You can only use --pks option with one model" )
 i = j + 1
   def __next__ ( self ) :
 if origin :
   for relobj in getattr ( obj , field . name ) . iterator ( ) :
 kwargs = { 'pk_field' : True }
      if not _serializers :
 if not isinstance ( fk , ForeignKey ) or ( fk . rel . to != parent_model and  fk . rel . to not in parent_model . _meta . get_parent_list ( ) ) :
   try :
 def __init__ ( self , stream , boundary ) :
  elif not self . required and not value :
    class ManagementUtility ( object ) :
              self . stream = open ( self . _get_filename ( ) , 'ab' )
  for __ in xrange ( fill_to - sep ) :
 extra_params . update ( field_params )
  if data is None :
  else :
    WSGIServer ( get_internal_wsgi_application ( ) , ** wsgi_opts ) . run ( )
 parser . add_argument ( '--list-tags' , action = 'store_true' , dest = 'list_tags' ,  help = 'List available tags.' )
       def __init__ ( self , msg , params = ( ) ) :
  try :
     class NoArgsCommand ( BaseCommand ) :
   if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :
  return True
  elif self . _delegate_text :
  from django . http import Http404
 trans_real . _default = None
              raise StopIteration ( )
                  return value . pk
                              data = raw_data
 executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
  errors . append (  Error (  "%s was connected to the '%s' signal "  "with a lazy reference to the '%s' sender, "  "which has not been installed." % (  description , name , '.' . join ( reference )  ) ,  obj = receiver . __module__ ,  hint = None ,  id = 'signals.E001'  )  )
 return [ "" ,  "    class Meta:" ,  "        managed = False" ,  "        db_table = '%s'" % table_name ]
    class DeclarativeFieldsMetaclass ( MediaDefiningClass ) :
                          index_sql = connection . creation . sql_indexes_for_model ( model , no_style ( ) )
 for i , line in enumerate ( table_output ) :
   from __future__ import absolute_import
 app_dirs . append ( old_app_dir )
 if not isinstance ( urlconf_name , six . string_types ) :
  name , value = match . groups ( )
              name = self . html_name
 if isinstance ( context , Context ) :
   else :
                  if e . errno != errno . ENOENT :
 self . validate_key ( key )
          get = ( pformat ( GET_override )  if GET_override is not None  else pformat ( request . GET ) )
 bits = urlparse ( url )
              nodelist . contains_nontext = True
   def show_migration_list ( self , connection , app_names = None ) :
              activate ( self . old_language )
                  form . _meta . fields = list ( form . _meta . fields )
 import tempfile
  else :
      parser = CommandParser ( None , usage = "%(prog)s subcommand [options] [args]" , add_help = False )
 handler = logging . StreamHandler ( )
  for name in MEDIA_TYPES :
 from django . utils . http import http_date
 for f in sorted ( opts . concrete_fields + sortable_virtual_fields + opts . many_to_many ) :
 time_str = date . strftime ( '%s, %%d %s %%Y %%H:%%M:%%S ' % ( dow , month ) )
              raise CommandError ( "Command doesn't accept any arguments" )
              continue
     class DjangoJSONEncoder ( json . JSONEncoder ) :
              potfile = os . path . join ( path , '%s.pot' % str ( self . domain ) )
                      raise TemplateSyntaxError ( "'%s' is not a valid tag or filter in tag library '%s'" %  ( name , taglib ) )
 return self
  raise
 output = [ ]
                              out . write ( ' npgettext(%r, %r, %r,count) ' % (  message_context ,  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )
  if kwargs is None :
           template = get_template_from_string ( template , origin , template_name )
 parser . add_argument ( '--exclude' , '-x' , dest = 'exclude' , action = 'append' , default = [ ] ,  help = 'Locales to exclude. Default is none. Can be used multiple times.' )
 from django . template . loader import BaseLoader
  except KeyError :
 MAX_NUM_FORM_COUNT = 'MAX_NUM_FORMS'
  url_markup_template = '<a href="{0}">{1}</a>'
 color_settings = termcolors . parse_color_setting ( DJANGO_COLORS )
                  if field . serialize :
     class StringOrigin ( Origin ) :
 def random ( value ) :
              val = ', ' . join ( sanitize_address ( addr , encoding )  for addr in getaddresses ( ( val , ) ) )
 self . __locale = to_locale ( language )
   if col_name != new_name and field_notes :
          return "<UTC>"
 return mark_safe ( conditional_escape ( sep ) . join (  format_html ( format_string , * tuple ( args ) )  for args in args_generator ) )
                                  n = int ( idx )
    class MovedAttribute ( _LazyDescr ) :
   none_model_fields = [ k for k , v in six . iteritems ( fields ) if not v ]
 for name in filters :
                  libraries [ library_name ] = lib
 if digest is None :
                          setattr ( filter_func . _decorated_function , attr , value )
 substitutions [ 'input' ] = super ( ClearableFileInput , self ) . render ( name , value , attrs )
  except socket . error as e :
                   prefix = settings . MEDIA_URL
              return format ( value , arg )
      def __init__ ( self , * args , ** kwargs ) :
   return total_forms
  exclude = self . _get_validation_exclusions ( )
 if endpos < 0 :
    class SuspiciousFileOperation ( SuspiciousOperation ) :
 def do_filter ( parser , token ) :
                      week_number -= 1
          if media :
                  return self . nodelist_empty . render ( context )
  get_text_list = allow_lazy ( get_text_list , six . text_type )
  for root , dirs , files in os . walk ( template_dir ) :
                  os . kill ( os . getpid ( ) , - exit_code )
  if not bytes :
  __all__ = [  'SimpleCookie' , 'parse_cookie' , 'HttpRequest' , 'QueryDict' ,  'RawPostDataException' , 'UnreadablePostError' , 'build_request_repr' ,  'HttpResponse' , 'StreamingHttpResponse' , 'HttpResponseRedirect' ,  'HttpResponsePermanentRedirect' , 'HttpResponseNotModified' ,  'HttpResponseBadRequest' , 'HttpResponseForbidden' , 'HttpResponseNotFound' ,  'HttpResponseNotAllowed' , 'HttpResponseGone' , 'HttpResponseServerError' ,  'Http404' , 'BadHeaderError' , 'fix_location_header' , 'JsonResponse' ,  'conditional_content_removal' ,  ]
          raise CommandError ( "Unknown command: %r" % name )
   def start_doctype_decl ( self , name , sysid , pubid , has_internal_subset ) :
 self . selected_fields = options . pop ( "fields" , None )
  elif var_arg :
          format_module_path = settings . FORMAT_MODULE_PATH
          s = s . decode ( 'utf-8' )
    parts = config_string . lower ( ) . split ( ';' )
                  self . waiting_writers += 1
      pass
  if end < 0 :
   @ property
   def parse ( self ) :
 def to_bytes ( val , encoding ) :
   self . run_shell ( shell = options [ 'interface' ] )
   def get_fixed_timezone ( offset ) :
 pass
  elif pluralmatch :
 GB = 1 << 30
              self . style = no_style ( )
                      lookups . appendlist ( pattern . name , ( bits , p_pattern , pattern . default_args ) )
 self . error_list = [ self ]
              return bytes ( value )
 __setslice__ = complain
          self . _wrapped = empty
                      raise
 self . error_messages = getattr ( options , 'error_messages' , None )
 self . localized_fields = getattr ( options , 'localized_fields' , None )
 if not hasattr ( parser , '_namedCycleNodes' ) :
                      self . write_message ( message )
   def tag ( self , name = None , compile_function = None ) :
  if filename . endswith ( ( '/' , '\\' ) ) :
              activate ( self . timezone )
  except StandardError as e :
   def f ( self ) :
 from django . utils . xmlutils import SimplerXMLGenerator
                  try :
                  for plan_node in graph . forwards_plan ( node ) :
  return value . strip ( )
              raise TemplateSyntaxError ( "Named cycle '%s' does not exist" % name )
          print ( message )
          while b'\n' not in self . buffer and ( size is None or len ( self . buffer ) < size ) :
 _meth_self = "__self__"
          if args and kwargs :
  else :
 if isinstance ( source , inst ) :
              if len ( bits ) < 3 or bits [ 1 ] != 'as' :
 def __init__ ( self , timezone ) :
 table = connections [ db ] . ops . quote_name ( self . _table )
   def render ( self , context ) :
  except UnicodeDecodeError :
                          raise CommandError ( "Unknown application: %s" % app_label )
from django . conf import settings
 try :
          text = text [ 1 : ]
                      response = wrapped_callback ( request , * callback_args , ** callback_kwargs )
   def close ( self ) :
  del attr
 def title ( value ) :
 self . hint = hint
   def signature ( self , value ) :
from __future__ import unicode_literals
     def _check_boolean_field_default_value ( app_configs = None , ** kwargs ) :
          return "<%s: %s>" % ( self . __class__ . __name__ , self )
              pkg_name = 'templates/' + template_name
  else :
 self . show_hidden_initial = show_hidden_initial
    NON_FIELD_ERRORS = '__all__'
 html [ 'day' ] = self . create_select ( name , self . day_field , value , day_val , choices , self . day_none_value )
                  week_number = 1
 BLOCK_TAG_START = '{%'
              try :
  if hasattr ( mw_instance , 'process_view' ) :
  except ValidationError as e :
                       continue
              error_dict . setdefault ( NON_FIELD_ERRORS , [ ] ) . extend ( self . error_list )
                  step = 'any'
   for line in header . split ( b'\r\n' ) :
              if settings . TEMPLATE_DEBUG :
              loader = find_template_loader ( loader_name )
       for field in model . _meta . many_to_many :
              connection . client . runshell ( )
          if hasattr ( self , 'error_dict' ) :
 from django . utils . translation import ugettext_lazy as _ , ugettext
 from django . db . models import AutoField , OneToOneField , ForeignKey
    @ register . tag
   def clean ( self , value ) :
              return self . _caches . caches [ alias ]
     class ExtendsNode ( Node ) :
 return [ field for field in self if not field . is_hidden ]
  self . buffer = sio . read ( )
              return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . lower ( )
  if i > sys . maxint :
        must_be_first = False
  if min_value is not None :
              raise ValueError ( "dictionary doesn't specify a version" )
          super ( Truncator , self ) . __init__ ( lambda : force_text ( text ) )
  def add_arguments ( self , parser ) :
   full_module_name = package_name + '.' + module_name
 cursor . execute ( "DELETE FROM %s WHERE expires < %%s" % table ,  [ connections [ db ] . ops . value_to_db_datetime ( now ) ] )
   @ property
                  year += 2000
                  raise TypeError ( "sep must be None or a string" )
          handler . endElement ( "channel" )
  except ImportError :
          return json . dumps ( obj , separators = ( ',' , ':' ) ) . encode ( 'latin-1' )
 from django . core . management . sql import sql_indexes
          sys . path . insert ( 0 , options . pythonpath )
  except Exception as e :
      config [ 'fmt' ] = config . pop ( 'format' )
 return InMemoryUploadedFile (  file = self . file ,  field_name = self . field_name ,  name = self . file_name ,  content_type = self . content_type ,  size = file_size ,  charset = self . charset ,  content_type_extra = self . content_type_extra  )
 try :
  handler . endElement ( "author" )
  else :
 plist . append ( f . strip ( ) )
                      output . append ( error_row % force_text ( bf_errors ) )
  def __init__ ( self , config ) :
 from django . db . migrations . state import ProjectState
 if isinstance ( self , nodetype ) :
 if self . L ( ) and self . data . month > 2 :
  return final_path
 def content ( self ) :
              self . _encoding = settings . DEFAULT_CHARSET
                      template , display_name = loader ( name , dirs )
                              matches = False
  if find_command ( self . program ) is None :
    class cached_property ( object ) :
   def _prepare_data ( self , data ) :
                          warnings . warn (  "Need {0} values to unpack in for loop; got {1}. "  "This will raise an exception in Django 2.0."  . format ( num_loopvars , len_item ) ,  RemovedInDjango20Warning )
      if 'max-age' in cc and 'max_age' in kwargs :
 self . __dt = dt
              stream_class = BytesIO
  if tablename in connection . introspection . table_names ( ) :
                                  value = value . pk
                  self . saved_forms . append ( form )
  try :
      @ contextlib . contextmanager
                if isinstance ( field , models . TimeField ) and getattr ( obj , field . name ) is not None :
  try :
          results [ predicate ( item ) ] . append ( item )
  else :
   if os . name == 'nt' :
                  pass
    def to_python ( self , value ) :
 self . xml . characters ( smart_text ( key_value ) )
                  self . _set ( key , pickled , timeout )
 if min_num is None :
 if not self . first :
 self . xml . endDocument ( )
 def urlconf_module ( self ) :
import sys
          __str__ = new_method_proxy ( str )
                  import_module ( templatetag_module )
  except Exception :
 from django . utils import six
              self . DSTOFFSET = self . STDOFFSET
  return '&' . join ( output )
 for app_config in apps . get_app_configs ( ) :
   def __iter__ ( self ) :
              t = self . current_token
   def handle ( self , * args , ** options ) :
   options = sorted ( ( k , v ) for k , v in options if k . startswith ( curr ) )
  def render ( self , name , value , attrs = None ) :
                          pass
 value = normalize_newlines ( value )
 return django . get_version ( )
 if isinstance ( choice_label , ( tuple , list ) ) :
                          raise CommandError ( "You can only use --pks option with one model" )
  except ( ValueError , TypeError , ValidationError ) :
 return
  else :
 sub = mapping [ version [ 3 ] ] + str ( version [ 4 ] )
      return compiled_parent . _render ( context )
  return smart_text ( value )
    return final_output
      class ComboField ( Field ) :
                  continue
   if field . _has_changed ( initial_value , data_value ) :
  elif 'HTTP_HOST' in self . META :
 cache . set ( cache_key , headerlist , cache_timeout )
 self . lineno += token_string . count ( '\n' )
 parser . add_argument ( '--failfast' ,  action = 'store_true' , dest = 'failfast' , default = False ,  help = 'Tells Django to stop running the test suite after first '  'failed test.' ) ,
  s_len += 1
    def start_serialization ( self ) :
 self . port = DEFAULT_PORT
          stream_or_string = stream_or_string . decode ( 'utf-8' )
   def pop ( self , key , default = None ) :
   if not lib :
 for name in loggers :
   def _coerce ( self , value ) :
  else :
      DateTimeAwareJSONEncoder = DjangoJSONEncoder
                  self . verbatim = False
                      sub_match = pattern . resolve ( new_path )
          unifunc = results [ "unifunc" ]
 import stat
 yield "# into your database."
   @ property
  else :
  try :
 timestamp = git_log . communicate ( ) [ 0 ]
  from django . utils import six
              settings . USE_I18N = True
  if option [ 1 ] :
 lineno_comment_map = { }
  return encoding
  if namespaces :
              token = Token ( TOKEN_TEXT , token_string )
  return errors
              raise CommandError ( msg )
 if '()' in config :
  if fk . unique :
                          answer = answer [ 0 ] . lower ( )
   def validate ( self , value ) :
              if size :
    if hextets [ index ] == '0' :
                  content = '' . join ( comment )
              pos = self . file . tell ( )
 try :
    @ register . filter ( is_safe = True )
 return True
 import errno
 if isinstance ( self . data , datetime . datetime ) and is_aware ( self . data ) :
                  pieces . append ( force_text ( getattr ( self , piece ) ( ) ) )
    def load_template_source ( self , template_name , template_dirs = None ) :
   def __getinitargs__ ( self ) :
     class BaseContext ( object ) :
     if not isinstance ( value , list ) :
                          self . template_cache [ key ] = ( template , origin )
   del Trans
 return _slugify ( value )
   def __contains__ ( self , item ) :
              return 'th'
 if to :
  else :
 if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
   def render ( self , context ) :
          self . blocks [ name ] . append ( block )
from __future__ import unicode_literals
  except ImportError :
 kw = [ d . year , d . month , d . day ]
 bits = bits [ : - 2 ]
  rv = logging . _levelNames [ level ]
          yaml . dump ( self . objects , self . stream , Dumper = DjangoSafeDumper , ** self . options )
  if isinstance ( pattern , RegexURLResolver ) :
   if msg :
 s = Select ( choices = choices )
 field_notes . append ( "Field renamed because it started with '_'." )
     class WSGIServer ( simple_server . WSGIServer , object ) :
 latest_date = None
              template = get_template_from_string ( source , origin , template_name )
  def add_arguments ( self , parser ) :
  else :
 handler_config = handlers [ name ]
  connection = connections [ options [ 'database' ] ]
 try :
  if value and hasattr ( value , "url" ) :
 super ( SplitDateTimeField , self ) . __init__ ( fields , * args , ** kwargs )
                 memo [ id ( self ) ] = self
              for error in self . errors . as_data ( ) [ field ] :
 condition = TemplateIfParser ( parser , bits ) . parse ( )
  except OSError as err :
  return self . _object_dict . get ( pk )
    extensions = tuple (  handle_extensions ( options [ 'extensions' ] , ignored = ( ) ) )
 for attr in ( 'expects_localtime' , 'is_safe' , 'needs_autoescape' ) :
              return self . show_migration_list ( connection , [ options [ 'app_label' ] ] if options [ 'app_label' ] else None )
 if not value :
  context . dicts . append ( self )
          return [ ]
                          ch , escaped = next ( pattern_iter )
                      domain = domain . encode ( 'idna' ) . decode ( 'ascii' )
          wsgi_opts [ 'bindAddress' ] = options [ "socket" ]
  if var_obj is None :
              c = self . resolve ( c )
  if message is not None :
  from argparse import ArgumentParser
 defaults = dict ( defaults . _get_kwargs ( ) , ** options )
              if not len ( empty_label ) == 3 :
 import time
   def __repr__ ( self ) :
 for model in app_models :
      widget = Select
          bits = [ ]
 from django . utils . text import get_text_list
              regex = re . compile ( regex , re . UNICODE )
 return [ to_py ( val ) for val in value ]
  check_for_migrations ( app_config , connection )
              output . append ( '* %s' % field )
 if connections [ db ] . features . needs_datetime_string_cast and not isinstance ( expires , datetime ) :
 parser . add_argument ( '-o' , '--output' , default = None , dest = 'output' ,  help = 'Specifies file to which the output is written.' )
        @ register . filter ( is_safe = False )
  else :
              data [ "pk" ] = smart_text ( obj . _get_pk_val ( ) , strings_only = True )
   try :
 if self . interactive :
          value = ungettext ( "%(size)d byte" , "%(size)d bytes" , 0 ) % { 'size' : 0 }
    @ register . filter ( is_safe = True )
 return result
          return self . has_key ( key )
     class Enclosure ( object ) :
   def writeString ( self , encoding ) :
          return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_name=%s, namespaces=%s)" % (  self . _func_path , self . args , self . kwargs , self . url_name , self . app_name , self . namespaces )
             self . template_name = template
                      raise CommandError (  "Cache table '%s' could not be created.\nThe error was: %s." %  ( tablename , force_text ( e ) ) )
 import binascii
    @ register . filter ( is_safe = True , needs_autoescape = True )
  else :
  return value
 def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList ) :
              del attrs [ attr ]
                      found = getattr ( found , frag )
 return datetime . date ( ** kw )
  def __init__ ( self , queryset , empty_label = "---------" , cache_choices = None ,  required = True , widget = None , label = None , initial = None ,  help_text = '' , to_field_name = None , limit_choices_to = None ,  * args , ** kwargs ) :
          if self . stream is None :
 del logging . _handlerList [ : ]
 timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
  if remaining is None :
              args = list ( args )
 result = self . configure_custom ( config )
                  if self . _should_delete_form ( form ) :
          _load_serializers ( )
                          if not found and ( not line or plural_forms_re . search ( line ) ) :
              return [ ]
          self . var = var
                  options += [ ( sorted ( s_opt . option_strings ) [ 0 ] , s_opt . nargs != 0 ) for s_opt in  parser . _actions if s_opt . option_strings ]
 attrs = { "model" : smart_text ( obj . _meta ) }
 try :
              if empty_label is not None :
  else :
              self . _changed_data = [ ]
  else :
 if len ( self . namelist ( ) ) != 1 :
  return meta ( name , bases , d )
   def save_new ( self , form , commit = True ) :
          raise base . DeserializationError ( "Invalid model identifier: '%s'" % model_identifier )
  return val
 return self
 renamed = True
    def quote_etag ( etag ) :
 self . db = options . pop ( 'using' , DEFAULT_DB_ALIAS )
 self . choices = choices
      return lazy_number ( npgettext , six . text_type , context = context , singular = singular , plural = plural , number = number )
 args = [ arg . resolve ( context ) for arg in self . args ]
                  return debug . technical_500_response ( request , * sys . exc_info ( ) , status_code = 400 )
     def _render ( self , context ) :
              return bytes ( value . encode ( self . _charset ) )
 self . options = options
   def __deepcopy__ ( self , memo ) :
              self . interesting = _html_parser . interesting_normal
          mail . attach_alternative ( html_message , 'text/html' )
                      compiled_result = compile_func ( self , token )
          self . view_name = view_name
   try :
                  opt_label = option [ 0 ]
 directories , files = [ ] , [ ]
 return module . Command ( )
    with self . _lock . writer ( ) :
   elif field . required :
 for x in argset :
   class Command ( TemplateCommand ) :
 if not template_dirs :
 VARIABLE_TAG_START = '{{'
          parent = ( form . Meta , object )
  module = type ( 'BadSerializerModule' , ( object , ) , {  'Deserializer' : bad_serializer ,  'Serializer' : bad_serializer ,  } )
                      dirnames . remove ( dirname )
 def get_supported_language_variant ( lang_code , strict = False ) :
   self . tokens = mapped_tokens
          return 0
  else :
              raise ValidationError (  self . error_messages [ 'max_decimal_places' ] ,  code = 'max_decimal_places' ,  params = { 'max' : self . decimal_places } ,  )
  _add_doc ( b , """Byte literal""" )
   return value
       def __init__ ( self , * args , ** kwargs ) :
                              if self . verbosity >= 2 :
  except KeyError :
          if value in self . empty_values :
      help = "Prints the CREATE TABLE SQL statements for the given app name(s)."
  from django . conf import settings
          return True
  elif options [ 'method' ] in ( 'thread' , 'threaded' ) :
     class ConvertingTuple ( tuple ) :
 from django . db . migrations . questioner import MigrationQuestioner , InteractiveMigrationQuestioner
   if func is None :
 try :
          return self . _get_image_dimensions ( ) [ 1 ]
  except Exception :
              return
          if len ( unique_check ) == 1 :
    def debug ( request ) :
 def iriencode ( value ) :
   return value
  else :
              exc_info = ( None , record . getMessage ( ) , None )
  self . nodelist = t . nodelist
 warnings . warn ( "Your TEMPLATE_LOADERS setting includes %r, but your Python installation doesn't support that type of template loading. Consider removing that line from TEMPLATE_LOADERS." % loader )
          return self . META . get ( 'HTTP_X_REQUESTED_WITH' ) == 'XMLHttpRequest'
          try :
   return result
 return sql_create ( app_config , style , connection ) + sql_custom ( app_config , style , connection ) + sql_indexes ( app_config , style , connection )
 if not self . is_valid ( ) :
 from django . http . response import ( HttpResponse , StreamingHttpResponse ,  HttpResponseRedirect , HttpResponsePermanentRedirect ,  HttpResponseNotModified , HttpResponseBadRequest , HttpResponseForbidden ,  HttpResponseNotFound , HttpResponseNotAllowed , HttpResponseGone ,  HttpResponseServerError , Http404 , BadHeaderError , JsonResponse )
 from importlib import import_module
 return self
  def add_arguments ( self , parser ) :
              try :
 _format_cache = { }
 from django . utils import six
              self . code = code
  related = related . natural_key ( )
 self . name = name
          token_name = TOKEN_MAPPING [ self . token_type ]
   @ encoding . setter
                  os . _exit ( 0 )
  def __init__ ( self , parser , * args , ** kwargs ) :
    class DisallowedHost ( SuspiciousOperation ) :
  class CacheEntry ( object ) :
  for app_name , model_list in manifest . items ( ) :
 return False
 def needs_multipart_form ( self ) :
  if filename . endswith ( ".pyc" ) or filename . endswith ( ".pyo" ) :
              return SafeBytes ( t )
  def clear_checkbox_name ( self , name ) :
   @ register ( Tags . compatibility )
 if space == 0 :
   @ classmethod
          parser . invalid_block_tag ( endblock , 'endblock' , acceptable_endblocks )
  return ''
  exhaust ( field_stream )
           replacement = _BROWSERS_DEPRECATED_LOCALES . get ( lang_code )
    if settings . TEMPLATE_DEBUG :
              result = self . find_template_cache [ key ]
 sort = complain
                          if field_type == 'BooleanField(' :
              self . label = pretty_name ( name )
   def Y ( self ) :
 if transfer_encoding is not None :
                  self . fixture_count += 1
          from django . conf import settings
          raise ImproperlyConfigured (  "Calling modelform_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
   else :
 if _globs_ is None :
 return MONTHS_ALT [ self . data . month ]
     trim_whitespace_re = re . compile ( '\s*\n\s*' )
   def tag_exists ( self , tag ) :
 for app_config in app_configs :
    if 'private' in cc and 'public' in kwargs :
   return property ( _media )
 if not hasattr ( package , 'rindex' ) :
 while i < l :
              return self . _urlconf_module
  else :
  def clean ( self , value ) :
 auto_id = self . form . auto_id
                  regex = force_text ( self . _regex )
              subcommand_cls = self . fetch_command ( cwords [ 0 ] )
 return changeset
  if settings . USE_ETAGS and not response . has_header ( 'ETag' ) :
              if ( self . requires_system_checks and  not options . get ( 'skip_validation' ) and  not options . get ( 'skip_checks' ) ) :
 walk_to_end ( ch , pattern_iter )
          if hasattr ( self , 'error_dict' ) :
  else :
              raise ValidationError ( self . message , code = self . code , params = params )
 input_formats = formats . get_format_lazy ( 'DATE_INPUT_FORMATS' )
 LOCK_EX = 0x2
 import socket
  if item [ 'unique_id' ] is not None :
  for func , args in self . filters :
 from lib2to3 . fixer_util import find_indentation , Name , syms , touch_import
   can_import_settings = False
     def Deserializer ( stream_or_string , ** options ) :
   if options [ "daemonize" ] is None :
 if self . localize :
              import_module ( project_name )
 return getattr ( trans , real_name )
     if PY3 :
   if _cookie_encodes_correctly and _cookie_allows_colon_in_names :
              subcommand = self . argv [ 1 ]
                  raise TemplateSyntaxError ( '"with" in %r tag needs at least '  'one keyword argument.' % bits [ 0 ] )
              raise MultiPartParserError ( 'Invalid Content-Type: %s' % content_type )
              if t . token_type == TOKEN_BLOCK :
          command = load_command_class ( app_name , name )
 from io import BytesIO , StringIO , UnsupportedOperation
 output = template_localtime ( output , use_tz = context . use_tz )
   def has_header ( self , header ) :
  return force_str ( signature )
 return not module_has_submodule ( package , module )
  if compress :
          key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
   def deconstruct ( obj ) :
 if ',' not in arg :
  warnings . warn (  "django.utils.tzinfo will be removed in Django 1.9. "  "Use django.utils.timezone instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
   def reset ( self ) :
 from ctypes . wintypes import BOOL , DWORD , HANDLE
  if cache_timeout is None :
          token = super ( DebugLexer , self ) . create_token ( token_string , in_tag )
   def __getattr__ ( self , name ) :
               MAXSIZE = int ( ( 1 << 63 ) - 1 )
              sub = '.dev%s' % git_changeset
   def blankout ( src , char ) :
   def __reversed__ ( self ) :
 def __init__ ( self , * args , ** kwargs ) :
                      self . _deleted_form_indexes . append ( i )
              for subnode in node :
 self . use_natural_keys = options . pop ( "use_natural_keys" , False )
          token = get_token ( request )
   return obj
                  fixture_dirs = [ os . path . join ( dir_ , os . path . dirname ( fixture_name ) )  for dir_ in fixture_dirs ]
  return result
  if isinstance ( loader , six . string_types ) :
 SINGLE_BRACE_START = '{'
              name = content . name
          values = dict ( ( key , val . resolve ( context ) ) for key , val in  six . iteritems ( self . extra_context ) )
  else :
              value = int ( str ( value ) )
     class RegexField ( CharField ) :
    class FieldError ( Exception ) :
  if out_log :
 resolved_path . append ( ns )
  if name in lib . filters :
    class CheckboxInput ( Widget ) :
      help = ( 'Removes ALL DATA from the database, including data added during '  'migrations. Unmigrated apps will also have their initial_data '  'fixture reloaded. Does not achieve a "fresh install" state.' )
                  return True
 if sign :
     if app_list_value is not None :
              default_attrs . update ( attrs )
 if commands_only :
   if not locale_dir :
  status_code = 200
                  return min ( self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] , self . absolute_max )
 self . validate_key ( key )
from django . core . management . base import BaseCommand , CommandError
 pieces = accept_language_re . split ( lang_string . lower ( ) )
 super ( QueryDict , self ) . clear ( )
   else :
    except StopUpload as e :
    @ register . filter ( is_safe = False )
      class BoundaryIter ( six . Iterator ) :
    def receive_data_chunk ( self , raw_data , start ) :
                if data_list [ 0 ] in self . empty_values :
                      plural_form_line = force_str ( m . group ( 'value' ) )
   return False
  def readlines ( self ) :
 if len ( compressed ) < ( len ( data ) - 1 ) :
              response_headers . append ( ( str ( 'Set-Cookie' ) , str ( c . output ( header = '' ) ) ) )
 return func ( * resolved_args , ** resolved_kwargs )
 return
 self . literal = None
  return ':' . join ( ret_ip )
                      for cmatch in cmatches :
   if ( middle . endswith ( closing )  and middle . count ( closing ) == middle . count ( opening ) + 1 ) :
     class FileField ( Field ) :
 if self . data . day in ( 11 , 12 , 13 ) :
    if 'django.middleware.clickjacking.XFrameOptionsMiddleware' not in set ( settings . MIDDLEWARE_CLASSES ) :
      if six . PY2 :
  super ( IntegerField , self ) . __init__ ( * args , ** kwargs )
  level = 0
          return t [ 0 ] . lower ( ) , t [ 1 ]
                  timeout = 300
          raise InvalidCacheBackendError (  "Could not find backend '%s': %s" % ( backend , e ) )
              yield k
  else :
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
  item = {  'title' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'pubdate' : pubdate ,  'updateddate' : updateddate ,  'comments' : to_unicode ( comments ) ,  'unique_id' : to_unicode ( unique_id ) ,  'unique_id_is_permalink' : unique_id_is_permalink ,  'enclosure' : enclosure ,  'categories' : categories or ( ) ,  'item_copyright' : to_unicode ( item_copyright ) ,  'ttl' : ttl ,  }
              def __len__ ( self ) :
    class BaseMemcachedCache ( six . with_metaclass ( BaseMemcachedCacheMethods , BaseCache ) ) :
   def external_entity_ref_handler ( self , context , base , sysid , pubid ) :
                  kwargs [ "initial" ] = getattr ( self . parent_instance , self . to_field )
  return
    if questioner . ask_merge ( app_label ) :
 import sys
from __future__ import absolute_import
 models = app_config . get_models ( include_auto_created = True )
 cmp_fmts = list ( self . compression_formats . keys ( ) ) if cmp_fmt is None else [ cmp_fmt ]
  if self . translate :
  if bits [ 4 ] != 'as' :
    def handle ( self , * args , ** options ) :
                  return func . __get__ ( self , type ( self ) ) ( * args2 , ** kwargs2 )
          def __new__ ( cls , * args , ** kwargs ) :
                      if use_base_manager :
      def __init__ ( self , * args , ** kwargs ) :
   def __bool__ ( self ) :
   def configure_custom ( self , config ) :
  if confirm == 'yes' :
  from django . core import validators
 with connections [ db ] . cursor ( ) as cursor :
   activate = lambda x : None
          return { f : e . as_data ( ) for f , e in self . items ( ) }
 loop_dict [ 'revcounter0' ] = len_values - i - 1
 from django . template . smartif import IfParser , Literal
   def language ( self ) :
   try :
          parent = self . parent_name . resolve ( context )
  response [ 'Content-Length' ] = '0'
          return self . value == self . choice_value
  except KeyError :
          raise
    def __copy__ ( self ) :
 INITIAL_FORM_COUNT = 'INITIAL_FORMS'
 import warnings
      def __init__ ( self , max_length = None , min_length = None , * args , ** kwargs ) :
 if not template_dirs :
   return name
                      return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )
  except Exception :
 get_ns_resolver . cache_clear ( )
  chunk = next ( self )
              return None
 utf8_charset . body_encoding = None
  else :
 year_field = '%s_year'
           return force_str ( super ( BaseMemcachedCache , self ) . make_key ( key , version ) )
      def __init__ ( self , format_string ) :
 try :
  else :
 return FixedOffset ( offset , name )
  field = Model . _meta . get_field ( field_name )
 weekday = self . data . weekday ( ) + 1
 pass
 statements = connection . ops . sequence_reset_sql ( self . style , models )
              if not callable ( original_lookup ) and callable ( lookup_view ) :
              parse_until = [ ]
  if request . method == 'HEAD' :
          boundarystream = InterBoundaryIter ( self . _stream , self . _separator )
   plan = executor . migration_plan ( targets )
 import decimal
  dot = len ( package )
                    url_fields [ 1 ] = url_fields [ 2 ]
 nodelist_true = parser . parse ( ( 'else' , 'endifchanged' ) )
    exec_ ( """def reraise(tp, value, tb=None):     raise tp, value, tb """ )
 for ip in ( self . _ipython , self . _ipython_pre_100 , self . _ipython_pre_011 ) :
 pass
    @ register . tag
 self . path_info = ''
  resolved_path = [ ]
 if self . activated :
            form . save_m2m = save_m2m
   if six . PY3 :
                  dirs = [ os . path . join ( basedir , l , 'LC_MESSAGES' ) for l in locales ]
          key = self . make_key ( key , version = version )
                 return context [ 'forloop' ]
          self . _current = { }
   def handle ( self , ** options ) :
                 s = s . decode ( encoding , errors )
    stream . unget ( chunk [ header_end + 4 : ] )
          if self . _changed_data is None :
 pass
 relative_dir = path_rest . replace ( base_name , name )
  TEMPLATE_FRAGMENT_KEY_TEMPLATE = 'template.cache.%s.%s'
  return id_
  if _default is None :
  return mark_safe ( data )
   def as_tuple ( self , value ) :
  else :
 ch , escaped = next ( pattern_iter )
          if lang is None :
          return self . _choices
      default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  }
          cc = { }
   def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) :
     from django . utils import translation
   def keys ( self ) :
 if exit_code < 0 :
  except KeyError :
 from __future__ import unicode_literals
  else :
                            raise ValueError ( "Non-reversible reg-exp portion: '(?%s'" % ch )
   def incr ( self , key , delta = 1 , version = None ) :
              formfield = f . formfield ( ** kwargs )
   except ImportError :
 widget = HiddenInput
    else :
     @ property
          return self . input_type == 'hidden' if hasattr ( self , 'input_type' ) else False
          return len ( list ( email_messages ) )
              self . xml . addQuickElement ( "None" )
              return self . _cache . incr ( key , - delta )
 super ( URLValidator , self ) . __call__ ( url )
          return [ format_html ( '<script type="text/javascript" src="{0}"></script>' , self . absolute_path ( path ) ) for path in self . _js ]
                  message , code , params = message . message , message . code , message . params
 self . test_database = options . get ( 'test_database' , False )
 return value . upper ( )
                          raise ValueError ( 'Unable to configure root '  'logger: %s' % e )
                  assert remaining > 0 , 'remaining bytes to read should never go negative'
 os . rmdir ( tmpdir )
                  return source , display_name
  else :
  else :
  not_found = [ ]
 if truncate_len == 0 :
  return path
  except Exception :
     def build_potfiles ( self ) :
     def find_template ( name , dirs = None ) :
          pass
                      c = subject [ i ]
  if decimal_pos is not None :
  c . append ( tok )
 regex_match = language_code_prefix_re . match ( path )
 if i + 1 < len ( chunks ) :
 for subwidget in self . field . widget . subwidgets ( self . html_name , self . value ( ) , attrs ) :
  def _format_value ( self , value ) :
     if settings . is_overridden ( 'ADMINS' ) :
              self . error ( self . cmd . missing_args_message )
 while self . exists ( name ) :
          return ''
          dec_part = decimal_sep + dec_part
   def getlist ( self , key , default = None ) :
          if args :
      help = "Runs this project as a FastCGI application. Requires flup."
              return initial
 self . max_expr = max_expr
 handler . endElement ( "entry" )
          if hasattr ( self , '_files' ) :
    def __eq__ ( self , other ) :
              if not self . keep_pot :
   def add_post_render_callback ( self , callback ) :
     class LoaderOrigin ( Origin ) :
  elif isinstance ( o , datetime . date ) :
  return f
  emitting = chunk [ : remaining ]
 if not form . is_valid ( ) :
  try :
              self . _servers = server . split ( ';' )
   def clean_ipv6_address ( ip_str , unpack_ipv4 = False ,  error_message = _ ( "This is not a valid IPv6 address." ) ) :
      pass
   def render ( self , name , value , attrs = None ) :
          return self . token
    def incr ( self , key , delta = 1 , version = None ) :
  if not plan :
              self . file_path = getattr ( settings , 'EMAIL_FILE_PATH' , None )
   def __iter__ ( self ) :
     class RssUserland091Feed ( RssFeed ) :
  builtins = [ ]
                      self . verbatim = 'end%s' % block_content
      return _trans . to_locale ( language )
          int_part , dec_part = str_number , ''
                      self . xml . startElement ( "natural" , { } )
  style = color_style ( )
  self . __dict__ . update ( obj_dict )
  if row is None :
 class BaseValidator ( object ) :
  if arg is None :
 from django . db . migrations . executor import MigrationExecutor
      _assertCountEqual = "assertCountEqual"
   class TemplateSyntaxError ( Exception ) :
    def all_locale_paths ( ) :
     registry = CheckRegistry ( )
              _html_parser . HTMLParser . __init__ ( self )
 version = get_complete_version ( version )
          self . _archive . close ( )
 inner_html = '<li>{choice_value}{sub_widgets}</li>'
  if reason is not None :
  if self . obj is None :
   for opening , closing in WRAPPING_PUNCTUATION :
              handler . addQuickElement ( "category" , cat )
  elif item [ "author_name" ] :
   return directories , files
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Operations to perform:" ) )
          try :
  sub = ''
   def clear_url_caches ( ) :
  try :
  self . nodelist = compile_string ( template_string , origin )
      @ total_ordering
 shown = set ( )
 if has_bz2 :
    def dictvalue ( t ) :
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Branch %s" % migration . name ) )
                  self . extend_nodelist ( nodelist , TextNode ( token . contents ) , token )
 return hashlib . pbkdf2_hmac (  digest ( ) . name , password , salt , iterations , dklen )
          output , references = connection . creation . sql_create_model ( model , style , known_models )
                  if app_name not in loader . migrated_apps :
 pass
 if constant :
     def run ( addr , port , wsgi_handler , ipv6 = False , threading = False ) :
 import zlib
  used_column_names . append ( att_name )
     class InvalidTemplateLibrary ( Exception ) :
  except pickle . PickleError :
              for medium , paths in data . items ( ) :
      def _setup ( self ) :
          return "<WithNode>"
                       sublist_item = next_item
     class ChoiceField ( Field ) :
 for app in sorted ( commands_dict . keys ( ) ) :
   def choice ( self , obj ) :
              handler . addQuickElement ( "dc:creator" , item [ "author_name" ] , { "xmlns:dc" : "http://purl.org/dc/elements/1.1/" } )
 if not callback :
                      continue
               for model in sort_dependencies ( app_list . items ( ) ) :
    return self [ key ]
    add_to_builtins ( 'django.template.defaulttags' )
      help = 'Installs the named fixture(s) in the database.'
  from django . conf import settings
 self . value = value
              new_class . media = media_property ( new_class )
 return DebugNode ( )
          stat = os . stat ( filename )
                  for key , value_list in other_dict . lists ( ) :
 if match :
 data_value = field . widget . value_from_datadict ( self . data , self . files , prefixed_name )
              value = str ( value )
  else :
 args = [ ]
              logger . warning ( 'Not Found: %s' , request . path ,  extra = {  'status_code' : 404 ,  'request' : request  } )
          raise self . error ( token , "Empty variable tag" )
          iterator = ChunkIter ( stream_or_iterable , 16384 )
  __all__ = ( 'MultiPartParser' , 'MultiPartParserError' , 'InputStreamExhausted' )
    class TemplateEncodingError ( Exception ) :
           kwarg = token_kwargs ( [ bit ] , parser )
   def _create_attachments ( self , msg ) :
 setattr ( _MovedItems , move . name , move )
  return template
              return QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
 name = name [ : 255 - len ( ext ) ] + ext
    if item [ 'author_name' ] is not None :
          with self . mutex :
 subject = '%s (%s IP): %s' % (  record . levelname ,  ( 'internal' if request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS  else 'EXTERNAL' ) ,  record . getMessage ( )  )
 def first ( value ) :
          if data in self . empty_values :
 self . _callback_str = callback
              raise AttributeError ( attr )
     def rfc3339_date ( date ) :
 tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_download' )
    def make_style ( opts = ( ) , ** kwargs ) :
  def add_arguments ( self , parser ) :
              self . _non_form_errors = self . error_class ( e . error_list )
          return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( )
              raise MultiPartParserError ( 'Invalid boundary in multipart: %s' % boundary )
 filters = config . pop ( 'filters' , None )
                  result . append ( ch )
   return self . new_objects
          return type ( self ) . __bool__ ( self )
   def bound_data ( self , data , initial ) :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 if item [ 'author_email' ] is not None :
 from django . db import connections , DEFAULT_DB_ALIAS
  DEFAULT_CACHE_ALIAS = 'default'
  if best_doublecolon_end == len ( hextets ) :
  else :
    for f in file_field_list :
 if commit :
   var_node = self . create_variable_node ( filter_expression )
 import tempfile
   def _helper ( list_ , tabs = 1 ) :
 def __init__ ( self , content , name = None ) :
  import codecs
              self . stdout . write ( "Loading '%s' fixtures..." % fixture_name )
               self . json_kwargs [ 'separators' ] = ( ',' , ': ' )
 if isinstance ( file_name , Template ) :
          attrs [ 'help_texts' ] = help_texts
  elif isinstance ( value , datetime . datetime ) :
    class ViewDoesNotExist ( Exception ) :
     _localtime = None
   class DefaultCacheProxy ( object ) :
   return value
                      response = middleware_method ( request , response )
  __all__ = [  'UploadFileException' , 'StopUpload' , 'SkipFile' , 'FileUploadHandler' ,  'TemporaryFileUploadHandler' , 'MemoryFileUploadHandler' , 'load_handler' ,  'StopFutureHandlers'  ]
          zfile . write ( item )
                   def handle_m2m ( value ) :
 default_validators = [ ]
 strip_prefix = lambda s : s [ 1 : ] if s . startswith ( "u'" ) else s
 import errno
               if index is not None and index < self . initial_form_count ( ) :
  else :
  output = [ ]
 import sys
                  return "[Didn't have permission to include file]"
                          current_expires = result [ 1 ]
   return super ( BaseModelFormSet , self ) . _construct_form ( i , ** kwargs )
              raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )
    def get_renderer ( self , name , value , attrs = None , choices = ( ) ) :
  return self . dicts . pop ( )
   class Command ( AppCommand ) :
      mime_type = 'application/rss+xml; charset=utf-8'
 if cmatch :
      msg_with_ctxt = "%s%s%s" % ( context , CONTEXT_SEPARATOR , message )
 from django . utils . encoding import force_bytes
 if self . fk . rel . field_name != self . fk . rel . to . _meta . pk . name :
 text_type = str
 values = _itervalues
    def mark_safe ( s ) :
 self . merge = options . get ( 'merge' , False )
 from django . core . exceptions import MiddlewareNotUsed , PermissionDenied , SuspiciousOperation
 result . key = key
          self . value = value
  except LookupError :
 yield "from __future__ import unicode_literals"
 pk_value = getattr ( self . instance , self . fk . rel . field_name )
 for option_value , option_label in chain ( self . choices , choices ) :
 return self . id
              return int ( time . mktime ( self . data . timetuple ( ) ) )
 field_params [ 'decimal_places' ] = row [ 5 ]
    setattr ( form . instance , self . fk . get_attname ( ) , self . instance . pk )
          if offset is not None :
  if hasattr ( os , 'chmod' ) :
              continue
   if PY3 :
 changes = autodetector . arrange_for_graph ( changes , loader . graph )
 from django . core . management . color import color_style
  elif isinstance ( value , datetime . time ) :
              self . first = left
          return self . msg % tuple ( force_text ( p , errors = 'replace' ) for p in self . params )
                  definition [ 'bg' ] = colors [ - 1 ]
  except KeyError :
 return '%02d' % self . G ( )
                  warnings . warn (  'Reversing by dotted path is deprecated (%s).' % original_lookup ,  RemovedInDjango20Warning , stacklevel = 3  )
  file_name = force_text ( file_name , encoding , errors = 'replace' )
  except LookupError :
 if html :
  with self . _lock :
 self . _loaders = loaders
     class FloatField ( IntegerField ) :
 cache [ key ] = oldroot
 output = [ pformat ( val ) for val in context ]
 from django . utils . encoding import force_bytes , force_text , iri_to_uri
                  if fake :
 self . stdout . write ( "%s\n" % writer . as_string ( ) )
                          stats [ HITS ] += 1
    class Lexer ( object ) :
              import_module ( app_name )
  elif closing_tag :
  else :
                  imatch = inline_re . match ( t . contents )
     class BaseModelForm ( BaseForm ) :
                warnings . warn (  'Using SplitDateTimeWidget with DateTimeField is deprecated. '  'Use SplitDateTimeField instead.' ,  RemovedInDjango19Warning , stacklevel = 2 )
 raise NotImplementedError ( 'subclasses of FileUploadHandler must provide a file_complete() method' )
 if sequence_sql :
 get_function_closure = operator . attrgetter ( _func_closure )
 translation . _info = { }
   if pickled is not None :
 close = True
 for format in BUILTIN_SERIALIZERS :
 block_re = re . compile ( r"""^\s*blocktrans(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?(?:\s+|$)""" )
 self . buf_size = buf_size
   return list ( zip ( * flatten_result ( result ) ) )
                   opts = model . _meta
 if form in forms_to_delete :
  return super ( BaseModelFormSet , self ) . initial_form_count ( )
              yield self [ key ]
 for chunk in content . chunks ( ) :
                  raise TemplateSyntaxError ( "Searching for value. Unexpected "  "end of string in column %d: %s" %  ( i , subject ) )
              parentloop = context [ 'forloop' ]
 if member . isdir ( ) :
   def _has_changed ( self , initial , data ) :
                  pass
 self . _is_rendered = True
  else :
   def sign ( self , value ) :
          handler = SimplerXMLGenerator ( outfile , encoding )
    def __repr__ ( self ) :
                      for model in model_list :
              if hasattr ( value , 'close' ) :
   test_runner = TestRunner ( ** options )
    def __call__ ( self , value ) :
   return model_list
 from django . utils . _os import safe_join
  from django . apps import apps
 error_messages [ 'invalid' ] = error_message
    def endChannelElement ( self , handler ) :
              header = header . upper ( ) . replace ( '-' , '_' )
              weight += 1
 return mark_safe ( force_text ( text ) . replace ( '&' , '&amp;' ) . replace ( '<' , '&lt;' ) . replace ( '>' , '&gt;' ) . replace ( '"' , '&quot;' ) . replace ( "'" , '&#39;' ) )
      def render ( self , context ) :
          self . base_fields [ TOTAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
 self . stream . write ( '\n' )
  def __init__ ( self , parent_instance , * args , ** kwargs ) :
  return new_class
 while field . rel is not None :
 from django . forms . utils import from_current_timezone , to_current_timezone
 self . can_read = threading . Semaphore ( 0 )
                  raise CommandError ( "Incompatible values of 'leave_locale_alone' "  "(%s) and 'can_import_settings' (%s) command "  "options." % ( self . leave_locale_alone ,  self . can_import_settings ) )
 from django . utils import lru_cache
  self . _cache [ key ] = value
 try :
  return value
              return SafeBytes ( data )
              final_output . append ( '-- The following references should be added but depend on non-existent tables:' )
