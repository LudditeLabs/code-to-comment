from django.utils import timezone and six into default name space.
from django.utils.encoding import force_st into default name space.
try,
call the method self.invalid_block_tag with 3 arguments: token, command and parse_until.
skip this loop iteration,
raise an StopIteration.
stats is a list with 2 elements: 2 integers 0.
substitute val for value under the k key of dictionary d.
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
call the method __new__ from the base class of the class MediaDefiningClass, called with 4 arguments: mcs, name, bases and attrs.
from django.utils import six into default name space.
if exclude is true and f.name is contained in exclude,
if endblock.contents is not contained in acceptable_endblocks,
raise an exception.
raise an NotImplementedError with an argument string 'subclasses of BaseLoader must provide a load_template_source() method'.
from UserList import UserList into default namespace.
if MultiPartParserError exception is caught,
if not,
call the function inner.copy, substitute the result for dig1, call the function outer.copy, substitute the result for dig2.
substitute first header_end elements of chunk list for header.
if first element of s is not contained in "\"'" or last element of s is not equal to first element of s,
otherwise if length of key equals integer 1 and type of first element of key is contained in fasttypes,
if values under "author_name" and "author_email" keys of the item dictionary are both true,
delete the value under the 'liveserver' key of the options dictionary.
otherwise if template_tuple is None,
convert the value under the 'umask' key of options dictionary into an integer of base 8, substitute it for value under the 'umask' key of daemon_kwargs dictionary.
substitute element at the bit index of current for current.
substitute self.default_locale_path for locale_dir.
define the method new with 2 arguments: self and values set to None.
define the method _clean_form with an argument self.
return an empty string.
FILTER_SEPARATOR is a string '|'.
define the method __deepcopy__ with 2 arguments: self and memo set to None.
get the value under value key of a dictionary with 4 entries: '2' for boolean True, '3' for boolean False, '2' for '2', and '3' for '3', substitute it for value.
define the method _create_attachment with 4 arguments: self, filename, content and mimetype set to None.
define the method loaders with an argument self.
replace every occurrence of '</' in s with '<\\/'.
convert data into boolean and substitute it for data.
call the function datetime.now, substitute the result to now.
call the method datetime_safe.new_datetime with an argument value, substitute the result for value.
return data.
compare_to is None.
try,
from django.core.cache.backends.base import InvalidCacheBackendError, CacheKeyWarning and BaseCache into default name space.
msgmerge_options is an list with elements: strings '-q' and '--previous'.
call the method self.connection.ehlo.
define the function smart_split with an argument text.
update self.feed dictionary with kwargs.
raise an RuntimeError exception with an argument string "The method to extend accepted command-line arguments by the " "test management command has changed in Django 1.8. Please create an add_arguments class method to achieve this."
try,
define the method __init__ with 4 arguments: self, data, func and prefix.
call the function mark_safe with an argument value, return the result.
_meth_func is a string "__func__".
derive the class LocaleRegexURLResolver with RegexURLResolver as base class.
if 'fields' attribute of meta is None, or if it doesnt exists if fields is None and if 'exclude' attribute of meta is None, or if it doesnt exists if exclude is None.
if action equals to string "apply_start",
if in_index-th element of bits equals to string 'in',
if limit is None or length of x is lesser than or equal to limit,
self.path is an empty string.
do nothing.
substitute self.count for top.
try,
from django.utils import six into default name space.
substitute environ for self.META.
call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
import module io.
append self.choices to args.
if not,
otherwise if value under the "author_email" key of the item dictionary is true,
call the method cursor.execute with string "INSERT INTO %s (cache_key, value, expires) VALUES (%%s, %%s, %%s)", substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively.
raise an ValueError with an argument string "'package' not set to a string".
errors is an empty list
return settings.LANGUAGE_CODE.
raise an exception parser.error_class with an argument string "Not expecting '%s' as infix operator in if tag.", where '%s' is replaced with self.id.
if not,
substitute complain for __setitem__.
call the self._lock.writer method, with the result perform the following,
get the value under the index key of the hextets dictionary, if it is false,
raise an exception.
do nothing.
call the method os.path.splitext with an argument base, substitute the result for base and ext, respectively.
return an empty string,
for p in self.ignore_patterns if p ends with dir_suffix take sliced list p from the start, to the negative length of the dir_suffix as the end index and append it to a list, if p doesnt end with dir_suffix, append p to a list, substitute resulting list for norm_patterns.
return an empty dictionary.
define the function get_mod_func with an argument callback.
define the method led with 3 arguments self, left and parser.
call the function smart_text with an argument obj, return the result.
if reverse is true,
get converter attribute from self object, substitute it for converter.
if current_len equals truncate_len,
substitute i-th element of tokens for token.
decorator function register.filter with an argument is_safe set to boolean True.
define function add_never_cache_headers, with response as an argument.
call the function signals.request_finished.connect with argument close_caches.
rendering_attrs is a list containing 3 strings: 'template_name', 'context_data' and '_post_render_callbacks'.
raise an NotImplementedError exception with argument string 'subclasses of BaseEmailBackend must override send_messages() method'.
call the function curry with 2 arguments: _proxy_method and method set to six.text_type.encode, substitute the result for encode.
call the method apps.get_app_config with an argument app_lable, for every app_label in app_labels, append the results to app_configs list.
otherwise if bytes is smaller than MB,
convert settings.LOCALE_PATHS into a list and extend list self.locale_paths with it.
return boolean False.
yield string 'from %s import models' % self.db_module as the result, where "%s" is replaced with self.db_module.
if v is an instance of list or tuple type,
from django.utils.six import StringIO into default name space.
self.__name is a string "%s%02d%02d", replace '%s' with sign, '%02d' is replaced with absolute value of offset divided by 60, and placed into 2 character spaces, and '%02d' is replaced with reminder of the division of absolute offset by integer 60, and placed into 2 character spaces.
call the function from_current_timezone with an argument, return the result.
from django.utils.functional import lazy into default name space.
if self.verbosity is greater than integer 1,
errors is an empty list.
while the result of the method new_name.find, called with an argument string '__' is greater or equals integer 0,
from django.utils.encoding import force_text into default name space.
define lambda function that returns self.file.flush field, use it as an argument for property function, put the result in flush.
call the function ugettext with '0 minutes' as argument, use the result as the argument for the call to the avoid_wrapping function, return the result.
call the function allow_lazy with 2 arguments: strip_spaces_between_tags, six.text_type, substitute the result for strip_spaces_between_tags.
convert to integer the value of dictionary cc under the key 'max-age', and return it
call the handle method of the base class of the Command class, with 4 arguments: string 'project', project_name, target,
__all__ is an tuple containing string 'SelectDateWidget'.
from django.conf import settings into default name space.
if fourth element of attr_list and termios.ECHO are both true,
call the method value.as_tuple, assign the result to sign, digittuple and exponent, respectively.
derive the class HttpResponseNotFound from the HttpResponse base class.
define the method getvalue with an argument self.
define the function npgettext with 4 arguments: context, singular, plural and number.
evaluate the self.getpos() and assign the result to the lineno and offset respectfully.
call the method self.get_exception_response with the request, resolver and integer 400 as the arguments, substitute the result for response.
groupid is a string "t%d" formated with tok.id.
call the method apps.get_model with an argument model_identifier.
skip this loop iteration.
define the method __init__ with 7 arguments: self, max_value set to None, min_value set to None, max_digits set to None, decimal_places set to None, unpacked list args and unpacked dictionary kwargs.
concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1 and line, substitute the result for i-th element of lines.
from django.conf import settings into default name space.
pop the value under the 'file_path' key of kwargs dictionary, substitute it for self.file_path.
define the method as_table with an argument self.
call the function popen_wrapper with an argument args, assign the result to msgs, errors and status, respectively.
define the function ifequal with 2 arguments: parser and token.
if IOErro, renamed to e, exception is caught,
if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value, if not, sself.empty_value is an empty string.
if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.
define function _generate_cache_key, with request, method, headerlist and key_prefix as arguments.
if autoescape is false, if value is an instance of SafeData,
call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for indexes.
call the function datetime.utcnow, substitute the result for now.
data is an empty dictionary,
if value under the 'description' key of the item dictionary is not None,
define the method render with 2 arguments: self and context.
call the function write_pot_file with 2 arguments: potfile and msgs.
call the method fp.write with an argument string '%d\n", with '%d' replaced by os.getpid function return value.
get value under 'target' key of config dictionary, use it as a key to get the value from the dictionary, under the 'handlers' key of self.config dictionary, substitute the result for value under 'target' key of config dictioanry.
call the self.domain_regex.match method with an argument domain_part, if it evaluates to true,
len_item is integer 1.
define the method tzname with 2 arguments self and dt.
call the function getargspec with an argument func, substitute the result for args, varargs, varkw and defaults, respectively.
import module sys.
for every f in files,
if settings.USE_TZ is true and value is not None and call to the function timezone.is_naive with an argument value, evaluates to true,
raise and exception InvalidCacheBackendError with string "Could not find config for '%s' in settings.CACHES" as argument, replace '%s' with alias.
if ImportError exception is caught,
from __future__ import absolute_import into default name space.
substitute name, nodelist and parent for self.name, self.nodelist and self.parent.
call the method match.groupdict, substitute the result for kw.
call method __init__ from the base class of the class PyLibMCCache with arguments: server, params, library set to pylibmc and value_not_found_exception set to pylibmc.NotFound.
raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.
for every f in fields,
for every app_name is app_names,
call the method self.callback with an argument record, if the result evaluates to true,
derive the class Command from the BaseCommand base class.
e.args is a tuple containing string "Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s, where '%(app_label)s' is replaced for obj.object._meta.app_label, '%(object_name)s' is replaced with obj.object._meta.object_name, '%(pk)s' is replaced with obj.object.pk and '%(error_msg)s' is replaced with result of the function force_text with an argument e.
call the method match.start, substitute the result for start.
decorator function register.filter with an argument is_safe set to boolean False.
if ValueError exception is caught,
if mw_instance has an attribute named 'process_request'.
append work_file to args.
join missing_fields into a string separated by string ', ', use it and opts.model.__name__ to format message, substitute the result for message.
substitute cache.get for cache_get.
define the function safe with an argument value.
subclass is a class named Migration, sub classed from migrations.Migration base class, with fields dependencies set to an empty list, dependencies set to new_operations and replaces set to replaces.
define the function jython_reloader with main_func, args and kwargs as arguments.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
import module re.
call the function sql_create with 3 arguments: app_config, self.style and connection, substitute the result for statements.
from io import StringIO into default name space.
define the method validate_domain_part with arguments self and domain_part.
define the method pk_is_not_editable with an argument pk.
call the function os.remove with argument fname.
if construct is true,
return _dec.
substitute inotify_code_changed for fn.
define the method is_multipart with an argument self.
derive the class CallbackFilter from logging.Filter base class.
self._callback is None.
define the method id_for_label with arguments self, name, field, value, val, choices and none_value.
if self.use_natural_primary_keys is false or obj doesnt have a 'natural_key' attribute.
derive the class RenderContext from the BaseContext base class.
break from the loop execution.
opt_dict is an dictionary with 5 elements: '1' for 'bold', '4' for 'underscore', '5' for 'blink', '7' for 'reverse', and '8' for 'conceal'.
otherwise if msg is true,
call the method self.data.isocalendar, return the first element of the result.
msgs_with_ctxt is a tuple containing 2 elements: string created by concatenating context, CONTEXT_SEPARATOR and singular, string created by concatenating context, CONTEXT_SEPARATOR and plural and number.
define the method setlistdefault with 3 arguments: self, key and default_list set to None.
substitute self.context.render_context for render_context.
call the method cache.set with cache_key, an empty list and cache_timeout as arguments.
if content is not None raise an error.
for x in a list containing 3 elements: self.id, self.first and self.second, if x is not None, convert x into a string and append it to a list, substitute the resulting list for out.
with return value of the function io.open with fname and string 'rb' as arguments, named as f,
from django.core import serializers into default name space.
call the method logging.Handler.__init__ with an argument self.
if value is contained in self.empty_values,
return __wrapper__.
call the method test_runner_class.add_arguments with an argument parser.
if not,
year_days is a list with 13 elements: None, integer 0, integer 31, integer 59, integer 90, integer 120, integer 151, integer 181, integer 212, integer 243, integer 273, integer 304 and integer 334.
call the method app.start.
if not,
return filter_func.
call the method registry.tags_available, sort the result and join it into a string, separate by newlines, write it to self.stdout.
join to_path and name into a file path, substitute the result for filename.
call the as_bytes method on the return value of the message.message method append to it '\n' character, use it as the argument for the call to the self.stream.write method.
call the delete method with key and version set to version as arguments.
if not,
call the method self._assert_mutable.
call the method self.timezone.utcoffset with an argument self.data, substitute the result for offset.
if num_repl is greater than integer 0,
increment visible_issue_count for length of issues.
otherwise if o is an instance of datetime.time object,
derive the class Loader from the BaseLoader base class.
return boolean False.
get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.
call the method self.handle_uncaught_exception with request, resolver and return value of the function sys.exec_info as the arguments.
call the function _check_test_runner with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
property decorator,
define the function forbid_multi_line_headers with arguments: name, val and encoding.
if sys.warnoptions is false,
define the function main, with main_func, args defaulting to None and kwargs defaulting to None as arguments.
do nothing.
return self.
if KeyboardInterrupt exception is caught,
define the method render with 2 arguments: self and context.
get _iteritems attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable, return it.
if arg starts with options,
if not,
must_be_first is boolean True.
if dklen is false,
increment the lineno by the count of the newlines in self.__starttag_text.
call the method parser.add_argument with 5 arguments: string '--domain', string '-d', default as a string 'django', dest set to string 'domain' and help as a string 'The domain of the message files (default: "django").'.
call the method handler.endElement with an argument string 'author'.
append key to self.keyOrder.
convert self.literal into an integer, substitute it for self.literal.
call the method p.find with bytes string '=' as an argument, substitute the result for i.
substitute complain for __delslice__.
try,
define the function dec with an argument func.
call the method __init__ from the base class of the class AssignmentNode, with 3 arguments: takes_context, args and kwargs.
call the method bmatch.group with an argument integer 1, if it evaluates to true,
define the method utcoffset with 2 arguments self and dt.
if settings.STATIC_URL is None,
value under the name key of the form.fields dictionary is an instance of InlineForeignKeyField created with 2 arguments: self.instance and unpacked dictionary kwargs.
call the method self.get_parent with an argument context, substitute the result for compiled_parent.
call the method fixture_name.rsplit with 2 arguments: character '.' and integer 2, substitute the result for parts.
call the method re.match with 2 arguments: naiveip_re and value under the 'addrport' key of the options dictionary, substitute the result for m.
call the function _get_foreign_key with 3 arguments: parent_model, model and fk_name=fk_name, substitute the result for fk.
filemsg is an empty string.
if charset equals to string 'utf-8',
call the method widget_attrs with an argument widget, from the base class of the class IntegerField, substitute it for attrs.
if t is contained in self.__dispatch,
define the method recipients with argument self.
if count of occurrence of '::' in ip_str is greater than integer 1,
return an empty string.
call the method handler.endElement with an argument string 'feed'.
if not,
call the self.style.HTTP_BAD_REQUEST with an argument msg, substitute it for msg.
raise an TypeError exception with an argument string 'Level not an integer or a valid string: %r' formated with level.
define the method __init__ with 5 arguments: self, max_value set to None, min_value set to None, unpacked list args and unpacked dictionary kwargs.
substitute i-th element of self.forms for form.
define the method handle with arguments self and unpacked dictionary options.
if not,
define the function capfirst with an argument value.
try,
append bit to trans_bit.
if first element of message_context equals to character '"',
return errors.
_iterlists is a string "iterlists".
if value,
if not,
try,
if not,
for root, dirs and files in sorted list of the directory tree starting from the directory self.path,
call the function os.path.abspath with an argument 'locale', append the result to self.locale_paths.
raise an AttributeError exception with an argument string "You cannot set the upload handlers after the upload has been processed.".
decorator lru_cache.lru_cache with an argument maxsize set to None.
call the function warnings.warn with 3 arguments: string "SortedDict is deprecated and will be removed in Django 1.9.", RemovedInDjango19Warning and stacklevel set to integer 2.
append other_dict to self.dicts.
if first and second element of sys.version_info are equal to integers 3 and 4, respectively,
define the function get_standard_processors.
if response is None,
define the method _create_alternatives with arguments self and msg.
if field is contained in form.cleaned_data,
substitute Paginator for QuerySetPaginator.
derive the class CycleNode from Node base class.
define the function date_format with 3 arguments: value, format set to None and use_l10n set to None.
substitute boundary for self._boundary.
delete first element of bits.
if not,
finally perform,
import module sys.
substitute size for self._size.
define the method __str__ with an argument self.
if not,
remove 3 elements from r starting at the index 23.
delete dictionary item 'public' from cc.
otherwise if name is not None and filter_func is not None,
from datetime import datetime,  timedelta and tzinfo into default name space.
for every p in parts without the first element,
if six.PY3 is true,
try,
if 'incomplete' key of the f.error_messages doesnt exists, assign it the value under the 'incomplete' key of the self.error_messages dictionary.
define the method is_silence with argument self.
call the function time.strftime with 2 arguments: fmt and and timetuple without the first element, added to a tuple with an element year, substitute the result for s1.
call the method blankout with 2 arguments: part and 'S', write the result to out.
multiply x by length of from_digits add the return value of method from_digits.index with digit argument, substitute the result for x.
try,
define the method clear with an argument self.
append string " Got this from the '%s' variable." to error_msg, where '%s is replaced with self.parent_name.token.
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
call the function copy.deepcopy with 2 arguments: self.children and memodict, substitute the result for obj.children.
if self.localize is true,
call the method value.encode with an argument charset.
define the method __init__, with 3 arguments: self, stream_or_string and unpacked dictionary options.
find the first, second and third subgroup of the m regular expression match, assign the result to the attrname, rest and attrvalue, respectively.
call the function allow_lazy with 2 arguments: strip_entities, six.text_type, substitute the result for strip_entities.
extra_params is an instance of the class OrderedDict.
if status is True,
try,
define the method __setitem__ with arguments self, name and val.
substitute func for self.func.
from django.utils.encoding import force_text into default name space.
define the method bpython with an argument self.
if ValueError exception is caught,
define the method handle with self class instance and dictionary options as the arguments.
from django.apps import apps into default name space.
_func_globals is a string "func_globals".
call the method obj.save with an argument using set to self.using.
call the method attachment.add_header with 3 arguments: string 'Content-Disposition', string 'attachment' and filename set to filename.
define the function parts.
call the method self.stdout.write with an argument string "Installed %d object(s) from %d fixture(s)", where '%d' is replaced with self.loaded_object_count and self.fixture_count, respectively.
raise an CommandError exception with an argument string 'Your Python does not support IPv6.'.
call the function get_standard_processors, append processors to the result, for every processor is the result,
append to errors list a dictionary created with 2 etries, if escape_html is true, return value of the function escape with an argument message for 'message', or if not message for 'message' and error.code for 'code' in error.code is true, if not, an empty string for 'code'.
return an instance of a LoadNode class.
import module sys.
define the method filter with 4 arguments: self, name set to None, filter_func set to None and unpacked dictionary flags.
increment stats dictionary value under the MISSES key by integer 1.
define the function pgettext with 2 arguments: context and message.
call the function pickle.dumps with argument value, use the result and integer -1 as arguments for the call to the function zlib.compress, use the result as an argument for the call to the f.write method.
convert the value under the 'SERVER_NAME' key of the self.META dictionary to a string, substitute result for server_port.
call the method popitem from the base class of the class SortedDict, substitute the result for result.
if stream_or_string is not an instance of bytes or six.string_types,
convert val to an list, substitute it for val.
derive the class InclusionNode form the base class TagHelperNode.
choices is a tuple with 3 elements: tuple with 2 elements: string '1' and return value of the function ugettext_lazy, called with an argument string 'Unknown', tuple with 2 elements: string '2' and return value of the function ugettext_lazy, called with an argument string 'Yes' and tuple with 2 elements: string '3' and return value of the function ugettext_lazy, called with an argument string 'No'.
append digit to int_part_gd.
define the method __init__ with 2 arguments: self and dict_ set to None.
for every middleware_method in self._template_response_middleware,
raise an ValueError with an argument string "'%s.%s' has more than one ForeignKey to '%s.%s'.", where '%s' is replaced with, model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.
convert to an integer value under the 'COMP_CWORD' key of the os.environ dictionary, substitute it for cword.
if not,
remove the first element from context.render_context.
define the function format_html_join with 3 arguments: sep, format_string and args_generator.
get is a tuple containing elements generated by the call to the function pformat with an argument META_override, if META_override is not None, or otherwise generated with the call to the function pformat with an argument request.META.
if OSError exception is caught,
from django.utils.six.moves import html_parser as _html_parse into default name space.
append string "UNIQUE" to field_output.
derive the class PermissionDenied from the Exception base class.
for every index in range of integers from 0 to length of hextets, not included,
call the method shutil.copyfileobj with 2 arguments: extracted and outfile.
define the mehod __lt__ with self and other.
define the method emit_post_migrate with arguments verbosity, interactive and database.
if arg is None
call the function safe_join with 2 arguments template_dir and template_name, yield the result.
substitute user_function for wrapper.__wrapped__.
derive the class Command from the BaseCommand class.
substitute Rss201rev2Feed for DefaultFeed.
call the method self.get_renderer with 4 arguments: name, value, attrs and choices, for every widget in result,
template is a string '%(input)s'.
if self.validate_min is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count, is smaller than self.min_num,
remove all occurrences of newline character from constant_string.
call the method handler.addQuickElement with 2 arguments: string 'published' and result of the function rfc3339_date, called with an argument value under the 'pubdate' key of the item dictionary.
call the function get_user_model, substitute the result for UserModel.
import module warnings.
define the method writer with an argument self.
define the function resolve with arguments path and urlconf set to None.
substitute the datetime.max for exp.
form the tuple from the attrname converted to lowercase and attrvalue, append it to the end of attrs.
call the function now.replace with microseconds set to integer 0, substitute the result for now.
call the method add_arguments from the base class of the class Command, with an argument parser.
call the method termios.tcgetattr with argument fd, substitute the result for attr_list.
if 'step' attribute of attrs dictionary does not exists, set it to to string 'any'.
if related is true,
if pattern.namespace is true,
substitute file_size for self.file.size.
break from the loop execution,
call the function self.coerce with an argument value, substitute it for value.
substitute c_ulong for ULONG_PTR.
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, use the result as an argument for the call to the function bytes, return the result.
from __future__ import unicode_literals into default name space.
return integer 0.
derive the class MultiWidget from the Widget base class.
call the method HTMLParser.__init__ with an argument self.
define the method __repr__ with an argument self.
evaluate the method six.text_type(s), on the result call the method encode with the arguments encoding and errors, return the result.
if self.app_label is true and app_config.label is not equal to self.app_label,
define the method setlist with 3 arguments: self, key and list_.
raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments: strings "Please submit %d or fewer forms.", "Please submit %d or fewer forms." and self.max_num, where '%d' is replaced with self.max_num, and code as a string 'too_many_forms'.
return self._cached_loaders.
if last element of pieces is true,
import module os.
if not,
if IOError exception is caught,
define the method _close_files with an argument self.
call the method self.clean with value as argument, substitute the result for cleaned.
get the value under the date_key key of the item dictionary, substitute it for item_date.
if not,
register.tag decorator function with an argument 'for',
truncate the last element of filename.
define the method __init__ with 3 arguments: self, attrs set to None and render_value set to boolean False.
call the method connection.introspection.django_table_names with an argument boolean true, substitute the result for tables.
convert value, self.sep and return value of a method self.signature called with an argument value, concatenate them together, return the result.
get the value under the key 'database' of the options dictionary, substitute it for db.
call the method m.group with an argument string 'hour', convert the result into a string, substitute it for hour.
get 'WSGI_APPLICATION' attribute from the settings, substitute it for app_path.
write the string "  Installing custom SQL...\n" to the standard output.
join statements into a string, separated by newlines, return it.
define the method setdefault with 3 arguments: self, key and default set to None.
break from the loop execution
derive the class MinValueValidator form the BaseValidator base class.
if TemplateDoesNotExist exception is caught,
if data has an 'temporary_file_path' attribute,
if only_new is True,
substitute args for self.args.
define private method __call__ with self class instance, environ and start_response as the arguments.
substitute new for self.mod.
define the method validate with arguments self and value.
define the function parse_time with an argument value.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
define the method  remove_potfiles with an argument self.
append e to criticals list for every e in all_issues, if checks.CRITICAL is lesser than or equal to e.level.
apply operator.eq function to elements of level iterable, until level is reduced to a single value, if the result is true,
raise an NotImplementedError with argument string 'subclasses of FileUploadHandler must provide a receive_data_chunk() method'.
call the function func with 2 arguments: self._wrapped and unpacked list args.
call the method self.handle_fk_field with arguments obj and field.
convert self.name into an boolean, return it.
if ValueError exception is caught,
incomment is boolean False.
call the function _generate_cache_key with request, request.method, an empty list and key_prefix as arguments, return the result.
if unpack is true,
month_field is a string '%s_month'.
call the method zipfile.ZipFile.read with 2 arguments: self and first element of the result of the self.namelist method.
return self.DSTDIFF.
define the method __str__ with argument self.
call the re.compile function with an argument raw string '^[-a-zA-Z0-9_]+$', substitute the result for slug_re.
if addr is a instance of six.string_types,
skip this loop iteration.
raise an EmptyPage exception with string 'That page number is less than 1' as an argument.
raise a ValidationError exception with arguments self.message and code set to self.code.
define the method has_key with 2 arguments: self and key.
define the method handle_field with argument self, obj and field.
call the method six.text_type with 3 arguments: s, encoding and string 'replace'.
for every program in programs,
if both cursor and close_connection are true,
define the method get with 3 arguments: self, header and alternate set to None.
define the function deactivate_all.
define the method start_object with arguments self and obj.
define the function sanitize_address with arguments addr and encoding.
return boolean False.
fp is a instance of a class six.BytesIO.
call the self.file.close method, return the result.
split first element of hextet into parts by ':', append them to new_ip.
get the index name, of the parser._namedCycleNodes, return the result.
return an dictionary containing 1 entry: settings.MEDIA_URL for 'MEDIA_URL'.
define the method add_arguments with 2 arguments self and parser.
derive the class override from the object base class.
for every app_name in app_names.
DEBUG is integer 10.
substitute file for filename.
return boolean True.
evaluate the function import_string with middleware_path as argument, substitute the result for my_class.
define the function strip_tags with an argument value.
if first element of base64d equals to a '.' character,
self._current is None.
self.content_length is None.
remove name from existing.
return boolean False.
if not,
if not,
define the method values with an argument self.
call the method archive.extract with an argument to_path.
re raise an exception.
for every k in doomed,
call the method self.find_template with 2 argumetns: template_name and template_dirs, assign the result to template, origin, respectively.
return a tuple with an element self.__offset.
if self.verbosity is greater or equal to integer 2,
while '<' is contained in value and '>' is contained in value,
define the method open with arguments self and mode set to None.
call the function six.reraise with 3 arguments: ValidationError, ValidationError created with 2 arguments: value under the 'invalid_image' key of the self.error_messages dictionary and code set to a string 'invalid_image', and third element of the return value of the function sys.exc_info.
if 'media' is not contained in attrs,
derive the class MultipleChoiceField from the base class ChoiceField class.
define the function set_script_prefix with an argument prefix.
define the method get_version with an arguments self.
try,
return an empty string,
substitute index for doublecolon_start.
if regex is not None,
decorator stringfilter,
append ch to result.
return value.
if OSError exception is caught,
substitute the value under the 'errlog' key of options dictionary for value under the 'err_log' key of daemon_kwargs dictionary.
if not,
call the method instance.save.
if not,
return value.
call the function generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw, defaults set to defaults, name set to function_name, and takes_context set to takes_context and node_class set to SimpleNode.
field_params is an instance of a class OrderedDict.
from io import BytesIO into default name space.
if k equals a string 'fg',
if headers exists substitute it for self.extra_headers, if not extra_headers is an empty dictionary.
define the method y with an argument self.
derive the class Origin form the base class object.
get the value under the tail_ext key of the extension_map dictionary, substitute it for cls.
for every f in self.instance._meta.fields,
import module importlib.
try,
if Exception exception is caught,
define the method __copy__ with an argument self.
return ipv4_unpacked.
derive class Options from the base class object.
blocks is a dictionary with elements: n for n.name, for every n in return value of the method, compiled_parent.nodelist.get_nodes_by_type, called with an argument BlockNode.
call the method self.replace_header with argument string 'Content-Type', 'text/%s; charset="%s"', where '%s' symbols are replaced by: subtype and charset, respectively.
call the __init__ method with 3 arguments: WARNING, unpacked list args and unpacked dictionary kwargs from the base class of Warning.
call the method self.validate with an argument out.
return dictionary created with tuples with 2 elements: key and value under the key key of self dictionary, for every key in self.
call the method value.rsplit with arguments character '@' and integer 1, assign the result to user_part and domain_part, respectively.
decorator decorator.
call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.
if size of c_ulong does not equals to size of c_void_p,
from django.utils.deprecation import RemovedInDjango20Warning into default name space.
for every item in self.items,
substitute prefix for self.prefix.
do nothing.
if value is an instance of list type,
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
_supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.
do nothing.
__expire_info is an empty dictionary.
define the method __setstate__ with 2 arguments: self and obj_dict.
define the method to_language with an argument self.
get the 'silent_variable_failure' attribute of e object, if it exists and is true,
__all__ is a list of strings, 'CachedDnsName', 'DNS_NAME', 'EmailMessage', 'EmailMultiAlternatives', 'SafeMIMEText', 'SafeMIMEMultipart', 'DEFAULT_ATTACHMENT_MIME_TYPE', 'make_msgid', 'BadHeaderError', 'forbid_multi_line_headers', 'get_connection', 'send_mail', 'send_mass_mail', 'mail_admins' and 'mail_managers'.
substitute msg for body_msg.
try,
call the function __current_timezone with an argument value, return the result.
call the method self.nodelist.render with an argument context, return the result.
substitute parsed for self.parsed.
value is None.
call the method parser.compile_filter with an argument string "var|%s", where '%s' is replaced with rest, substitute the result for filter_expr.
return default.
for every middleware_method in self._view_middleware,
if middleware has an attribute 'process_response',
raise an ValidationError with 3 arguments: value under the 'max_digits' key of the self.error_messages dictionary, code set to string 'max_digits' and params set to a dictionary with an entry: self.max_digits for 'max'.
if sep is None,
if LookupError exception is caught.
renamed methods is a tuple containing 3 elements: '_get_memcache_timeout', 'get_backend_timeout' and RemovedInDjango19Warning.
if memo is None,
substitute bp for lbp.
return dec.
self.activated is boolean False.
i is integer 0.
from django.conf import settings into default name space.
yield value under key key of self dictionary.
answer is None.
remove first element from model_dependencies, assign it to model and deps, respectively.
call the method self.__cast, if the result is lesser than other, return boolean True, otherwise return boolean False.
append string '_0' to id_.
if not,
self._validate_unique is boolean False.
for every bit in elements of bits without the first element, call the method parser.compile_filter, with an argument bit, substitute the list of results for values.
if call to the method finder.find_module with 2 arguments: name and package_path evaluates to true,
take subject elements from p-th to i-th index, substitute it for s.
raise an exception.
call the method dot_re.sub with 2 arguments: char and src, return the result.
increment self.buffer by chunk.
call the method initial_form_count from the base class of the class BaseInlineFormSet, return the result.
raise an exception.
append header to the string 'HTTP_', append the result to the list headerlist.
if 'require_all_fields' key of the kwargs dictionary exists remove it and substitute its value for self.require_all_fields, if not, self.require_all_fields is boolean True.
call the function sys.exit with an argument integer 1.
for every log in existing,
if last element of parts is contained in self.serialization_formats,
call the function force_text with argument val, substitute it for val.
if rhs is an instance of dict type and number is true,
finally perform,
evaluate self._is_expired method with f as argument, if the result is false,
return an instance of FirstOfNode class, created with an argument, result of the method parser.compile_filter called with bit, for every bit in bits.
substitute settings.SECRET_KEY for secret.
substitute self.external_entity_ref_handler for parser.ExternalEntityRefHandler.
from django.core.management.base import BaseCommand and CommandError into default name space.
if not,
call the method message.message.
if fg is contained in color_names,
self.position is an integer 0.
call the method apps.get_model with exclude as an argument, substitute it for model.
get the position in bytes from the start of the file, store it in file_pos.
context_extras is an empty dictionary.
return string 'rd'.
raise an exception.
raise an ImproperlyConfigured exception wiht an argument string 'Command %s defines both "requires_model_validation" ' 'and "requires_system_checks", which is illegal. Use only "requires_system_checks".', replace '%s' for self.__class__.__name__.
help is an string "Prints the DROP INDEX SQL statements for the given model module name(s).".
call the function ugettext_lazy with an argument string 'Change', substitute the result for input_text.
define the method as_widget with 4 arguments: self, widget set to None, attrs set to None, only_initial set to boolean False.
value is None.
define the method update_watch with sender defaulting to None and dictionary pair of elements kwargs.
substitute callback for self.callback.
define the function activate with an argument language.
from django.utils import six into default name space.
return new_class.
changed is boolean False.
derive the UploadedFile class from the File base class.
derive the class Signer from the object base class.
call the method self.as_widget with 3 arguments: instance of a class Textarea, attrs and unpacked dictionary kwargs, return the result.
return an empty string,
if value under the 'method' key of the options dictionary equals to string 'perfork' or 'fork',
remove the first element from self.command_stack, assign the result to command and source, respectively.
if not,
call the function warnings.warn with 3 arguments: string "resolve_variable() is deprecated. Use django.template. Variable(path).resolve(context) instead", RemovedInDjango20Warning, and stacklevel set to integer 2.
if form.cleaned_data is true and value under the field key of form.cleaned_data dictionary is not None, and value under the unique_for key of form.cleaned_data dictionary is not None,
return ZERO.
derive the class JSONSerializer from the object base class.
modified_code is None.
import module datetime.
call the method self._cache.clear.
from django.core.mail.backends.base import BaseEmailBackend into default name space.
if url_name exists substitute it for view_path, if not substitute .self._func_path for view_path.
return a dictionary with 2 elements: self._version for "version" and "http://www.w3.org/2005/Atom" for "xmlns:atom".
if string "'format'" is not contained in e converted into a string,
substitute int for integer_types.
from itertools import chain into default name space.
for every match in matches,
call the self._lock.writer method, with the result perform the following,
call the method zipfile.ZipFile with an argument self, substitute the result for self._archive.
if not,
if not,
if timezone is an instance of tzinfo,
m2m_convert is a lambda function with an argument v, return value is the result of the function smart_text called with an argument: return value of the method field.rel.to._meta.pk.to_python called with an argument v.
define the method E with an argument self.
if self.argv, without the first element is contained in a tuple with 2 entries: a list containing a string '--help', and a list containing a string '-h',
substitute content for self.content.
join elements of base36 into a string, return it.
if UnicodeDecodeError exception is caught,
define the function ngettext with 3 arguments: singular, plural and number.
call the method parser.add_argument with 5 arguments: string '--app', action as a string 'store', dest as a string 'app_label', default set to None, help is a string 'Only look for fixtures in the specified app.'.
call the method base.__dict__.items, for every attr and value in the result,
define the method render with 2 arguments: self and context.
hex_format_string is a string "%%0%ix" formated with hlen multiplied with integer 2.
return an instance of a URLNode class, created with 4 arguments viewname, args, kwargs and asvar.
MIN_NUM_FORM_COUNT is a string 'MIN_NUM_FORMS'.
 return boolean  True.
substitute content for self.content.
if Exception exception is caught,
warn_msg is a string "The translator-targeted comment '%s' (%sline %d) was ignored, because it wasn't the last item on the line.", formated with c, filemsg and comment_lineno_cache.
__D2 is a raw string '(?P<day>[ \d]\d)'.
if 'content_type' key doesnt exist in kwargs, set its value to 'application/json'.
append '.' to frag, append the result to used.
substitute length of self.object_list for self._count.
return an instance of DebugNodeList class.
append key to self.keyOrder dictionary.
call the method self.build_attrs with arguments attrs, name as name, substitute the result for final_attrs.
substitute '%s' in string "Extracting %s\n" with filename, write it to self.stdout stream.
output is an empty list.
if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
return token.
if self.verbosity is greater or equal to integer 1,
call the method writer.as_string, write the result to fh file.
return is empty dictionary.
return data.
try,
call the method self._save with arguments name and content, substitute it for name.
call the force_text function with 3 arguments: e.strerror, DEFAULT_LOCALE_ENCODING and strings_only set to boolean True.
if not,
define the function activate with an argument language.
call the function force_str with an argument url, use the result as an argument for the call to the function unquote, substitute the result for url.
if content has an 'chunks' attribute,
for every key in self.keyOrder,
5 for 'saturday' and 6 for 'sunday'.
field_params is an empty dictionary.
define the method render with 2 arguments: self and context.
split value into words, return the length of the result.
root dictionary values under the KEY and RESULT keys are both None.
call the method models.signals.pre_migrate.send with 5 arguments: sender set to app_config, app_config set to app_config, verbosity set to verbosity, interactive set to interactive and using set to db.
derive the class CacheClass from the DatabaseCache base class.
evaluate the method connections[db].ops.cache_key_culling_sql, evaluate the result by table modulus, call the method cursor.execute, with previous result and list containing cull_num, respectively as arguments.
call the method self.can_write.acquire.
convert per_page into an integer and substitute it for self.per_page.
if ImportError exception is caught.
define the method make_view_atomic, with self class instance and view as the arguments.
define the method I with an argument self.
skip this loop iteration.
if value is boolean True, string 'True' or string '1',
for every dict_ in self.dicts,
substitute prefix for common_prefix.
from django.conf import settings into default name space.
call the function email_message.message, substitute the result for message.
if other is instance of EmailValidator and, self.domain_whitelist equals to other.domain_whitelist, and self.message equals to other.message, and self.code equals to other.code, return boolean True, otherwise return boolean False.
decrement self.active_readers by integer 1,
define the method __call__ with arguments self and value.
import module os.
define the function do_ntranslate with 4 arguments: singular, plural, number and translation_function.
otherwise if self.object is an instance of the models.base.ModelBase class,
substitute first element of fks_to_parent for fk.
call the function ugettext_lazy with an argument string 'Clear', substitute the result for clear_checkbox_label.
substitute empty bytes string for self.buffer.
perform bitwise exclusive OR on 2 operands x and y, perform bitwise OR with 2 operands: previous result and result, substitute the result for result.
define the method popitem with an argument self.
raise an exception parser.error_class with an argument string "Unexpected end of expression in if tag.".
value under the 'null' key of the extra_params dictionary is boolean True.
import module re.
if self._errors is None,
append value under the key v of background dictionary to code_list.
substitute first element of renamed_method for old_method_name.
call the method hmac.new with 3 arguments: key, msg set to result of the function force_bytes with an argument value, and digestmod set to hashlib.sha1, return the result.
return boolean False.
derive the class CacheHandler from the object base class.
return context_extras.
define the method chars with 4 arguments: self, num, truncate set to None, html set to boolean False.
derive class Module_six_moves_urllib from the types.ModuleType base class.
call the function allow_lazy with 3 arguments: capfirst and six.text_type.
from django.core.management.base import BaseCommand and CommandError into default name space.
if self.path equals other.path, return boolean True, if not return boolean False.
definition is an empty dictionary,
try,
get attribute class_name form the module object, return it.
call the method httpd.set_app with an argument wsgi_handler.
call the method self._stream.readline with 2 arguments: unpacked list args, unpacked dictionary kwargs.
if level is not contained in logging._levelNames,
return integer 12.
if escaped is true,
append string '%%(%s)s' to plural, where '%s' is replaced with t.contents.
substitute space for end.
return value.
raise an TypeError exception with an argument string "end must be None or a string".
call the function normpath with an argument path, return the result.
return value under the key key of dictionary in last element of self.dicts, if it doesnt exists return otherwise.
call the function get_language, substitute the result for language_code.
define the method handle with self class instance, list of arguments args and options dictionary as the arguments.
define the method _setup with an argument self.
for every label in app_labels,
factor is integer 0.
obj is an instance of Model class, created with an unpacked dictionary data as argument.
from django.utils import six into default name space.
call the method self.setlist with 2 arguments: key and default_list.
from django.core.management.base import BaseCommand and CommandError into default name space.
error is an dictionary with an initial entry error.error_list for filed if true, or NON_FIELD_ERRORS if not.
derive the class TextInput from the Input base class.
define the method reset with an argument self.
call the function six.text_type with length of lines as an argument, use length of result as an argument for the call to the function six.text_type, substitute the result for width.
if self.required is true,
call the method self.validate_key with argument key.
get the value from the options dictionary under the key 'load_initial_data', substitute it for self.load_initial_data.
if settings.MANAGERS does not exist,
substitute length and mime_type for self.length and self.mime_type.
define the method compile_string with 2 arguments: template_string and origin.
call the function urlquote with argument var for every var in vary_on, join the results into a string separated by ':', substitute it for key.
define the method close with self class instance as the argument.
if six.PY3 is true and val1 and val2 are an instances of bytes,
try,
if OverflowError or ValueError exceptions are caught,
if HTMLParseError exception is caught,
define the method get_form_error with an argument self.
derive the class HttpResponse from the HttpResponseBase base class.
if not,
import module hashlib.
append '-' to generic_lang_code, if supported_code starts with it,
from django.core.exceptions import DisallowedHost and ImproperlyConfigured into default name space.
if self.parent_instance is not None,
call the method self.extract with an argument absolute_path, return the result.
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
do nothing.
value under the self._pk_field.name key of form.fields dictionary is an instance of ModelChoiceField class, created with 4 arguments: qs, initial as pk_value, required as boolean False and widget as widget.
if encoding does not exists substitute it for settings.DEFAULT_CHARSET.
if las equals integer 2,
if IOError exception is caught,
delete attr.
call the method parser.parse, substitute the result for nodelist.
call the function format_html with 4 arguments: string '<option value="{0}"{1}>{2}</option>', option_value, selected_html, result of the function force_text with an argument option_label, return the result.
call the method __new__ from the base class of the class DeclarativeFieldsMetaclass, with 4 arguments: mcs, name, bases and attrs.
return boolean False.
call the method six.iteritems with an argument base.declared_fields, convert it to a list and append fields to it, substitute the result for fields.
if not,
call the method parser.add_argument with 6 arguments: string '--extension', string '-e', dest set to string 'extensions', action set to 'append', default is a list containing string 'py' and help set to string: 'The file extension(s) to render (default: "py"). Separate multiple extensions with commas, or use -e multiple times.'.
self._stream is an instance of BytesIO class created with an argument self._body.
call the function escape with an argument output.
if fdel is not None,
define the function ngettext with 3 arguments: singular, plural and number.
substitute root for oldroot.
define the method __delattr__ with 2 arguments self and name.
return number.
from django.utils.six.moves.urllib.parse import parse_qsl,  urlencode,  quote,  urljoin and urlsplit into default name space.
write string "App '%s' could not be found. Is it in INSTALLED_APPS?" with '%s' where '%s' is replaced with app_label, write it for self.stderr.
call the method router.allow_migrate with 2 arguments: database and cache.cache_model_class, if it evaluates to false,
substitute i incremented by 1 for value under the 'counter' key of the loop_dict dictionary.
escaped is boolean False.
if length of bits equals integer 3,
call the method dig1.digest, use the result as an argument for the call to the function dig2.update.
if secure is true,
call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.
return self._client.
substitute path_info for self.path_info.
if exception OSError, renamed to e, occurred,
return boolean False,
call the self.convert method with i, self.decimal_digits, self.digits and '-' as arguments, assign the result to the neg and value, respectively.
get the type of res, call the method mro on the result, for every t in the result,
define the method __deepcopy__ with arguments self and memo.
call the method self.get with key and version set to version as arguments, substitute the result for value.
call the method stream.unget with an argument chunk.
call the method check_for_migrations with arguments: app_config and connection.
if AttributeError exception is caught,
if name is true, substitute it for self.name, otherwise substitute func.__name__ for self.name.
derive the class RequestContext from the Context base class.
common_ancestor is None.
define the method to_python with arguments self and value.
from the base class of the class SimpleCookie call the value_encode method with val as the argument, store the result in the val and encoded, respectively.
return attachment.
self._deleted_form_indexes is an empty list.
define the function _check_middleware_classes with app_config set to None and kwargs dictionary as arguments.
call the function lazy_number with 5 arguments: ngettext, str, singular set to singular, plural set to plural, and number set to number, return the result.
define the method rss_attributes with an argument self.
if viewname is not an instance of the six.string_types object,
if count of occurrence of ':' in ip_str is greater than integer 7,
current_len is equal to integer 0.
if f is a file,
try,
call the method var.resolve with 2 arguments: context and True, substitute the result for value.
substitute first element of fks_to_parent for fk.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
do nothing.
if new_name is not equal to col_name,
from django.utils.encoding import force_text into default name space.
call the function t.render with an argument context, return the result.
if not,
alter_sql is an empty list.
define the method update with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the function func with 2 arguments: obj and unpacked list arg_vals, substitute the result for new_obj.
call the method models.signals.post_syncdb.send with 6 arguments: sender set to app_config.models_module,
if inplural is true,
substitute self.required for widget.is_required.
call the function strftime with 2 arguments: self and fmt, return the result.
return supported_code.
call the method s.find with 2 arguments: bytes string ';' and end incremented by one, substitute the result for end.
if self.cdata_tag is not None,
if exit_code is not equal to integer 3.
from django.db import connections, router, transaction and DEFAULT_DB_ALIAS into default name space.
return an empty dictionary.
call the method self._close_files.
derive class SingleZipReader for zipfile.ZipFile base class.
if lang is None,
if initial is None,
define the function wrap with 2 arguments text and width.
define the method send_messages with arguments self and email_messages.
call the function force_text with an argument top_errors, format error_row with it, insert it at the beginning of output.
call the method resource.decode with an argument settings.FILE_CHARSET, substitute the result for resource.
try,
if not,
call the mail.attach_alternative method with html_message and string 'text/html' as arguments.
call the method signal.signal with signal.SIGTTOU and old_handler, as arguments.
if content is not None raise an error.
if not,
otherwise if query has an attribute 'items',
define the method delete with arguments self and name.
if extracted is true,
_error_files is an empty list.
substitute value under the field_name key of the self.fields dictionary for formfield.
call the method self._cache.incr with key and delta as arguments, substitute the result for val.
from module __future__ import unicode_literals to default name space.
call the function localize with 2 arguments: value and use_l10n=context.use_l10n, substitute the result for value.
call the method handler.file.close.
call the method obj.delete.
raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.
define the method __getitem__ with arguments self and index.
for every __ in iterator,
call the function warnings.warn with an argument string "A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext.".
decorator function register.filter with 2 arguments string "timeuntil" and is_safe set to boolean False.
return context.render_context.
return value.
self.default_locale_path is None.
raise an exception.
get the value under the self.data.month key of the MONTHS_3 dictionary, call on it the method title, return the result.
call the method self.get_unique_error_message with an argument unique_check, append the result to errors.
if field.rel is None,
increment weight by integer 2.
define the method __init__ with 7 arguments: self, request, dict_ set to None, processors set to None, current_app set to None, use_l10n set to None and use_tz set to None.
if not,
self.registered_checks is an empty list.
if TypeError exception is caught,
substitute link for values under the NEXT key of the last dictionary and PREV key of the root dictionary.
CONTEXT_SEPARATOR is a string "\x04".
call the method now.replace with argument tzinfo set to None, substitute it for now.
if tuple current_version elements are greater or equal to (3, 4), respectively,
for every app_config in return value of the method apps.get_app_configs,
from django.template.base import Library, add_to_builtins, builtins, get_library, get_templatetags_modules, get_text_list, import_library and libraries.
if string 'noreset' is not contained in opts,
define the method symlinks_supported.
define the function unescape_entities with an argument text.
subtract year from integer 2000, divide the result by integer 28, floor the result, multiply it with 28 and increment by year, substitute the result for year.
append value under k key of self dictionary to a list, for every k in self.keyOrder, return the result.
from django.template.debug import DebugLexer and DebugParser.
if widget is an instance of type class,
substitute use_tz for self.use_tz.
substitute key for result.key.
if model has an 'natural_key' attribute,
raise an ValueError exception with an argument string "Base36 input too large".
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
define the method discard with 2 arguments: self and item.
import module django.core.checks.compatibility.django_1_6_0.
define the function build_instance with 3 arguments: Model, data and db.
fname is a string "%s-%s.log", with '%s' replaced by timestamp and absolute value of the return value of the function id with argument self, respectively.
if result is true,
define the method _create_mime_attachment with arguments self, content and mimetype.
derive the class BaseMemcachedCacheMethods from RenameMethodsBase the base class.
from __future__ import unicode_literals into default name space.
if chunk_size is false,
import module time.
get the '_decorated_function' attribute from func object, if it exists substitute it for func.
define the method to_python with arguments self and value.
append string '</optgroup>' to output.
call the method self.characters with an argument contents.
substitute old_attr for new_attr.
define the __init__method with arguments self and exception.
if app_config.models_module is None,
utility is a instance of ManagementUtility class, created with an argument argv.
append string ".moves.urllib_parse" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for parse.
return list_ and boolean False.
join elements of lines into a string, separated by newline characters, substitute it for msgs.
if not,
define the method get_resolved_arguments with 2 arguments: self and context.
substitute the '%s' in the string "The view %s.%s didn't return an HttpResponse object. It returned None instead.", with the name of the module callback is in and the view_name, respectively, use it as the argument for the ValueError exception raise.
define the method with 3 arguments: self, app_config  set to None and display_num_errors set to boolean False.
if ch equal a string '(',
break from the loop execution.
while model_dependencies is true,
get the value under the key key of the self.cookies dictionary, substitute expires for 'expires' key of the returned dictionary.
call the method self.filter_expression.resolve with an argument context, substitute the result for output.
call self.errors.
split string cc_delim_re by value of dictionary response under the key 'Vary' as a delimiter, substitute it for vary_headers.
if self._num_pages is None,
call the function vars with an argument options, substitute the result for cmd_options.
try,
p is a instance of Popen class, created with 6 arguments: args, shell set to boolean False, stdout set to PIPE, stderr set to PIPE, close_fds set to boolean True is os.name is not equal to 'nt', universal_newlines set to boolean True.
define the method __init__ with 3 arguments: self, setting and nodelist.
call the function sys.exit with an argument integer 1.
close file file.
if the value under the 'bindAddress' key of the wsgi_opts dictionary is not None, set daemonize to boolean True, if not, set it to boolean False.
call the method self.check with arguments: app_configs set to app_configs, tags set to tags, display_num_errors set to boolean True.
call the method fp.getvalue, return the result.
do nothing.
for ever app_config in return value of the method apps.get_app_configs,
lbp is an integer 0.
substitute settings.DEFAULT_CHARSET for self._charset.
if escaped is true,
from django.utils.html import strip_spaces_between_tags.
if middleware has an attribute 'process_exception',
get 'render' attribute of template object, if it is callable,
define the method add_arguments with arguments self and parser.
try,
call the function re.sub with 3 arguments: string '[-\s]+', string '-' and value, use the result as an argument for the call to the, mark_safe function, return the result.
exit the program with failures converted to boolean as a message.
return self._errors.
get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
call the method six.unichr with an argument c, return the result.
if value under the 'pubdate' key of the item dictionary is not None,
if not,
call the method connection.cursor, substitute the result for cursor.
self.META is an empty dictionary.
for every fname in filelist,
if not,
idstring is an empty string.
call the method kwarg_re.match with an argument first element of bits, substitute the result for match.
val is None.
if value under the 'load_initial_data' key of the options dictionary is true,
substitute value for value under the key key of dictionary at last element of self.dicts.
if other equals list containing elements of self, return boolean True, otherwise return boolean False.
otherwise if ch is contained in string "*?+{",
call the function unicodedata.combining with an argument char, if it evaluates to true,
finally perform,
call the method self.validate with an argument display_num_errors set to boolean True.
if self.use_natural_keys is true,
call the function force_text with an argument text, split by it word_split_re, substitute it for words.
define the function _parse_date_fmt.
define the function removetags with 2 arguments value and arg.
get shell attribute of the self object, call it and return the result.
from threading import local into default name space.
call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.
from django.utils.datastructures import MultiValueDict into default name space.
call the function importlib.import_module with an argument serializer_module, substitute it for module.
append string '_directory' to app_or_project, substitute it for base_directory.
call the function handle_extensions exts, substitute self.extensions.
If you've already\n".
call the function import_module with an argument mod_name.
call the method parser.compile_filter with an argument, third element of bits, substitute the result for val2.
if not,
define the method _assert_mutable with an argument self.
define the method app_dict with an argument self.
call the method parser.add_argument with 2 arguments: string '--template' and help set to string 'The path or URL to load the template from.'.
return a tuple with 2 elements: result of the method self.field.prepare_value called with an argument obj, and result of the method self.field.label_from_instance, called with an argument obj.
substitute obj_pk.pk for obj_pk.
substitute value under the PREV key of the root dictionary for last.
substitute negated for self.negated.
call the method self.configurator.convert with an argument value, substitute the result for result.
if model is not contained in app_models for every model in return value of the connection.introspection.installed_models function return value, add model to a set, substitute the result for known_models.
instantiate class X, get its length.
derive the class ExternalReferenceForbidden from the DefusedXmlException base class.
return value.
define the method __add__ with 2 arguments self and rhs.
call the method app_config.get_model with an argument model_label, substitute the result for model.
raise an TemplateDoesNotExist exception with an argument template_name.
f _serializers is false,
do nothing.
derive the class ChoiceInput from the SubWidget base class.
if var starts with '_(' and var ends with ')',
while escaped is true or ch is not equal to a string ']',
call the method zbuf.getvalue, return the result.
call the self._lock.writer method, with the result perform the following,
define the method reload with an argument self.
if v is boolean False or v is None or v is an empty string, return boolean False, otherwise return boolean True.
substitute integers 0, 1, 2 and 3 for PREV, NEXT, KEY and RESULT, respectivley.
from django.db import models and router into default name space.
join statements in a string separated by newline, return the result.
call the method handler.startElement with 2 arguments: string "rss" and result of the method self.rss_attributes.
from django.template.loader import get_template into default name space.
return self._changed_data.
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
decrement self.waiting_writers by integer 1,
return j.
derive class BaseCOnverter from object base class.
if primary_keys is true,
return f.
parent is a tuple with 1 element, object.
if AttributeError exception is caught,
call the function warnings.warn with 2 arguments: string "OptionParser usage for Django management commands " "is deprecated, use ArgumentParser instead" and RemovedInDjango20Warning.
call the method self._update_errors with an argument e.
import module datetime.
define the method empty_variable with 2 arguments: self and token.
ISO_INPUT_FORMATS is a dictionary with 3 entries: tuple with an element string '%Y-%m-%d' for 'DATE_INPUT_FORMATS', tuple with 3 elements: strings '%H:%M:%S', '%H:%M:%S.%f' and '%H:%M' for 'TIME_INPUT_FORMATS', tuple with 4 elements: strings '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M:%S.%f', '%Y-%m-%d %H:%M' and '%Y-%m-%d' for 'DATETIME_INPUT_FORMATS'.
resolved_kwargs is dictionary with elements: return value of the method v.resolve called with an argument context, for k, for every k and v in return value of the method self.kwargs.items.
feed data to the parser p.
return result.
call the method comment_re.sub with an arguments: raw string '\1' and line, strip the whitespaces surrounding the result, return it.
if not,
call the function json.loads with an argument stream_or_string, substitute the result for objects.
increment self.pos by integer 1.
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
if t.token_type == TOKEN_TEXT:
substitute length of content for self.size.
curr is an empty string.
return sys.modules dictionary value under the name key.
import module io.
define the method __getattr__ with 2 arguments: self and real_name.
in_tag is boolean True if in_tag is False, otherwise is boolean False.
for every name and value in return value of the method self.extra_headers.items,
substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.
if obj.pk is None, and Model has an 'natural_key' attribute, and Model._default_manager has and 'get_by_natural_key',
raise an CommandError with an argument string "More than one migration matches '%s' in app '%s'. Please be more specific.", where '%s' is replaced with migration_name and app_label.
define the function safeseq with an argument value.
call the function six.reraise with 3 arguments: ValueError, instance of a class ValueError, created with an argument string, "%r is not a valid date" formated with date and third element of the result of the function sys.exc_info.
found is boolean True.
collect is an empty list.
call the function blankout with 2 arguments: t.contents and 'B', write the result to out.
if self.active_writers and self.waiting_writers both equal to integer 0,
call the method __init__ from the base class of the class CheckboxChoiceInput, with 2 arguments: unpacked list args, and unpacked dictionary kwargs.
define the method add_root_elements with 2 arguments self and handler.
token is a string "not in".
convert e to a string, substitute it for error_text.
validate_ipv4_address is a instance of a RegexValidator class, created with 3 arguments: ipv4_re, return value of the call to the function _ with an argument string 'Enter a valid IPv4 address.' and string 'invalid'.
compile the regex from the raw string "((^|[^%])(%%)*%[sy])", substitute the result for _illegal_formatting.
from django.core.mail.backends.base import BaseEmailBackend into default name space.
call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the IPAddressField class.
remove kwargs dictionary entry under the 'extra_context' key, if it exists substitute it for self.extra_context, if not self.extra_context is an empty dictionary.
if UnicodeDecodeError exception is caught,
convert fist p elements of language to lowercase, append '_' to it, covert to lowercase language element at (p+1)-th index, append it to the previous result, covert to lowercase language elements from (p+2)-th index to the end, append it to the previous result, return it.
return found.
if 'id' is contained in self.attrs,
define the method delete with self class instance, key and version set to None as arguments.
raise an TypeError with an string 'formfield_callback must be a function or callable'.
do nothing.
otherwise if cls._delegate_bytes is true,
if sub_match is true,
middle is a string '<a href="%s"%s>%s</a>' formated with url, nofollow_attr and trimmed.
if ValueError or TypeError exceptions are caught,
try,
get the unicode representation of the absolute path of base, substitute it for base_path.
from django.utils import six into default name space.
raise an TemplateSyntaxError exception with an argument string "'for' tag received an invalid argument: %s", where '%s' is replaced with token.contents.
from django.utils.safestring import mark_safe into default name space.
call the file.__exit__ method on self with exc, value and tb as the arguments.
put a tuple with 2 elements: k and value under k key of self dictionary into a list, for every k in self.keyOrder, return resulting list.
if not,
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
if not,
get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.
for every middleware_method in self._response_middleware,
from django.template.defaultfilters import date into default name space.
default_error_messages is an dictionary with 3 entries: return value of the function _ called with an argument, string 'Enter a list of values.' for 'list', return value of the function _ called with an argument, string 'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice', and return value of the function _ called with an argument string '"%(pk)s" is not a valid value for a primary key.' for 'invalid_pk_value'.
style is an instance of the dummy class.
if instance is None,
self.attrs is an empty dictionary.
return self.empty_value.
output and hidden_fields are both empty lists.
return all the integers from the integer 1 to the self.num_pages.
update attrs dictionary with entry: self.max_length converted into a string for 'maxlength'.
decrement self.remaining by length of result.
requires_system_checks is boolean False.
call the sys.exc_info function, assign the result to et, ev and tb, respectively.
self.translate is boolean False.
register.tag decorator,
if site is contained in sites2,
try,
if doublecolon_start equals integer -1,
set attr.name attribute of the Module_six_moves_urllib_error object to attr.
call the method deactivate.
return an empty dictionary.
call the method value.ljust with an argument, arg converted into a integer, return the result.
if PY3 field of module six is boolean True,
substitute value under the "_wrapped" key of the self.__dict__ dictionary.
decorator register with argument Tags.compatibility.
define the method _has_expired with self and key as arguments.
from django.utils import formats into default name space.
remove element under 'stream' key of kwargs dictionary, substitute the result for value under 'strm' key of kwargs dictionary.
try,
return fk.
from django.utils import six into default name space.
call the method clean with an argument data from the base class of the class FileField, return the result.
if self.use_natural_foreign_keys is true and field.rel.to has an attribute 'natural_key',
data is an empty dictionary.
if iterations is lesser than integer 0, raise an error.
substitute value under the name key for bf.
if smtplib.SMTPException exception is caught,
delete entry from form.cleaned_data dictionary under the field key.
self._producer is an empty list.
call the method widget.render with 3 arguments: string created by concatenation from: name, string '_' and i, widget_value, and final_attrs, append the result to output.
if not,
try,
all_date_checks is union of all_date_checks set and date_checks set.
substitute '%s' in 'Internal Server Error: %s' with request.path, exc_info set to exc_info, extra is an dictionary with two pairs of elements 'status_code' with value 500, and 'request with value request, respectively use the previous as the arguments for the call to the logger.error function.
define the method __call__ with arguments self and value.
call the parser.add_argument with string '--addrport', default set to an empty string and help as string 'Port number or ipaddr:port to run the server on.'.
return self.file.
get dictionary self items, convert the result into a dictionary, convert the result into a string and return it.
call the function force_text with 3 arguments: old_field_name, self._encoding and errors as a string 'replace', use the result and file_obj as arguments for the call to the method self._files.appendlist.
call the method tarfile.open with an argument file, substitute the result for self._archive.
from django.core.management.base import BaseCommand and CommandError into default name space.
call the function format_html with 3 arguments: self.inner_html, choice_value set to choice_value, and sub_widgets set to return value of the function sub_ul_renderer.render, append the result to output.
if file is an instance of six.string_types.
substitute kwargs for self.kwargs.
substitute url for display_url.
__all__ is a tuple containing strings 'BaseFormSet', 'formset_factory' and 'all_valid'.
if value is false, return it, if it is true convert first element of value to uppercase letter, return the value.
code is a string 'invalid'.
call the function pickle.load with argument f, substitute the result for exp.
read data from buf, yield the result.
requires_system_checks is boolean False.
if not,
if not,
if value is contained in self.empty_values,
try,
match string s with regex IDENTIFIER, substitute the result for m.
otherwise if ':' is not contained in middle and result of the function simple_email_re.match called with an argument middle, evaluates to true,
define the method get with 3 arguments: self, key and default set to None.
call the method parser.delete_first_token.
if field.widget.needs_multipart_form is true,
derive the class RadioChoiceInput from the ChoiceInput base class.
increment i-th element of counters by chunk_length.
if second element of sys.version_info is smaller than or equal to integer 1,
define the method content with an argument self.
call the method base64.b64decode with an argument chunk, substitute the result for chunk.
from django.forms.widgets import Widget and Select into default name space.
call the function io.open with 3 arguments: pofile, string 'w' and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
if 'filename' attribute of ev is None,
define the function gettext with an argument message.
call the method form.save, with an argument commit set to boolean False, substitute the result for obj.
define the method __init__ with self and limit_value as arguments.
evaluate function tag.lower, without the arguments, put the result in the self.cdata_tag.
get the value under the 'HTTP_ACCEPT_LANGUAGE' key of the request.META dictionary, if it exists substitute it for accept, if not accept is an empty string.
for every v in self.validators,
increment current_len by integer 1,
if not,
return nothing.
from django.utils.deconstruct import deconstructible into default name space.
call the method self.itervalues, return list of results.
found is boolean False.
if string 'id' is contained in self.attrs,
for every template_dir in template_dirs,
cls.__dispatch is an empty dictionary.
call the function converter with an argument suffix, substitute the result for value.
return nothing.
value under the all_label key of the directory_created dictionary is boolean True.
split path in two parts by '\\' string, return the result.
from __future__ import unicode_literals into default name space.
cal the method operator.attrgetter with an argument string "__class__", use the result as an argument for the call to the function, new_method_proxy, __class__ is an property object created with previous result as an argument.
call the method context.push with an argument var set to output, with the result perform,
define the method _html_output with 6 arguments: self, normal_row, error_row, row_ender, help_text_html and errors_on_separate_row.
define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
extract the value under the key 'database' from the options dictionary, use the value for indexing connections list, substitute the result for connection.
define the method serialize_headers with an argument self.
python_2_unicode_compatible decorator,
return a string '%02d' formated with self.data.month.
return boolean False.
try,
substitute CheckboxFieldRenderer for renderer.
substitute str for binary_type.
return a list containing first element of source and a list containing params.
return an empty string.
call the function forbid_multi_line_headers with 3 arguments: name, val and string 'ascii', substitute the result for name and val, respectively.
substitute col_name for value under the 'db_column' key of the field_params dictionary.
convert elements of self into a list, return the its printable representation.
define the method merge with 2 arguments self and other.
return an instance of Context class, created with an argument context.
from django.conf import settings into default namespace,
call the method token.split_contents, substitute the result for args.
execute statement on the database that curs points to.
call the method self.z, substitute the result for day_of_year.
substitute field for self.field.
raise an exception,
define the method __str__ with an argument self.
from django.utils.ipv6 import is_valid_ipv6_address into default name space.
derive the class SyndicationFeed from the object base class.
remove the first element from the self.context.
if timeout is greater than integer 2592000,
if not,
derive the class LazyStream from the six.Iterator base class.
delete value under the 'args' key of the cmd_options dictionary.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
return first element of t converted to lowercase and boolean True, as a tuple.
evaluate the function getdefaultlocale from the module locale, if second element of return value exists assign it to encoding, otherwise assign string 'ascii' to encoding.
raise an exception.
decorator function register.filter with 2 arguments string "timesince" and is_safe set to boolean False.
substitute last element of output for last_row.
call the os.rename function with arguments old_file_name and new_file_name.
define the method __iter__ with an argument self.
return a string '%02d' formated with self.data.day.
call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args, third element of the result of the function sys.exc_info.
define the method add_aguments with arguments self and parser.
call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the self.feed dictionary.
call the method f.value_from_object with an argument instance, substitute the result for value under the f.name key of the data dictionary.
if first element of e.args is not contained in not_found,
if app_labels is false,
if nodelist_empty is None,
call the __init__ method from the base class of the class SimpleTemplateResponse, with 3 arguments: an empty string, content_type and status.
call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args, and unpacked dictionary kwargs, return the result.
try,
if language_code is not contained in self._namespace_dict,
append app_output to output.
call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key, with unpacked list field_value as an argument, substitute the field pk of the result for obj_pk.
for every refto and refs in return value of the method references.items,
if template_tuple is contained in TemplateDoesNotExist,
call the method m.groups, substitute the first element of the result for idx.
if e doesnt have an 'django_template_source' attribute,
return _wrapped_view.
from django.conf import settings into default namespace.
convert provided into a list and substitute it for provided.
raise ValidationError with 2 arguments: return value of the function _ called with an argument string, 'ManagementForm data is missing or has been tampered with' and code as a string 'missing_management_form'.
while rbp is smaller than self.current_token.lbp,
_format_modules_cache is an empty dictionary.
call the method start_ipython with an argument argv as an empty list.
status_code is an integer 304.
map the locale_dirs elements with mapping function os.path.basename, substitute the result for all_locales.
call the function file_move_safe with tmp_path, fname, allow_overwrite set to boolean True as arguments.
increment self.waiting_readers by 1.
substitute as_string for as_bytes.
increment loaded_objects_in_fixture by one.
replace every occurrence of '\n' in p for '<br />', format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.
self._caches.caches is an empty dictionary.
call the method dict_.getlist with an argument key, return the result.
derive the class OrderedSet from the object base class.
_serializers is an empty dictionary.
if token.contents is false,
unpack dictionary kwargs, map it through self.attrs and convert to dictionary, substitute the result for attrs.
call the method sys._getframe with an argument 1, substitute the result for frame.
try,
from django.utils.functional import curry and Promise into default name space.
convert self.domain into a string and append string '.po' to it, join basedir and result in file path, substitute it for pofile.
subcommand is a string 'help'.
define the method extract with 2 arguments self and to_path.
write errors to self.stdout.
define the method __iter__ with an argument self.
call the method handler.addQuickElement with 3 arguments: string 'summary', value under the 'description' key of item dictionary, and dictionary with an entry: 'html' for 'type'.
if name is not contained in data,
if file_ is true,
if lang_code is not contained in _supported and replacement is contained in _supported,
call the function mark_safe with an argument word, substitute the result for i-th element of words.
call the method dictConfigClass with an argument config, call the method configure on the result.
register is an instance of Library class.
from django.utils.dates import MONTHS into default name space.
if id_ is true,
for every template_name in template_name_list,
if custom_sql is empty,
substitute registry.register for register.
substitute DARK_PALETTE for DEFAULT_PALETTE.
compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.
define the method _is_expired with self and f as arguments.
set the file position pointer at the beginning.
get 'value' attribute of the _active object
kwargs_safe is a dictionary created for every k and v in result of the function six.iteritems called with an argument kwargs, with value result of the conditional_escape function called with an argument v for key k.
if ValidationError exception is caught,
fixture_files_in_dir is an empty list.
do nothing.
get '_decorated_function' attribute from the func object, substitute it for _dec._decorated_function, if it doesnt exist, substitute func for _dec._decorated_function.
return val.
define the method P with an argument self.
call the method os.path.dirname with an argument fixture_name, append it to a list, substitute resulting list for fixture_dirs.
if buf is false,
if value is None,
if url_info.netloc is false and url_info.scheme is true,
skip this loop iteration.
if not,
try,
call the function urlsplit with an argument value, assign the result to scheme, netloc, path, query and fragment, respectively.
if errors is true,
for every f in opts.local_fields,
apps is an empty dictionary.
import module cgi.
substitute token_type and contents for self.token_type and self.contents.
substitute self.subject for subject.
renamed is boolean False.
import module os.
return attr.
return timezone.zone.
remove entry under the 'tzinfo' key of the kw dictionary, substitute it for tzinfo.
call the function _load_serializers.
define the function __init__ with 11 arguments: self, required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string, error_messages set to None, show_hidden_initial set to boolean False, validators is an empty, localize set to boolean False, label_suffix set to None.
if self.verbosity is greater or equal to integer 2,
if in_tag is true and token_string starts with BLOCK_TAG_START.
return first end elements of list chunk.
help is a string "Deprecated - use 'migrate' instead.".
if self.verbosity is greater or equal than integer 1,
if is_compressed is true,
define handle_field method with self, obj and field arguments.
call the method executor.loader.graph.leaf_nodes and substitute its result for targets.
import module warnings.
if TypeError or VariableDoesNotExist exceptions are caught,
define the method value_from_datadict with 4 arguments: self, data, files and name.
define the method _isdst with 2 arguments: self and dt.
remove kwargs dictionary entry under the 'isolated_context' key, if it exists substitute it for self.isolated_context, if not self.isolated_context is boolean False.
decorator function register.filter with 2 arguments string "escape" and is_safe set to boolean True.
call the function re.search with 3 arguments: string '^%s%s', with '%s' replaced for prefix_norm and pattern, respectively, candidate_pat formated with candidate_subs and re.UNICODE.
if e doesnt have an 'django_template_source' attribute,
get the value under the 'keep_pot' key of the options dictionary, substitute it for self.keep_pot.
from django.utils.module_loading import import_string into default name space.
substitute len for _len.
rise an KeyError exception with an argument key.
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " OK" as a argument.
call the function get_mod_func with an argument lookup_view, store the result in mod_name and func_name, respectively.
msg is a tuple containing string "\nYou have installed Django's auth system, and don't have any superusers defined.\nWould you like to create one now? (yes/no): ".
define the function parse_datetime with an argument value.
convert newline character to unicode and substitute the result for newline.
if filename is true,
try,
import flup
call the method dt.timetuple, substitute the result for timetuple.
if num is greater than self._max_entries,
define the method unclosed_block_tag with 2 arguments: self and parse_until.
substitute variable_name for self.variable_name.
if id_ is true,
call the method m.groups, use the first element of the result as key for obtaining value from self.config dictionary, substitute it for d.
return the evaluated result of the mail.send method.
if app_label is not contained in executor.loader.migrated_apps,
call the function _import_module with an argument self.mod, substitute the result for module.
define function _to_tuple with s as an argument.
if value is true and method self.valid_value called with an argument value evaluates to false,
define the function byte2int with an argument bs.
define the function linebreaks_filter with 2 arguments value and autoescape set to None.
call the method self._assert_mutable.
call the method logger.removeHandler with an argument h.
if last element of line is newline or carriage return character,
define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.
for every app_config in return value of the method apps.get_app_configs,
for every node in self,
call the method field.clean with an argument value, substitute the result for value.
define function patch_vary_headers, with response and newheaders as arguments.
evaluate function Lock() assign the result to initLock.
confirm is a string 'yes'.
try,
return an empty dictionary.
if count of occurrence of '.' in ip_str is not equal to integer 3,
if self._is_rendered is false,
set use_workaround to boolean True if current_version tuple elements are smaller than the tuple (2,7,3), respectively, or if current_version is greater than (3,0), but smaller than (3,2,3), otherwise set use_workaround to boolean False.
substitute value under the 'liveserver' key of the options dictionary for value under the 'DJANGO_LIVE_TEST_SERVER_ADDRESS' key of the os.environ dictionary.
if TYPE equals to RAW,
from django.utils.html import format_html into default name space.
if TemplateDoesNotExist exception is caught,
call the method sys.stdout.close.
define the method __repr__ with an argument self.
convert os.sep into a string and append '*' to it, substitute the result for dir_suffix.
call the function get_commands, convert the result to a list, append string 'help' to it, substitute it for subcommands.
return boolean True.
if middleware has an attribute 'process_request',
call the function re.compile with 2 arguments: raw string '((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)', formated with string created by joining elements of result of the function re.escape with an argument x, with separator '|', for every x in DOTS, and re.DOTALL, substitute the result for hard_coded_bullets_re.
if retval is true,
import module logging.
if self.can_import_settings is true,
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date.' for 'invalid'.
create lambda identity function which returns x for input parameter x, return the function.
define the method __bool__ with an argument self.
if not,
try,
from __future__ import unicode_literals into default name space.
call the method __deepcopy__ from the base class of the class ChoiceField, with an argument memo, substitute the result for result.
call the method unifunc.replace with an argument strfunc.
self.template_cache is an empty dictionary.
_version is a string "2.0".
define the method __init__ with 3 arguments: self, media set to None and unpacked dictionary kwargs.
substitute self.fixture_dirs for fixture_dirs.
value under the 'blank' key of the extra_params dictionary is boolean True.
return self.
substitute result for value under the mem_args key of the cache dictionary.
define the method __str__ with an argument self.
call the method datetime_safe.new_date with an argument value, substitute the result for value.
do nothing.
decorator stringfilter,
raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'required', and code set to string 'required.
divide negative dklen with hlen, substitute floored result for l.
res is an empty string.
append rel_model to deps.
call the function import_string with an argument loader, substitute the result for TemplateLoader.
call the method self.handle_file_complete with arguments old_field_name, counters.
define the method cleaned_data with an argument self.
if transfer_encoding equals a string 'base64',
if line is true,
call the method self.registered_checks.append with argument check.
try,
return self._client.
derive class _MovedItems from the _LazyModule base class.
substitute the limit_value for self.limit_value.
get the value filed from the return value of the call to the c.key with the argument key, add the value to the cookiedict under the key key.
derive the class ConvertingList from list base class.
msg is a string "Could not decode base64 data: %r", where '%r' is replace with e.
substitute self.state for state.
self._post_render_callbacks is an empty list.
remove dirname key from dirs.
define the method __init__ with 7 arguments: self, file set to None, name set to None, content_type set to None, size set to None, charset set to None and content_type_extra set to None.
if else,
derive the class UnrecognizedArchiveFormat from the ArchiveException base class.
if end is not None,
define the method render with 4 arguments: self, name, value and attrs set to None.
if self.file has an attribute 'size',
call the method stream.unget with elements of list chunk from the index next to the end.
return result.
substitute gettext for ugettext.
substitute sixth element of bits for var_name.
if not,
for every field, messages in return value of the message.items method,
from __future__ import absolute_ into default name space.
substitute use_l10n for self.use_l10n.
for every field_name and field_value in return value of the function six.iteritems called with value under the 'fields' key of dictionary d,
call the method constant_re.findall with an argument t.contents, for every fmatch in the result,
sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, return the result.
call the method value.date, return the result.
option is a string '--testrunner='.
call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value, and format, call the method time on the result, return the result.
if pofile path exists,
substitute name for filter_func._filter_name.
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.
define the method __reduce__ with an argument self.
while i is lesser than length of subject and i-th element of subject is an empty space or tab character.
raise an TemplateSyntaxError exception with an argument string "Searching for value. Unexpected end of string in column %d: %s", where '%d' is replaced with i and '%s' is replaced with subject.
define the method _has_changed with arguments self, initial and data.
substitute bits without the first element for remaining_bits.
convert elements of tzinfo from indexes 1 to 3 to an integer, multiply it by integer 60 and increment it by offset_mins, substitute the result for offset.
import module contextlib.
call the params.get method with string 'KEY_PREFIX' and an empty string as arguments, substitute the result for self._key_prefix.
decorator stringfilter,
if value under the 'pubdate' key of the item dictionary is not None,
call the m2m_convert function with an argument c, for every c in return value of the method node.getElementsByTagName, with an argument string 'object', return the result.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid URL.' for 'invalid'.
trans_real._translations is an empty dictionary.
call to the self.handle_uncaught_exception method with request, resolver and value of the evaluated function sys.exec_info, as the arguments, substitute the result for response.
define method _get_width with self class instance as the argument.
from django.core.exceptions import ImproperlyConfigured into default name space.
substitute self.html_initial_id for value under the 'id' key of the attrs dictionary.
define the method get_available_name with arguments self and name.
_cached_filenames is an empty list.
otherwise, if pattern has an '_callback' attribute.
if not,
otherwise if, first element of message_context is equal to "'",
define the method to_python with arguments self and value.
if e.errno equals to errno.EEXIST,
call the method re.split with 2 arguments: raw string ' *, *' and elements of bits from 1 index to in_index index, joined into a string, separated by whitespaces, substitute the result for loopvars.
from django.utils.module_loading import import_string into default name space.
call the method self.configure_custom with an argument config, substitute the result for result.
substitute NumberInput for widget.
values is an empty list.
define the function find_command with 3 arguments: cmd, path set to None and pathext set to None.
if header list is not None,
call the self._lock.writer method, with the result perform the following,
substitute self.current_token for t.
if self.is_bound is true,
if text is true format with it and RESET a string '%s\x1b[%sm', if not format it with an empty string and RESET, substitute the result for text.
return boolean True.
call the self.run method with unpacked dictionary options as an argument.
 call the Warning function with 4 arguments: string "BooleanField does not have a default value.",
import module warnings.
define the method __repr__ with an argument self.
if ValidationError exception is caught,
return a string '%s %s %s' formated with 3 elements: result of the function force_text called with an argument i, separated by result of the function _ called with an argument string ', ', for every i in list_ without last element, result of the function force_text called with an argument last_word, result of the function force_text called with an argument: last element of list_.
join headers into a string, separated by string '\r\n'.
import module types.
call the function m2m_value with the argument related, for every related in itterator object generated from the attribute field.name, of the obj object, append the results in a list, substitute it for value under the field.name key of the self._current dictionary.
import termios module.
define the method create_variable_node with 2 arguments: self and contents.
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
if length of bits is not equalt to integer 2,
if exception ValueError or TypeError is raised,
if value has an attribute '__iter__' and value is not an instance of six.text_type,
decorator stringfilter,
call the method self.open, substitute the result for the new_conn_created.
help is a tuple containing string "Creates a Django project directory structure for the given " "project name in the current directory or optionally in the given directory.".
derive the class BadSerializer from the object base class.
call the method self.field.bound_data with 2 arguments: self.data and value under the self.name key of the dictionary, self.form.initial, if it exists, or self.field.initial if not, substitute the result for data.
return an instance of ModelChoiceIterator class, created with an argument self.
if value object the 'unique_id_is_permalink' key of the item dictionary is an instance of bool type,
__version__ is a string "1.6.1".
remove the value under 'allow_empty_file' key from the kwargs dictionary and if the key exists, substitute it for self.allow_empty_file, if not self.allow_empty_file is boolean False.
property getter decorator,
if not,
append field.widget.media to media, substitute the result for media.
while self.tokens is true,
try,
call the function timedelta with an argument integer 0, substitute the result for ZERO.
from django.utils import six into default name space.
from django.template.base import TemplateDoesNotExist into default name space.
raise an TemplateSyntaxError exception with an argument string "widthratio takes at least three arguments".
define the method __getitem__ with 2 arguments: self and name.
if ValueError, TypeError or ValidationError exception is caught,
get the value under the name key of the data dictionary, return it, if the previous doesnt exists, return None.
call the method parser.parse_known_args wiht an argument self.argv, without the first two elements, assign the result for options, and args, respectively.
try,
if OverflowError exception is caught,
if callback is an instance of functools.partial object,
if ValueError exception is caught,
date_data is a tuple with an entry: attribute lookup from the value under the unique_for key of the form.cleaned_data dictionary.
derive the class EmailBackend from the ConsoleEmailBackend base class.
define the method __eq__ with arguments self and other.
for every value in data call the function force_text with an argument value, add the results into a set, substitute the resulting set for data_set.
for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,
define the method self and name.
derive the class TemplateLiteral from Literal base class.
if not,
from django.conf import settings into default name space.
call the function ugettext_lazy with an argument value, return the result.
import module sys.
append value to parts.
define the method __init__ with 2 arguments: self and text.
get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
from django.forms.fields import everything into default name space.
raise an ValueError exception with an argument string 'Unable to set formatter %r: %s' formated with formatter and e.
raise an TypeError with an argument string "update expected at most 1 arguments, got %d" formated with length of args.
if new_method is false and old_method is true,
define the function emit_post_migrate_signal with 4 arguments: created_models, verbosity, interactive and db.
define the method render with an argument self.
d is an instance of class Decimal, created with result of the function force_text, called with an argument text converted into a floating point number.
return ZERO.
call function force_bytes with value as argument, use the result to as the result for the call to the methgod ctx.update.
decorator cached_property,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
call the method netloc.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for netloc.
substitute auto_id for value under the 'id' key of the attrs dictionary.
call the function cleanup_url with an argument url, assign the result to filename and display_url, respectively.
call the method self._handle_m2m_field_node with an argument field_node and field, substitute the result for value under the field.name key of m2m_data dictionary.
call the method self.enter_command with 2 arguments command and token.
call the function get_language, substitute the result for language_code.
define convert method with self class instance, number, from_digits, to_digits and sign as arguments.
convert number to string, if first element equals to sign,
self.error_list is an empty list.
if self.allow_files is true,
join root and filename into a file path, substitute it for old_path.
define function fix_location_header with request and response as arguments.
define the method resolve with 2 arguments: self and context.
raise an NotImplementedError with an argument string 'subclasses of NoArgsCommand must provide a handle_noargs() method'.
substitute status for self.status_code.
from django.utils import six into default name space.
RUN_RELOADER is boolean True.
call the method self.initial_form_count, return the result initial_forms.
decorator function wraps with an argument func.
append loader to loaders.
call the method to_python with an argument data from the base class of the class ImageField, substitute the result for f.
call the function force_text with arguments value and strings_only set to boolean True, substitute the result for unicode_value.
if length of args is greater than integer 1,
with call to the function transaction.atomic with using set to connection.alias and savepoint set to connection.features.can_rollback_ddl, as arguments.
define the method data with an argument self.
return the value under the filter_name key of the self.filters dictionary.
update declared_fields dictionary with entry base.declared_fields.
from collections import OrderedDict into default name space.
call the function copystat with old_file_name and new_file_name as arguments.
define the method inner_run with 3 arguments: self, unpacked list args and unpacked dictionary options.
for every obj in result of the call to the method self.queryset.all,
define the method __init__ with arguments self, stream and boundary.
define the method __repr__ with argument self.
replace every occurrence of '\r' in s with '\\r'.
otherwise if bmatch is true,
try,
if InvalidTemplateLibrary, renamed to e, exception is caught,
if c doesnt have an attribute '__call__', and types has an attribute 'ClassType', and type of c is not equal to types.ClassType,
for every i and row in enumerated result of the method connection.introspection.get_table_description called with arguments: cursor and table_name,
substitute value for self._encoding.
TOKEN_VAR is integer 1
self.fixture_object_count is integer 0.
try,
derive the class SplitHiddenDateTimeWidget from the SplitDateTimeWidget base class.
if self._fname is None:
if value under the 'verbosity' key of the options dictionary is greater than zero,
return out.
if VariableDoesNotExist exception is caught,
call the get_bytes_from_wsgi function with environ, string 'PATH_INFO' and empty strings as arguments, substitute the result for path_info.
define the function unlock with argument f.
for every key is self.bad_cookies,
self.compression_formats is an dictionary with 3 initial entries: tuple containing 2 elements: open and string 'rb' for None, tuple with 2 arguments: gzip.GzipFile and string 'rb' for 'gz', tuple with 2 arguments: SingleZipReader and string 'r' for 'gzip'.
define the method to_python with arguments self and data.
call the method __init__ with an argument name form the base class of the class MovedAttribute.
derive the class EmailBackend from the BaseEmailBackend base class.
if not,
if not,
self.first is boolean False.
if name is true, substitute it for function_name, if not get attribute '_decorated_function' from func object, substitute its __name__ field for function name, if it doesnt exists substitute func.__name__ for function_name.
call the method self.resolve with an argument c, substitute the result for c.
self._read_started is True.
call the method field._get_val_from_obj with obj argument, substitute the result for value.
call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references, use the result as an argument for the call to the method final_output.extend.
counters is a list containing length of handlers number of zeros.
if interactive is true,
if not,
substitute queryset for self._queryset.
if second element of url_fields is false,
substitute _templatetags_modules for templatetags_modules.
if file_name is false,
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
substitute self.subject for subject.
call the method self.add_fields with arguments form and i).
create a list out of open_tags elements form (i+1)-th index to the end, substitute it for open_tags.
open the file named filepath in read mode, with file descriptor renamed to fp perform,
return boolean False.
otherwise if call the method simple_url_2_re.match with an argument middle evaluates to true,
define the method with reload with an argument self.
from __future__ import unicode_literals into default name space.
if values has an attribute '__len__',
substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.
for every message in messages,
if ValueError exception is caught,
try,
all the function fcntl.flock with return value of the _fd(f) function and fcntl.LOCK_UN as arguments, substitute the result for ret.
substitute pickled for value under the key key of self._cache dictionary.
if offset is lesser than integer 0, sign is set to '-', otherwise sign is '+',
for every form in self.forms append form to a list, if function form.is_valid evaluates to true, and form is not contained in forms_to_delete, substitute the resulting list for valid_forms.
if lookup is false,
if cword equlals a integer 1,
break the loop execution.
call the method self.stdout.write with an argument string "Installing %s fixture '%s' from %s.", substitute '%s' with ser_fmt, fixture_name and return value of the function humanize called with an argument fixture_dir.
define __enter__ method with self as the argument.
output is an empty list.
call the method self.as_hidden with an argument only_initial set to boolean True, append the result to the result of the method, self.as_widget, return the resulting string.
if ImportError exception is caught,
call the function warnings.warn with an argument string "``--natural`` is deprecated; use ``--natural-foreign`` instead.", and RemovedInDjango19Warning.
if ch is not equal to string '<' or string '=',
call the emit_pre_migrate_signal with create_models, self.verbosity, self.interactive. connection.alias as arguments.
decorator deconstructible,
convert self.option_list into a boolean, return the inverted value.
define the function firstof with 2 arguments: parser and token.
if template_source_loaders is None,
if six.PY3 is true,
substitute tempfile.gettempdir for gettempdir.
if django_po file path exists,
call the function _unpack_ipv4 with an argument ip_str, substitute the result for ipv4_unpacked.
define the method __deepcopy__ with 2 arguments: self and memo.
return self.position.
split tag_re by self.template_string separator, for every bit in result,
substitute value under the NON_FIELD_ERRORS key of opts.error_messages dictionary for error_messages.
return self.__name.
return list with an element first_item, and boolean True.
define the method parse with an argument self.
define the method s with an argument self.
background is a dictionary created with elements: x appended to a string '4' for value under the key x of color_names dictionary, for every x in sequence of integers from 0 to 7.
if not,
if sys.platform equals string win32', substitute string 'CTRL-BREAK' for quit_command, if not substitute string 'CONTROL-C' for quit_command.
from django.http.utils import fix_location_header and conditional_content_removal into default name space.
call the method lexer.lex with an arguments js, for every name and tok in the result,
PATTERN is a string  "classdef< 'class' any+ ':'suite< any*funcdef< 'def' unifunc='__unicode__'parameters< '(' NAME ')' > any+ >any* > >".
call the method self.stdout.write, with an argument string "Rendering %s template files with filenames: %s\n", where '%s' is replaced with app_or_project and extra_files joined into a string, separated by a string ', '.
derive the class FileUploadHandler from the object base class.
define the method run with 3 arguments: self and unpacked dictionary options.
if not,
lexer is an instance of JsLexer class.
if exception GeneratorExit is caught,
return cls.
define the method __eq__ with self and other as arguments.
increment line by buffer_.
raise an ValueError with an argument string "Invalid timezone: %r", substitute '%r' with timezone.
self.new_objects is an empty list.
if self object has an attribute '_client',
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
output is an empty list.
call the method d.quantize with 3 arguments: exp, ROUND_HALF_UP and instance of Context class created with prec as prec, call the method as_tuple on the result, substitute the result for sign, digits and exponent, respectively.
get the value under the 'indent' key of the self.options dictionary, substitute it for indent.
call the function func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
increment i by integer 1.
if not,
call the method error with an argument message, from the base class of the class CommandParser.
otherwise if total_forms is grater than self.max_num is grater or equal to integer 0,
substitute first element of args for arg.
help is a string "Runs over the entire source tree of the current directory and " "pulls out all strings marked for translation. It creates (or updates) a message " "file in the conf/locale (in the django tree) or locale (for projects and " "applications) directory.\n\nYou must run this command with one of either the " "--locale, --exclude or --all options.".
return out.
pop_context is boolean True.
call the function blankout with 2 arguments: p and 'F', write the result to out.
for every e in self, append convert e to an string and append it to string '* ', join all of the results into a string separated by newline character, return the result.
call the method self.field.prepare_value with an argument data, return the result.
get the 'value' attribute of the _urlconfs, if it exists return it, otherwise return defaults.
call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg, and third element of result of the function sys.exc_info.
return value.
if filename ends with extensions or filename is contained in extra_files,
substitute second element of elt for param.
raise an TemplateSyntaxError exception with an argument string "back called without some previous parsing".
if not,
call the method serializers.get_public_serializer_formats, substitute the result for self.serialization_formats.
import module re.
call the method Image.open with an argument file, on the result call the verify method
call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false', dest set to string 'interactive', default set to boolean True, help as a string 'Tells Django to NOT prompt the user for input of any kind.'.
set old_method_name attribute of the base object to the result of the function wrapper called with an argument new_method.
if kwarg is true,
call the method self.nodelist.render with an argument new_context, return the result.
define the method handle with self class instance and dictionary pair of elements options as arguments.
from django.core.exceptions import DisallowedRedirect into default name space.
define the method __repr__ with an argument self.
call the function split_domain_port with an argument host, assign the result to domain and port, respectively.
if inplural is true,
call the function self._new_gnu_trans with 2 arguments: localedir and use_null_fallback, substitute the result for translation.
from django.utils.translation import get_language into default name space.
get the index of the first occurrence of tagname, substitute it for i.
if not,
if ns_pattern is true,
call the method field.clean with an argument field_value, append the result to clean_data.
migration.merged_operations is an empty list.
define the method handle_data with 2 arguments self and d.
substitute name for new_mod.
define the method __iter__ with an argument self.
return data.
property decorator,
if html_message is true,
derive the class DefaultStorage from the LazyObject base class.
from django.utils.functional import allow_lazy and SimpleLazyObject into default name space.
sum major and sub, return the result converted to string.
define the function to_locale with 2 arguments language and to_lower set to boolean False.
define the method _iteritems with an argument self.
if os has an attribute 'utime',
return None.
if content is an instance of a EmailMessage class,
if name is callable object,
if lengths of initial and data are equal,
call the method time.mktime with an argument tt, substitute the result for stamp.
import module warnings.
if refto is contained in seen_models,
if not,
if except UnicodeDecodeError exception is caught,
_get_post is a getter function and _set_post is a setter function for POST attribute of this class.
if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
define the method errors with an argument self.
if reversed is True substitute difference of d and now for delta, if not substitute the difference of now and d for delta.
week_number is None.
try,
append i-th element of existing to child_loggers.
call the method self.get_handler with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for handler.
call the method handler.addQuickElement with 3 arguments: string 'category', an empty string and a dictionary with an entry: cat for 'term'.
call the function six.text_type with an argument number, substitute the result for str_number.
if dictionary is false,
call the method self.splitext with an argument guessed_filename, substitute the second element of the result for ext.
define the method render with 2 arguments: self and context.
if all_issues is true,
define the function strip_spaces_between_tags with an argument value.
substitute self.field.widget for widget.
call the method self.connection.sendmail with arguments: from_email, recipients and return value of the function message.as_bytes.
append command.xgettext_options to list containing 15 elements: string 'xgettext', string '-d', domain, string '--language=Python', string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2', string '--keyword=ugettext_noop', string '--keyword=ugettext_lazy', string '--keyword=ungettext_lazy:1,2', string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3', string '--keyword=pgettext_lazy:1c,2', string '--keyword=npgettext_lazy:1c,2,3' and string '--output=-', substitute the result for args.
write msg to self.stderr stream.
compare is a lambda function with arguments self, a and b, return value is boolean true if a is greater than b, otherwise is false.
try,
substitute value.year, value.month and value.day for year_val, month_val and day_val, respectively.
call the method inspect.getmro with an argument new_class, for every base in the result,
get the value under the 'format' key of the options dictionary, substitute the result for format.
if ValueError exception is caught,
for every p in path,
use_null_fallback is boolean True.
if plan_node is not contained in shown and first element of plan_node equals to app_name,
__dispatch is None.
call the method self._post.appendlist with 2 arguments: field_name and result of the function force_text called with 3 arguments: data, encoding and errors as a string 'replace'.
replaces is an empty list.
substitute CheckboxChoiceInput for choice_input_class.
try,
if six.PY3 is true,
if OSError, renamed to e, is caught,
return j.
if not,
conditions_nodelists is a list containing tuple with 2 elements condition and nodelist.
return self.
return None.
from django.core.management.sql import sql_destroy_indexes into default name space.
call the method base64.urlsafe_b64encode with an argument s, strip the result of the bytes string '\n=' from the right, return it.
define the method __iter__ with an argument self.
call the function initial_value, substitute the result for initial_value.
for every path in format_module_path,
split the_path at the '/' character, substitute last element of the result for used_name.
if opts is true,
if forms_valid is true and call to the method self.non_form_errors, evaluates to false, return boolean True, otherwise return False.
try,
if quote_double_quotes is true,
take elements of token_string from second to second last element and strip the whitespaces surrounding the result, substitute the result for content.
from django.apps import apps.
if value is an instance of str type,
define the method _get_page_range with an argument self.
from gzip import GzipFile into default name space.
substitute last element of bits for taglib.
if not,
if files is true, substitute it for self.files, if not self.files is an empty dictionary.
derive the class SuspiciousMultipartForm from the SuspiciousOperation base class.
call the encode function on the Header class instance, created with arguments nm and encoding, substitute the result for nm.
if f.null is false, append string append "NOT NULL" to field_output, otherwise append "NULL" to field_output.
call the method Context.__init__ with 5 arguments: self, dict_, current_app as current_app, use_l10n as use_l10n, use_tz as use_tz.
derive the class BaseCache from the object base class.
increment nesting by one.
if Exception exception is caught,
call the method value.decode with an argument charset, substitute the result for value.
call the method self._add_local_translations.
call the function MovedModule with 2 arguments: strings "_dummy_thread" and "dummy_thread", use the result as an argument for the call to the add_move function.
allow_multiple_selected is boolean True.
call the smart_text function with an argument token, return the result.
if field is not contained in self.fields,
memo is an empty dictionary.
import pickle.
if self.can_delete is true,
calculate reminder of division of x by length to_digits, substitute it for digit.
if value has an attribute '_meta',
substitute format_string for self.format_string.
from django.conf import settings into default name space.
template_source_loaders is None.
try,
sum best_doublecolon_start and best_doublecolon_len, substitute the result for best_doublecolon_end,
define the function rfc2822_date with an argument date.
call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.
define the method __getstate__ with an argument self.
call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list_.
for every attr in _moved_attributes,
if fset is not None,
define the function get_urlconf with an argument default set to None.
replace '%s' in string '<%s list>' with __class__.__name__ field of first element of self.urlconf_name, substitute it for urlconf_repr.
call the translation.get_language_bidi function, substitute the result for the value under the 'LANGUAGE_BIDI' key of the context_extras dictionary.
return boolean False.
remove element under '_data' key of obj_dict dictionary, if it exists substitute it for data, if not data is an empty list.
search anywhere in the rawdata string starting from the (i+1)-th element for the _html_parser.endendeag, replace the result for match.
value under the app_config key of the app_list is None.
get value under the 'handlers' key of the config dictioanry, if it exists substitute it for handlers, if not handlers is None.
try,
for every c in reversed order of candidate, convert c into an integer, sum all the results and substitute the result for evens.
extend final_output with alter_sql.
derive the class MultiValueDict from the dict base class.
substitute i-th element of list for title.
try,
if not,
if initial is not None,
return self.value.
append f.name to exclude.
from django.core.exceptions import SuspiciousMultipartF into default name space.
derive the class ContextPopException from the Exception base class.
status_code is an integer 404.
flush the output buffer of the self.stdout object.
call the method self.max_width.resolve with an argument context, convert the result to an integer and substitute it for max_width.
return an instance of IfNode class, created with an argument conditions_nodelists.
define the function get_callable with arguments lookup_view and can_fail set to boolean False.
from django.core.handlers.wsgi import WSGIHandler into default name space.
define the function get_wsgi_application.
call the import_string with app_path as an argument, return the result.
try,
requires_system_checks is boolean False.
if error has an attribute 'error_dict',
from django.conf import settings into default name space.
if not settings.DEBUG is true and settings.ALLOWED_HOSTS is false,
call the function plural_re.match with an argument t.contents, substitute the result for pluralmatch.
try,
get the value under the root key of the convert dictionary, for every opname and opfunc in the result,
get the value under the 'extensions' key of the options dictionary, substitute it for extensions.
import module gettext as gettext_module.
sum item and i_item together, append the result to new_result.
raise an TemplateSyntaxError exception with an argument string "'regroup' tag takes five arguments".
return an empty string.
define the function get_language.
if IndexError exception is caught,
get the first space decremented with integer 1 elements from string line, append newline character to it, and yield the result.
for every app_config in return value of the method apps.get_app_configs if app_config.models_module is not None, and app_config.label is contained in app_labels, create a tuple containing app_config.label and return value of the method router.get_migratable_models called with app_config, connection.alias and include_auto_created set to True, append the tuple to the list all_models.
append error_class converted into a string to string 'errorlist ', substitute the result for self.error_class.
call the function custom_sql_for_model with 3 arguments: model, style and connection, extend the output with the result.
define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
try,
update self.tags dictionary with lib.tags.
join elements of extra_classes into a string separated by whitespaces, return it.
if self.language is not None,
define the method add_arguments with 2 arguments self and parser.
define method add_arguments with class instance self and parser as the input arguments.
if call to the function module_has_submodule with app_config.module and "management" evaluates to True.
if KeyError exception is caught,
if _cookie_encodes_correctly is boolean False,
return self._files.
convert max_entries into a string, substitute it for self._max_entries.
raise an KeyError with an argument string 'Your dictionary lacks key \'%s\'. Please provide it, because it is required to ' 'determine whether string is singular or plural.', where '%s' is replaced with number.
if path_info is empty,
try,
for every loc in locales,
convert num to an integer, substitute the result for length.
call the method data.find with an argument self._boundary, substitute the result for index.
get the value of the values dictionary under the value converted to lowercase key, substitute it for value, if the key doesnt exists, substitute value for value.
derive the class RssFeed from the SyndicationFeed base class.
locale_dir is None.
self._errors is an empty list.
subtract integer 12 from self.data.hour, return the result.
DEFAULT_PORT is a string "8000".
substitute data for data_value if data is not None, otherwise data_value is an empty list.
append mw_instance.process_request at the end of request_middleware.
define the method __init__ with 2 arguments: self and content.
call the method parser.delete_first_token.
call the method format_html with 3 arguments: string '{0}{1}', contents and label_suffix, substitute the result for contents.
if not self._mutable,
call the method writer.as_string, substitute the result for migration_string.
call the fastcgi_help function with an argument string "Invalid combination of host, port, socket.", return it.
return default.
msgattrib_options is an list with elements: string '--no-obsolete'.
get the identity of the self object, use it as a key to get the value of the memo dictionary, substitute result for it.
if self.number is lesser than self.paginator.num_pages, return boolean True, otherwise return boolean False.
raise an VariableDoesNotExist exception with an argument string "Failed lookup for key [%s] in %r", where '%s' is replaced with bit and '%r' is replaced with current.
table_names is an empty list.
for every name in MEDIA_TYPES,
if first element of params equals a string 'context',
import module socket.
call the method datetime.time with an argument unpacked dictionary kw, return the result.
call the method self.instance.validate_unique with an argument exclude set to exclude.
try,
if self.takes_context is true,
if ImportError exception occurred,
output is an empty list.
set attrvalue to None.
convert arg to an integer.
if defaults is not None,
try,
for every w in self.widgets,
define the method is_hidden with an argument self.
property decorator,
get the value under the ' use_natural_foreign_keys' key of the options dictionary, substitute the result for  use_natural_foreign_keys.
define the method inner with 2 arguments: self and unpacked list args.
_mtimes is an empty dictionary.
define the method __dir__ with an argument self.
call the method gettext_module.NullTranslations, substitute the result for _active.value.
if proto is greater than or equal to integer 2,
define the method __init__ with arguments self and regex.
description is a string "The '%s' function" replaced by value of receiver.__name__.
substitute type.__init__ for __init__.
biggest_number is integer 1.
define the method __str__ with an argument self.
filemsg is a string 'file %s, ', where '%s' is replaced with origin.
substitute settings.CACHE_MIDDLEWARE_KEY_PREFIX for key_prefix.
define the method path with arguments self and name.
try,
if settings.USE_L10N is true,
call the function force_text with an argument url, return the result.
default_error_messages is an dictionary with an initial entry: result of the function _ called with an argument string, 'Enter a whole number.' for 'invalid'.
call the function getattr with request, string 'LANGUAGE_CODE' and function get_language as arguments, append the result at the end of string '.', append it all at the end of string cache_key.
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
define the function dictConfig with an argument config.
from django.conf import settings into default name space.
call the function quote with 2 arguments: url and safe as bytes string '!*\'();:@&=+$,/?#[]~', substitute the result for url.
call the method parser.delete_first_token.
call the function local, substitute the result for _prefixes.
if StopFutureHandlers exception is caught.
return response.
property decorator,
if comment_lineno_cache is not None,
call the function re.sub with 3 arguments: raw string '(?u)[^-\w.]', an empty string and s, return the result.
if domain_part is not contained in self.domain_whitelist and method self.validate_domain_part with an argument domain_part evaluates to false,
define the method __repr__ with an argument self.
if self.activated is boolean False,
substitute Tok.num for self.id.
return string first element of t, '=', second element of t.
if length of bits is greater or equal to intger 2 and second last element of bits is equal to string 'as',
yield key.
define the function fset with 3 arguments: instance, valse to None and name set to fset.__name__.
define the method utcoffset with 2 arguments: self and dt.
call the method _ExpatParser.reset with an argumen sefl.
define the function Deserializer with arguments stream_or_string and unpacked dictionary options.
for every k and v in result of the function six.iteritems,called with an argument self, joining string '%r: %r' formated with k and v into a string, separated with ', ', use it to format a string '{%s}', return it.
call the function factory with an argument unpacked dictionary kwargs, substitute the result for result.
define the function slugify with an argument value.
substitute bits, without the first two elements, substitute the result for remaining_bits.
return cls.
if not,
if self.__language equals settings.LANGUAGE_CODE or self.__language equals a string "en-us",
slice the list value with unpacked list bits as an argument, return the result.
raise self.warning.
call the sign method from the base class of the TimestampSigner class with an argument value, return the result
substitute self.none_value for self.month_none_value.
define the method callback with an argument self.
convert name to lower case, if it is contained in ADDRESS_HEADERS,s
end_text_pos is equal to integer 0.
otherwise if file_name is not an instance of six.string_types and call to the function is_iterable with an argument file_name, evaluates to true,
substitute third element of row list for expires.
decrement date.month by integer 1, use the result as an key to obtain the value from the months dictionary, substitute it for month.
from django.utils.encoding import force_text into default name space.
substitute self.handle_app for handle_app.
if timezone has an attribute 'localize',
substitute connection.features.test_db_allows_multiple_connections for use_threading.
error_msg is a string "Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory.".
return an empty string.
if s is an instance of an object Promise.
call the method self.copy, return the result.
call the method simple_url_re.match with an argument middle, if it evaluates to true,
if self has an 'requires_model_validation' attribute, has_old_option is boolean True, otherwise it is boolean False.
decrement mtime by stat.st_ctime.
call the method pytz.timezone with an argument timezone, substitute the result for _active.value.
endless loop,
derive Serializer from the base.Serializer base class.
if text is an instance of SafeData, safe_input is boolean True, otherwise is boolean False.
call the function shutil.move with arguments the_path and guessed_path.
call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote, use the result as an argument for the call to the function force_text, return the result.
call the method copy.deepcopy with 2 arguments: self._wrapped and memo, return the result.
if path is an instance of six.string_types,
define the method delete_many with arguments self, keys and version defaulting to None.
import module keyword.
if self.is_bound is false,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
do nothing.
args is an empty tuple.
args is a empty tuple.
if extra_context is true, substitute it for self.extra_context, if not self.extra_context is an empty dictionary.
define the function callable with an argument obj.
i is integer 366.
otherwise if fourth element of version does not equals to 'final',
compile a regex from raw string '^(?P<prefix>[a-z]+)://(?P<suffix>.*)$', substitute it for CONVERT_PATTERN.
pieces is an empty list.
substitute deactivate for self.deactivate.
define the method css_classes with 2 arguments: self and extra_classes set to None.
call the function endtag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
define the method _format_value with 2 arguments: self and value.
import module os.
call the method mail.mail_admins with 5 arguments: subject, message, fail_silently as boolean True, tml_message as html_message, and connection as the result of the method self.connection.
call the decode function with argument string 'ascii' on the return value of the method domain.encode with argument string 'idna' substitute the result for domain.
derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.
define the method get_template_sources with 3 arguments: self, template_name, template_dirs set to None.
call the executor.loader.get_migration_by_prefix with app_label and migration_name, substitute the result for migration.
if indent is true,
raise an ImproperlyConfigured exception with argument string 'Could not write to directory: %s', replace '%s' with self.file_path.
for every handler in handlers,
define the method handle_label with 3 arguments: self, label and unpacked dictionary options.
while start is lesser than end.
define the method filter with 2 arguments: self and record.
call the function linebreaks with 2 arguments value and autoescape, use the result as an argument for the call to the mark_safe, return the result.
try,
python_2_unicode_compatible decorator,
call the function os.walk with 3 arguments: root, topdown set to boolean True, followlinks set to self.symlinks, for every dirpath, dirnames and filenames in the result,
WEEKDAYS_ABBR is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Mon' for 0, result of the call to the function _ with an argument string 'Tue' for 1, result of the call to the function _ with an argument string 'Wed' for 2, result of the call to the function _ with an argument string 'Thu' for 3, result of the call to the function _ with an argument string 'Fri' for 4, result of the call to the function _ with an argument string 'Sat' for 5, and result of the call to the function _ with an argument string 'Sun' for 6. WEEKDAYS_REV is an dictionary with 7 entries: 0 for 'monday', 1 for 'tuesday', 2 for 'wednesday', 3 for 'thursday', 4 for 'friday',
if not,
call the function is_aware with an argument date, if it evaluates to true,
if key is not contained in self,
define the function infix with 2 arguments bp and func.
call the function allow_lazy with 2 arguments: urlunquote_plus and six.text_type, substitute the result for urlunquote_plus.
call the method cls with 3 arguments: value under the 'filename' key of file_dict, value under the 'content' key of file_dict,
if autoescape is true,
decompress is boolean True.
substitute size for self.size.
for app_config in return value of the method apps.get_app_configs,
append string ');' to full_statement.
call the function is_library_missing with an argument path, return the result.
if not,
call the method self.mapping.get with 2 arguments: self.tagtype and an empty list, return the result.
define the method __getitem__ with 2 arguments: self and key.
call the method connection.cursor, with the result renamed to cursor, perform the following,
substitute value under the key key of self._cache dictionary for pickled.
return a list with an element etag_str.
if ValueError exception is caught,
append taglib_module to tried_modules.
call the method _isdst with an argument dt from the base class of the class LocalTimezone, return the result.
extend list kw with a list with 5 elements: d.hour, d.minute, d.second, d.microsecond and d.tzinfo.
if self.connection is false,
if language_code is not contained in self._regex_dict,
get value under the 'propagate' key of the config dictioanry, if it exists substitute it for propagate, if not propagate is None.
call the function get_callable with arguments lookup_view and boolean True, substitute the result for lookup_view.
return value.
call the function pickle.dumps with expiry and integer -1 as arguments, use the result as the argument for the call to f.write function.
decorator register.filter.
raise an ValueError exception with an argument string 'No handler found with name %r' formated with name.
if e is not an instance of CommandError class,
call the method self.handle with 2 arguments unpacked list args and unpacked dictionary options, substitute the result for output.
raise an exception.
otherwise if tzinfo is not None,
derive the class RadioFieldRenderer from the ChoiceFieldRenderer base class.
define the method handle_inspection with 2 argument: self and options.
from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.
return ret.
from django.apps import apps into default name space.
get the value under the field key of self.fields dictionary, substitute error_messages field of the result for error_messages.
for every obj in queryset,
if urlconf is None,
get the value under the 'id' key of final_attrs dictionary, substitute if for id_ if the key doesnt exists, id_ is None.
define the function to_language with an argument locale.
if sum of the top and self.orphans is greater or equal to self.count,
call the method datetime_safe.new_date with an argument date_value, substitute the result for date_value.
append name to string 'add_' use it as the name of the attribute to get from object self, call the result as an function, with an argument: value under the name key of the media_attrs dictionary, if it exists, if not use None as an argument.
if identity lambda function returns false, substitute the x for capfirst, if not call the function force_text with an argument x, convert the first element of the result to uppercase, append to it the rest of the result, substitute it for capfirst.
call the method MIMEMultipart.__init__ with 5 arguments: self, _subtype, boundary, _subparts and unpacked dictionary _params.
if errors is true,
if _time.daylight is true,
if not,
from django.utils.six.moves import copyreg into default name space.
for every app_label and app_migrations in result of the method changes.items,
try,
define the function contains with 2 arguments source and inst.
if value is contained in self.empty_values,
get the value 'inhibit_post_migrate' key of the options dictionary, if it exists substitute it for inhibit_post_migrate, otherwise inhibit_post_migrate is boolean False.
from django.utils.translation import templatize into default namespace.
define the method full_clean with an argument self.
is_required is boolean False.
if length of t equals to integer 2,
define the method _init_translation_catalog with an argument self.
call the function allow_lazy with 2 arguments: linebreaks, six.text_type, substitute the result for linebreaks.
map elements of value through mapping function force_text, substitute the result for value.
call the method parser.add_argument with 2 arguments: string 'app_label', and help is a string 'App label of the application to squash migrations for.'.
call the method sys.stderr.close.
if not,
define the method get_backend_timeout with self and timeout set to DEFAULT_TIMEOUT as arguments.
if not,
from django.conf.locale import LANG_INFO.
define the method as_text with an argument self.
raise an CommandError exception with an argument string "couldn't handle %s template %s.", replace '%s' with self.app_or_project and template.
call the method mutable substitute for self._mutable.
set attr.name attribute of Module_six_moves_urllib_robotparser object to attr.
return a tuple with 2 elements: integers 1 and 0.
append list with 2 strings: '_request' and '_current_app' to SimpleTemplateResponse.rendering_attrs, substitute the result for rendering_attrs.
raise an TemplateSyntaxError with an argument string 'Unknown argument for %r tag: %r.', where '%r' is replaced with first element of bits and options.
increment self.active_readers by t.
try,
from django.utils._os import npath and upath into default name space.
derive the class DjangoRuntimeWarning from the RuntimeWarning base class.
substitute '%s\ in string "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'", with name_str, use it as an argument to throw an CommandError exception.
call the function force_text with an argument text, substitute the result for text.
mixed_subtype is a string 'mixed'.
raise an ImproperlyConfigured exception with an argument string "Error importing template source loader %s - can't pass arguments to function-based loader.", where '%s' is replaced with loader.
from django.contrib.auth import get_user_model into default name space.
evaluate connection.creation.sql_create_model method with model, no_style() and seen_models as arguments, assign the result to the sql and references, respectively.
call the function parse_boundary_stream with 2 arguments: sub_stream and integer 1024, yield the result as the return value of the generator.
remove 'end' key from the kwargs dictionary, if it exists substitute it for end, if not end is None.
extend errors list with e.error_list.
convert path to a string, substitute the result for path.
TOKEN_MAPPING is a dictionary with 4 initial entries: 'Text' for TOKEN_TEXT, 'Var' for TOKEN_VAR, 'Block' for TOKEN_BLOCK, and 'Comment' for TOKEN_COMMENT.
if app_names is not empty,
return name converted to a string and val.
from django.core.servers.basehttp import run and get_internal_wsgi_application into default name space.
if not,
input_type is a string 'text'.
for arg in argv list without the first two elements,
if child.nodeType equals to child.TEXT_NODE or child.nodeType equals to child.CDATA_SECTION_NODE,
if not,
from django.utils import six into default name space.
if http_cookies.CookieError exception is raised.
return the directory name two directories up from the __file__ path, join it with 'conf' and 'locale' into valid path, separated by '/', basedirs is a list containing 2 elements: previous result and string 'locale'.
name is a string "_%d" formated with num_args.
return self.data.month.
yield ch and boolean False.
usage is a list containing 4 entries: an empty string, string "Type '%s help <subcommand>' for help on a specific subcommand.", where '%s' is replaced with self.prog_name, an empty string and string "Available subcommands:".
if ImportError exception is caught,
call the self._delete method with argument fname.
define the method as_text with an argument self.
if not,
return boolean True.
call the function _add_doc with 2 arguments: u and string """Text literal""".
with lock,
if not,
append list containing view_path to self.namespaces list, join all the elements into a string separated by character ':', substitute it for self.view_name.
for every node in self.nodelist_loop,
concatenate first site elements of s, syear and elements of s from the site incremented by integer 4 index, substitute the result for s.
define initialization method __init__, with self class instance as the argument.
value is an empty list.
if not,
if not,
define the method render with 2 arguments self and context.
multiply offset by integer -1.
from django.core.checks.registry import registry into default name space.
if i is greater or equal to the result of the method self.initial_form_count and self.initial_extra is true,
substitute i for p.
call the method f.value_from_object with an argument instance, substitute the result for qs.
define the method_mark_post_parse_error with an argument self.
get config dictionary element under 'handlers' key, if it exists substitute it for handlers, if not, handlers is EMPTY_DICT.
define the function new_date with an argument d.
call the method parser.skip_past with an argument string 'endcomment'.
set value under the 'bindAddress' key of wsgi_opts to None.
potfiles is an empty list.
call the function force_text with an argument text, substitute the result for text.
return Operator.
return is boolean True.
call the function fcntl.flock with return value of the _fd(f) function and flags as arguments, substitute the result for ret.
define the method make_bytes with 2 arguments: self and value.
self.addr is an empty string.
filenames is an empty list.
if IOError, renamed to e, exception is caught,
if settings.USE_TZ is true,
guid_attrs is an empty dictionary.
buf is an instance of StreamingBuffer class.
call the method _parse_header with an argument line, assign the result to name and tuple with 2 elements: value and params, respectively.
call the method apps.get_app_configs, substitute the result for app_configs.
join statements into a string, separated by newlines, return it.
define lambda function that returns self.file.readlines field, use it as an argument for property function, put the result in readlines.
if not,
set k attribute of cls object to meth.
define the method has_key with 2 arguments: self and key.
calculate negative length of s, by modulus integer 4, use the result as the number of '=' characters to be stored in pad.
if inverse_match is not None,
self._ordering is an empty list.
substitute filters for self.filters.
substitute length of tokens for l.
call the method self.remove_potfiles.
substitute _itervalues for values.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an exists() method'.
raise an exception.
delete first 3 elements of bits.
raise an ValueError exception with an argument string 'Unknown level: %r' formated with level.
if self.field.cache_choices is true,
for every lineno and line is enumerated result of the method content.splitlines, called with an argument boolean True,
for eery z in range of integers from 0 to 31, update _js_escapes dictionary with '\\u%04X' formated with z, for integer representation of z converted into a string.
define the function get_language_from_path with an argument request.
if args is true,
if not,
html is an empty dictionary.
content.setter decorator,
defaults is an dictionary with 3 initial entries: self.auto_id for 'auto_id', result of the call to the method self.add_prefix, with an argument i, for 'prefix' and self.error_class for 'error_class'.
substitute loopvars and sequence for self.loopvars and self.sequence, respectively.
remove 'LOCATION' key from kwargs dictionary and put it into location, or use an empty string if key doesnt exists.
while token.contents starts with a string 'elif',
substitute '%s' in a string "\nCreated new merge migration %s" with writer path, write it to self.stdout.
call the method middleware.process_response with 2 arguments: request and response, return the result.
call the handle function with dictionary pair of elements options from the base class of the class Command.
if escaped is true,
derive the class SafeMIMEMultipart from the MIMEMixin and MIMEMultipart base class.
append value to the self._closable_objects list.
model_list is an empty list.
define the function dec with an argument func.
define the method __str__ with argument self.
raise an KeyError with an argument "Unknown language code %s.", where '%s' is replaced with lang_code.
do nothing.
derive class ImageFile from the base class File.
if exception ValueError or TypeError is caught,
define the method add with 5 arguments, self, key, value, timeout defaulting to DEFAULT_TIMEOUT and version defaulting to None.
value is an empty string.
define the method add_fields with 2 arguments: self, form and index.
substitute length of prefixed for pflen.
if not,
from django.apps import apps into default name space.
substitute StringIO for stream_class if content is an instance of six.text_type, otherwise substitute BytesIO for stream_class.
ch is None.
if index is lesser than integer 0,
from django.utils import six into default name space.
call the method types.MethodType with 3 arguments: func, obj and obj.__class__, return the result.
assign the string 'reversed' to is_reversed and bits last elements.
substitute kwargs for self.kwargs.
define the method u with an argument self.
kwargs is a dictionary with 17 entries: form for 'form', formfield_callback for 'formfield_callback', formset for 'formset', extra for 'extra', can_delete for 'can_delete', can_order for 'can_order', fields for 'fields', exclude for 'exclude', min_num for 'min_num', max_num for 'max_num', widgets for 'widgets', validate_min for 'validate_min', validate_max for 'validate_max', localized_fields for 'localized_fields', labels for 'labels', help_texts for 'help_texts', and error_messages for 'error_messages'.
_moved_attributes is a list with 55 initial elements, 13 of them are the results of the call to the function MovedAttribute, with different 3 string arguments, the others are results of the call to the function MovedModule called with 3 string arguments.
call the method re_escaped.sub with 2 arguments: raw string '\1' and piece, append the result to pieces.
call method sort on the headerlist.
on the object under the db key of connections dictionary call the method ops.value_to_db_datetime with argument exp, substitute the result for the exp.
if first and second element of sys.version_info are both equal to integer 3,
import module traceback.
for every func in self.response_fixes,
if size is not empty,
import module base64.
define the method _createdir with argument self.
define the method handle_charref with 2 arguments self and name.
_func_code is a string "func_code".
increment weight by integer 2.
substitute file for self.file.
call the method self.configure_root with an argument root.
get the value under the 'database' key of the options dictionary, if it doesnt exists use the DEFAULT_DB_ALIAS to address an element from the connections list, substitute it for connection.
if html_message is true,
append string "Field renamed because it was a Python reserved word." to field_notes.
from django.db.backends.utils import typecast_timestamp into default name space.
define the method _has_changed with arguments self, initial and data.
self._read_started is boolean False.
return nothing.
replace '%s' in string "System check identified some issues:\n%s" with msg, substitute it for msg.
assign self.model._meta.pk to self._pk_field and pk.
decorator function register.filter with 2 arguments string "phone2numeric" and is_safe set to boolean True.
if string 'forloop' is contained in context,
otherwise if ns is not contained in app_list,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if Exception exception is caught,
call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.
help is an empty string.
BASE16_ALPHABET is a string '0123456789ABCDEF'.
self.tags is an empty dictionary.
if i is greater than or equal to the result of the method self.initial_form_count, and call to the method form.has_changed evaluates to false,
return settings.LANGUAGE_CODE.
if not,
define the method _reset_dicts with 2 arguments: self and value set to None.
raise an CommandError exception with an argument string "Multiple fixtures named '%s' in %s. Aborting.", where '%s' is replaced with: fixture_name and result of the function humanize called with an argument fixture_dir.
substitute number for self.number.
property decorator,
return boolean True.
derive the class TimestampSigner from the Signer base class.
if self._encoding is None,
import module sys.
raise an TypeError with an argument s.
call the method out.getvalue, return the result.
call the function to_current_timezone with an argument value, substitute the result for value.
try,
try,
call the method self._should_delete_form with an argument form, if it evaluates to true,
increment key by kwd_mark.
if part is contained in PALETTES,
in_tag is boolean False.
substitute cmd for self.cmd.
if arg is an instance of unicode,
incomment is boolean False.
append list containing string '--no-location' to self.msguniq_options.
format self.template_with_clear with substitutions, substitute the result for value under the 'clear_template' key of, substitutions dictionary.
define the method __init__ with 2 arguments: self and tokens.
if _active has an attribute "value",
if output is true,
substitute cyclevars for self.cyclevars.
if attrs is not None,
define the function file_move_safe with 4 arguments: old_file_name, new_file_name, chunk_size set to multiple of integers 1024 and 64,
if base has an attribute 'declared_fields',
if opts.model is None.
if record.exc_info is true,
value under '_data' key of obj_dict is a dictionary created with tuples containing 2 elements: k and result of the function, self.getlist with an argument k, for every k in self.
define the function templatetag with 2 arguments: parser and token.
substitute value under the f.name key of the help_texts dictionary for value under the 'help_text' key of kwargs dictionary.
return default_key_func.
do nothing.
raise CommandError with an argument string 'Unknown serialization format: %s', where '%s' is replaced with format.
if length of bits is smaller than integer 2 or second last element of bits is not equal to 'as',
if LookupError or ImportError, renamed to e, exceptions are caught,
if LookupError exception is caught,
import module datetime.
return result,
yield choice.
define the method validate_unique with an argument self.
substitute value for the value under the name key of the self.cleaned_data dictionary.
define the function check_for_language with an argument lang_code.
if self equals to other return boolean False, otherwise return True.
call the method now.decode with an argument string 'utf-8', substitute the result for now.
if ValueError exception is caught,
call the function find_template with 2 arguments: template_name and dirs, substitute the result for template and origin.
from django.utils import six into default name space.
define the function method_decorator with an argument decorator.
try,
try,
if exception http.Http404 as e is caught,
evaluate the function smart_text with an argument value, return the result.
substitute obj for the value of the memo dictionary at the identity of the self object key.
substitute help_text for self.help_text.
call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.
for every medium in extend,
if bf.label is true,
import module threading.
if max_value is not None,
call the color_style method, substitute the result for self.style.
call the method self.main_help_text, append new line to it, write it to sys.stdout.
MONTHS_3 is an dictionary with 12 entries: result of the call to the function _ with an argument string 'jan' for 1, result of the call to the function _ with an argument string 'feb' for 2, result of the call to the function _ with an argument string 'mar' for 3, result of the call to the function _ with an argument string 'apr' for 4, result of the call to the function _ with an argument string 'may' for 5, result of the call to the function _ with an argument string 'jun' for 6, result of the call to the function _ with an argument string 'jul' for 7, result of the call to the function _ with an argument string 'aug' for 8, result of the call to the function _ with an argument string 'sep' for 9, result of the call to the function _ with an argument string 'oct' for 10, result of the call to the function _ with an argument string 'nov' for 11, result of the call to the function _ with an argument string 'dec' for 12.
get the value under the 'content-disposition' key of the meta_data dictionary, substitute second element of it for disposition.
content_length is integer 0.
return kwargs.
from django.utils.text import get_valid_filename into default name space.
base is an instance of Media class.
for every node in return value of the graph.leaf_nodes method called with the app_name argument,
ba_serializer is a instance of BadSerializer class, created with an argument exc.
call the function os.fdopen with arguments fd and mode, substitute it for _file.
from the base class of the SimpleCookie class call the method load with rawdata as argument.
substitute link for link_prev, link_next, key and result, respectively.
if e.connection_reset is false,
if exception OSError occurred,
if mail doesnt have an 'outbox' attribute,
evaluate the boolean expression, if first three characters of sample equals to string of bytes '\xef\xbb\xbf\', of if sample starts with codecs.BOM_UTF16_LE or sample starts with codecs.BOM_UTF16_BE, return the evaluated boolean expression.
if o.microsecond is true,
migrations_to_squash is a list created dynamically with elements: return value of the method executor.loader.get_migration called, with arguments al and mn, for every al, mn in executor.loader.graph.forwards_plan method return value called with 2 arguments: migration.app_label, migration.name, only if al equals migration.app_label.
if attachment is an instance of MIMEBase,
define the method __contains__ with self and key as arguments.
if not,
call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false', dest as a string 'interactive', default as boolean True help as a string 'Tells Django to NOT prompt the user for input of any kind.'.
raise an AttributeError exception with an argument string: "'%s' object has no attribute 'cleaned_data'", where '%s' is replaced with self.__class__.__name__.
from django.utils import six into default name space.
convert number into an integer and substitute it for number
remove the first element from self.backout, substitute the result for self.pointer.
call the method parser.parse with an argument tuple with an element string 'else' and end_tag, substitute the result for nodelist_true.
for every field_node in return value of the method node.getElementsByTagName with an argument string 'field'.
if not,
raise an DTDForbidden exception with arguments name, sysid and pubid.
import module os.
call the BaseConverter function with BASE2_ALPHABET as argument, store the result in base2.
define the function localize with 2 arguments value and use_l10n set to None.
self._handler_class is None.
define the method add_arguments with 2 arguments: self and parser.
try,
f.required is boolean False.
call the translation.get_language function, substitute the result for the value under the 'LANGUAGE_CODE' key of the context_extras dictionary.
mode is a string 'wb' is chunk is instance of the type bytes, otherwise mode is a string 'wt'.
self._empty is boolean False.
if template_name is an instance of list or tuple types,
widget is an instance of HiddenInput class
self._closable_objects is an empty list.
define the method push with 3 arguments: self, name and block.
increment bytes_read by length of bytes.
from django import http into default name space.
import module os.
objects_in_fixture is integer 0.
from django.core.management.base import BaseCommand, CommandError, CommandParser and handle_default_options into default name space.
for every tablename in tablenames,
substitute nodelist for self.nodelist.
call the method self._lib.Client with self._servers and pickleProtocol set to pickle.HIGHEST_PROTOCOL as arguments, substitute the result for self._client.
call the method self.validate_name with arguments project_name and string "project".
if relative_dir is true,
get the value under the 'id' key of the final_attrs dictionary, substitute it for id_, if it doesnt exists, id_ is None.
slice the rawdata from i-th to the j-th element, replace with it '%r' in the string "bad end tag: %r", use it to call the method self.error.
substitute new_result for result.
append string '%%(%s)s' to singular, where '%s' is replaced with t.contents.
for every finder in sys.meta_path,
if self.match is not None,
if not,
call the method json.__version__.split with an argument '.', if the result is respectively greater than list containing strings '2', '1' and '3',
call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.error" appended to __name__, assign the result to the value under the string ".moves.urllib_error" appended to __name__ key of the sys.modules dictionary, and to the value under the string ".moves.urllib.error" appended to __name__ key of the sys.modules dictionary.
append child.data to the inner_text list.
get '_filter_name' attribute of the func object, if it exists, substitute it for filter_name, if not, filter_name is None.
skip this loop execution.
if value is None,
define the method __bytes_cast with an argument self.
for every v in self.value call the function force_text with an argument v, add the result to a set, substitute set of the results for self.value.
otherwise if common_prefix is None,
define the method render_option with 4 arguments: self, selected_choices, option_value and option_label.
otherwise if safe_input is true,
if self.verbosity is greater of equal to integer 1,
result_args is a list containing an empty list.
replace every occurrence of '\n' in s with '\\n'.
substitute localized_fields for value under the 'localized_fields' key of attrs dictionary.
join into a file path: django_dir, 'conf', 'locale', locale, 'LC_MESSAGES' and string '.po' appended to domain, substitute the result for django_po.
substitute BOOL for LockFileEx.restype.
try,
substitute options for self.options.
self.settings_exception is None.
from django.utils import timezone into default name space.
substitute sign for self.sign.
call the method self.create_token with 2 arguments bit and in_tag, append the result to result.
return an integer 0.
return an empty string.
yield one element of the itterable obj.
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database', default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a database to flush. Defaults to the "default" database.'.
define the method path with arguments self and name.
return yes.
call the method self.can_write.release.
define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.
call the datastructures.MergeDict with self.POST and self.GET as arguments, assign the result to self._request.
if tag is not contained in TemplateTagNode.mapping,
derive the class SafeMIMEMessage from the MIMEMixin and MIMEMessage base class.
do nothing.
from collections import OrderedDict into default name space.
__all__ is an list containing string 'SelectDateWidget'.
errors is an empty list.
open file named file_or_path for reading, store the file object handle in file.
if response is None,
return None.
define method add_arguments with self class instance and parser as arguments.
get the value under the 'shutdown_message' key of the options dictionary, if it exists substitute it for shutdown_message, if not, shutdown_message is an empty string.
if other is contained in self.children, return boolean True, otherwise return boolean False.
define the method process_default with self class instance and event as arguments.
raise an OverflowError exception with an argument string 'dklen too big'.
create_models is an empty list.
ns_resolver is class instance of a class RegexURLResolver, created with 2 arguments: ns_pattern and resolver.url_patterns.
for every app_label in app_labels,
if KeyError exception is caught,
from xml.dom import pulldom into default name space.
__Y2 is a raw string '(?P<year>\d{2})'.
request is None.
join elements of code_list in a string, separated by ';', format string '\x1b[%sm' with it, append text to the result if exists, return the string.
call the method __init__ from the base class of the class Select, with an argument attrs.
from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.
substitute .error_class for self.error_class.
self._leftover is an empty string.
instantiate class Header with 3 arguments: value, string 'utf-8', maxlinelen set to sys.maxsize, call the encode method on it, convert the result into a string and substitute it for value.
read size number of bytes from self.stream stream, store the result in the result.
call the method re.split with 2 arguments: string '\n{2,}' and value, substitute the result for paras.
do nothing.
self._container is a list containing element value.
_wrapped is None.
if not,
substitute sysid for self.sysid.
from __future__ import unicode_literals into default name space.
if not,
substitute offset for self.__offset.
if ImportError exception is caught,
call the function ignore with an argument pattern, for every pattern in ignore_patterns, if any resulting element is true, return boolean True, otherwise return boolean False.
call the method datetime.utcnow, on the result call the method replace with an argument tzinfo set to utc, return the result.
convert self.file to string and append string '.py' to it, substitute the result for thefile.
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary is not equal to other, return boolean True, otherwise return False.
define the function get_tag_uri with 2 arguments: url and date.
if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,
from django.utils.encoding import force_text and iri_to_uri into default name space.
daemonize is boolean False.
substitute last for value under the PREV key of the link dictionary.
call the method os.dup2 with 2 arguments: result of the method si.fileno and result of the method sys.stdin.fileno.
define the method start_object with argument self and obj.
increment i by one.
if ValueError or TypeError exceptions occurred,
from django.core.management.sql import sql_delete into default name space.
call the method timezone.tzname with an argument None, return the result.
if self doesnt have an '_ordering' attribute,
if squash is false,
call the force_text function with an argument value, return the result.
remove the 'use_natural_primary_keys' key from the options dictionary and substitute it for self.use_natural_foreign_keys, if the key doesnt exists substitute self.use_natural_keys for self.use_natural_foreign_keys.
property decorator,
return exit_code.
filter_raw_string is a raw string "^(?P<constant>%(constant)s)|^(?P<var>[%(var_chars)s]+|%(num)s)| (?:\s*%(filter_sep)s\s* (?P<filter_name>\w+)(?:%(arg_sep)s(?:(?P<constant_arg>%(constant)s)|(?P<var_arg>[%(var_chars)s]+|%(num)s)))?)", where 'constant' is replaced with constant_string, 'num' with raw string '[-+\.]?\d[\d\.e]*', 'var_chars' with string "\w\.", 'filter_sep' with result of the function re.escape called with an argument FILTER_SEPARATOR, anbd 'arg_sep' with result of the function re.escape called with an argument FILTER_ARGUMENT_SEPARATOR.
call the function allow_lazy with an argument words, substitute the result for words.
call the function _generator, join the result into a string, return the result.
return string 'StopUpload: Consume request data, then halt.'.
define the method self and blocks.
call the method context.render_context.push.
call the method self.handle_label with 2 arguments: label and unpacked dictionary options, substitute the result for label_output.
child_nodelists is an tuple with an element 'nodelist'.
for every i and line in enumerated iterable lines,
call the method parser.parse with an argument tuple with an element string 'endfilter', substitute the result for nodelist.
call the method self._convert_to_charset with arguments: header, string 'latin-1' and mime_encode set to boolean True, substitute the result for value.
substitute windll.kernel32.UnlockFileEx for UnlockFileEx.
if cnt is true and remained of dividing cnt with grouping is zero,
substitute var_name for self.var_name.
call the method re.search with 2 arguments: raw string '^[_a-zA-Z]\w*$' and name, if it evaluates to false,
try,
get _assertRegex attribute of the self object, call the result with 2 arguments: unpacked list args, and unpacked dictionary kwargs, return the result.
from django.utils.safestring import mark_safe and SafeData into default name space.
get the value under the app_label key of the directory_created dictionary, if exists and it is false,
if self.__stattag_text contains newline character,
define the function make_template_fragment_key with fragment_name and vary_on defaulting to None as arguments.
raise an InputStreamExhausted exception,
call the function render_value_in_context with 2 arguments: value and context, return the result.
call the method text.__html__, return the result.
output is an empty list.
raise an value.with_traceback exception with an argument tb.
call the callback function with request and dictionary argument param_dict as the arguments, substitute it for response.
root is an empty list.
if error.params is true,
get the value under the name key of the data dictionary, if it exists substitute it for value, if not, value is None.
define the method message_dict with an argument self.
substitute MONTHS for self.months.
from django.core.serializers.python import Serializer as PythonSerializer into default name space.
import module os.
substitute second element of bits without the first and last element for format_string.
optimizer is an instance of MigrationOptimizer class.
from functools import partial into default name space.
if self.pointer is smaller than length of self.subject, return boolean True, otherwise return False.
_supported is None.
if self.field.required is true and self.form has an attribute 'required_css_class' ,
clean_data is an empty list.
derive the class RawPostDataException from the base class Exception.
call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at least %(limit_value)d character (it has %(show_value)d), string 'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.
derive the class __proxy__ from the Promise base class.
from django.core.management.color import color_style into default name space.
call the function timezone.make_naive with 2 arguments value, current_timezone, return the result.
if data is true,
using_sysrandom is boolean False.
assign the bits elements to tag, this_value_expr, max_value_expr and max_width, respectively.
call the method Model._meta.get_all_field_names, substitute the result for model_fields.
from __future__ import unicode_literals into default name space.
append rel_to to string 'ForeignKey(, substitute the result for field_type.
from django.forms.widgets import HiddenInput into default name space.
otherwise if self.name exists and self.name file path exists,
append e to errors list for every e in all_issues, if checks.ERROR is lesser than or equal to e.level, and e.level is lesser than checks.CRITICAL.
define the method __delattr__ with self and name as arguments.
if six.PY3 is true or os.name equals a string 'nt',
call the self.stdout.write method, with string "  Unapplying %s..." with '%s' replaced with migration and ending set to '', as arguments.
call the function localize with 2 arguments: output and use_l10n set to context.use_l10n, substitute the result for output.
ns is a string "http://www.w3.org/2005/Atom".
substitute '%s' in string '%s-%s' with self.prefix and field_name and return it, if self.prefix is true, if not return field_name.
for every key in self,
if not,
if latest_date is None or item_date is greater than latest_date,
raise an CommandError with an argument string "You must supply at least one app label when using --empty.".
if not,
MONTHS is an dictionary with 12 entries: result of the call to the function _ with an argument string 'January' for 1, result of the call to the function _ with an argument string 'February' for 2, result of the call to the function _ with an argument string 'March' for 3, result of the call to the function _ with an argument string 'April' for 4, result of the call to the function _ with an argument string 'May' for 5, result of the call to the function _ with an argument string 'June' for 6, result of the call to the function _ with an argument string 'July' for 7, result of the call to the function _ with an argument string 'August' for 8, result of the call to the function _ with an argument string 'September' for 9, result of the call to the function _ with an argument string 'October' for 10, result of the call to the function _ with an argument string 'November' for 11, and result of the call to the function _ with an argument string 'December' for 12.
call the function mark_safe with an argument new_obj, substitute the result for obj.
if app_config.label is contained in loader.migrated_apps,
define the function ssi with 2 arguments: parser and token.
for every alternative in self.alternatives,
if value is not an instance of list or tuple types,
if label_suffix is not None substitute label_suffix for self.label_suffix, otherwise substitute return value of the function _ called with an argument ':' for self.label_suffix.
call the method self.style.MIGRATE_HEADING with an argument string "Will squash the following migrations:", write it to self.stdout.
return boolean True.
call the method context.push with an argument unpacked dictionary values, with the result as an argument,
raise an KeyError with an argument string "Unknown language code %s and %s.", where '%s' is replaced with lang_code, and generic_lang_code.
from datetime import date as real_date and datetime as real_datetime into default name space.
define the method __cast with an argument self.
raise an exception.
if name is false,
reverse order of parts, join them into a string, separated with '.', substitute the result for value.
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_serialization() method'.
self._regex_dict is an empty dictionary.
define the method clear with argument self.
derive the class Command from the BaseCommand base class.
define the method render with 2 arguments self and context.
call the method value.encode with an argument charset, substitute the result for value.
call the function force_str with argument self.obj, substitute the result for obj.
return value under the key key of d dictionary.
define the function get_cache_key, with request key_prefix set to None, method set to 'GET' and cache set to None as arguments.
derive the class URLNode from Node base class.
get 'getvalue' attribute of the self.stream object, if it exists and is callable,
if KeyError and TypeError exceptions are caught,
if self.field.label_suffix is not None, substitute self.field.label_suffix for label_suffix, otherwise substitute self.form.label_suffix for label_suffix.
finally perform,
if http_cookies.CookieError exception is raised,
if HTMLParseError or UnboundLocalError exceptions are caught,
split ip_str into parts by ':', for every x in the result, calculate length of x, if any is smaller than integer 4,
input_type is a string 'checkbox'.
define the method c with an argument self.
call the method self._assert_mutable.
for every key in keys,
call the function open_method with arguments: fixture_file and mode, substitute the result for fixture.
target_app_labels_only is boolean False.
call the method result.setlist with 2 arguments: return value of the function copy.deepcopy called with 2 arguments: key and memo, and return value of the function copy.deepcopy called with 2 arguments: value and memo.
call the method self._cache_flush_all.
call the self.style.MIGRATE_HEADING method with string "Running migrations:" as an argument, use the result as an argument for the call to the self.stdout.write method.
try,
derive class CachedDnsName from the object base class.
BLOCK_TAG_END is a string '%}'.
define the function _strip_once with an argument value.
ext_list is an empty list,
if match evaluates to False throw an exception with the string message 'unexpected call to parse_starttag()'.
call the mail.send method with fail_silently=fail_silently as argument.
define the method render with 4 arguments: self, name, value and attrs set to None.
help is a string "Prints the SQL statements for the named migration."
define the method __init__ with 3 arguments: self, schemes set to None and unpacked dictionary kwargs.
call the method self.check_migrations.
endless loop,
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
if ValidationError, renamed to e, is caught,
get the value under self._pk_field.name key of form._meta.widgets dictionary, if it exists substitute it for widget, if not, widget is an instance of HiddenInput class.
define the function compile_filter with 2 arguments: self and token.
derive the class InvalidPage from the Exception base class.
if IndexError exception is caught,
import threading.
define the method write with 2 arguments: self and content.
return nothing.
for every value in initial call the function force_text with an argument value, add the results into a set, substitute the resulting set for initial_set.
substitute list with an element block_name for parser.__loaded_blocks.
from django.utils import six into default name space.
convert expires to a string, use it as argument for the call to the function typecast_timestamp, substitute the result for expires.
if field equals NON_FIELD_ERRORS,
define the method extract with 2 arguments self and to_path.
define the method unparsed_entity_decl with arguments self, name, base, sysid, pubid and notation_name.
call the function re.compile with an argument string "([\u0080-\uffff])", substitute the result for ustring_re.
if issues is true,
return a string "UTC".
default_attrs is an dictionary with 2 initial entries: string '40' for 'cols' and string '10' for 'rows'.
define the function python_reloader with main_func and kwargs as arguments.
define the method __delitem__ with 2 arguments: self and key.
if ImportError exception is caught,
define the function send_mass_mail with, datatuple, fail_silently set to False, auth_user set to None, auth_password set to None,
define the method _setup with an argument self.
if num is greater than self._max_entries,
substitute fields for self.fields.
if value under the 'language' key of the self.feed dictionary is not None,
link is a list with 4 elements: last, root, key and result.
define the function close_caches with dictionary pair of elements kwargs as argument.
call the method parser.compile_filter with an argument value, substitute the result for value under the key key of kwargs dictionary.
otherwise if value is boolean False,
multiply delta.days, integer 24, integer 60 and integer 60 add delta.seconds to it, substitute the result for since.
call the method query.lists, substitute the result for query.
append e to warnings list for every e in all_issues, if checks.WARNING is lesser than or equal to e.level, and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.
define function get_max_age with response as an argument.
if not,
substitute message.error_dict for message.
substitute new_method_name for new_method_name.
decorator function register.filter with an argument is_safe set to boolean True.
define the function pretty_name with an argument name.
call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the item dictionary.
if error is not an instance of ValidationError,
if TypeError or ValueError exceptions are caught,
call the method self.represent_scalar with 2 arguments: string 'tag:yaml.org,2002:str' and data converted into a string, return the result.
return string '0'.
if self does not have an '_request' attribute,
substitute stream for self.stream.
if second_item is an empty list,
skip this loop iteration,
strip whitespaces from both ends of unicode_value, substitute the result for value.
call the method parser.add_argument with 4 arguments: string '--testrunner', action set to string 'store', dest set to 'testrunner', and help set to a string 'Tells Django to use specified test runner class instead of the one specified by the TEST_RUNNER setting.'.
import module hashlib.
from django.conf import settings into default name space.
return a tuple with 3 elements: copyreg._reconstructor, tuple with 3 elements: self.__class__, object and None, and result of the method self.__getstate__.
import module os.
 if self.max_digits is not None and self.decimal_places is not None and whole_digits is grater than the difference of, self.max_digits and self.decimal_places,
derive the class StreamingHttpResponse from the HttpResponseBase base class.
if size is None or size is greater than self.remaining,
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS, and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.
if not,
if palette equals value under the NOCOLOR_PALETTE key of the PALETTES dictionary,
property decorator,
call the method self.xml.endElement with an argument string 'object'.
define the function unescape_string_literal with an argument s.
from django.utils.html import escape into default name space.
write string "No changes detected" to self.stdout stream.
if not,
if value has an attribute '__iter__' and value is not an instance of six.text_type and value doesnt have an attribute '_meta',
call the method self.add_prefix with an argument fieldname, substitute it for prefix.
call the method _trans.gettext_noop with an argument message.
if i-th element of subject is '"' character or "'" character,
if not,
define the method generic_tag_compiler with 9 arguments: parser, token, params, varargs, varkw, defaults, name, takes_context,
bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for chunk_size.
convert text without first element to hexadecimal integer, substitute it for c.
from django.conf import settings into default name space.
define the function truncatewords with 2 arguments value and arg.
subtract timestamp from the return value of the function time.time, substitute the result for age.
define the method next with an argument self.
define the function ljust with 2 arguments value and arg.
try,
__all__ is a tuple, containing strings 'NamedTemporaryFile' and 'gettempdir'.
derive class CacheKeyWarning from the DjangoRuntimeWarning base class.
from django.utils.functional import cached_property into default name space.
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
if middleware has an attribute 'process_response',
define the function ugettext with an argument message.
msg is an instance of a class SafeMIMEMultipart, created with arguments: _subtype set to self.mixed_subtype and encoding set to encoding.
if urlconf_name is true,
substitute self.__offset.seconds for offset.
for every path in data,
call the method node.render with an argument context, append the result to the nodelist.
raise an exception.
substitute value under the 'use_threading' key of the options dictionary for threading.
return self.DSTOFFSET.
if character ':' is not contained in template,
decorator function register.filter with an argument is_safe set to boolean False.
otherwise if field is contained in the result of the call to the method self._errors.keys,
from django.template.base import TemplateSyntaxError, Library, Node, TextNode, token_kwargs and Variable into default namespace.
define the method flatten with an argument self.
call the method self.var1.resolve with 2 arguments: context and boolean True, substitute the result for val2.
do nothing.
with return value of the function transaction.atomic with using set to db as arguments, perform the following,
if tag is false or current_len is greater or equal to truncate_len,
define the method __str__ with an argument self.
call the function urlquote with 2 arguments value and unpacked dictionary kwargs, return the result.
raise an BadSignature exception with an argument string 'Signature "%s" does not match', where '%s' is replaced by sig.
from django.utils import six into default name space.
call the method field.rel.to._default_manager.db_manager with db as argument, call the get_by_natural_key method on the result with, unpacked list field_value as an argument, substitute the result for obj.
from django.utils.six.moves import xrange into default name space.
if autoescape is true and value is not an instance of SafeData, autoescape is boolean True, otherwise it is boolean False.
import module re.
parsed is boolean False.
append ch to quant.
define the method __str__ with an argument self.
remove config dictionary element under '()' key, substitute it for c.
increment weight by integer 2.
import module sys.
derive the class MaxLengthValidator form the BaseValidator base class.
append newline character to msg.
call the method s.encode with an argument string 'utf-8', substitute the result for s.
if first element of new_name is digit,
derive the class Promise from the object base class.
substitute last four elements of base for base.
from django.core.management.base import CommandError into default name space.
if loader is not None,
for every slots_var in slots,
from django.conf import settings into default name space.
if an exception of the type UnicodeDecodeError, renamed to e, is caught,
if ValueError or TypeError are caught,
call the method df.format with an argument format_string, return the result.
define the method is_valid with an argument self.
call the function lazy with 2 arguments: pgettext and six.text_type, substitute pgettext_lazy.
skip this loop iteration.
register.tag decorator,
call the method self.render_option with 3 arguments: selected_choices, option_value and option_label, append the result to output.
substitute code for self.code.
from _systemrestart import SystemRestart into default name space.
raise an TemplateDoesNotExist exception.
derive the class EmailMultiAlternatives from the EmailMessage base class.
if match is true,
if not,
substitute urlconf_name for _urlconfs.value.
signal is a string 'signals'
call the method handler.startElement with 2 arguments: string "item" and result of the method self.item_attributes with an argument item.
define the method _handle_m2m_field_node with arguments self, node and field.
open file named path in 'rb' mode, with file descriptor as f,
for every name in self.fields,
if value is contained in self.empty_values,
return result.
if match is true,
call the method self.as_data, for every error in the result.
define the method initial_form_count with an argument self.
return initial.
return ip_str.
if only_initial is false,
if var is false or whitespaces are contained in var,
if not,
if value is Nan, or value is contained in return value of the Decimal called twice with string 'Inf' and with string '-Inf',
with lock,
server_address is a tuple containing 2 initial elements: addr and port.
call the method parser.add_argument with 2 arguments: string 'name' and help set to string 'Name of the application or project.'.
if not,
if not,
extend collect list with _builtin_context_processors.
substitute file_name for self.file_name.
if ImportError exception is caught,
if value under the 'feed_url' key of the self.feed dictionary is not None,
import module os.
return boolean True.
if tok starts with "'",
replace '%s' in string "  Optimized from %s operations to %s operations." with lengths of operations and ew_operations, respectively, write it to self.stdout stream.
for every pattern in self.url_patterns,
return new_value.
if self.output_transaction is true,
kwargs is an empty dictionary,
convert value into a string, take character at the negative arg index, convert it into an integer, return it.
import module datetime.
if bytes is false,
raise an exception.
status_code is an integer 410.
derive the class StopUpload from the UploadFileException base class.
for every hextet in new_ip,
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
decrement truncate_len by integer 1.
remove first element from styles, split it by the '/' character, substitute the result for colors.
if encoding equals to string 'utf-8'.
set result attribute name to value value.
call the method form.save_m2m.
import rlcompleter.
if ValueError exception is caught,
if not,
EventHandler.modified_code is FILE_MODIFIED.
define the method __new__ with 4 arguments: mcs, name, bases and attrs.
if autoescape is true,
LOCK_SH is a integer 0.
from django.utils.encoding import python_2_unicode_compatible into default name space.
skip this loop iteration.
call the function force_text with an argument v, for every v in args, put the results in a text_args list.
split host from the right side into 2 parts at the ':', substitute the result for bits.
call the method connection.creation.sql_for_pending_references with 3 arguments: refo, style and pending_references, use the result as an argument for the call to the method final_output.extend.
from threading import RLock.
property decorator,
call the method parser.add_argument with 5 arguments: string '--keep-pot', action as a string 'store_true', dest as a string 'keep_pot', default as boolean False and help as a string "Keep .pot file after making messages. Useful when debugging."
otherwise if token_string starts with BLOCK_TAG_START,
if leading is true,
get the value under the 'content-type' of the meta_data dictionary, if it exists assign it to content_type, content_type_extra, if not, content_type is an empty string and content_type_extra is an empty dictionary.
define the method __bool__ with an argument self.
raise an TemplateSyntaxError exception with an argument string '"filter %s" is not permitted.  Use the "autoescape" tag instead.', where '%s' is replaced with filter_name.
_fields_ is a list containing 2 tuples: first tuple contains: string '_offset' and _OFFSET, second contains: string 'Pointer' and PVOID.
try,
define the function do_if with 2 arguments: parser and token.
define the method run_shell with an arguments self and shell set to None.
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for default_translation.
for every path in self.locale_paths,
call the method router.get_migratable_models with arguments app_config and connection.alias.
return length of value,
if TemplateSyntaxError, renamed to e, exception is caught,
substitute second element of plan_node for title.
return last element of value.
do nothing.
convert value into an floating point number, substitute it for value.
call the method self.get_full_path, append the result to string '//', substitute it for location.
if ValueError exception is caught.
return an empty string.
try,
try
return an empty string.
from importlib import import_module into default name space.
define the method n with an argument self.
if dirname is true and dirname path doesnt exists,
internal_use_only is boolean False.
raise an exception,
output_transaction is boolean True.
derive the class Command from the base class BaseCommand.
increment piece by firs element of elt.
add row_data to seen_data set.
substitute file.mode for self.mode.
call the function re.compile with 2 arguments: raw string '<.*?>|(.)' and bitwise OR performed with 2 operands, re.U and re.S, substitute the result for re_chars.
call the method parser.add_argument with 5 arguments: string '--noinput', action as a string 'store_false', dest as a string 'interactive', default set to boolean True, and help as a string 'Tells Django to NOT prompt the user for input of any kind.'.
define the method tags_available with argument self.
if self._validate_unique is true,
for every d in reversed list self.dicts,
call the function copy with an argument base class of the class BaseContext, substitute the result for duplicate.
call the method router.db_for_read with self.cache_model_class as argument, substitute the result for db.
call the function date_format with 2 arguments: value, string 'DATETIME_FORMAT' and use_l10n as use_l10n, return the result.
for every child in node.childNodes,
if path starts with string 'http://' or string 'https://' or with string '/',
call the function get_default_timezone, substitute the result for self.timezone.
return value
call the method validate with an argument value from the base class of the class ChoiceField.
for every field in model._meta.fields,
substitute elements of tuple boundary to end and next, respectively.
try,
assign values under the 'app_label' and 'migration_name' keys of the options dictionary to the app_label and migration_name, respectively.
if self.verbosity is greater than integer 1,
from django.conf import settings into default name space.
code is a string 'max_length'
substitute 'n' for answer.
if use_l10n is true, or use_l10n is None and settings.USE_L10N is true,
call the method re_newlines.sub with 2 arguments: '\n' and text, return the result.
append '-' to digits.
if num_loopvars is greater than integer 1, unpack is an boolean True, otherwise is an boolean False.
substitute name for self.name.
import module os.
from unittest import import everything.
define the function get_storage_class with argument import_path=None defaulting to None.
property decorator,
call the method self.render, return the result.
from django.core.files.move import file_move_safe into default name space.
substitute idx-th element of self.choices for choice.
biggest_number is maximum numbers element.
joint prefix, character '.' and self._callback_str together, substitute the result for self._callback_str.
raise an UnrecognizedArchiveFormat exception with an argument string "Path not a recognized archive format: %s", where '%s' is replaced with filename.
if ImportError exception is caught,
call the method timezone.make_naive with arguments: expires, timezone.utc, substitute the result for expires.
value under the 'unique' key of the extra_params dictionary is boolean True,
define the method has_key with 2 arguments: self and key.
return base.
BLOCK_CONTEXT_KEY is a strign 'block_context'.
call the method self.validate_key with argument key.
for every pythonrc in tuple containing 2 elements: return value of the function os.environ.get called with a string "PYTHONSTARTUP", and string '~/.pythonrc.py' as tuples second element.
return result.
from threading import local into default name space.
call the method utility.execute.
evaluate the function smart_text with argument self.name, if exists, or an empty string, if not, return the result.
split token.contents into separate words, substitute the first element of the result for command.
define the function center with 2 arguments value and arg.
define the method save_new with 3 arguments: self, form and commit set to boolean True.
try,
call the method self.check with 2 arguments app_configs set to app_configs, display_num_errors set to display_num_errors, return the result.
call the method self.set with key, value, version incremented by delta, as arguments.
increment year by integer 1900.
import module re.
if KeyboardInterrupt exception is caught,
split path in two parts by '/' character, return the result.
call the method field.rel.get_related_field, substitute the result for field.
call the function self.filter_expr.resolve with an argument context, return the result.
if e has an attribute 'code' and e.code is contained in self.error_messages,
request_finished is a instance of a Signal class.
raise an ValueError exception with an argument string "Base36 input too large".
convert language to lowercase and return it.
define the method __init__ with an argument self.
call the function dateformat.format with 2 arguments: value and result of the function get_format called with 2 arguments: format, if its true, otherwise string 'DATE_FORMAT' and use_l10n as use_l10n, return the result.
delete the value under the 'content-type' key of the self dictionary.
define the method clean with arguments self and value.
if IndexError exception is caught,
define the function mail_managers with subject, message, fails_silently set to boolean False, connection set to None,
skip this loop iteration.
yield string "# You'll have to do the following manually to clean this up:" as the result. yield string "#
call the method bytes_to_text with 2 arguments: value and self.encoding, substitute the result for value.
call the function six.reraise with 3 arguments: UnreadablePostError, UnreadablePostError instantiated with unpacked list e.args, third element of the result of the function sys.exc_info.
if Exception exception is caught,
define the method _iteritems with an argument self.
args is an empty string.
call the function new_method_proxy with an argument getattr, substitute the result for __getattr__.
call the method handler.addQuickElement with 2 arguments: string 'author' and value under the 'author_email' key of the item dictionary.
try,
call the method self.filter with 3 arguments: name, func and unpacked dictionary flags, return the result.
define the method to_python with arguments self and data.
call the method self._send with argument message, substitute the result for sent.
get the attribute 'Media' of the cls object, if it exists substitute it for definition, if not definition is None.
define the method write with 2 arguments: self and s.
extend the value under the field key of the self._errors dictionary with error_list.
call the method self.get_available_name with argument name, substitute the result for name.
if s is an instance of six.text_type or Promise,
from django.utils.six.moves import reduce into default name space.
raise an NotImplementedError with an argument string 'Subclasses must implement this method.'.
define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.
call the function walk_to_end with 2 arguments: ch and pattern_iter.
if last element of host equals character ']',
if fields is true and f.name is not contained in fields,
try,
append e to debugs list for every e in all_issues, if e.level is lesser than checks.INFO and result of the method e.is_silenced in false.
import module mimetypes.
return attrs.
call the function write with an argument end.
call the method model_to_dict with 3 arguments: instance, opts.fields, opts.exclude and substitute the result for object_data.
append value to self._closable_objects list.
if deps is true,
if form._meta.fields is an instance of tuple type,
if StandardError, renamed to e, exception is caught,
substitute DEFAULT_MAX_NUM for max_num,
from django.core import signals into default name space.
call the function re.compile with 2 arguments: raw string '^https?://\[?\w' and re.IGNORECASE, substitute the result for simple_url_re.
get the field.rel.field_name from the obj, substitute it for obj_pk.
call the function parser.compile_filter with an argument arg for every arg in args from first element to the end, append the results into a list, substitute it for value.
import module os.
call the method self.validate_key with argument key.
if data is instance of Node and data.negated is false, and if data.connector equals conn_type or length of data equals integer 1,
define the method __getitem__ with 2 arguments: self and key.
plural is an empty list.
define the method _cache with argument self.
get _assertRaisesRegex attribute of the self object, call the result with 2 arguments: unpacked list args, and unpacked dictionary kwargs, return the result.
program is string 'msgfmt'
define the method __init__ with 3 arguments: self, tup and hash set to hash.
compile a regex from raw string '^\.\s*(\w+)\s*', substitute it for DOT_PATTERN.
raise an InvalidTemplateLibrary exception with an argument string "Template library %s does not have a variable named 'register'", where '%s' is replaced with taglib_module.
define the method clear_checkbox_id with 2 arguments: self and name.
call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,
m2m_value is an lambda function with value as an argument, return value is the result of the method value.natural_key.
call the method __init__ from the base class of the class CharField, with arguments unpacked list args and unpacked dictionary kwargs.
call the method os.chdir with an argument our_home_dir.
raise an TemplateSyntaxError exception with an argument string "Could not parse the remainder: '%s' from '%s'", where '%s' is replaced with elemnts of token from upto index till the end, and token.
domains is a tuple with element string 'django'.
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
if not,
replace '%s' in string ', HTTP response headers must be in %s format' for charset, append it to e.reason.
if ValueError exception is caught,
derive the class LoadNode from Node base class.
increment num_args by one.
import module operator.
call the function os.path.realpath with an argument d, use the result as an argument for the call to the function os.path.abspath, use the result as an argument for the call to the upath function, for every d in dirs, append the results into a list, substitute the resulting list for dirs.
context is an instance of a class Context, created with 2 arguments: dictionary created by apllying options to unpacked dictionary containing 3 entries: name for base_name, top_dir for base_directory and docs_version for 'docs_version' and autoescape set to boolean False.
define the method __init__ with 7 arguments: self, request, template, context set to None, content_type set to None, status set to None and current_app set to None.
parts is an empty list.
define the function make_list with an argument value.
if labels is true and f.name is contained in labels,
call the function copy with an argument self, substitute the result for new_context.
split arg by ':', for every x in result,
if lang_code is true,
define the function wordcount with an argument value.
decorator function register.filter with an argument is_safe set to boolean True.
do nothing.
if not,
derive the class Parser from the base class object.
if this_bases is None,
if ch equals string '+',
return retval.
try,
if ending is true and msg doesnt end with ending,
model is None.
nofollow_attr is an empty string.
call the function sql_all with 3 arguments: app_config, self.style and connection, substitute the result for statements.
derive the class EscapeData from object base class.
remove first two elements from bits.
tt is a tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the method dt.weekday, ingeter 0 and integer 0.
define the method close with argument self.
self._num_pages is a integer 0.
call the function mark_safe with an argument, elements of bits joined into a string, return the result.
if IOError exception is caught,
derive the class CommentNode from Node base class.
for every migration_name in migration_names,
from django.utils.six.moves.urllib.parse import quote, quote_plus, unquote, unquote_plus, urlparse, urlencode as original_urlencode.
return boolean False.
call the method blankout with 2 arguments: part and 'P', write the result to out.
call the method call_command with 3 arguments, string 'loaddata', unpacked list fixture_labels and unpacked dictionary containing 1 element: verbosity for 'verbosity'.
define the method z with an argument self.
if length of bits is not equal to integer 2,
derive the class Token form the base class object.
call the function os.stat with an argument filename, substitute the result for st.
for every migration in migrations_to_squash,
derive the class ZipArchive from the BaseArchive base class.
define the get_many method with self class instance, keys and version set to None as arguments.
if new_name ends with a string '_',
call the method tpl.format with an arguments self.name, self.sysid and self.pubid.
call the function force_text with 2 arguments: src and settings.FILE_CHARSET.
if KeyError exception is caught,
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
subtract i from len_values, substitute the result for value under the 'revcounter' key of the loop_dict dictionary.
define the method end_object with arguments self and obj.
call the function lazy with arguments _get_val and six.text_type, substitute the result for _get_val.
for every key and value in list created out of the elements of the result of the call to the method attrs.items,
substitute pattern.regex.pattern for p_pattern.
call the function sys.exit with an integer 1 as an argument.
call the addr.encode method with string 'ascii' as an argument.
define the method exit_command with an argument self.
raise an CommandError exception with an argument string "Django doesn't know which syntax to use for your SQL statements,\n" "because you haven't properly specified the ENGINE setting for the database.\n see: https://docs.djangoproject.com/en/dev/ref/settings/#databases".
define the method ipython with an argument self.
if not,
if length of value is greater or equal to integer 2 and first and last elements of value are an empty string,
call the self.incr method with key, negative delta and version set to version as arguments.
define the method to_python with arguments self and value.
increment Tok.num with an integer 1.
_iteritems is a string "iteritems".
define the method __init__ with 3 arguments: self, token_type and contents.
call the method self.tag_function with an argument name, return the result.
get _itervalues attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable, return it.
if self has an 'error_dict' attribute,
substitute RadioChoiceInput for choice_input_class.
substitute complain for extend.
try,
raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag library: %s", where '%s' is replaced with taglib and e.
return boolean True.
if attrs is false, make it an empty dictionary.
if default_kwargs exists, substitute it for self.default_kwargs, otherwise self.default_kwargs is an empty dictionary.
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
if length of bits is not equal to integer 3,
split is an empty list.
call the function timedelta with an argument seconds set to negative _time.timezone, substitute the result for self.STDOFFSET.
substitute xreadlines for __iter__.
if lang_code is contained in _supported and lang_code is not None and result of the function check_for_language, called with an argument lang_code is true,
register.tag decorator,
define the function module_has_submodule with 2 arguments: package and module_name.
try,
if not,
substitute _iterkeys for iterkeys.
raise an ValueError with an argument string "The %s could not be %s because the data didn't validate.", where '%s' is replaced with opts.object_name and fail_message, respectively.
get the value under the 'no_obsolete' key of the options dictionary, substitute it for self.no_obsolete.
call the function warnings.warn with 3 arguments: string "`%s.%s` method should be renamed `%s`.", formated with 3 elements: class_name, old_method_name and new_method_name, deprecation_warning and integer 2.
define the function server_bind with an argument self.
if mimetype is None,
call the method self.run_validators with an argument out.
define the method strptime with arguments self, value and format.
call the method widget.id_for_label with an argument id_, return the result.
return nothing.
call the method self.nodelist_false.render with an arguments context, return the result.
call the force_text with an argument message, yield the result.
append list containing string '--no-wrap' to self.msgattrib_options.
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
otherwise if call to the method finder.find_module with an argument name evaluates to true,
for every condition and nodelist in self.conditions_nodelists,
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
for every i in range of integers from integer 0 to the length of pieces decremented by one, with step of integer 3,
define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.
call the method self.tag, substitute the result for self.tagname.
return next element of the iterable it.
excluded_apps is an empty set.
call the method chunk.find with an argument bytes string '\r\n\r\n', substitute the result for header_end.
slice the list from the i-th to the endpos-th element, substitute it for self.__starttag_text.
define the function all_valid with an argument formsets.
try,
define the function handle_default_options with an argument options.
if self._delegate_bytes is true,
substitute value_not_found_exception for self.LibraryValueNotFoundException.
call the method self.close.
substitute index for end.
call the method imatch.group with an argument integer 1, substitute the result for g.
from django.utils.encoding import force_text into default name space.
while answer is false or answer is not contained in string "yn", perform the following,
for every key and value in data,
define the method __init__ with 4 arguments: self, nodelist, parent_name and template_dirs set to None.
define the method download with arguments self and url.
substitute '%s' with title in the string " [ ] %s", write it to the standard output.
buffer_ is None.
call the function sself.__cast with an argument self, divide the result with rhs and return the reminder of the division.
return an empty string.
call the method m.group with an argument string 'sec', convert the result into a string, substitute it for sec.
write string "  all instances of the codebase have applied the migrations you squashed," to self.stdout.
if AttributeError exception is caught,
call the get_complete_version function with version as argument, store the result in version.
derive the class VariableDoesNotExist form the base class Exception.
if not,
call the method dig2.digest, substitute the result for u.
return value under key key of self dictionary
if key is contained in cache,
define the method nud with 2 arguments self and parser.
call the initialization method UnicodeDecodeError.__init__, with self instance of this class and *args as arguments.
join callback.__module__, character "." and callback.__class__.__name__ together, substitute the result for lookup_str.
field_output is an list containing 2 elements: return value of the function qn called with an argument f.name, and return value of the function f.db_type called with an argument connection set to connection.
return lookup_view.
return default.
call the pickle.dumps function with value and pickle.HIGHEST_PROTOCOL as arguments.
if not,
if length of args is smaller than integer 2,
define the method key_to_file with self class instance, key and version defaulting to None as arguments.
define the method __init__ with 5 arguments: self, data, encoder set to DjangoJSONEncoder, safe set to boolean True, and unpacked dictionary kwargs.
return nothing.
define the function do_translate with 2 arguments: message and translation_function.
if TypeError exception is caught,
call the function six.text_type with return value of the function bytes(s), encoding and errors as the arguments, substitute the result for s.
derive the class Command from the BaseCommand base class.
call the method cursor.execute with string "DELETE FROM %s" as argument, substitute the '%s' with table.
do nothing.
call the function format_html with 2 arguments: string "<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />", and csrf_token, return the result.
call the method literal_match.group with an integer 1, substitute the result for ip_address.
call the function __import__ with an argument name.
return boolean False.
call the method imatch.group with an argument integer 1, if it evaluates to true,
register.tag decorator,
if response has an attribute named 'render' and response.render is a callable function,
return an instance of SafeText, created with an argument data.
define the method __init__ with arguments self, name, value, base, sysid, pubid and notation_name.
for every role in termcolors.PALETTES list at the index termcolors.NOCOLOR_PALETTE,
instantiate class Truncator, with an argument value, call the method chars on the result with an argument length, return the result.
raise an TemplateSyntaxError exception with an argument string "'%s' cannot appear more than once in the same template", where '%s' is replaced with first element of bits.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
convert value into an integer.
if param is not in params and varkw is None,
join root and f into a file, substitute it for f.
derive the class File from the FileProxyMixin base class.
open the file self.name in mode or self.mode mode, whichever exists, assign the file handler to self.file.
do nothing.
convert candidate to a string.
derive the CommandParser class from the ArgumentParser base class.
return obj.
return input_val.
if ImportError, renamed to e, exception is caught,
call the method execute form the base class of the class Command, with 2 arguments: unpacked list args and unpacked dictionary options.
for statements is sql,
if not,
substitute arg converted into an integer for length.
from django.core.management import call_command into default name space.
call the method self.validate_key with argument key.
try,
define the method __init__ with 6 arguments: self, dict_ set to None, autoescape set to True, current_app set to None, use_l10n set to None and use_tz set to None.
try,
if not,
call the method cursor.execute with string "SELECT cache_key, expires FROM %s WHERE cache_key = %%s" as argument, substitute the '%s' with table and list containing key, respectively.
substitute self.remaining for size.
call the method parser.parse with an argument tuple with an element string 'endautoescape', substitute the result for nodelist.
raise an exception.
if self.require_all_fields is true,
derive the class CacheClass from the base class FileBasedCache.
compile a regex from raw string '^\d+$', substitute it for DIGIT_PATTERN.
get the value under the 'charset' key of content_params dictionary, use it to call the codec.lookup method.
call the function timedelta with an argument minutes set to offset, substitute the result for self.__offset.
define the method write with 3 arguments: self, outfile and encoding.
call the method self.empty_form.is_multipart, return the result
define the method handle_m2m_field with arguments self, obj and field.
remove file path_to_remove,
if AttributeError exception is caught,
match is None.
from django.utils.module_loading import import_string into default name space.
return self.__to_language.
substitute second element of bits for tag.
call the method self._convert_to_charset with arguments: header and string 'ascii', substitute the result for header.
compile a regex from raw string '^\s*(\w+)\s*', substitute it for WORD_PATTERN.
from django.utils import six into default name space.
self.stream is None.
call the function force_text with an argument value, call the method translate on the result, with an argument _js_escapes, use the result as an argument for the call to the mark_safe function, return the result.
otherwise if first element of cwords is contanied in subcommands and is not equal to string 'help',
delete attr.
derive the class ModelChoiceField from the ChoiceField base class.
if register_to is true,
call the function validate_ipv4_address with an argument hextet.
do nothing.
define the method run_from_argv with arguments self and argv.
if not,
define lambda function that returns self.file.write field, use it as an argument for property function, put the result in write.
substitute basestring for string_types.
get the value under the 'CONTENT_TYPE' key of the self.META dictionary, if it starts with a string 'multipart/form-data',
if p is greater or equal to integer 0,
define lambda function that returns self.file.truncate field, use it as an argument for property function, put the result in truncate.
if ValueError exception is caught,
output_transaction is boolean False.
import module posixpath.
define the function parse_etags with an argument etag_str.
substitute boundary for self.boundary.
define the method as_text with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
widget.is_localized is boolean True.
get the value under the 'localize' key of the kwargs dictionary, substitute it for localize, if the key doesnt exists, substitute the result for localize.
if opts.managed is true,
define the method __init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
from django.utils import six into default name space.
to_delete is an empty set.
if value under the 'language' key of the self.feed dictionary is not None,
if token equals a string "not" and i incremented by 1 is lesser than l, and element of tokens at i incremented by 1 index equals a string "in",
import module sys.
if as_form is true,
def method add_arguments with self class instance and parser as the arguments.
call the method copy.deepcopy with 2 arguments: self._wrapped and memo, return the result.
call the method parser.add_argument with 3 arguments: string 'directory', nargs set to '?' and help set to string 'Name of the application or project.'.
call the method self.getvalue, return the result.
if urlconf is None,
call the function debug.technical_404_response with request and e as arguments, assign the result to response.
try,
define the function get_current_timezone_name.
return endpos.
if value under the 'socket' key of the options dictionary is false and values under the 'host' and 'port' keys of the options dictionary are true,
for every path in paths,
define the method clear with argument self.
raise an TemplateSyntaxError exception with an argument string "'ssi' tag takes one argument: the path to the file to be included".
self.children is an list with 2 elements: obj and data.
define the method extend_nodelist with 4 arguments: self, nodelist, node and token.
value under the self.var_name key of the context dictionary is an list with dictionary elements with 2 entries: key for 'grouper' and val converted into a list for 'list', for every key and val in result of the function groupby, called with 2 arguments: obj_list and lambda function with an argument obj and return value as a result of the function, self.resolve_expression called with 2 arguments obj and context.
define the method print_help with 3 arguments: self, prog_name and subcommand.
make a directory named original_path.
define method has_key with self class instance, key and version set to None as arguments.
for every option in option_label,
if the value under the 'test_flush' key of the options dictionary exists,
call the method build_request_repr with an argument self, return the result.
if key_prefix is None,
call the method msg.as_bytes, substitute the result for msg_data.
call the method parser.add_argument with an argument string '--settings'.
define the method _cache with argument self.
call the method connections.all(), perform the following for every db in the result,
define the method F with an argument self.
define the function is_ignored with arguments path and ignore_patterns.
skip this loop iteration.
call the function sanitize_address with arguments addr and email_message.encoding, for every addr in return value of the function email_message.recipients, store the results in a recipients list.
substitute self.start_doctype_decl for parser.StartDoctypeDeclHandler.
define the method render with 2 arguments self and context.
call the method self._setup.
seen_data is an empty set.
call the method token.split_contents, substitute the result for bits.
substitute body for self.body.
from django.utils.functional import cached_property into default name space.
call the method self._set_regex with an argument regex.
put cc into a list, assign it to self.cc.
define the function pgettext with 2 arguments: context and message.
append string '</select>' to output.
RESET is a string '0'.
decorator function register.filter with an argument is_safe set to boolean True.
return combined.
define the method label_tag with 4 arguments: self, contents set to None, attrs set to None and label_suffix set to None.
define the function to_locale with an argument language.
if ValueError exception is caught,
derive the class ModelForm from the base class in the return value of the method six.with_metaclass, called with 2 arguments: ModelFormMetaclass and BaseModelForm.
if not,
if TypeError exception is caught,
num is an integer 0.
call the method __init__ from the base class of the class TextInput, called with an argument attrs.
if second from the end element of args equals a string 'as',
if safe is not None,
if __name__ equals a string '__main__'.
define the method items with an argument self.
sum m and value under the medium key of the base dictionary, substitute it for m.
from django.utils.html import escape into default name space.
if not,
call the function to_python with an argument pk, substitute the result for pk.
call the method stream.read with an argument max_header_size, substitute the result for chunk.
raise an ImportError exception.
return self.
if chunk is empty,
for every cat in value under the 'categories' key of the self.feed dictionary.
skip this loop iteration,
define the method __iter__ with an argument self.
call the method tf.format with an argument format_string, return the result.
if not,
if app_name is an instance of BaseCommand,
import module threading.
if options is true,
return message.
call the function ugettext with 3 arguments, string "%(size)d byte", string "%(size)d bytes" and bytes, replace '%(size)d with bytes, substitute the result for value.
call the method handler.handle_raw_input with 5 arguments: self._input_data, self._meta, self._content_length, self._boundary, and encoding, substitute the result for result.
if file_name is false,
increment i by integer 1,.
call the function check_for_migrations with arguments app_config and connection.
try,
for every d in self.dicts,
define the method resolve_error_handler with arguments self and view_type.
import module os.
if fp is an instance of file and data is an instance of unicode and fp.encoding is not None,
call the function self.regex.search with an argument path, substitute the result for match.
define the method reverse_dict with an argument self.
define the method __init__ with 5 arguments: self, location set to None, base_url set to None, file_permissions_mode set to None, and directory_permissions_mode set to None.
output is an empty list.
define the function default with 2 arguments value and arg.
call the method self._setup.
define the handle method with self class instance and dictionary **options as arguments.
value is an instance of ConvertingList class, created with an argument value.
call the method parser.add_argument with string 'app_label', nargs set to charcter '?', help containing string, 'App label of an application to synchronize the state.' as arguments.
extend errors list with m for every m in e.error_list, only if m is not in errors.
call the flatten method of the self and other objects, if they are equal, return boolean True, if not return boolean False.
for every app_name and model_list in return value of manifest.items function,
intrans is boolean False.
define the function _parse_header_params with an argument s.
help is a string "Updates database schema. Manages both apps with migrations and those without.".
join 'conf' and 'locale' into a file path, if it is a directory,
call the method self._lock, with the result,
_builtin_context_processors is a tuple containing a string 'django.core.context_processors.csrf'.
call the getvalue method of the base class of the PythonSerializer class, return the result.
define the method _convert_to_charset with 4 arguments: self, value, charset and mime_encode set to boolean False.
call the method warnings.warn with 2 arguments: string "FastCGI support has been deprecated and will be removed in Django 1.9.", and RemovedInDjango19Warning.
from django.core.exceptions import ImproperlyConfigured into default name space.
otherwise if rhs is an instance of SafeBytes,
if OSError exception is caught,
if not,
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS, and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.
if not,
try,
if result is not None,
chain all errors elements into a list, return it.
from django.core.management.sql import check_for_migrations into default name space.
call the method self.widget.decompress with an argument initial, substitute the result for initial.
def the method __init__ with 5 arguments: self, object_list, per_page, orphans set to integer 0 and allow_empty_first_page set to boolean True.
get the value under the 'exclude' key of the options dictionary, substitute the result for exclude.
if found is true,
invalid_var_format_string is None.
append list with element inner to list containing first start elements of result, substitute it for result.
if self._populated is false,
return a tuple with an element self.__dt.
define the method new_file with arguments: self, file_name, unpacked list args and unpacked dictionary kwargs.
append truncate to text, return the result.
call the method warnings.warn with 2 arguments: string "The syncdb command will be removed in Django 1.9" and RemovedInDjango19Warning.
plural is an empty list.
raise an UnrecognizedArchiveFormat exception with an argument string "File object not a recognized archive format.".
delete attr.
derive the class Operator from the base class TokenBase.
import module random.
if 'pk' is contained in d,
if not,
element of data at the index last equals to newline bytes character.
for every entry in os.listdir function return value called with the argument path,
add string '%s.templatetags' to a list, where '%s' is replaced with app_config.name, for every app_config in result of the method apps.get_app_configs, append the resulting list to templatetags_modules_candidates.
raise an TemplateSyntaxError exception with an argument string "second argument to 'regroup' tag must be 'by'".
raise CommandError exception with "Cannot find a migration matching '%s' from app '%s'.", with '%s' substituted for migration_name and app_label, respectively, as arguments.
do nothing.
from io import BytesIO into default name space.
from django.forms.extras.widgets import SelectDateWidget into default name space.
from unittest2 import everything.
derive the class ModelFormMetaclass from the DeclarativeFieldsMetaclass base class.
message_context is None.
open the file named filepath in read mode, with file descriptor renamed to fp perform,
get greater value between integer 1 and result of subtraction of self.orphans from self.count, substitute it for hits.
divide x by length of to_digits, convert floor value of the result to an integer, substitute it for x.
append string '_0' to id_.
yield string "#" as the result.
if self.cdata_tag is not None,
define the function with_metaclass with 2 arguments meta and unpacked list bases.
return nothing.
raise NotImplementedError exception with an argument string 'Subclasses must implement this method.'.
return dec.
call the function load_command_class with arguments app_name and subcommand, substitute the result for klass.
return a string "<Variable Node: %s>", substitute '%s' with self.filter_expression.
substitute (i+1)-th element of list_ for next_item.
call the key.lower method for every key in self.extra_headers, join the results into a header_names.
substitute code_changed for fn.
return first 989 elements of formatted_subject.
define the method cfg_convert with 2 arguments: self and value.
return an empty string.
if content_length is lesser than integer 0,
define the function fields_for_model with 9 arguments: model, fields set to None, exclude set to None, widgets set to None,
if level is not None,
join usage elements in a string separated by newline characters, return it.
convert object self to a dictionary, return it.
if value under the "RUN_MAIN" key of the os.environ dictionary equals to string "true",
call the function _add_doc with 2 arguments: get_unbound_function and string """Get the function out of a possibly unbound function""".
perform the bitwise or operation on the next 6 operands pyinotify.IN_MODIFY pyinotify.IN_DELETE, pyinotify.IN_ATTRIB, pyinotify.IN_MOVED_FROM, pyinotify.IN_MOVED_TO and pyinotify.IN_CREATE, store the result in mask.
define the method __setstate__ with 2 arguments: self and state.
define the method parse_name with arguments self and fixture_name.
new_value is an empty list.
concatenate path and string '.%s', append the result to format_module_path.
return value.
yield node.
return boolean True.
call the function _bin_to_long with an argument u perform bitwise exclusive OR with 2 operands, previous result an result, substitute the result for result.
processors is an empty list.
self._callback_strs is an empty set.
call the function warnings.warn with an argument, string 'A secure pseudo-random number generator is not available on your system. Falling back to Mersenne Twister.'.
return self._regex.
derive the class RequireDebugFalse from logging.Filter base class.
define the method handle_uncaught_exception with self class instance, request, resolver and exec_info as arguments.
decrement self.number by one, multiply it by self.paginator.per_page, increment the result by one, return it.
try,
raise an LookupError with an argument lang_code.
call the function allow_lazy with 2 arguments: urlquote_plus and six.text_type, substitute the result for urlquote_plus.
return self._is_rendered.
return endpos.
if value under the 'author_link' key of the self.feed dictionary is not None,
define COOKIES method with self as the argument.
return value under key key of dict_ dictionary.
define the method label_from_instance with 2 arguments: self and obj.
do nothing.
append result of method six.text_type called with an argument digit to an list, for every digit in reversed order of digits, substitute the resulting list for digits.
call the method self.stdout.write with an argument string "Installed %d object(s) (of %d) from %d fixture(s)", substitute '%d' with self.loaded_object_count, self.fixture_object_count and self.fixture_count.
convert elements of defaultdict to list, substitute it for self.blocks.
import module datetime.
if tzinfo equals a string 'Z',
call the method self.handle_template with 2 arguments: value under the 'template' key of the options dictionary and base_subdir.
do nothing.
do nothing.
for every operation in migration.merged_operations, substitute '%s' in a string "
get the value under the template_name key of the self.cache_key dictionary, if it exists, substitute it for key, if not, substitute template_dirs for key.
try,
define compile_messages method with self class instance and locations as a arguments.
call the function _checkLevel with an argument level, use the result as an argument for the call to the function handler.setLevel.
call the method kwarg_re.match with an argument first element of bits, substitute the result for match.
from django.utils.encoding import force_unicode.
value is an string '1'.
if ImportError exception is caught,
return boolean True.
break from the loop execution.
from django.forms.utils import ErrorList into default name space.
define the function prepend_token with 2 arguments: self and token.
if self.field.label is None,
otherwise if message is an instance of the list type.
define the method __getstate__ with an argument self.
from django.template.base import compile_string, resolve_variable, unescape_string_literal and generic_tag_compiler.
streaming is boolean True.
call the function logging_config_func with an argument logging_settings.
derive class Command from base class BaseCommand.
if settings.USE_I18N is true,
try,
_iterlists is a string "lists".
return msgid.
if settings.configured is false,
call method executor.collect_sql with plan as the argument, substitute the result for sql_statements.
substitute self.deleted_forms for forms_to_delete.
define the method _ipython_pre_011 with an argument self.
if callback doesnt have '__name__' attribute,
if not,
MONTHS_AP is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'abbrev. month' and 'Jan.' for 1, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Feb.' for 2, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'March' for 3, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'April' for 4, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'May' for 5, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'June' for 6, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'July' for 7, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Aug.' for 8, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Sept.' for 9, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Oct.' for 10, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Nov.' for 11, result of the function pgettext_lazy with 2 arguments: strings 'abbrev. month' and 'Dec.' for 12,
substitute length for truncate_len.
append last_row to output.
decorator register with Tags.models and Tags.signals as arguments.
if AttributeError exception is caught,
data is an empty list.
_win is a tuple containing 1 initial boolean: True is sys.platform equals to string "win32", False otherwise.
msg is a string ""The included urlconf '{name}' does not appear to have any patterns in it. If you see valid patterns in the file then the issue is probably caused by a circular import."
raise an CommandError exception with an argument string "couldn't download URL %s to %s: %s", where '%s' is replaced with url, filename and e.
define the function wrapper with list args, and dictionary pair of values kwargs as arguments.
if ValueError exception is caught,
substitute changeset for get_git_changeset.cache.
call the function self.create_var with an argument token, return the result.
otherwise if value under the 'app_label' key of options dictionary is true,
call the method obj.save.
call the method self.check_test with an argument value, if it evaluates to true,
define the method handle_template with 3 arguments: self, template and subdir.
if self.asvar is None,
hard copy list self.dicts to duplicate.dicts.
call the method signing.get_cookie_signer with an argument salt set to sum of key and salt, call the method sign on the result with an argument value, substitute the result for value.
derive the class AssignmentNode form the base class TagHelperNode.
compile the regex "^https?://" with an argument re.I, substitute it for absolute_http_url_re.
if self has an attribute '_size'.
call the method d.as_tuple, substitute the result for tupl.
if stream_or_string is instance of bytes type,
from django.apps import apps into default name space.
for every key in self.keyOrder,
define the method is_checked with an argument self.
from django.utils.datastructures import MultiValueDict into default name space.
raise an Exception exception with an argument string "This %s instance cannot tell its position", where '%s' is replaced with self.__class__.__name__.
call the method self.resolve with an argument value, return the result.
call the function self._new_gnu_trans with an argument localedir, substitute the result for translation.
call the method data.getlist with an argument name, return the result.
week_number is integer 53.
raise an TemplateSyntaxError exception with an argument string, "'%s' tag takes at least 2 arguments and the second last argument must be 'as'", where '%s' is replaced with function_name.
derive class Command from the base class BaseCommand.
from django.core import signals into default name space.
if not,
if first element of cwords equals a string 'runfcgi',
if not,
return x.
from django.utils.translation import ugettext_lazy and pgettext_lazy into default name space.
if self.isolated_context is true,
define the method resolve_context with 2 arguments: self and context.
if value under the 'errlog' key of options dictionary is true,
import pylibmc.
raise an CommandError with an argument string "errors happened while running msgattrib\n%s", where '%s' is replaced with errors.
define the function next_char with an argument input_iter.
define the method _resolve with an argument self.
take last four elements of base and append ext to it, substitute result for ext.
if value is false,
define the __init__ method with 7 arguments: self, func, args, kwargs, url_name set to None, app_name set to None and namespaces set to None.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
derive the class Loader from the BaseLoader base class.
substitute '%s' in string ' # %s' with line, write it to out file.
substitute chr for int2byte.
call the method parser.parse with an argument tuple with 2 elements strings 'empty' and 'endfor', substitute the result for nodelist_loop.
raise an CommandError exception with an argument string 'You appear not to have the %r program installed or on your path.',
call the method parser.add_library with an argument temp_lib.
get the value under the key 'DJANGO_COLORS' of os.environ dictionary, if key doesnt exists return empty string, assign the result to DJANGO_COLORS.
call the method bf.css_classes, substitute the result for css_classes.
derive the class AutoEscapeControlNode from Node base class.
if NoReverseMatch exception is caught,
substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.
get the value under the part key of the PALETTES dictionary, update with it palette dictionary.
inplural is boolean False.
substitute SafeText for SafeString.
call the method os.unlink with an argument pot_path.
import module datetime.
call the self.get method with key and version set to version as arguments, substitute the result for value.
append a tuple containing 2 elements: model and deps to model_dependencies.
attachment is an instance of a class MIMEBase, created with the arguments basetype and subtype.
take subject elements from p-th to i-th index, substitute it for s.
define the method build_absolute_uri with an arguments self and location set to None.
define the method clean with an argument self.
call the function find_template_loader with an argument loader, append the result to cached_loaders.
try,
derive the class GenericIPAddressField from the base class CharField class.
call the method _trans.npgettext with 4 arguments context, singular, plural and number.
if StandardError, renamed to e, exception is caught,
define the method __getstate__ with an argument self.
if length of bits is not equal to integer 2,
if not,
for every name in formatters,
if UnicodeDecodeError exception is caught,
from django.utils.encoding import smart_text,  force_text and python_2_unicode_compatible into default name space.
define the method save_new_objects with 2 arguments: self and commit set to boolean True.
get the value under the 'localize' key of the kwargs dictionary, if it is true and self.widget equals to NumberInput,
define the method to_python with arguments self and value.
get the values under the keys 'app_label' and 'migration_name' of the options dictionary, substitute the results for app_label and migration_name, respectively.
instantiate Lexer class with 2 argumets src and origin, call the method tokenize from it, for every t in the result,
help is a tuple containing a string "Runs the command-line client for specified database, or the default database if none is provided.".
call the function templatize with 2 arguments: src_data and sliced orig_file, without first 2 elements, substitute the result for content.
attrs is a dictionary with model for 'model'.
call the method context.push with unpacked dictionary values as an argument, with the result perform,
if lib is true,
if ValidationError exception is caught,
get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
otherwise if length of bits equals integer 6,
if value under the 'updateddate' key of the item dictionary is not None,
return an instance of CommentNode class.
if s is the instance of the object six.text_type,
if kwargs is true,
msg is a string "Execution of %s failed: %s", with '%s' replaced by self.program and errors.
if options.pythonpath is true,
check if obj is instance of the object _PROTECTED_TYPES, return the boolean result.
self.error_dict is an empty dictionary.
if args is true,
raise an MultiPartParserError with an argument string 'multipartparser.exhaust() was passed a non-iterable or stream parameter'.
return boolean False.
if m is None,
substitute SafeBytes for SafeString.
call the method context.push, with the result perform,
substitute connection.introspection.table_name_converter for converter.
define the method __nonzero__ with an argument self.
define the function delete_many with self, keys and version set to None as arguments.
import module django.core.checks.compatibility.django_1_7_0.
derive the class ReferenceLocalTimezone from the tzinfo base class.
try,
call the method self.xml.endElement with an argument string "django-objects".
if not,
define the method __init__ with an argument self.
call the function six.reraise with 3 arguments: ImportError, instance of ImportError class created with an argument msg, and third element of result of the function sys.exc_info.
skip this loop iteration.
raise an TypeError exception with an argument: result of the method illegal_formatting.group called with an argument, integer 0, appended to a string "strftime of dates before 1900 does not handle".
if value under the 'liveserver' key of the options dictionary is not None,
derive the class SelectMultiple from the Select base class.
if self.use_ssl and self.use_tls are boolean True,
file is an instance of BytesIO class created with an argument: return value of the method data.read.
append flup_module to string "Can't import flup.", print it to the standard output.
call the function ensure_echo_on.
define the method auto_id with an argument self.
call the method pending_references.keys, put the result into a set and substitute it for not_installed_models.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument, string 'The inline foreign key did not match the parent instance primary key.' for 'invalid_choice'.
if vale is not an instance of ConvertingDict and value is an instance of dict type,
return t.
define the method exists with arguments self and name.
call the function glob.glob with an argument: string '/*' appended to self.default_locale_path converted into a string, filter out the results for which function os.path.isdir returns false, substitute the result for locale_dirs.
raise an ImproperlyConfigured exception with an argument string 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.'.
if mtime is different than the value of dictionary _mtimes under the key filename,
define the function find_filter with 2 arguments: self and filter_name.
define the function available_attrs with an argument fn.
return boolean True.
substitute safe for value under the 'safe' key of kwargs dictionary.
value_converters is a dictionary with 2 entries: 'ext_convert' for 'ext' and 'cfg_convert' for 'cfg'.
self.keyOrder is an empty list.
target is a list containing tuple with two elements app_label and migration.name.
substitute cache_choices for self.cache_choices.
self._done is boolean True.
try,
try,
define the method _get_image_dimensions with self class instance as the argument.
format string ' _(%s) ', with fmatch, write it to out.
define the method __add__ with arguments self and other.
want_unicode is boolean True.
substitute EmailInput for widget.
call the method o.isoformat substitute the result for r.
call the method self.Z, substitute the result for seconds.
if ttl is not None,
try,
from django.utils.translation import ugettext_lazy as _ into default name space.
call the method dict.__getitem__ with 2 arguments self and key, substitute the result for value.
raise an CommandError exception with an argument string "Type '%s help %s' for usage information.", where '%s' are replaced by: return value of the function os.path.basename called with first element of sys.argv as an argument, and second element of sys.argv.
call the method parser.add_argument with 4 arguments: string '--no-startup', action as a string 'store_true', dest as a string 'no_startup' and help as a string 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.'.
from django.core.handlers import base into default name space.
call the method parser.add_argument with 6 arguments: string '-e', string '--exclude', dest set to 'exclude', action set to 'append', default is a an empty list and help is a string '(use multiple --exclude to exclude multiple apps/models).'.
if length of bits is not equal to integer 6,
from django.utils.encoding import force_str and force_text into default name space.
derive class FileProxyMixin from the base class object, making it a new-style class.
call the function get_language, substitute the result for language_code.
timeout is a integer -1.
raise an exception of class ValueError, with string "Key '%s' not found" as argument, where '%s' is substituted for key.
raise an ValueError exception with an argument string "Don't mix *args and **kwargs in call to reverse()!".
_urllib_error_moved_attributes is a list with 3 elements: result of the call to the function MovedAttribute with 3 arguments: strings "URLError", "urllib2", "urllib.error", result of the call to the function MovedAttribute with 3 arguments: strings "HTTPError", "urllib2", "urllib.error" and result of the call to the function MovedAttribute with 3 arguments: strings "ContentTooShortError", "urllib", "urllib.error".
if token.contents equals string 'else',
try,
if errors is None,
substitute deconstruct for klass.deconstruct.
if self has an attribute 'clean_%s', where '%s' is replaced with name,
return host and an empty string.
for every app_dir in app_dirs,
call the function _trans.deactivate_all, return the result.
call the function m.group, if the result evaluates to true,
if code is not None,
if UnicodeEncodeError exception is caught,
substitute callable for callable.
if result is not None,
define the function decorator_from_middleware with an argument middleware_class.
call the function _strip_once with an argument value, substitute the result for new_value.
derive the class DictConfigurator from the BaseConfigurator base class.
substitute the last element of parts for ser_fmt.
import module re.
derive the BaseCommand class from the object base class.
try,
if source is None,
is_localized is boolean False.
return nothing.
s is an instance of StringIO class.
define the method super with an argument self.
app_configs is a list containing app_config.
assign obj to the obj field of self instance of this class.
call the function get_language, substitute the result for lang.
return filenames.
zip elements of result and result_args into a list of tuples, for every item and args in the result,
define the method fixture_dirs with an argument self.
substitute value for self.cookies dictionary value under the key key.
join app_dir and string 'sql' into a file path, use the result as an argument for the call to the function os.path.normpath, append the result to app_dirs.
return an instance of a class WidthRatioNode, created with 4 arguments: result of the method parser.compile_filter, called with an argument this_value_expr, result of the method parser.compile_filter called with an argument max_value_expr, return value of the method parser.compile_filter called with an argument max_width and asvar as asvar.
if not,
if values is None,
nodelist_false is an instance of NodeList.
match regex datetime_re with value, substitute the result for match.
try,
from django.utils.html import avoid_wrapping into default name space.
define the method nud with 2 arguments: self and parser.
post is a string '<could not parse>'.
from django.utils.translation import ugettext_lazy,  ugettext as _ and pgettext into default name space.
if field is not None,
import module django.
substitute max_length and min_length for self.max_length for self.min_length.
import readline.
derive the class IfParser from the object base class.
if response is True,
define the function upper with an argument value.
increment weight by integer 2.
open '/dev/null' file in read mode, substitute the result for si.
substitute id for self.id.
format string normal_row with an dictionary containing 5 entries: an empty string for 'errors', empty string for 'label', empty string for 'field', empty string for 'help_text' and html_class_attr for html_class_attr.
self.filters is an empty dictionary.
raise an ImproperlyConfigured with an argument string "Calling modelformset_factory without defining 'fields' or 'exclude', explicitly is prohibited."
get the value from the options dictionary under the key 'verbosity', substitute it for self.verbosity.
call the method self.add_initial_prefix with an argument name, substitute the result for initial_prefixed_name.
call the function new_method_proxy with an argument bytes, substitute the result for __bytes__.
define the function urlquote_plus with 2 arguments: url and safe set to an empty string.
message is a string 'use only numbers, letters and underscores'.
call the method self._coerce with an argument data, substitute the result for data.
for every app_name and namespace_list in pattern.app_dict.items method return value,
if AttributeError exception is caught,
call the function self._key_to_file with key and version as arguments, substitute it for fname.
substitute end for upto.
define the function templatize with 2 arguments: src and origin set to None.
_func_globals is a string "__globals__".
define initialization method __init__ with self instance of the class as an argument.
decorator function register.filter with an argument is_safe set to boolean False.
define the method indent with argument self and level.
substitute func for self.func.
if obj.pk is None,
call the function resolver.resolve_error_handler with status_code as an argument, assign the result to the callback and param_dict, respectively.
result is a list containing an empty string.
call the os.remove function with argument name.
define the method __init__ with 2 arguments: self and attrs set to None.
split value into two parts by decimal_separator, assign the result to value and decimals.
if value under the 'list_tags' key of options dictionay is true,
define the method list with an argument self.
call the function view_func with 3 arguments: request, unpacked list args, unpacked dictionary kwargs, substitute the result for response.
define the method absolute_path with 3 arguments self, path and prefix set to None.
call the function lazy with 2 arguments: _string_concat and six.text_type, substitute the result for string_concat.
if seventh element of row is true,
if content_type doesnt start with string 'multipart/',
if event.path ends with string '.mo',
if self.max_length is not None and length of file_name is grater than self.max_length,
convert o to an string, return it.
define the method to_python with 2 arguments: self and value.
call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python, with field_value as an argument, return the result.
if the union of the kwargs and defaults dictionary keys converted into sets is not the same as the union of the defaults and prefix dictionary keys converted into sets,
call the method tzinfo.__init__ with an argument self.
return nothing.
call the method self.filter_expression.resolve with an argument context, substitute the result for output.
try,
raise an ValueError exception with argument string "EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set one of those settings to True.".
evaluate the force_text function with settings.FORCE_SCRIPT_NAME as argument, return the result.
call the function call_command with 2 arguments: string migrate and unpacked dictionary options.
raise an exception.
define the method __init__ with 2 arguments: self and obj.
return current.
try,
define the __init__ method with 4 arguments: self, message set to None, code set to None and whitelist set to None.
delete entry under item key of self.dict dictionary.
call the function force_text with an argument first element of args, substitute the result for first element of args.
assign script_name to the value under the 'SCRIP_NAME' key of the self.META dictionary.
return select_html.
call the function isabs with an argument path, if it evaluates to false,
register is an instance of Library class.
best_doublecolon_start is an integer -1.
call the method time.localtime with an argument stamp, substitute the result for tt.
increment i by integer 1.
valid is boolean False.
call the resolver.resolve_error_handler with integer 500 as the argument, assign the resulting tuple elements to the callback, and param_dict, respectively.
if ImportError exception is caught,
HttpResponse.content.setter property,
do nothing.
call the function new_method_proxy with an argument operator.contains, substitute the result for __contains__.
return boolean True.
if table_name_filter is not None and table_name_filter is callable object,
from django.utils.functional import LazyObject into default name space.
otherwise if options equals 'only',
define the method get_fqdn with argument self.
if attrs is false, make attrs an empty dictionary.
return value.
return self.file.size.
raise an NotImplementedError exception with an argument string 'may be implemented in a future release'.
define method __init__ with self class instance, mode string 'w+b', bufsize set to integer -1, suffix and prefix set to empty strig, dir set to None as the arguments.
if key is contained in last element of self.dicts, return boolean True, otherwise return boolean False.
substitute label_suffix for self.label_suffix.
derive the class RegroupNode from Node base class.
define the method setdefault with 3 arguments: self, key and default set to None.
if pathext is None,
define the method __init__ with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
define the decode method with self class instance and s as arguments.
call the function include_is_allowed with an argument filepath, if it evaluates to false,
skip this loop iteration.
from __future__ import unicode_literals into default name space.
_mutable is boolean True.
if queryset is None,
call the method __setitem__ from the base class of the class MultiValueDict, with 2 arguments key and list containing element value.
call the method regex.match with an argument date, substitute the result for m.
evaluate the method s.decode with string 'utf-8' and errors as the arguments, on the result call the method encode with the arguments encoding and errors, return the result.
return unbound.
if not,
raise an ValueError exception with an argument string ''Unable to configure root logger: %s' formated with e.
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " FAKED" as a argument.
if context.autoescape is true and value is not an instance of SafeData, or value is an instance of EscapeData,
if m is not None,
define protected method _BaseCookie__set with self class instance, key, real_value and coded_value as arguments.
from django.core.management.base import BaseCommand into default name space.
return value.
if ValueError exception is caught.
define the method __init__ with 3 arguments: self, language and deactivate set to boolean False.
return nothing.
_PROTECTED_TYPES is a tuple containing next elements, six.integer_types, type of None, type of float, Decimal, detetime.datetime, datetime.date and datetime.time.
call the function force_text with an argument message, return the result.
from django.apps import apps into default name space.
if value under the 'feed_url' key of the self.feed dictionary is not None,
call the __add__ method with an arguments rhs from the base class of the class SafeText, substitute the result for t.
append model to model_list.
if bcc is true,
call the function datetime.utcfromtimestamp with argument timeout, substitute it for exp.
call the function force_text with an argument value, substitute the result for value.
do nothing.
if there is no match,
call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
for every v in list_ append to a list result of the function encode, called with arguments: k and result of the function force_bytes, called with arguments v and self.encoding, extend the output with the result.
substitute self.rawdata for rawdata.
 No custom SQL for %s.%s model\n" as argument, with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.
if filename is not contained in _error_files,
derive the class BadSignature from the Exception base class.
raise an ValidationError with 2 arguments: self.error_messages dictionary value under the 'invalid_choice' key, and code set to a string 'invalid_choice'.
return default.
can_import_settings is boolean True.
call the method translation.get_language, substitute th result for saved_locale.
define the function last with an argument value.
return string 'https' if value under the "HTTPS" key of the os.environ dictionary equals string 'on', if not return 'http'.
help is a string 'Runs a development server with data from the given fixture(s).'.
set the file position pointer at file_pos.
do nothing.
help is a string "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s).".
substitute base for m.
call the method os.path.dirname with an argument potfile, join the result, locale and string 'LC_MESSAGES' into a file path, substitute it for basedir.
define the method __str__ with an argument self.
if self._content_length equals integer 0,
get the value under the 'database' key of the options dictionary, substitute it for self.database.
call the add_arguments method with parser as argument form the base class of the class Command.
if field.rel.to._meta.pk.rel is true,
locales is relative complement of set exclude in set locales.
digits is a string "0123456789abcdefghijklmnopqrstuvwxyz".
substitute self.field.label for self.label.
raise an StopIteration exception,
call the function token.split_contents, substitute the result without the first element for bits.
call the warnings.warn method with string '`request.REQUEST` is deprecated, use `request.GET` or `request.POST` instead.', RemovedInDjango19Warning and integer 2 as arguments.
call the method self.configurator.convert with an argument value, substitute the result for result.
define the method new_file with arguments: self, unpacked list args and unpacked dictionary kwargs.
do nothing.
return value.
call the function os.chmod wiht arguments filename and new_permissions.
if current_len is smaller than or equal to length,
derive the class SkipFile from the UploadFileException base class.
if not,
return fixture_files.
raise an TemplateSyntaxError exception with an argument string "%r takes two arguments", where '%r' is replaced with first element of bits.
params is an empty list,
return an empty string.
call the function avoid_wrapping with an argument value, return the result.
neg is integer 0.
call the function bytes with an argument tuple with an element i, return the result.
otherwise if first element of second row of args equals a string '1',
define the method as_text with an argument self.
if initial equals a string 'False',
otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
if StandardError, renamed to e, exception is caught,
define the method __ne__ with an argument self.
convert d into a integer, subtract d from it, substitute the result for m.
substitute CheckboxInput for widget.
call the method self.add_truncation_text with 2 arguments: if end_index is greater than zero, first end_index elements of text, if not an empty string, and truncate, return the result.
if kwargs is true,
return the printable representation of the self object converted to a dictionary.
define the method create_table with arguments self, database and tablename.
for every renamed_method in cls.renamed_methods,
get the value under the new_method_name key of the base.__dict__ dictionary, substitute it for new_method.
get the element of chunks at the (i+1)-the index, assign it to the seconds2 and name2, respectively.
encoding is None.
if pattern.name is not None,
return value.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if app_config.models_module is None,
call the function next with an argument cycle_iter, call the method resolve on the result with an argument context, substitute the result for value.
substitute file_name for self.file_name.
substitute val for the value under the cache_key key of the _format_cache dictionary.
call the method self.choice with an argument obj, yield the result.
join self.dirpath and thefile in a string, substitute the result for work_file.
derive the class MergeDict from the object base class.
define the method content with an argument self.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a listdir() method'.
define __del__ method with self as the argument.
if self.is_bound is true,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
value is an empty list.
return the value under the is_dst key of the _time.tzname dictionary.
substitute value for value under the field.name key of the self._current dictionary.
raise an ValueError with an argument string "'%s.%s' has no ForeignKey to '%s.%s'.", where '%s' is replaced with, model._meta.app_label, model._meta.object_name, parent_model._meta.app_label, parent_model._meta.object_name, respectively.
define the function _long_to_bin with 2 arguments: x and hex_format_string.
for model in router.get_migratable_models method return value, called with 3 arguments: app_config, connection.alias, and include_auto_created set to boolean True,
define the method to_python with arguments self and value.
for every field in unique_check,
define the function cache_clear.
sets the role attribute of the style object to the value of the call to the termcolors.make_style function with dictionary format as an argument.
if second element of the i-th row of relations equals table_name, rel_to is string 'self', otherwise call the method table2model with second element of the i-th row of relations and substitute it for rel_to.
if resource_string is not None,
if os.path has an attribute 'samefile',
__all__ is a list with 15 elements: strings 'utc', 'get_fixed_timezone', 'get_default_timezone', 'get_default_timezone_name', 'get_current_timezone', 'get_current_timezone_name', 'activate', 'deactivate', 'override', 'localtime', 'now', 'is_aware', 'is_naive', 'make_aware' and 'make_naive'.
return boolean False.
if value is an instance of datetime.datetime,
call the function get_resolver with an argument urlconf, substitute the result for resolver.
if IndexError, ValueError, KeyError or TypeError exceptions are caught,
for dirpath, dirnames and filenames, respectively, in directory tree tuple starting from the ldir,
substitute every '%s' in string '%s<li>%s%s</li>' with indent, with result of the function escaper called with an argument: result of the function force_text called with an argument title, and with sublist, append the string to output.
if version is None,
for every choice in self.field.choice_cache,
substitute i for p.
get the attribute 'extend' of the cls object, if it exists substitute it for extend, if not extend is boolean True.
if m is true,
call the signals.got_request_exception.send method with sender set to type of the self class instance and request set to request.
substitute obj for self.data.
if not,
call the function io.open with 3 arguments: django_po, string 'r' and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
substitute conditions_nodelists for self.conditions_nodelists.
define the function convert_old_style_list with an argument list_.
put every header in newheaders in a list, only if newheader converted to lowercase does not exist in existing_headers, substitute this list for additional_headers.
define the function slugify with an argument value.
if ImportError, renamed to e, exception is caught,
append first element of bits to 'end'. substitute the result for end_tag.
substitute file_name for t.
try,
derive the InMemoryUploadedFile class from the UploadedFile base class.
define the method __init__ with an argument self.
skip this loop iteration.
output is an empty list.
define the function new_datetime with an argument d.
derive the class Debug from base class CheckMessage.
substitute encoding for self.encoding.
return boolean False.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
return length of self.items.
call the function format_html with 3 arguments: self.outer_html, if id_ is true id_attr set to return value of the function format_html, if not id_attr set to an empty string, content set to result of the function mark_safe with an argument: string created by joining elements of outputs, with '\n' separator, return the result.
call the method handler.addQuickElement with an argument string "author", "%s (%s)", formated with values under the 'author_email' and 'author_name' keys of item dictionary.
from django.utils.six.moves import map into default name space.
try,
call the function import_module with an argument string '%s.formats' formated with location, which is formated with loc, yield the result.
if val is not None,
if not,
for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
from django.core.exceptions import ImproperlyConfigured and ViewDoesNotExist into default name space.
if value.tzinfo is not None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to not None, return boolean True, otherwise return boolean False.
from django.conf import settings into default name space.
call the method t.led with 2 arguments left and self.
write current_chunk to file fd.
append i_args to args, append new_args with the result.
call the function mark_safe with an argument string ' selected="selected"', substitute the result for selected_html.
define the method _load_post_and_files with an argument self.
if second element of t is boolean True,
if ValueError or TypeError exceptions are caught,
neg is integer 1.
return an empty string.
derive class Module_six_moves_urllib_response from the _LazyModule base class.
substitute has_header for __contains__.
call the function datetime.datetime with 3 arguments, now.year, now.month and now.day, substitute the result for now.
data is an empty dictionary.
if query is an instance of MultiValueDict class,
iterator is None.
otherwise if self.use_ipv6 is true and _fqdn is false,
derive the class StopFutureHandlers from the UploadFileException base class.
convert exclude elements to list, substitute it for construct_instance_exclude.
define the function yesno with 2 arguments value and arg set to None.
output is a list containing an entry: result of the function format_html called with 2 arguments: string '<select multiple="multiple"{0}>' and result of the function flatatt called with an argument final_attrs.
form is an instance of ManagementForm class, created with 3 arguments: auto_id as self.auto_id, prefix as self.prefix, and initial as a dictionary with 4 entries: result of self.total_form_count method for TOTAL_FORM_COUNT, result of self.initial_form_count method for INITIAL_FORM_COUNT, self.min_num for MIN_NUM_FORM_COUNT and self.max_num for MAX_NUM_FORM_COUNT.
call the method filename.rfind with an argument string "\\", increment the result by one, slice the filename from the previous result as start index to the end, strip it of white spaces from both ends, if the result is not an empty string and filename is not an empty string, return boolean True, otherwise return boolean False.
call the self.xml.addQuickElement method with 2 arguments: string 'object' and attr dictionary containing 1 entry: return value of the function smart_text with return value of the method value._get_pk_val as an argument for 'pk'.
strip of the whitespaces first element of transfer_encoding, substitute the result for transfer_encoding.
cookies is a string '<could not parse>'.
call the function ugettext with an argument string "%s MB", substitute '%s' with the result of the call to the function, filesize_number_format with result of division of bytes by MB as an argument, substitute the result for value.
remove first element from name, substitute the result for used.
define the method compress with arguments self and data_list.
call the method self._delete with argument k.
if not,
return string 'NOTPROVIDED'.
append '.' to name, substitute the result for prefixed.
call the function re.compile with an argument raw string '(?:W/)?"((?:\\.|[^"])*)"', substitute the result for ETAG_MATCH.
from django.utils.functional import Promise into default name space.
call the function lazy with 2 arguments: func and resultclass, call the result with an argument, unpacked dictionary kwargs, substitute the result for proxy.
get is a tuple containing elements generated by the call to the function pformat with an argument COOKIES_override, if COOKIES_override is not None, or otherwise generated with the call to the function pformat with an argument request.COOKIES.
msg is a tuple containing one initial entry: a string "WSGI application '%(app_path)s' could not be loaded; Error importing module: '%(exception)s'", where '%(app_path)s' is replaced by app_path and '%(exception)s' is replaced by e.
call the method tuple.__getitem__ with 2 arguments: self and key, substitute the result for value.
if only_new is true,
define the method __init__ with 5 arguments: self, val_expr, max_expr, max_width and asvar set to None.
return a string '%02d' formated with self.data.month.
call the function _ with an argument string '(Hidden field %(name)s) %(error)s', where '%(name)s' is replaced with name, and '%(error)s' is replaced with return value of the force_text function called with an argument e, extend the top_errors with the result.
define the method __next__ with an argument self.
while i is lesser than length of subject and i-th element of subject is an empty space or tab character.
if self.size is greater than chunk_size, return boolean True, otherwise return boolean False.
call the function check_errors with argument main_func, substitute the result for wrapped_main_func.
call the method self._headers.values, return the result,
df is an instance of DateFormat class, created with an argument value.
if other_dict is an instance of MultiValueDict.
define the function conditional_escape with an argument text.
yield one element from the buffer_ iterable.
define the method source_error with 3 arguments: self, source and msg.
call the os.stat function with argument src, substitute the result for st.
call the method self.render_options with 2 arguments: choices and value, substitute the result for options.
define the method _add_local_translations with an argument self.
call the function os.umask with an argument umask.
if name is None and compile_function is None,
call the method parser.add_argument with string '--list', string '-l', action contains string 'store_true', dest set to string 'list', default set to False, help containing string 'Show a list of all known migrations and which are applied' as arguments.
if invalid_var_format_string is None,
return an string "<%s: %r>", where '%s' is replaced with self.__class__.__name__ and self.var, respectively.
skip this loop execution.
if settings.TEMPLATE_DEBUG is true,
raise an ValueError with string "This file is not accessible via a URL." as argument.
self.cc is an empty list.
if response is True,
substitute value for url.
for every dirpath, dirnames and locale_filenames in directory tree starting at the basedir directory.
call the sio.readline method, substitute the result for line.
if format is not contained in return value of the method serializers.get_public_serializer_formats,
substitute i-th element of value for widget_value.
define method GET with self class instance as an argument.
call the function zlib.compress with an argument data, substitute the result for compressed.
derive the class TemplateTagNode from Node base class.
define the method __init__ with arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method self.xml.endElement with an argument string 'field'.
if value is an instance of datetime.datetime,
substitute package.__path__ for package_path.
call the function f with a arguments: unpacked list args and unpacked dictionary kwargs, return the result.
return patterns.
self.choices is an empty list.
return nothing.
streaming is boolean False.
try,
substitute value under the name key of the toks dictionary for tok.
call the function import_module with 2 arguments: string .management and app_config.name.
call the function force_bytes with arguments k and self.encoding, substitute the result for k.
if not,
from django.utils import translation into default namespace.
remove all the elements from space index of line.
validate_slug is a instance of a RegexValidator class, created with 3 arguments: slug_re, return value of the call to the function, _ with an argument string "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens.", and string 'invalid'.
define the method __init__ with an argument self.
call the function import_library with an argument taglib_module, substitute the result for lib.
call the function import_module with an argument module_path, substitute the result for module.
substitute obj for value under the self.var_name key of the context dictionary.
sublist is an string '\n%s<ul>\n%s\n%s</ul>\n%s', where every '%s' is replaced with indent, sublist, indent and indent, respectively.
return an instance of SafeBytes, created with an argument data.
call the function mark_safe with an argument contents, return the result.
internal_use_only is a boolean False.
call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments, use the result as the argument for the call to the sql.extend method.
call the method self.field.widget.value_from_datadict with 3 arguments: self.form.data, self.form.files, self.html_name, return the result.
from django.core.management.sql import sql_create into default name space.
get the value under the ns key of the resolver.app_dict dictionary, substitute it for app_list.
call the method block_context.push with 2 arguments: self.name and push.
ge the absolute path of the return value of the function path.expanduser with the argument target, substitute it for top_dir.
line is an empty string.
import module warnings.
from django.core.management.base import BaseCommand into default name space.
raise an ValueError with an argument string "Could not find common ancestor of %s", where '%s' is replaced with migration_names.
replace every occurrence of newline character in value with string '<br />', use it as an argument for the call to the mark_safe, return the result.
DEFAULT_TIMEOUT is a instance of the class object.
register.tag decorator,
if base has an attribute 'base_fields'.
if file_ext is contained in command.extensions, is_templatized is boolean True, otherwise it is boolean False.
set attr attribute of the self object to value.
substitute smtplib.SMTP_SSL for connection_class if self.use_ssl is true, if not substitute smtplib.SMTP for connection_class.
substitute EscapeBytes for EscapeString.
call the method self.validate_unique.
if PY3 is true,
if self._dir file path does not exists,
call the method get_language, substitute the result for language_code.
regex is an empty string.
call the method extend with an argument error_list on the return value of the method error_dict.setdefault called with 2 arguments: field and an empty list.
return the string 'ValidationError(%s)', replace '%s' with self.
from django.middleware.csrf import get_token into default name space.
if not,
define the method get_unique_error_message with 2 arguments: self and unique_check.
call the method get_unique_error_message from the base class of the class BaseInlineFormSet, with an argument unique_check, return the result.
help is a string "Creates new migration(s) for apps.".
i is integer 0.
call the method __init__ from the base class of the class DateTimeBaseInput, with an argument attrs.
otherwise if ch equals a string ')',
remove the entry under the 'stream' key of the self.json_kwargs dictionary.
if self._read_started is true and self doesnt have an '_body' attribute.
return self.
DEFAULT_MIN_NUM is an integer 0.
from django.utils.six.moves import cPickle as pickle into default name space.
if digest is false,
return an instance of a RegroupNode class, created with 3 arguments target, expression and var_name.
if error_messages is not None,
substitute regex for self.regex.
call the self.stdout.write method, with string "  Applying %s..." with '%s' replaced with migration and ending set to '', as arguments.
decorator function register.filter with an argument is_safe set to boolean True.
define the method get with 4 arguments, self class instance, key, default set to None and version set to None.
substitute base.__name__ for class_name.
import module os.
return an instance of ForNode class, created with 5 arguments: loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty.
define the function upath with an argument path.
attrs is a list with 2 elements: strings "__doc__" and "__name__".
convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',
if template starts with a string 'file://',
call the function time.sleep with an argument integer 1.
define the function localize_input with 2 arguments value and default set to None.
evaluate the fd.isatty method, if the result is true,
define the function code_changed.
if self has an '_regex_validator' attribute and self._regex_validator is contained in self.validators,
substitute settings.DATE_FORMAT for arg.
call the method self._create_attachment with an unpacked list attachment as an argument, use the result as an argument for the call to the msg.attach method.
delete _active.value.
if column_name is contained in indexes,
call the function get_bytes_from_wsgi with environ, string 'PATH_INFO' and character '/' as arguments, substitute the result for path_info.
try,
if not,
split part by '=' character, substitute the result for role and instructions, respectively.
if event equals a string "START_ELEMENT" and node.nodeName equals a string 'object',
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.
remove the first element from p_pattern.
delete X.
call the function smart_urlquote with an argument string 'http://%s' formated with an argument middle, substitute the result for url.
if scheme is not contained in self.schemes,
append length of result to non_capturing_groups.
break the loop execution.
finally perform,
call the method self.nodelist_true.render with an argument context, assign the result to compare_to and nodelist_true_output.
if value is contained in self.empty_values and self.required is true,
from django.core.management.base import BaseCommand and CommandError into default name space.
get the hash value of the tup, substitute it for self.hashvalue.
substitute localize for self.localize.
from django.http.request import HttpRequest, QueryDict, RawPostDataException, UnreadablePostError and build_request_repr into default name space.
delete name attribute of the _MovedItems object.
get the value under the key key of the self.cookies dictionary, call the cookie_date function with an argument: sum of the result of the function time.time and max_age, substitute it for 'expires' key of the previously returned dictionary.
call the method re.sub with 3 arguments: raw string '&(?:\w+|#\d+);', empty string and result of the function force_text, called with an argument value, return the result.
import module tarfile.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
call the function iri_to_uri with an argument url, substitute the result for self.url.
return result.
call the method template_file.read, substitute it for content.
_translations is an empty dictionary.
define the function trim_whitespace with an argument s.
get "_decorated_function" attribute from func, return func if the attribute doesnt exists, use its __name__ field as a key to get the value from self.tags, assign func to it.
if not,
if host ends with '.', remove the last element from host.
if KeyError exception is caught,
REASON_PHRASES is a dictionary containing 59 initial entries: 'CONTINUE' for 100, 'SWITCHING PROTOCOLS' for 101, 'PROCESSING' for 102, 'OK' for 200, 'CREATED' for 201, 'ACCEPTED' for 202, 'NON-AUTHORITATIVE INFORMATION' for 203, 'NO CONTENT' for 204, 'RESET CONTENT' for 205, 'PARTIAL CONTENT' for 206, 'MULTI-STATUS' for 207, 'ALREADY REPORTED' for 208, 'IM USED' for 226, 'MULTIPLE CHOICES' for 300, 'MOVED PERMANENTLY' for 301, 'FOUND' for 302, 'SEE OTHER' for 303, 'NOT MODIFIED' for 304, 'USE PROXY' for 305, 'RESERVED' for 306, 'TEMPORARY REDIRECT' for 307, 'PERMANENT REDIRECT' for 308, 'BAD REQUEST' for 400, 'UNAUTHORIZED' for 401, 'PAYMENT REQUIRED' for 402, 'FORBIDDEN' for 403, 'NOT FOUND' for 404, 'METHOD NOT ALLOWED' for 405, 'NOT ACCEPTABLE' for 406, 'PROXY AUTHENTICATION REQUIRED' for 407, 'REQUEST TIMEOUT' for 408, 'CONFLICT' for 409, 'GONE' for 410, 'LENGTH REQUIRED' for 411, 'PRECONDITION FAILED' for 412, 'REQUEST ENTITY TOO LARGE' for 413, 'REQUEST-URI TOO LONG' for 414, 'UNSUPPORTED MEDIA TYPE' for 415, 'REQUESTED RANGE NOT SATISFIABLE' for 416, 'EXPECTATION FAILED' for 417, 'I'M A TEAPOT' for 418, 'UNPROCESSABLE ENTITY' for 422, 'LOCKED' for 423, 'FAILED DEPENDENCY' for 424, 'UPGRADE REQUIRED' for 426, 'PRECONDITION REQUIRED' for 428, 'TOO MANY REQUESTS' for 429, 'REQUEST HEADER FIELDS TOO LARGE' for 431, 'INTERNAL SERVER ERROR' for 500, 'NOT IMPLEMENTED' for 501, 'BAD GATEWAY' for 502, 'SERVICE UNAVAILABLE' for 503, 'GATEWAY TIMEOUT' for 504, 'HTTP VERSION NOT SUPPORTED' for 505, 'VARIANT ALSO NEGOTIATES' for 506, 'INSUFFICIENT STORAGE' for 507, 'LOOP DETECTED' for 508, 'NOT EXTENDED' for 510 and 'NETWORK AUTHENTICATION REQUIRED' for 511.
if get_git_changeset has an attribute 'cache',
with the call to the transaction.atomic method with using set to connection.alias, savepoint set to connection.features.can_rollback_ddl as arguments,
if AttributeError exception is caught.
return value under the key key of d dictionary.
substitute tuple with 2 elements: bz2.BZ2File and string 'r' for value under the 'bz2' key of the self.compression_formats dictionary.
find the value of response under the key 'Cache-Control', use it as a delimiter to split string ss_delim_re, assign the result to cc.
if fifth element of row is not None, substitute it for value under the 'max_digits' key of the field_params, otherwise, value under the 'max_digits' key of the field_params is integer 10.
define the method _set_choices with arguments self and value.
call the self.seek method with argument integer 0.
yield string 'year' as an return value of the generator.
define the method add_arguments, with 2 arguments self and parser.
if eather one of settings.USE_I18N or settings.USE_L10N is True,
if first element of message_context equals to character '"',
found is boolean True.
derive the class TranslatableFile from the object class.
substitute context for current.
all_date_checks is an empty set.
stats is an list with 2 elements: 2 integers 0.
try,
if value is contained in self.empty_values,
call the function datetime_safe.new_datetime with an argument date, substitute the result for date.
call the function new_method_proxy with an argument bool, substitute the result for __bool__.
if delta is smaller than integer 0.
derive the class FixedOffset from the tzinfo base class.
for every form in self.initial_forms,
from django.core.mail.message import EmailMessage, EmailMultiAlternatives, SafeMIMEText, SafeMIMEMultipart, DEFAULT_ATTACHMENT_MIME_TYPE, make_msgid, BadHeaderError and forbid_multi_line_headers into default name space.
decrement self.position by length of bytes.
raise an exception PageNotAnInteger with string 'That page number is not an integer' as an argument.
append obj to self.deleted_objects list.
if regex is an instance of six.string_types class,
if AttributeError exception is caught,
call the os.path.normpath with argument path, return the result.
define the method inclusion_tag with 5 arguments: self, file_name, context_class set to Context, takes_context set to boolean False, and name set to None.
if model_list is None,
define the function make_key with self class instance, key and version set to None as arguments.
subtract day_of_year from i, if the result is smaller than the result of subtraction of weekday from integer 4,
call the method self._archive.namelist, substitute the result for namelist.
define the method handle with 3 arguments: self and unpacked dictionary options.
define the method add_arguments with 2 arguments: self and parser.
decorator stringfilter,
substitute RAW for TYPE.
if not,
call the method self.run_validators with an argument value.
from django.template.base import TemplateDoesNotExist into default name space.
if second element of source is None,
define the function lower with an argument value.
append new line to line, write it to self.stdout stream.
if six.PY3 is true,
if not,
define the function format with 6 arguments: number, decimal_sep, decimal_pos set to None, grouping set to integer 0,
return unbound.im_func.
from django.apps import apps into default name space.
define the function autodiscover_modules with 2 arguments unpacked list args and unpacked dictionary kwargs.
return boolean False.
obj is a string "?".
if not,
call the method queryset.filter with an argument unpacked dictionary containing self.instance for self.fk.name, substitute the result for qs.
substitute '%s' in string '<%s %s %s>' with self.__class__.__name__, self.name and self.regex.pattern, respectively, use it as an argument for the call to the force_str function, return the result.
return obj.
results is a tuple with 2 elements, 2 empty lists.
if AttributeError exception is caught,
define the method list with an argument self.
if i is contained in relations, is_relation is boolean True, otherwise is_relation is boolean False.
from django.core.exceptions import ValidationError into default name space.
if settings.USE_L10N is true and value is an instance of six.string_types,
params is a dictionary with 2 initial entries: self.max_length for 'max' and length of file_name for 'length'.
call the method match.end, substitute the result for upto.
define the function _checkLevel with an argument level.
if not,
lock is an instance of RLock class.
return wrapped.
call the method self.data.utctimetuple, use the result as an argument for the call to the function calendar.timegm, return result converted into an integer.
return boolean False.
derive the class CheckboxChoiceInput from the ChoiceInput base class.
call the method timezone.get_current_timezone, substitute the result for current_timezone.
for m in merge_migrations append m.ancestry to a list, zip the resulting list into tuples of pairs, for every level in result,
calculate the length of args, substitute it for alen.
substitute var_obj for self.var.
if string 'version' is not contained in config,
call the method self._add_installed_apps_translations.
substitute kwargs for params.
substitute NullBooleanSelect for widget.
if IndexError exception is caught,
call the method domain_part.encode with an argument string 'idna', on the return value call the decode method with string 'ascii' as argument, substitute the result for domain_part.
call the method cgi.parse_header with an argument content_disposition, assign the result to _ and params, respectively.
call the method self.make_bytes with an argument content, append it to self._container.
slots is a list with an element, slots.
call the method handler.startElement with 2 arguments: string 'feed' and result of the method self.root_attributes.
self.empty_label is None.
call the method sys.stderr.write with an argument string "fork #2 failed: (%d) %s\n", formated with e.errno and e.strerror.
if TemplateDoesNotExist exception is caught,
append arg to ',', substitute the result for arg.
call the method self.fields.items, for every name and field in result,
all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with, unpacked list field_value as an argument, substitute the result for value of under the field.attname key of the data dictionary.
define the function literals with 3 arguments: choices, prefix set to an empty string and suffix set to an empty string.
return self.
call the function lazy_number with 5 arguments: ungettext, six.text_type, singular set to singular, plural set to plural, and number set to number, return the result.
import module sys.
call the function get_resolver with an argument urlconf, on the result call the method resolve with an argument path, return it.
from django.utils.functional import allow_lazy into default name space.
substitute config dictionary value under '()' key for factory.
if buffer_ is true,
return an instance of CsrfTokenNode class.
return etags.
if six.PY3 is boolean True,
if middle ends with punctuation,
call the os.umask function with argument integer 0, substitute the result for old_umask.
return the result of the function format_html called with 2 arguments: string '<input{0} />', and result of the function flatatt, called with an argument final_attrs.
get 'name' attribute from the file object, if it doesnt exists use None, substitute it for name.
get the name key of the data dictionary, substitute it for value.
if StandardError, renamed to e, exception is caught,
if ip_str starts with ':, but it doesnt starts with '::', or if ip_str ends with ':, but it doesnt ends with '::',
DARK_PALETTE is a string 'dark'.
remove first element of unhandled_params.
define the method l with an argument self.
define the method __deepcopy__ with 3 arguments: self and memo.
call the function force_text with second element of choice as an argument, substitute the result for self.choice_label.
substitute tempfile.NamedTemporaryFile for NamedTemporaryFile.
define the method getvalue with an argument self.
call the method t.render with an argument, instance of Context class, created with an argument dictionary, return the result.
return default.
substitute context for self.context_data.
for every resultclass in resultclasses,
define the method total_form_count with an argument self.
define the method new_file with arguments: self, field_name, file_name, content_type, content_length, charset set to None,
from django.utils import six into default name space.
substitute _iterkeys for keys.
delete attr.
if o is an instance of datetime.datetime object.
append work_file to args.
substitute empty bytes string for self.buffer.
define the method __init__ with 2 arguments: self and field.
decorator cached_property,
import module datetime.
write msgs to fp.
from django.utils import six into default name space.
derive the class TemplateIfParser from IfParser base class.
define the method w with an argument self.
if nesting is false,
raise an TemplateSyntaxError exception with an argument string "'autoescape' argument should be 'on' or 'off'".
if not,
if LookupError exception is caught,
return result.
return nothing.
call the function warnings.warn with 3 arguments: string "django.utils.importlib will be removed in Django 1.9.", RemovedInDjango19Warning and stacklevel set to integer 2.
call the method self._cache.add with key, value, self.get_backend_timeout(timeout) as arguments.
from __future__ import unicode_literals into default name space.
call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.
decorator classmethod.
from django.utils.six.moves import socketserver into default name space.
if length bits is smaller than intger 4,
convert values into a list, substitute it for value.
otherwise if self.verbosity equals integer 3,
if not,
substitute '%s' in string '%s-%s-%s' with y, m and d, return the result.
if self.allow_files is true and full_file is a file, or if self.allow_folders is true and full_file is an directory, and only if self.match is None or return value of the method self.match_re.search called with an argument f is true.
import module re.
options is an empty dictionary.
return self.__name.
call the method _trans.gettext with an argument message.
raise an TemplateSyntaxError exception with an argument string "'%s' tag with name '%s' appears more than once", substitute '%s' with first element of bits and block_name, respectively.
return string 'initial-%s' where '%s' is replaced with return value of the self.add_prefix method called with an argument field_name.
candidate_subs is dictionary created from elements in return value of the function urlquote called with argument v, mapped with a function k, for every k and v in return value of the method candidate_subs.items.
errors is an empty list.
define the method next_token with an argument self.
substitute length of chunk for chunk_length.
get name attribute of the self._out object, return it.
derive the class ArchiveException from the Exception base class.
if app_label is not contained in executor.loader.migrated_apps,
call the method _construct_form from the base class of the class BaseInlineFormSet, with 2 arguments: i, and unpacked dictionary kwargs, substitute the result for form.
return self.
if app_labels is true,
return self.data.year.
substitute settings.TEMPLATE_STRING_IF_INVALID for current.
if not,
if lengths of val1 and val2 are not equal,
if 'expects_localtime' attribute of func object exists and is true,
if not,
if p2.scheme, p2.hostname and p2.port equals p1.scheme, p1.hostname and p1.port, respectively, return boolean True, otherwise return boolean False.
define the function now.
define the method as_table with an argument self.
call the method match.groupdict, substitute the result for kwargs.
call the method self.connection.ehlo.
get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.
args is an empty list.
define the method _update_errors with 2 arguments: self and errors.
substitute new_filenames for filelist.
if m is true,
substitute first for self.state.
import module time as _time.
call the function force_text with an argument template_string.
write the chunk to the file _file.
try,
if filename is empty,
from django.core.serializers.base import DeserializationError into default name space.
if KeyError exception is caught,
from django.utils.encoding import force_str,  force_text and DEFAULT_LOCALE_ENCODING into default name space.
if app equals a string 'django.core',
call the function OPERATORS.items, for every key and op in result,
substitute self._setupfunc for repr_attr.
if format is not contained in _serializers,
call the function unescape_string_literal with an argument var, use it as an argument for the call to the function mark_safe, substitute the result for self.literal.
raise a exception of CommandError class, with string "App '%s' does not have migrations" with '%s' replaced with app_label as the argument.
if self.cmd has an attribute 'missing_args_message' and next statement is not true: args is true or any arg doesnt start with '-' for arg in args,
call the method other.__cast, substitute the result for other.
if app_label is not contained in executor.loader.migrated_apps,
call the function resolve with arguments path and urlconf.
for every opt in self.option_list,
substitute mtime for the value under the filename key of _mtimes dictionary.
if cls._delegate_bytes and cls._delegate_text are both false, raise an error, with an argument string "Cannot call lazy() with both bytes and text return types.".
return boolean True.
join self.file_path and fname into a valid file path, substitute it for self._fname.
substitute first end elements of s for f.
value is an empty string.
call the __init__ method from the base class of the EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.
call the method instance of TerminalIPythonApp class, substitute the result for app.
reverse the order of elements of styles.
from django.utils.timezone import get_default_timezone, is_aware and is_naive into default name space.
try,
from django.conf import settings into default name space.
call the method parser.add_argument with 6 arguments: string '--all', string '-a', action as a string'store_true', dest as a string 'all' default as boolean False and help as a string 'Updates the message files for all existing locales.'.
open_tags is an empty list.
substitute self.urlconf_name for self.urlconf_module.
return output.
from django.http import QueryDict into default namespace.
if ValidationError, renamed to e, exception is caught,
define the method _parse_header with an argument line.
if push is not None,
return first element of the list containing elements of error.
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
raise an NoReverseMatch exception with an argument string "Error importing '%s': %s.", where '%s' is replaced with lookup_view and e, respectively.
raise an exception.
return an dictionary containing 1 entry: return value of the function _get_val for 'csrf_token'.
if next_item is true and next_item is an instance of list or tuple type,
from collections import defaultdict into default name space.
define the function verbatim with 2 arguments: parser and token.
define the function smart_text, with s, encoding set to string 'utf-8', strings_only set to False, errors set to 'strict' as arguments.
call the function self._key_to_file with key and version as arguments, use the result as an argument for the call to the self._delete method.
call the method self.xml.startElement with 2 arguments, string "django-objects" and a dictionary containing 1 element: "1.0" for "version".
define the method __hash__ with an argument self.
return boolean True.
attrs is an dictionary with 9 initial entries: form for 'form', extra for 'extra', can_order for 'can_order', can_delete for 'can_delete', min_num for 'min_num', max_num for 'max_num', absolute_max for 'absolute_max', validate_min for 'validate_min' for validate_max for 'validate_max'.
increment key by item.
start is an integer 0.
if verbosity is greater or equal to integer 2,
call the method parser.add_library with an argument lib.
__all__ is an list containing strings: 'activate', 'deactivate', 'override', 'deactivate_all', 'get_language', 'get_language_from_request', 'get_language_info', 'get_language_bidi', 'check_for_language', 'to_locale', 'templatize', 'string_concat', 'gettext', 'gettext_lazy', 'gettext_noop', 'ugettext', 'ugettext_lazy', 'ugettext_noop', 'ngettext', 'ngettext_lazy', 'ungettext', 'ungettext_lazy', 'pgettext', 'pgettext_lazy', 'npgettext', 'npgettext_lazy' and 'LANGUAGE_SESSION_KEY'.
define the function _get_timezone_name with an argument timezone.
if self.verbosity is greater or equal to integer 2,
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
return boolean False.
define the method _set_name with arguments self and name.
if self.is_localized is true,
call the method os.path.abspath with an argument dirpath, join the result and dirname into a file path, inset it at the beggining of self.locale_paths.
substitute new_mod for self.mod.
substitute self for block.
if extra_classes is not empty put its elements into a set, substitute it for extra_classes, if not extra_classes is an empty set.
call the method self.get_queryset, substitute i-th element of the result for value under the 'instance' key of kwargs dictionary.
if settings.USE_THOUSAND_SEPARATOR is true,
for every dirname in list dirnames,
substitute old_attr for self.attr.
call the method self.make_key with key and version set to version as arguments, substitute it for key.
if rhs is an instance of SafeData.
call the method language_code_re.search with an argument accept_lang, if it evaluates to false,
raise an ValidationError with 2 arguments: return value of the function ungettext with 3 arguments: strings "Please submit %d or more forms.", "Please submit %d or more forms." and self.min_num, where '%d' is replaced with self.min_num, and code as a string 'too_few_forms'.
do nothing.
substitute _BROWSERS_DEPRECATED_LOCALES for _DJANGO_DEPRECATED_LOCALES.
call the method optimizer.optimize with 2 arguments operations and migration.app_label, substitute the result for new_operations.
return an empty string.
return s.
if number is an instance of int type.
self.upload_handlers is an instance of ImmutableList, created with 2 arguments: self.upload_handlers, and warning as a string "You cannot alter upload handlers after the upload has been processed.".
raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' for key.
replace every occurrence of ' ' in value for '\xa0', return the result.
define the method __deepcopy__ with arguments self and memo.
return split.
if self.instance.pk is None,
from __future__ import unicode_literals into default name space.
call the method parser.add_argument with 2 arguments: string 'migration_name', and help is a string 'Migrations will be squashed until and including this migration.'.
append label_output to output.
call the method tpl.format with an arguments self.name, self.sysid and self.pubid.
define the method __init__ with arguments: self, cmd and unpacked dictionary kwargs.
as arguments for the call to the unicode function, return the result.  substitute unichr for unichr.
yield string 'month' as an return value of the generator.
otherwise if t.contents equals a string 'comment',
call the method match.groups with 2 arguments: key and value.
substitute first element of self.locale_paths for self.default_locale_path.
substitute io.StringIO for StringIO.
call the method subsclass with 2 arguments: string "%04i_merge", replace '%04i' with biggest_number incremented by one, that occupies minimum 4 places within a string, and app_label, substitute the result for new_migration.
property decorator,
break from the loop execution.
get the value under formatter key of dictionary under 'formatters' key of self.config dictionary, substitute the result for formatter.
import module importlib.
if to is not an six.string_types instance raise an error with message string '"to" argument must be a list or tuple'.
define the function time_format with 2 arguments: value and format_string.
for every i and tuple containing dirpath and f, in enumerated list of locations,
if Resolver404 exception is caught,
LUHN_ODD_LOOKUP is a tuple with 10 elements: integers 0, 2, 4, 6, 8, 1, 3, 5, 7 and 9.
if self.file_path file path exists and it is not a directory,
call the method node.render with an argument context, return the result.
extend list inner_result with res.
substitute klass for factory.
define the method _iterkeys with an argument self.
get attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return it.
call the method translation.activate with an argument saved_locale.
define the method as_textarea with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
raise an TemplateSyntaxError exception with an argument string "Invalid syntax in widthratio tag. Expecting 'as' keyword".
join path and entry into a file path, if it exists,
define the method get with 4 arguments: self, key, default set to None and version set to None.
call the function _findall with 2 arguments: s1 and year converted into a string, substitute the result for sites1.
define the method filter with 2 arguments: self and record.
if ValueError exception is caught,
define the method _open with arguments self, name and mode defaulting to string 'rb'.
raise an NotImplementedError with an argument string 'subclasses of Tokenparser must provide a top() method'.
for every path in self.locale_paths,
try,
if ImportError exception is caught,
call the function deactivate_all.
if block_context is None,
define the function iter_format_modules with 2 arguments: lang and format_module_path set to None.
ERRORS is a dictionary with 3 initial entries: string "You don't have permission to access that port." for errno.EACCES, "That port is already in use." for errno.EADDRINUSE and "That IP address can't be assigned-to." for errno.EADDRNOTAVAIL.
define the method __getitem__ with arguments self and name.
raise an base.DeserializationError exception with an argument string "<%s> node is missing the required '%s' attribute", where '%s' is replaced with node.nodeName and attr.
return last element of list_.
convert current_expires to a string, use it as the argument for the call to the function typecast_timestamp, substitute the result for current_expires.
from collections import OrderedDict into default name space.
if self.initial is true, substitute the length of self.initial for initial_forms, if not, initial_forms is integer 0.
if label_output is true,
call the function type with an argument self, on the result call the method __next__ with an argument self, return the result.
return an instance of IfEqualNode class, created with 5 arguments: val1, val2, nodelist_true, nodelist_false and negate.
define the method regex with an argument self.
call the __init__ method with self and params arguments from the base class BaseCache.
define the method _ipython_pre_100 with an argument self.
skip this loop iteration,
evaluate the self.has_key method with key as argument, return the result.
if server is an instance of six.string_types,
for every attr in _urllib_response_moved_attributes,
define the method __enter__ with argument self.
property decorator,
for every possibility, pattern and defaults in possibilities,
for every i and word in enumerated iterable words,
from django.template.loader import BaseLoader into default name space.
for every part in singular,
supports_microseconds is boolean False.
get the value under the 'list' key of options dictionary, if key doesnt exist return False, if the return value is True,
call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class TypedChoiceField.
substitute value under idx key of dictionary d for d.
call the function format_html with 3 arguments: string '<ul class="{0}">{1}</ul>', self.error_class and return value of the function, format_html_join, called with 3 arguments: empty string, string '<li>{0}</li>', tuple containing results of the function, force_text with an argument e, for every e in self, return the result.
if cc is not an six.string_types instance raise an error with message string '"cc" argument must be a list or tuple'.
if out has an 'isatty' argument and return value of the function out.isatty is true,
if not,
substitute fifth element of row for value under the 'max_digits' key of the field_params.
define the function b with an argument s.
call the method lookup with the encoding as the argument.
do nothing.
self.stderr is an instance of an OutputWrapper object, created with 2 arguments: value under the 'stderr' key of the options dictionary, if it doesnt exists use the sys.stderr instead, and self.style.ERROR.
call the function urljoin with arguments current_uri and location, substitute the result for location.
call the method result.setlist with the arguments: key and value.
try,
raise an CommandError exception with an argument string "currently makemessages only supports domains 'django' and 'djangojs'".
substitute self._meta for opts.
call the function os.path.dirname with argument full_path, substitute the result for directory.
if expanded_template is a directory,
substitute root for value under the NEXT key of the link dictionary.
substitute required, label and initial for self.required, self.label and self.initial.
from django.utils.datastructures import MultiValueDict and ImmutableList into default name space.
substitute _iteritems for iteritems.
increment self.active_writers by integer 1,
from django.core import signing into default name space.
return integer 0.
substitute _urllib_error_moved_attributes for Module_six_moves_urllib_error._moved_attributes.
return None.
call the function warnings.warn with 3 argument: string "AppCommand.handle_app() is superseded by AppCommand.handle_app_config().", RemovedInDjango19Warning and stacklevel set to integer 2.
if self.file_path file is not writable,
from django.utils._os import upath into default name space.
for every migration in migrations_to_squash,
pid is integer 1.
convert new_name to a string and append string 'field' to it, substitute the result for new_name.
return obj.
call the function ip.
append filename to _error_files.
call the method one_percent_re.sub with 2 arguments: string '%%' and t.contents, substitute the result for contents.
for every name in handlers,
self._post is an instance of QueryDict created with arguments: self.body and encoding set to self._encoding, self._files is an instance of class MultiValueDict.
convert timeout into an integer, return it.
break the loop execution.
call parser.add_argument method with '--noinput', action set to string 'store_false', dest set to string 'interactive', default set to boolean True and help set to string 'Tells Django to NOT prompt the user for input of any kind.'.
substitute _urllib_robotparser_moved_attributes for Module_six_moves_urllib_robotparser._moved_attributes.
from django.utils.encoding import force_text into default name space.
return an empty string.
if new_name starts with a string '_',
call the method json.dumps with a dictionary generate with an expression as an argument, return value of the function e.get_json_data, with an argument escape_html for f, for every f and e in list of tuples of self dictionary key, pair entries, return the result.
return qs.
call the method fp.write with an argument content.
if self._dir file path does not exists,
_response_middleware is an empty list.
call the method copy.deepcopy with an argument self.widgets, substitute the result for obj.widgets.
call the method self.full_clean.
call the method self.connection.quit.
if name is callable object,
define the function parse_header with an argument line.
substitute cache_clear for wrapper.cache_clear.
import module time.
if not,
result is None.
if first nine elements of block_content is string 'verbatim' or 'verbatim ',
if data is true,
substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.
call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.
raise TemplateSyntaxError("%r must be the first tag in the template.", where '%s' is replaced with node.
call the function mark_for_escaping with an argument value, return the result.
substitute result for value under the RESULT key of the oldroot dictionary.
if value is an instance of bytes class,
divide 10 to the power of 400 by 10 to the power of 400, substitute the result for nan.
rais an AppRegistryNotReady exception with an argument string "The translation infrastructure cannot be initialized before the " "apps registry is ready. Check that you don't make non-lazy gettext calls at import time.".
get 'errors' attribute from fp object, substitute it for errors if it exists, if not errors is None.
substitute self.choices for self.widget.choices.
compile a regex from raw string '^\[\s*(\w+)\s*\]\s*', substitute it for INDEX_PATTERN.
from django.core.management.sql import custom_sql_for_model, emit_post_migrate_signal and emit_pre_migrate_signal into default name space.
join self.dirpath and self.file into a file path, return it.
if not,
get config dictionary element under 'formatters' key, if it exists substitute it for formatters, if not, formatters is EMPTY_DICT.
call the method copy.copy, substitute the result for obj.
define the method render with 2 arguments: self and context.
if IndexError exception is caugh,
call the connection.cursor method, substitute the result for cursor.
from __future__ import unicode_literals into default name space.
warning is a string 'ImmutableList object is immutable.'.
if m is false and p is lesser than integer 0,
if parse_until is true,
decorator deconstructible,
self.loaded_object_count is integer 0.
return val.
if level is true,
return self._choices.
if target_dir path doesnt exists,
append bit to split.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
from django.core.exceptions import ImproperlyConfigured into default name space.
convert value under the 'CONTENT_LENGTH' key of the environ dictionary to an integer, substitute it for content_length.
import module decimal.
from __future__ import unicode_literals into default name space.
from django.utils.encoding import force_bytes into default name space.
if error_message is not None,
define the method __delitem__ with 2 arguments: self and header.
replace every occurrence of replacement in value for an empty string, substitute the result for value.
call the function escape with an argument url, substitute the result for url, call the function escape with an argument trimmed, substitute the result for trimmed.
call the method __init__ from the base class of the EntitiesForbidden class.
call the method new_name.find, with an argument string '__', if it evaluates to greater or equal than integer 0,
call the function re.compile with an argument raw string "^((?:'[^']*'|[^'])*?)--.*$", substitute the result for comment_re.
substitute kwargs for media_attrs.
for every v in value call the function conditional_escape with an argument v, append the result in a list, substitute the resulting list for value.
call the method handler.addQuickElement with 2 arguments: string 'comments' and value under the 'comments' key of the item dictionary.
call the method text.encode with argument utf8_charset.output_charset, substitute the result for payload.
template_with_clear is a string '%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>'.
define the method handle with arguments self, unpacked list tablenames and unpacked dictionary options.
define the method __init__ with 5 arguments: self, protocol set to string 'both', unpack_ipv4 set to boolean False, unpacked list args, unpacked dictionary kwargs.
raise an DisallowedHost exception with an argument msg.
import module inspect.
increment stats dictionary value under the MISSES key by integer 1.
call the method autodetector.changes with 3 arguments: graph set to loader.graph, trim_to_apps set to app_labels, if it exists or None if not and convert_apps set to app_labels, if it exists or None if not, substitute the result for changes.
return s.
if file filename exists,
derive the class MemoryFileUploadHandler from the FileUploadHandler base class.
try,
response.streaming_content is an empty list.
msg is a string '%sError importing module %s: "%s"', where '%s' is replaced with error_prefix, dotted_path and e, respectively.
raise an CommandError with an argument string "Cannot find a migration matching '%s' from app '%s'.", where '%s' is replaced with migration_name and app_label.
call the method _trans.ungettext with 3 arguments singular, plural and number.
raise an AttributeError with an argument string "no such move, %r", formated with a tuple with an element name.
call the method mark_safe with lines joined into a string, separated by newlines as argument, return the result.
raise a SerializerDoesNotExist exception with an argument format.
if other is an instance of Promise,
p is image parser object, set by calling the PillowImageFile.Parser method.
add value and delta together, substitute the result for new_value.
code is a string 'invalid'
self._cached_loaders is an empty list.
if last_row doesnt ends with row_ender,
raise an NotImplementedError exception with an argument string 'Awaiting Implementation'.
call the method self._iteritems, for every k and v in the result,
FIELD is a field".
self._called_from_command_line is boolean True.
if i is equal to len_values decremented by 1, value under the 'last' key of the loop_dict dictionary is boolean True, otherwise it is False.
raise an TypeError exception with an argument msg.
if ValueError exception is caught,
call the function re.compile with 2 arguments: raw string '(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' and re.IGNORECASE, substitute the result for html_gunk_re.
call the method self.build_attrs with an argument id set to field modulus id_, substitute the result for local_attrs.
call the method node.getAttribute with an argument string 'pk', use the result as the argument for the call to the method,  Model._meta.pk.to_python with, substitute the result for value under the Model._meta.pk.attname key of the data dictionary.
call the method new_context._reset_dicts values.
call the method self._stream.read with 2 arguments: unpacked list args and unpacked dictionary kwargs.
decorator stringfilter,
if timezone has an attribute 'normalize',
define the method __init__ with arguments self and connection_reset defaulting to boolean False.
from __future__ import unicode_literals into default name space.
if not,
replace all the occurrences of '__' with '_' in new_name.
if self.verbosity is greater or equal to integer 1.
if field.rel.through._meta.auto_created is true,
break from the smallest enclosing loop execution.
call the options.get method with string 'MAX_ENTRIES' and integer 300 as arguments, use the string 'max_entries' and previous result as the arguments for the call to the params.get method, substitute the result for max_entries.
call the method termios.tcsetattr with fd, termios.TCSANOW and attr_list, as arguments.
define the function module_to_dict with 2 arguments: module and omittable as a lambda function with an argument k,
return six.text_type(s).encode(encoding, errors).
remove 'LOCATION' key from kwargs dictionary and put it into location, or use an empty string if key doesnt exists.
call the method self.configure_logger with 3 arguments: name, value under name key of loggers dictionary and boolean True.
call the function escape with an argument word, substitute the result for i-th element of words.
substitute options.settings for value under the 'DJANGO_SETTINGS_MODULE' key of the os.environ dictionary.
call the function EmailMultiAlternatives with settings.EMAIL_SUBJECT_PREFIX and subject converted to strings and concatenated, message, settings.SERVER_EMAIL, list of second elements of a for every a in settings.Managers and connection set to connection, as arguments, assign the result to mail.
value under the item key of self.dict dictionary is None.
define the function exec with 3 arguments: _code_, _globs_ set to None and _locs_ set to None.
if not,
from functools import wraps, update_wrapper and WRAPPER_ASSIGNMENTS into default name space.
remove key element from self.keyOrder dictionary.
define the method __init__ with 2 arguments: self and conditions_nodelists.
if value is false or character '@' is not contained in value,
for every obj in value call the function mark_safe with an argument result of the function force_text called with an argument obj, return all the results in a list.
if not,
raise an NotImplementedError with an argument string 'subclasses of SyndicationFeed must provide a write() method'.
from collections import OrderedDict into default name space.
from django.utils.safestring import mark_safe into default name space.
if old_method is false and new_method is true,
try,
call the method self.stream.write with argument string '%s\n', with '%s' replaced with msg_data.
try,
call the method os.environ.copy, substitute the result for new_environ.
if self has an 'requires_system_checks' attribute, has_new_option is boolean True, otherwise it is boolean False.
define the method __setattr__ with self, name and value as arguments.
substitute i for self.pointer.
out is an instance of StringIO class, created with an empty string as an argument.
raise an exception,
define the function http_date with an argument epoch_seconds set to None.
otherwise if name is not None and compile_function is not None,
raise an ValueError exception with an argument string "Negative base36 conversion input.".
if dt is None, is_dst is boolean False, otherwise call the method _isdst with an argument dt, substitute the result for is_dst.
if exception PermissionDenied is caught,
return _cached_filenames.
from django.utils.formats import get_format into default name space.
call the function add_arguments with parser as an argument, from the base class of the Command class.
yield item.
call the method self.write_migration_files with an argument changes.
append string " The domain name provided is not valid according to RFC 1034/1035." to msg.
remove the value under the 'using' key from the options dictionary, assign it to the db, if the entry doesnt exists, substitute DEFAULT_DB_ALIAS for db.
call the method self.tag with 2 arguments: function_name and compile_func.
define the method g with an argument self.
if level is not an integer raise an error with message string "The first argument should be level.".
substitute True for output_transaction.
otherwise if value is an instance of datetime.time,
call the function conditional_escape with an argument checkbox_id, substitute the result for value under the 'clear_checkbox_id' key of the substitutions dictionary.
value under the self key of state_frame dictionary is None.
return instance.
substitute sysid for self.sysid.
call the function iri_to_uri with an argument redirect_to, substitute the result for the value under the 'Location' key of the self dictionary.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
return value.
needs_multipart_form is boolean False.
derive the class SafeBytes from bytes and SafeData base classes.
derive the class URLField from the base class CharField class.
mapping is a dictionary with 3 initial entries: 'a' for 'alpha', 'b' for 'beta' and 'c' for 'rc'.
if klass is not contained in cls.__dispatch,
substitute choice for choice_value and choice_label, respectively.
define the method delete with 3 arguments: self, key, and version set to None.
call the method __init__ form the base class of the Command class.
if not,
from __future__ import unicode_literals into default name space.
call the function _check_boolean_field_default_value with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
import module django.
define the method _cull with argument self.
endless loop,
substitute self.__class__ for response._handler_class.
call the method handler.addQuickElement with 2 arguments: string 'copyright' and value under the 'feed_copyright' key of the self.feed dictionary.
define the method __nonzero__ with an argument self.
define the method next_token with an argument self.
if imatch is true,
if not,
sum m and class Media created with definition, return the result.
call the self.request_class method with environ as an argument, substitute the result for request.
msg is a string 'Module "%s" does not define a "%s" attribute/class' formated with dotted_path and class_name, respectively.
non_capturing_groups is an empty list.
substitute self.auto_id for auto_id.
define the function ungettext with 3 arguments: singular, plural and number.
from django.utils._os import safe_join and abspathu into default name space.
if location is None,
if KeyError exception is caught,
derive class CheckMessage from object base class.
try,
if return value of function response.has_header with string 'Vary' as argument is boolean False,
call the method operator.attrgetter with an argument _func_defaults, substitute the result for get_method_defaults.
do nothing.
call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.
if use_grouping is true,
derive the class Command from the BaseCommand base class.
import module opera.
define the method split_contents with an argument self.
call the function allow_lazy with 2 arguments: slugify and six.text_type, substitute the result slugify.
define the method _itervalues with an argument self.
return field_type, field_params and field_notes.
define the method negate with an argument self.
define the method forms with an argument self.
return output.
raise an ValueError with an argument string "fk_name '%s' is not a ForeignKey to '%s.%'.", where '%s' is replaced with, fk_name, parent_model._meta.app_label and parent_model._meta.object_name, respectively.
define the method encoding with an argument self.
if version is None,
if from_email exists substitute from_email for self.from_email, if not substitute settings.DEFAULT_FROM_EMAIL for self.from_email.
substitute func.__doc__ for compile_func.__doc__.
return None.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
default_validators is an list containing validators.validate_slug.
if value under the 'outlog' key of options dictionary is true,
return integer 0.
upto is integer 0.
define the method more with an argument self.
get the value under the 'error_messages' key of the kwargs dictionary, if it exists substitute it for error_messages, if not, error_messages is an empty dictionary.
return boolean True.
if ImportError exception occurred,
if self._is_rendered is false,
for every model in not_installed_models,
substitute has_key for __contains__.
if test_runner_class has an 'option_list' attribute,
endless loop,
if UnicodeEncodeError exception is caught,
call the function patch_response with response and cache_timeout decremented by integer 1 as arguments.
substitute dicts for self.dicts.
from django.utils import six into default name space.
insert '.' to digits at negative exponent index.
for every k and v in return value of the ret.items function,
define the method _get_choices with an argument self.
call the method self.clean.
try,
call the function number_format with an argument value, return the result.
sort elements of kwds, substitute the result for sorted_items.
return r.
return self._urlconf_module.
call the encode function on the Header class instance, created with arguments nm and string 'utf-8', substitute the result for nm.
flags is a integer 0.
import module sys.
define the method __html__ with an argument self.
otherwise if value is an instance of datetime.datetime,
substitute length of self.loopvars for num_loopvars.
if not,
do nothing,
if self.__dispatch is None.
call the method render from the base class of the class NullBooleanSelect, with 4 arguments: name, value, attrs and choices, return the result.
if not,
if vale is None or an empty string,
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
derive the class DjangoSafeDumper from the SafeDumper base class.
if nodelist is an instance of NodeList and node is not an instance of TextNode class.
attrs is a empty list.
return an instance of SafeText, created with an argument data.
if value is true,
split lang_code by '-', substitute the first element of the result for generic_lang_code.
define the method errors with an argument self.
if ValueError, InvalidOperation, TypeError or UnicodeEncodeError exceptions are caught,
call the method pop from the base class of the class QueryDict, with arguments key and unpacked list args, return the result.
join self.dirpath, thefile into a file path, substitute it for work_file.
self._files is an instance of MultiValueDict class.
from django.utils.module_loading import import_string into default name space.
return an instance of AssignmentNode class created with 4 arguments: takes_context, args, kwargs and target_var.
call the method re.compile with an argument raw string "&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));", substitute the result for _entity_re.
get attribute 'error_dict' from the self object.
if fext is a file,
get _iterkeys attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable, return it.
call the private dict.__setitem__ method with self class instance, key and M as arguments.
define the method __str__ with an argument self.
define the method __init__ with 3 arguments: self,unpacked list args and unpacked dictionary kwargs.
return compile_function.
define the method usage with 2 argument: self and subcommand.
call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'.
self.model_name is a string 'cacheentry'.
call the function warnings.warn with 3 arguments: string "`%s.%s` is deprecated, use `%s` instead.", formated with 3 elements: self.class_name, self.old_method_name and self.new_method_name, self.deprecation_warning and integer 2.
call the self.stream.close function.
requires_system_checks is boolean False.
if fixture_name is not equal to string 'initial_data' and fixture_files is false,
write a new line to the self.stream file stream.
otherwise if ch equals a string '$',
call the method self._css.keys, sort the result and substitute it for media.
if match is true,
RAW is a string "raw".
invalid_apps is an empty list.
from django.utils.translation import ungettext and ugettext as _ into default name space.
if indent is false,
evaluate the function force_str with key as the argument, substitute it for key.
call the method self.render_node with 2 arguments: node and context, substitute the result for bit.
substitute tok for value under the groupid key of the self.toks dictionary.
seen_data is an empty set.
if settings.SETTINGS_MODULE is true,
return an instance of metaclass class, created with 3 arguments: string 'temporary_class', None and an empty dictionary.
if app_label is not contained in executor.loader.migrated_apps,
substitute _urllib_request_moved_attributes for Module_six_moves_urllib_request._moved_attributes.
substitute cache for value under the alias key of self._caches.caches dictionary.
call the method signals.got_request_exception.send with sender set to type of the self class instance and request set to request.
autodetector is an instance of the MigrationAutodetector class, created with 3 arguments: result of the method loader.project_state, result of the method ProjectState.from_apps with an argument apps and result of the method InteractiveMigrationQuestioner, called with 2 arguments specified_apps set to app_labels and dry_run set to self.dry_run.
return evaluated result of the method connection.send_messages with messages as argument.
from django.utils.encoding import force_str and force_text into default name space.
call the function settings.is_overridden with argument string 'MIDDLEWARE_CLASSES', if the result is boolean False,
self._is_rendered is boolean False.
define the method to_python with arguments self and value.
import module re.
substitute i-th element of self.forms for form.
get the type of the self object, on the result call the __bool__ method with an argument self, return the result.
third element of url_fields is an empty string.
define the method validate with arguments self and value.
call the method self.validate_key with key as argument.
raise an CommandError exception with an argument string 'There is no system check with the "%s" tag.', where '%s' is replaced with invalid_tag.
for every result and params in possibility,
if process_all is true,
increment length of boundary by integer 6, substitute the result for self._rollback.
define the method __hash__ with an argument self.
token is an instance of Token class, created with 2 arguments: TOKEN_COMMENT and content.
for model in model_list,
return self.
call the self.path function with argument path, substitute it for path.
raise an base.SerializationError exception with argument string "Non-model object (%s) encountered during serialization", replace '%s' with type of the obj object.
if self.directory_permissions_mode is not None,
define the method as_text with an argument self.
program_options is list containing string '--check-format'.
if self is false,
define the method __deepcopy__ with 2 arguments: self and memo.
if data is an instance of MultiValueDict or MergeDict,
get the value under the 'use_default_ignore_patterns' key of the options dictionary, if it is true,
write errors to self.stdout.
if pattern has an attribute '_callback_str',
from __future__ import unicode_literals into default name space.
define the method root_attributes with an argument self.
call method request.build_absolute_uri, use the result as an argument for function call of iri_to_uri, use the result as an argument for function call of force_bytes, use the result as an argument for calling the method hashlib.md5, put the result in url.
from django.utils.translation import ugettext_lazy into default name space.
from datetime import datetime into default name space.
return data.
define the function ungettext_lazy with 3 arguments: singular, plural and number set to None.
if 'is_safe' attribute of func object exists and is true and obj is an instance of SafeData,
if run_syncdb and executor.loader.unmigrated_apps is true,
do nothing.
return instance.
DEFAULT_MAX_NUM is an integer 1000.
if expires is not None,
define the method _cull with argument self.
if self.is_bound is true,
append orig_file to string '#: ', substitute it for new.
if length of parts is greater than integer 1 and last element of parts is contained in self.compression_formats,
if connector is true, substitute it for self.connector, otherwise substitute self.default for self.connector.
if offset is an instance of timedelta class,
import code.
define the function to_current_timezone with an argument value.
call the __init__ method from the base class of the JsonResponse class, called with arguments: content set to data,
define the method incr with 4 arguments, self class instance, key, delta defaulting to integer 1 and version defaulting to None.
derive the class PageNotAnInteger from the InvalidPage base class.
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries: 'alternate' for 'rel' and value under the 'link' key of self.feed dictionary for 'href'.
get the value under the key 'exclude' of the options dictionary, substitute it for exclude.
if OSError, renamed to e, exception is caught,
if self.verbosity is greater than integer 0,
if kwarg_format is true,
replace tags for check.tags.
return boolean False.
if AttributeError exception is caught.
return None.
define the method h with an argument self.
slice language from (p+1)-th index to the end, calculate the length of the obtained segment, if it is greater than integer 2,
define method _get_height with self class instance as the argument.
from __future__ import unicode_literals into default name space.
substitute MultipleHiddenInput for hidden_widget.
if use_tls is None substitute settings.EMAIL_USE_TLS for self.username, if not substitute use_tls for self.use_tls.
append a tuple with 2 entries lang and priority to result.
call the method cache.clear.
return nodes.
call the function check_for_migrations with arguments app_config and connection.
return ZERO.
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
if not,
call the function check_for_language with an argument lang, if it evaluates to false,
if call to the function response.has_header with 'Expires' as argument returns boolean False,
if i is not an instance of six.integer_types class,
args is an empty list.
parser._namedCycleNodes is an empty dictionary.
special_floats is an list with 3 elements, pos_inf, neg_inf and nan, all converted to strings.
return ret.
if ch equals a string '<',
call the method token.split_contents, substitute the result for bits.
substitute dirpath for self.dirpath.
decorator function register.filter with an argument is_safe set to boolean True.
try,
FILE is a file".
if length of bits equals integer 2,
call the function resource_string with 2 arguments app_config.name and pkg_name, substitute the result for resource.
call the function split_url with an argument value, substitute the result for url_fields.
if StandardError, renamed to e, exception is caught,
expires is None.
try,
call the method self.add_truncation_text with 2 arguments: elements of words joined in a string, separated with whitespaces, and truncate, return the result.
try,
call the function _load_serializers.
return message.
if self.args is true,
derive class Command from the base class AppCommand.
if self.is_required is false,
call the method tempfile.NamedTemporaryFile with arguments: suffix set to string '.upload' and dir set to settings.FILE_UPLOAD_TEMP_DIR.
call the method self.empty_block_tag with an argument token.
close fd file.
define the method close with self and dictionary pairs of elements kwargs.
if cc contains item 'max-age',
import module '.management' from the package app_config.name.
substitute opts for value under the 'opts' key of definition dictionary.
define the method is_url with arguments self and template.
define the function safe_join with 2 arguments base and unpacked dictionary paths.
if bits is false,
return klass.
call the method self._iteritems, for every k and v in the result,
return value under the 'wsgi.url_scheme' key of self.environ dictionary.
convert ret to a boolean, return it.
bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
substitute stream_or_string for self.stream.
define the method delete with self, key and version set to None as arguments.
instantiate TimestampSigner object with arguments key and salt set to salt, call its method unsign with arguments: s and max_age set to max_age, use it as an argument for the force_bytes function, substitute the result for base64d.
define the method configure_logger with 4 arguments: self, name, config, incremental set to boolean False.
return the absolute path of file path filepath, substitute it for filepath.
call the self._createdir method.
raise an CommandError exception with an argument string "errors happened while running msguniq\n%s", where '%s' is replaced with errors.
compile regex from raw string '(?P<hour>\d{1,2}):(?P<minute>\d{1,2})(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?', substitute it for time_re.
substitute context for self.context.
call the function six.reraise with 3 arguments: CommandError, CommandError created with argument new_msg, and third element of the return value of the function sys.exc_info.
if val is an instance of tuple,
convert num to an integer, substitute it for length.
remove original_path directory.
closed is a property object with _get_closed as a getter method.
if not,
define the function save_m2m.
call the method self.__class__, substitute the result for result.
break from the loop execution,
use global variable _default.
strfunc is an instance of a class Name, created with 2 arguments: string "__str__" and prefix as unifunc.prefix.
decorator method register.tag with an argument 'extends',
derive the class NowNode from Node base class.
yield line.
if not,
raise an TemplateSyntaxError exception with an argument string "Variables and attributes may not begin with underscores: '%s'", where '%s' is replaced with var.
substitute absolute value of the exponent for decimals.
if striped x by '.' character is not contained in ignored, for every x in ext_list put x into a set, return the resulting set.
call the __init__ method of the base class of the class LocaleRegexURLResolver, with arguments:  None, urlconf_name, default_kwargs, app_name and namespace.
call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.
sort loader.migrated_apps, substitute it for app_names.
substitute val for self._encoding.
call the method type.__new__ with 4 arguments: cls, name, empty tuple and d, return the result.
substitute name for self.name.
if SystemExit exception is caught,
from django.core.servers.basehttp import get_internal_wsgi_application into default name space.
substitute '%r' in string 'Cache key contains characters that will cause errors if used with memcached: %r' with key, call the function warnings.warn with previous string and CacheKeyWarning as arguments.
define the initialization method __init__ with arguments: self class instance, dir and params.
try,
return func.
from __future__ import unicode_literals into default name space.
decorator method register.tag with an argument 'block',
define the method scheme with an argument self.
from django.apps import apps into default name space.
try,
once split at the '.' value under the 'ENGINE' key of the connection.settings_dict dictionary, substitute last element of the result for backend_name.
define get_script_name function with environ as an argument.
if filename ends with string '.mo',
import module fnmatch.
if not,
return value.
if arg is an instance of Promise class,
if six.PY2 is true and path is not an instance of byes type,
skip this loop iteration.
if block_name is contained in parser.__loaded_blocks,
import module codecs.
append f.name to exclude.
if port exists substitute it for self.host, if not substitute settings.EMAIL_PORT for self.port.
for every d in last element of self.dicts,
otherwise if t.token_type equals TOKEN_COMMENT,
call the function format_html with 2 arguments: string '<input{0} />', result of the function flatatt called with an argument final_attrs, return the result.
from email.mime.text import MIMEText into default name space.
COMMENT_TAG_END is a string '#}'.
return fext.
try,
import module struc.
call the method logging.captureWarnings with an argument boolean True.
import module re.
from email.message import Message into default name space.
define the method close with argument self.
messages is an empty dictionary.
raise an ValidationError with 2 arguments: value under the 'max_length' key of the self.error_messages dictionary and code set to 'max_length'.
try,
substitute self._rollback for rollback.
define the method display with an argument self.
convert tagname to lowercase, substitute it for tagname.
define the method __bool__ with argument self.
get self.to_field attribute of self.parent_instance, substitute it for orig.
remove last 2 elements from bits.
if call to the function contains with 2 arguments: last element of result and Group, evaluates to true,
default_validators is an list containing validators.validate_ipv4_address.
from django.apps import apps into default name space.
get config dictionary element under 'loggers' key, if it exists substitute it for loggers, if not, loggers is EMPTY_DICT.
replace '%s' in string "Downloading %s\n", with display_url, write it to self.stdout stream.
renderer is None.
call the method cursor.execute with string "DELETE FROM %s WHERE cache_key = %%s" as argument, substitute the '%s' with table and list containing key, respectively.
from django.utils import six into default name space.
for every refto and refs in return value of references.items method.
substitute subject for self.subject.
call the function _super with 2 arguments: class SimpleLazyObject and self, call the method __init__ on the result.
call the method self.as_ul, return the result.
call the function format_html_join twice, first time with 3 elements: an empty string, string ' {0}="{1}"' and sorted return value of the items of the attrs dictionary, and second time with 3 arguments: an empty string, string ' {0}', and sorted list of boolean_attrs elements, concatenate the results and return the resulting list.
define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
substitute the value under the fieldname key of the self.fields dictionary for field.
finally,
call the function _get_model with an argument value under the 'model' key of the d dictionary, substitute the result for Model.
call the function do_translate with 2 arguments: message and string 'ugettext', return the result.
if cursor is true,
if rest is not False, None is considered False,
if value is an instance of str type,
call the method os._exit with an argument integer 1.
assign value and params to the value under the name key of the outdict dictionary.
if not,
define the method utcoffset with 2 arguments: self and dt.
call the method node.getElementsByTagName with the argument string 'natural', substitute the result for keys.
call the method self.queryset.none, return the result.
call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, return the result..
if old_field_name is true,
value is an instance of ConvertingTuple class, created with an argument value.
pk_key is a string "%s-%s", where '%s' is replaced with: result of the method self.add_prefix called with an argument i, and self.model._meta.pk.name.
set the attribute name from value under the DEFAULT_CACHE_ALIAS key of caches dictionary to value, return it.
if OSError or IOError exceptions were raised,
from django.core.files import temp as tempfile into default name space.
define the method __init__ with arguments self, stream and boundary.
convert processors elements into a tuple, substitute it for _standard_context_processors.
divide self.data.day by 10, substitute reminder of the result for last.
if self.required is true,
inner_text is an empty list.
join self.dirpath and self.file into a file path, substitute it for orig_file.
if an exception occurred,
define the method check_migrations with an argument self.
call the function validate_ipv4_address with an argument value.
raise a exception of CommandError class, with string "Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?", replace all the '%s' occurrences with migration_name and app_label, respectively.
substitute timezone for self.timezone.
substitute chunk_size for self.chunk_size.
if mimetype is None,
return an instance of SafeText, created with an argument t.
if not,
if self.deactivate is true,
if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
from django.utils.encoding import force_bytes,  force_text,  force_str and iri_to_uri into default name space.
call the function copy with an argument self.render_context, substitute the result for duplicate.render_context.
call the self.path with argument name, substitute it for name.
call the method urlresolvers.RegexURLResolver with raw literal string '^/' and urlconf as the arguments, substitute the result for resolver.
call the method self.fields.items, for every name and field in result,
status_code is an integer 500.
for every tag in tags, if return value of the method checks.tag_exists called with an argument tag, evaluates to false, use tag as an argument to call the iterator method next, substitute the result for invalid_tag.
if not,
if name is not None,
define the function urlize with 2 arguments value and autoescape set to None.
derive the class CheckRegistry with object as base class.
from os.path import join, normcase, normpath, abspath, isabs, sep and dirname into default name space.
derive the class DecimalField from the base class IntegerField class.
try,
convert arg to an integer, substitute it for p.
end_index is None.
if s is an instance of an object six.memoryview.
if OverflowError or ValueError, renamed to exc, exceptions are caught,
substitute offset.seconds for offset.
from collections import OrderedDict into default name space.
define the method create_token with 4 arguments: self, token_string, source and in_tag.
if max_age is not None,
call the method six.iteritems with an argument base.base_fields, convert it to a list and append fields to it, substitute the result for fields.
if widgets is true and f.name is contained in widgets,
create a list out of fist end_text_pos text elemnts, substitue it for out.
substitute resolver_match for request.resolver_match.
call the self.initial_form_count method, return the sublist of self.forms from the beginning to the previous result as the end index.
if setting has an "SERIALIZATION_MODULES" attribute,
t is an instance of Template class, created with 2 arguments output and name set to filepath.
for every file in value under the 'files' key of the options dictionary.
return dec.
self.bad_cookies is an empty set.
concatenate string '"', guts and string '"', substitute the result for tok.
call the function datetime.datetime with 3 arguments: value.year, value.month and value.day, substitute the result for result.
cached_loaders is an empty list.
define method __exit__ with self, exc, value and tb as the arguments.
raise an Resolver404 exception with an argument dictionary containing 2 entries: new_path for 'path' and tried for 'tried'.
if not,
self._post is an instance of QueryDict class created with an empty string as argument.
return key_func.
define the method get with 5 arguments, self class instance, key, default set to None and version set to None.
from django.core.management.base import BaseCommand and CommandError into default name space.
if not,
define the method transform with 3 arguments: self, node and results.
define the method format_output with 2 arguments: self and rendered_widgets.
get the value under the field key of the self.cleaned_data dictionary, if it exists substitute it for field_value, if not field_value is None.
if field is contained in self.errors,
EventHandler.modified_code is I18N_MODIFIED.
slit by whitespace the value under the 'COMP_WORDS' key of the os.environ dictionary, substitute the result without the first element for cwords.
convert initial and data into boolean, if they are not equal return boolean True, if they are return boolean False.
if self.forms is true,
from django.forms.forms import everything into default name space.
derive the class CheckboxSelectMultiple from the RendererMixin and SelectMultiple base classes.
from django.utils.translation import ugettext and ungettext into default name space.
fetch one record from the database cursor points at, substitute the first element of return value for num.
define the method size with arguments self and name.
import module json.
call the function update_wrapper with 3 arguments: _dec, decorator and assigned as result of the function available_attrs, called with an argument decorator.
args is an empty tuple.
template is an instance of Template class, created with an argument content.
define the method getvalue with an argument self.
substitute HTMLParser from the module _html_parser for HTMLParser.
define the method __iter__ with an argument self.
define the function escape_quotes with an argument m.
define the method translate_token with 2 arguments: self and token.
if max_age is not None,
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
define the function join with 3 arguments: value, arg and autoescape set to None.
call the method self.clear_checkbox_name with an argument name, substitute the result for checkbox_name.
get 'dependencies' attribute of the model.natural_key, substitute it for deps, if the attribute doesnt exist, deps in an empty list.
response.content is bytes empty string.
if content_disposition is true,
define the method splitext with arguments self and the_path.
substitute path_override for path if path_override is not None, otherwise substitute request.path for path
increment msg_count by one.
from django.conf import settings into default name space.
define the method _set_size with arguments self and size.
sum sign and hhmm, substitute the result for name.
call the function select_template with 2 arguments: template_name, dirs, substitute the result for t.
self.xml is a instance of SimplerXMLGenerator class created with 2 arguments: self.stream and value under the 'encoding' key of the options dictionary, if the key doesnt exists use settings.DEFAULT_CHARSET instead.
call the method self.end_object with an argument obj.
call the function new_method_proxy with an argument operator.delitem, substitute the result for __delitem__.
selected_html is an empty string.
define the method set with 5 arguments, self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
define the method __init__ with 2 arguments self and file.
define the function do_include with 2 arguments parser and token.
define the method add_item_elements with 3 arguments: self, handler and item.
call the method self._isdst with an argument dt, if it evaluates to true,
define the method __eq__ with 2 arguments: self and other.
set file pointer at the beginning of the self.file file.
substitute version_info from module sys for surrent_version.
try,
define method handle with arguments self, unapcked list app_labels and unpacked dictionary options.
define the method __init__ with 2 arguments: self and filter_expression.
return result.
call the function force_str with 3 arguments: string "<Text Node: '%s'>", with '%s' replaced with first 25 elements of self.s string, string 'ascii' and errors set to a string 'replace', return the result.
for every template_dir in template_dirs,
params is an dictionary containing 2 initial entries: value for 'datetime' and current_timezone for 'current_timezone'.
substitute parts, without the first element, for path.
call the function func with an argument path.
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary, code set to an string 'invalid_choice' and dictionary params with an entry: choice for 'value'.
substitute key for value under the KEY key of the oldroot dictionary.
replace all the strings '\\' with '/' in the string name, use it as an argument for the call to the force_text function, return the result.
output_transaction is boolean True.
call the method parser.add_argument with 5 arguments: string '--natural-foreign', action set to string 'store_true', dest is string 'use_natural_foreign_keys', default is boolean False and help is a string 'Use natural foreign keys if they are available.'.
substitute conn_type for self.connector.
call the middleware_method with the request as an argument, substitute the result for response.
call the method parser.parse, return the result.
try,
if potfile fie exists,
if dt is None is_dst is boolean False, otherwise call the method self._isdst with an argument dt, substitute the result for is_dst.
call the method self._start_relational_field with the argument field.
if sublist_item is true,
define the method attach with 4 arguments: self, filename set to None, content set to None and mimetype set to None.
otherwise, if first and the last character of attrvalue are '\' charter  or first and last character of attrvalue are '"' character,
directory_created is an empty dictionary.
if not,
define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
write the string "  Creating tables...\n" to the standard output.
from django.core.management.base import BaseCommand and CommandError into default name space.
yield a tuple with 2 elements: an empty string and self.field.empty_label.
size is a property object with _get_size as getter method and _set_size as setter method.
if sys.platform starts with string 'java',
define the method handle_fk_field with self, obj and field arguments.
return s.
parser is an instance of MultiPartParser class, created with 4 arguments: META, post_data, self.upload_handlers and self.encoding.
from django.utils.six.moves.urllib.parse import urljoin into default name space.
call the value.natural_key method, substitute the result for natural.
call the method self.itervalues, return the list of results.
define the method non_field_errors with an argument self.
multiply delta.days with an integer 86400 add to the result delta.seconds, if the result is greater than integer 0, substitute it for max_age, if not, max_age is integer 0.
if args in None of boolean False, substitute it for an empty dictionary.
return obj_dict.
call the function sys.getfilesystemencoding if it evaluates to true, substitute its result for fs_encoding, otherwise call the function sys.getdefaultencoding and substitute its result for fs_encoding.
call the method parser.add_argument with 3 arguments: string 'addrport', nargs='?' and help as a string 'Optional port number, or ipaddr:port'.
from django.utils.six.moves import http_cookies into default name space.
call the data.decode method with a string 'latin-1' as an argument, use the result as an argument for the call to the json.load function, return the result.
define the method empty_block_tag with 2 arguments: self and token.
call the method self._mark_post_parse_error.
define the function url with 2 arguments: parser and token.
if six.PY2 is true and path is not an instance of six.text_type type,
call the initialization method for the base class, _html_parser.HTMLParser.__init__ with self, convert_charrefs set to convert_charrefs and dictionary **kwargs as the arguments.
define the method nodelist with an argument self.
try,
intrans is boolean False.
write ',' to the self.stream file stream.
value under the field.attname key of the data dictionary is None.
import module warnings.
call the method self.choice_input_class with 5 arguments: self.name, self.value, return value of the method self.attrs.copy, choice and i, substitute the result for w.
define the function remove_move with an argument name.
if not,
raise an exception parser.error_class with an argument string "Not expecting '%s' in this position in if tag.", where '%s' is replaced with self.id.
match rest string with self.WORD_PATTERN regex, substitute the result for m.
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
return exclude.
call method request.META.get with arguments header and None.
nm and addr are addr.
split extra_classes into words, by whitespaces, substitute the result for extra_classes.
convert fist p elements of locale to lowercase, append '_' to it, covert to lowercase locale elements from (p+1)-th index to the end, append it to the previous result, return it.
substitute _iterlists for iterlists.
append list containing 4 elements: 'CVS', '.*', '*~' and '*.pyc', to ignore_patterns.
__all__ is a list containing a string 'file_move_safe'.
define the function gen_filenames with an argument only_new defaulting to boolean False.
EMPTY_DICT is an empty dictionary.
from django.conf import settings, global_settings into default name space.
return integer 1.
return boolean False.
derive the class _OFFSET from the Structure base class.
if value is None,
call the method subcommand_cls.create_parser with 2 argument an empty string an first element of cwords, substitute it for parser.
sum version and delta together, return the result.
call the method re.search with 2 arguments: raw string '^[_a-zA-Z]' and name, if it evaluates to false,
clean is a lambda function with self and x as arguments, return value is length of x.
from django.utils import formats and six into default name space.
define the function is_writable with path as argument,
params is a list with second element of source as a element.
help is a string, "Prints the custom table modifying SQL statements for the given app name(s).".
self.charset is None.
if not,
insert token at the beginning of self.tokens.
if length of bits is not integer 2 or 3,
raise an TemplateSyntaxError exception with an argument string "'%s' tag takes only one argument", where '%s' is replaced with first element of bits.
raise an TemplateSyntaxError with an argument string "Invalid filter: '%s'", substitute '%s' with filter_name.
define the function number_format with 4 arguments: value, decimal_pos set to None, use_l10n set to None,
define the method _isdst with 2 arguments self and dt.
define the method set with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
derive the class BaseLoader from the object base class.
define the function modelformset_factory with 18 arguments: model, form set to ModelForm, formfield_callback set to None,
if not,
raise an NotImplementedError exception with argument string "This backend doesn't support absolute paths.".
write a white space to the self.stream file stream.
call the method token.split_contents, substitute the result for bits.
delete _active.value.
call the function re.compile with an argument raw string '\S', substitute it for dot_re.
self.stdout.ending is None.
if NotImplementedError exception,
if i is smaller than result of the method self.initial_form_count and key 'instance' is not contained in kwargs,
if response.streaming is True,
if is_templatized is true,
if the result to the method call response.has_header, with string 'Cache-Control' as an argument is boolean False,
if not,
call the method template.render with an argument context, substitute it for content.
if obj is an instance of datetime.datetime,
call the function urlunsplit with an argument url_fields, use the result as an argument for the call to the function split_url, substitute the result for url_fields.
from django.dispatch import Signal into default name space.
convert to integer value of dictionary cc under the key 'max-age', if it is smaller than the value of dictionary kwargs under the key 'max_age', substitute kwargs value under the key 'max-age' by it.
define the method normalize_col_name with 4 arguments: self, col_name, used_column_names and is_relation.
from django.test.utils import get_runner into default name space.
substitute self for value.configurator.
if count of occurrence of '.' in ip_str is equal to integer 3,
define the method render with 2 arguments: self and context.
self.file_permissions_mode is a tuple containing: file_permissions_mode if file_permissions_mode is not None, or settings.FILE_UPLOAD_PERMISSIONS if it is.
from django.core.management import call_command into default name space.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
substitute locale_dir for self.locale_dir.
if not,
substitute link_next for value under the NEXT key of the link_prev dictionary.
get the value under the 'no_startup' key of the options dictionary, if it evaluates to false,
value under the 'declared_fields' key of the attrs dictionary is an instance of OrderedDict class, created with an argument current_fields.
substitute rhs for number_value.
call the method bad_app_labels with an argument app_label,
otherwise if self.waiting_readers is not equal to integer 0,
if not,
call the function _ with an argument string 'AM', return the result.
substitute field.rel.to for rel_model.
try,
break from the loop execution,
define function patch_cache_control, with response and dictionary set of arguments, kwargs, as arguments.
substitute self._empty_value for value.
return value if six.PY2 is true, if not return value.encode(ISO_8859_1).
if status is not equal to STATUS_OK,
filename is a tuple containing 3 initial elements: string 'utf-8', and empty string and filename.
define the method temporary_file_path with argument self.
if command.verbosity is greater than integer 1,
define the method __repr__ with argument self.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
try,
if self does not have '_files' attribute,
if extra_classes has an attribute 'split',
define the function check_for_language with an argument lang_code.
substitute filter_expression for self.filter_expression.
docstirng
define the function inotify_code_changed.
if output is true,
try,
try,
call the method path.encode with an argument fs_encoding, return the result.
define the method error with 3 arguments: self, token and msg.
if not,
call the method logging.Formatter with 2 arguments: fmt and dfmt, substitute the result for result.
call the method parser.compile_filter with an argument bit, append the result to args.
get the value under the 'database' key of options dictionary, use it as a index to get connections list element, store it in connection.
if templatetags_modules is false,
define the __getitem__ method with self and alias arguments.
call the method signals.request_finished.send with an argument sender set to self._handler_class.
if app_config.models_module is None,
extend collect list with settings.TEMPLATE_CONTEXT_PROCESSORS.
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
if length of bits is lesser than integer 2,
call the method logging._acquireLock.
substitute string 'ascii' for encoding.
for every format in self.input_formats,
replace '%s' in string "Notice: Couldn't set permission bits on %s. You're probably using an uncommon filesystem setup. No problem.", with new_path and self.style.NOTICE, respectively, write it to self.stderr stream.
return palette.
for every f in fields,
import module hashlib.
if ValueError exception is caught,
define the method end_object with argument self and obj.
define the function decorator with an argument klass.
call the method logging._handler.clear.
call the function six.iteritems with an argument kwargs, for every key and value in the result,
define the function time_format with 3 arguments: value, format set to None and use_l10n set to None.
if pythonrc is not a file,
call the method self.style.NOTICE with an argument string "Run 'python manage.py migrate' to apply them.\n", write it to self.stdout.
call the function _load_serializers.
if bit is true,
if errors is true,
try,
get the value under the ext key of the extension_map dictionary, substitute it for cls.
if self.queryset is not None,
raise and exception InvalidCacheBackendError with string "Could not find backend '%s': %s" as argument, replace '%s' with backend and e, respectively.
if help_texts is true and f.name is contained in help_texts,
call the method LocaleRegexProvider.__init__ with arguments self and regex.
if value is an instance of six.text_type class,
define the method __str__ with an argument self.
otherwise if cahr equals a string '\\',
append decimals to parts.
raise an exception ImproperlyConfigured with string "You must define a '%s' cache" as argument, with '%s' replaced with DEFAULT_CACHE_ALIAS converted into a string.
define the method get_json_data with 2 arguments self and escape_html set to boolean False.
decorator function wraps with an argument fset.
table_output is an empty list.
from functools import update_wrapper.
import module warnings.
call the method match.group with an argument integer 0, return the result.
if not,
call the method __init__ from the base class of the class SimpleTemplateResponse, return the result.
derive the class EscapeBytes from bytes and EscapeData base classes.
if not,
return statements.
call the method fp.getvalue, return the result.
return None.
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
get the value under the key 'interactive' of options dictionary, substitute it for interactive.
if widgets is not None,
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide an handle_m2m_field() method'.
substitute deprecation_warning for self.deprecation_warning.
call the function http_date with no arguments, and substitute its return value for value of dictionary response under the key 'Last-Modified'.
_iteritems is a string "items".
if key is contained in dict_,
new_second_item is an empty list.
if not,
return an empty string.
print FASTCGI_HELP to the standard output.
if not,
call the method request_finished.connect with argument update_watch.
call the os.open function with full_path, flags and octal number 0o666 as arguments, substitute the result for fd.
delete name attribute from self._wrapped object.
if filters is true,
return mod.register.
substitute complain for __iadd__.
import module copy.
try,
substitute pubid for self.pubid.
define the method evalu with 2 arguments self and context.
if "'stream'" is not contained in te converted into a string,
call the method self.attrs.copy, substitute the result for attrs_plus.
call the method transaction.atomic with an argument using set to self.using, with the result,
substitute first element of nonlocal_root for root.
call the method operator.attrgetter with an argument _func_code, substitute the result for get_method_code.
call the function get_format with an argument string 'DATE_INPUT_FORMATS', substitute the first element of the result for input_format.
call the method nodelist.get_nodes_by_type with an argument nodetype, extend nodes with the result.
try,
return EventHandler.modified_code.
return an empty string.
return new_class.
if handlers is true,
call the function middleware_method with request and response as the arguments, substitute the result for response.
if can_fail is true,
define the function get_default_timezone_name.
get the value under the settings.__module__ key of the sys.modules dictionary, use its __file__ field as an argument, for the call to the function upath, get the directory name of the resulting system path, join the result and string 'locale', into a valid file path, substitute it for globalpath.
join p and cmd into a file path, substitute it for f.
define the method is_checked with an argument self.
call the method self.inner_run with 2 arguments: None and unpacked dictionary options.
if data is true, substitute list created from elements of data, substitute it for self.keyOrder, otherwise self.keyOrder is an empty list.
get opname attribute from int object, substitute its field __doc__ for opfunc.__doc__.
append string "Field renamed because of name conflict." to field_notes.
if Exception, renamed to e, exception is caught,
for every e in etags call the method e.encode with an argument string 'ascii', call the method decode on the result with an argument, string 'unicode_escape', substitute the list of results for etags.
e.args is a tuple containing string "Problem installing fixture '%s': %s", where '%s' is replaced with fixture_file, e.
if PY3 field of six is boolean True,
return boolean True.
call the function get_exception_reporter_filter with an argument request, substitute the result for filter.
call the method regex.search with 2 arguments: text and pos.
for every line in return value of the method self.handle_inspection called with an argument options,
try,
raise an TemplateSyntaxError with an argument string "%r tag takes at least one argument: the name of the template to be included.", where '%r' is replaced with first element of bits.
derive the class WSGIRequest from base class http.HttpRequest.
replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the self.urlconf_module, substitute it for callback, if the attribute doesnt exists, callback is None.
get the value under the key 'locale' of the options dictionary, substitute it for locale.
if OSError, NotImplementedError or AttributeError exceptions are caught,
call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.
skip this loop iteration.
substitute initial_forms for total_forms.
from django.utils import six and timezone into default name space.
derive the class datetime from the real_datetime base class.
if TypeError, renamed to te, exception is caught,
call the function get_default_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.
format translated with rhs, substitute the result for translated.
substitute first element of item for k.
reuturn cache.
call the method threading.RLock, substitute the result for self._lock.
call the method parser.expression with an argument bp, substitute the result for self.first.
call the method get_runner with 2 arguments: settings and value under the 'testrunner' key of the options dictionary, substitute it for the TestRunner.
call the method tempfile.mkdtemp with 2 arguments: prefix set to prefix, suffix set to string '_extract', substitute the result for tempdir.
assign the value of the dictionary color_settings under the key role to format, if key doesnt exist assign the empty dictionary.
call the method self.build_attrs with 3 arguments: attrs, type set to self.input_type, name set to name, substitute the result for final_attrs.
self._populated is boolean True.
define the method items with an argument self.
call the encode function on the Header class instance, created with argument val, substitute the result for val.
return boolean False.
if self.domain equals a string 'djangojs',
define the method content with 2 arguments: self and value.
return s.
from django.core.management.base import BaseCommand and CommandError into default name space.
return an empty string.
if not,
if file path top_dir doesnt exists,
prepend '.' to the i-th element of the ext_list.
import module smtplib.
if parent has an attribute 'render',
append rel_model to deps.
call the method six.iteritems with an argument kwarg, convert the result into a list, substitute first element of the result for param and value.
if self.use_natural_primary_keys is false and obj doesnt have 'natural_key' argument.
is_templatized is boolean True.
call the method self.__bytes_cast, return the result.
if field.rel.to._meta.pk.rel is true,
substitute content_length for self._content_length.
if not,
substitute server for self._servers.
derive the class Serializer from the PythonSerializer base class.
call the method self.autocomplete.
if settings.DEBUG is true,
call the method mail.outbox.extend with messages.
raise an ValueError exception with string "The file cannot be reopened." as an argument.
if length of bits is lesser than integer 3 or second element of bits is not equal to string 'as',
substitute length of s for end.
raise an TemplateSyntaxError exception with an argument string "'%s' is not a valid tag library: %s", where '%s' is replaced with taglib and e.
get the value under the 'charset' key of the content_type_extra dictionary, substitute it for charset.
if self._non_form_errors is None,
return boolean False.
if match is true,
increment num by one.
join elements of output into a string, separated by newline characters, return the result.
if self has an attribute '_coerce',
call the method formfield.queryset.complex_filter with an argument limit_choices_to, substitute the result for formfield.queryset.
define the method __init__ with an argument self.
if ch equals a string '?',
substitute newretval for retval.
decrement factor by one.
derive the class Textarea from the Widget base class.
new_value is a sum of value and delta.
from django.utils.translation import trans_real as trans.
call the method MIMEMultipart.__setitem__ with arguments self, name and val.
if not,
get the 'do_not_call_in_templates' attribute of current object, if it exists and is true,
call the function locks.unlock with argument fd.
if iso_input is not contained in val,
define private method __repr__ with argument self.
define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
if not,
call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for unencoded_ampersands_re.
evaluate the field.get_attname, use the result as the name of the obj attribute to get, substitute it for related_att.
return view_func.
define the method __iter__ with an argument self.
call the function force_text with an argument text, substitute the result for input_val.
define the method __getitem__ with 2 arguments: self and idx.
msg is a string "%(model)s.Meta.%(opt)s cannot be a string. Did you mean to type: ('%(value)s',)?", where '%(model)s' is replaced, with new_class.__name__, '%(opt)s' is replaced with opt and '%(value)s' is replaced with value.
for every form_errors in self.errors sum length of return value of the method self.non_form_errors and length of form_errors, return the result.
return the result of the call to the function force_text, with s, encoding, string_only and errors as arguments.
call the method self.reader_enters.
from django.utils.module_loading import import_string into default name space.
if field.name attribute of obj is not None,
if not,
return msgs.
if KeyError exception is caught,
define the method __len__ with an argument self.
if signal has an attribute 'SIGTTOU',
convert _serializers into a list, return it.
return kwargs.
if decimal_separator is contained in value,
call the method self.setFeature with 2 arguments: handler.feature_external_ges and boolean False.
define the method pop with 2 arguments: self and idx set to negative integer 1.
if s is an instance of bytes class,
raise an AttributeError exception with an argument string: "'%s' object has no attribute 'ordered_forms'", where '%s' is replaced with self.__class__.__name__.
call the function io.open with 3 arguments: potfile, string 'r' and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
for every line in sequence_sql,
divide hits by a floating point number self.per_page, convert its ceiling value to an integer and substitute it for self._num_pages.
call the method formats.sanitize_separators with an argument value, substitute the result for value.
otherwise if basetype equals a string 'message' and subtype equals a string 'rfc822',
define the method __str__ with an argument self.
import module time.
do nothing.
define the method _get_to_python with 2 arguments: self and field.
if value under the 'enclosure' key of the item dictionary is not None,
if s is an instance of an object bytes.
if f is an instance of models.FileField,
call the function re.compile with an argument raw string "^\s*plural$", substitute the result for plural_re.
define the method __init__ with self class instance, file, and name defaulting to None as arguments.
from django.apps import apps into default name space.
obj is None,
decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.
define the function javascript_quote with 2 arguments: s and quote_double_quotes set to boolean False.
define the method _has_changed with 3 arguments: self, initial and data.
return an empty dictionary.
want_unicode is boolean True.
substitute old_mod for self.mod.
derive the class Loader from the BaseLoader base class.
call the method self.file.write with argument raw_data.
define the method __iter__ with an argument self.
return boolean False.
call the function _long_to_bin with 2 arguments: result and hex_format_string, return the result.
return None.
if not,
call the method warnings.warn with 2 arguments: string "No fixture data found for '%s'. (File format may be invalid.)", where '%s' is replaced with fixture_name, and RuntimeWarning.
self._headers is an empty dictionary.
increment i by 1.
if DecimalException exception is caught,
if self does not has an '_post' attribute.
if mem_args is contained in cache,
call the function func with 3 arguments: obj, autoescape set to context.autoescape and unpacked list arg_vals, substitute the result for new_obj.
if scheme is countaine in self.url_schemes return boolean True, otherwise return False.
define the function indexbytes with 2 arguments buf and i.
call the method field.widget.value_from_datadict with 3 arguments: self.data, self.files and return value of the method, self.add_prefix called with an argument name, substitute the result for value.
decrement remaining by length of emitting.
substitute memoryview for memoryview.
for every ldir in dirs,
return an empty list.
if length of self._cache is greater or equal to self._max_entries,
define the method add_arguments with 2 arguments self and parser.
LOCK_EX, LOCK_SH and LOCK_NB are all equal to integer 0.
if not,
call the method self.__prepare_class__.
if self.localize is true,
format key is an empty string.
return iri.
raise an exception NotImplementedError with string 'subclasses of BaseCache must provide a clear() method' as argument.
derive the LabelCommand class from the BaseCommand base class.
self._leftover is an empty string.
processors is an empty tuple.
attachment is an instance of a class SafeMIMEText, created with arguments: content, subtype and encoding.
call the function conditional_escape with an argument arg, call the method join on the result with an argument value, substitute the result for data.
call the __add__ method with an arguments rhs from the base class of the class SafeBytes, substitute the result for t.
decorator stringfilter,
raise an TypeError with an argument string "relative imports require the 'package' argument".
call the method self.as_table, return the result.
substitute result of the function urlparse with an argument ur1 for p1 and result of the function urlparse with an argument ur2 for p2.
call the exp.replace with microsecond set to integer 0, substitute the result for exp.
substitute self.max_num for total_forms.
define the method delete_cookie with 4 arguments: self, key, path set to character '/' and domain set to None.
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
if six.PY3 is true,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
for every f in files,
if self.connection is true,
substitute _iteritems for items.
from itertools import dropwhile into default name space.
substitute producer for self._producer.
if StandardError, renamed to e, exception is caught,
if title is an instance of list or tuple,
derive the class BlockContext from the Exception base class.
call the function exhaust with an argument self._input_data.
if timezone has an attribute 'normalize',
from email.utils import formatdate into default name space.
call the function force_str with an argument: default if it is true, or if not, first element of the result of the function, get_format called with an argument string 'DATE_INPUT_FORMATS', substitute the result for format.
call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'item_copyright' key of the item dictionary.
substitute self.parent_instance.pk for value under the 'initial' key of the kwargs dictionary.
in string '%s_%d', replace '%s' with new_name and '%d' with num, while the result is contained in used_column_names,
if words is not empty and length is smaller than or equal to integer 0,
define the method _raw_value with 2 arguments: self and fieldname.
otherwise if name is contained in lib.filters,
add bits to a tuple, return it.
import module sys.
define the function save_m2m.
if data_set is not equal to initial_set, return boolean True, otherwise return boolean False.
if TypeError or ValueError exceptions are caught,
call the method sys.stderr.write with an argument string "  Unable to load the flup package.  In order to run django\n".
get the value under the 'primary_keys' key of the options dictionary, substitute the result for pks.
if ValueError exception is caught,
call the method self.create_select with 6 arguments: name, self.month_field, value, month_val, choices and self.month_none_value, substitute the result for the value under the 'month' key of the html dictionary.
if cache_timeout equals to None,
call the function patch_cache_control, with response and max_age set to cache_timeout as arguments.
if not,
call the method self.create_nodelist, substitute the result for nodelist.
return token.
call the django.setup method.
call the function reverse with 4 arguments: concatenated project_name, character '.' and view_name, args as args, kwargs as kwargs, current_app as context.current_app, substitute the result for url.
from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.
zbuf is an instance of BytesIO class.
create dictionary out of the unpacked dictionary options, using defaults.__dict__ as a mapping function, substitute the result for defaults.
if not,
if count2 does not equals to integer 0,
for every i and ext in enumerated iterable ext_list,
creation_counter is an integer 0.
substitute buffer for memoryview.
return boolean False.
classmethod decorator,
if timeout is None,
do nothing.
if argv is true, substitue it for self.argv, if not substitute sys.argv for self.argv.
raise an ImproperlyConfigured exception with an argument string "Creating a ModelForm without either the 'fields' attribute, "or the 'exclude' attribute is prohibited; form %s needs updating.", where '%s' is replaced with name.
if value is an instance of datetime.date,
if InvalidTemplateLibrary, renamed to e, exception is caught,
raise an TemplateSyntaxError exception with an argument string "Invalid templatetag argument: '%s'. Must be one of: %s", where '%s' is replaced with tag and TemplateTagNode.mapping converted into a list.
if locale_dir is false,
for every dict_ in self.dicts,
write data to fp.
return value.
if settings.DEBUG is true,
define the method __str__ with an argument self.
if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce, if not, self.coerce is an identity lambda function with an argument val.
define the method root_attributes with an argument self.
for v in return value of the function match.groups, convert v into an integer and append i to a list, assign the result for year_val, month_val and day_val, respectively.
if key is contained in dict_,
if name is true,
convert cull_frequency into an integer and substitute it for self._cull_frequency.
append line to lines.
call the method value.decode with an argument charset.
get field.name attribute of the obj, substitute it for related.
define the method appendlist with 3 arguments: self, key and value.
call the method sys.stderr.write with an argument string "ERROR: %s\n", where '%s' is replaced by e.
delete the value under the key key of self._cache dictionary.
if value.__traceback__ is not tb,
define the method parse_args with 3 arguments: self, args set to None and namespace set to None.
return boolean False.
call the Warning function with 4 arguments: string "MIDDLEWARE_CLASSES is not set.", hint tuple containing one string, "Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. django.contrib.sessions.middleware.SessionMiddleware, django.contrib.auth.middleware.AuthenticationMiddleware, and django.contrib.messages.middleware.MessageMiddleware were removed from the defaults. If your project needs these middleware then you should configure this setting.", obj set to None, and id set to a string '1_7.W001', put the result into a list and return it.
call the method self.xml.startElement with argument string 'natural' and an empty dictionary.
call the method self.resolve_template with an argument self.template_name, substitute the result for template.
* Rearrange models' order" as the result. yield string "#
from __future__ import unicode_literals into default name space.
define the function call_command with 3 arguments: name, unpacked list args and unpacked dictionary options.
define the function inlineformset_factory with 20 arguments: parent_model, model, form set to ModelForm,
if settings.USE_TZ is true substitute result of the function timezone.get_current_timezone for tzinfo, if not tzinfo is None.
import module datetime.
if self.help is true,
if commit is false,
substitute file_or_path for file.
do nothing.
define the function media_property with an argument cls.
call the method self._get_validation_exclusions, substitute the result for exclude.
try,
do nothing.
define the function prepare_js_for_gettext with an argument js.
for app_config in return value of the method apps.get_app_configs,
for every var in loopvars,
try,
if size is None,
try,
call the method wm.add_watch with path and mask as arguments.
substitute _itervalues for itervalues.
call the method self.instance.full_clean with 2 arguments: exclude set to exclude and validate_unique set to boolean False.
from django.conf import settings into default name space.
define the method total_error_count with an argument self.
if not,
call the method input with an argument msg and store the result in confirm.
call the method self.build_attrs with an argument attrs, substitute the result for final_attrs.
first and second are None.
raise an ContentNotRenderedError exception with an sring 'The response content must be rendered before it can be accessed.'.
define the method handle with self instance of a class, list args, dictionary options as arguments.
remove first element from remaining_bits, substitute the result for option.
format string '&#%s;' with name, append it to self.fed.
append attr.name to attrs for every attr in self._moved_attributes.
if not,
return value.
if call to the function module_has_submodule with 2 arguments: app_config.module and module_to_search evaluates to true,
if text has an '__html__' attribute,
calculate length of chunk modulo integer 4, substitute the result for over_bytes.
define the function _unpack_ipv4 with an argument ip_str.
substitute number for value under the 'number' key of the kwargs dictionary.
substitute URLInput for widget.
if self.timezone is false,
for field_name every obj in list created from the elements of the return value of the function six.iteritems with an argument attrs. if obj is an instance of Field, append to a list a tuple with 2 elements: field_name, and poped value under the field_name key of the attrs dictionary, substitute the resulting list for fields.
if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
call the method self.open.
value under 'localize' key of kwargs dictionary is boolean True.
return an instance of FilterExpression class, created with 2 arguments: token and self.
substitute the return value of the smart_text function with an argument obj_pk for the value under the 'pk' key of the attrs dictionary.
define the method get_many with self class instance, keys and version defaulting to None as arguments.
break the execution of the smallest enclosing loop.
take all but the length of path_info last elements of script_url, substitute it for script_name.
do nothing.
derive the class Command from the BaseCommand class.
base36 is an empty list.
return boolean False.
return commands.
if value is None,
if not,
if lookup_view is a callable object,
id is None.
substitute params without the first element for params.
call settings.INSTALLED_APPS.
self.none_value is a tuple containing 2 elements: integer 0 and empty_label.
self._done is boolean True.
call the function getInnerText with an argument child, use the result as an argument for the call to the method inner_text.extend.
if id_,
otherwise if self._meta.exclude is true and field is not contained in self._meta.exclude,
call the function _curried_func with 2 arguments: list moreargs appended to args and unpacked, unpacked dictionary created with elements of morekwargs dictionary through the kwargs mapping, return the result.
append resolved_args to a list containing context element, substitute it for resolved_args.
replace '%s' in string "processing locale %s\n" with locale, write it to self.stdout.
if field_desc doesnt end with '(',
return the length of self.children.
if value under the 'subtitle' key of the self.feed dictionary is not None,
define the __init__ method with 6 arguments: self, name, content_type, size, charset and content_type_extra set to None.
call the method self.non_field_errors, substitute the result for top_errors.
termios is None.
open file old_file_name in read bytes mode, with file descriptor as f,
derive the class FileSystemStorage from the Storage base class.
define the method modified_time with arguments self and name.
define the method render with 2 arguments self and context.
define the method close with an argument self.
define the method validate with arguments self and value.
define the method dst with 2 arguments self and dt.
for every first_select in return value of the function _parse_date_fmt.
substitute name for self.name.
from django.utils.module_loading import import_string into default name space.
if ValueError exception is caught,
call the function re.sub with 3 arguments: string "\d([A-Z])", lambda function with an argument m and return value, result of the m.group method called with an argument integer 0 converted into lowercase and t, return the result.
substitute error_messages under the message.code key of error_messages dictionary for message.message.
define the function _wrapped_view with 3 arguments: request, unpacked list args and unpacked dictionary kwargs.
substitute type.__call__ for __call__.
call the function check_for_migrations with an arguments app_config, connection.
derive the class TokenBase from the object base class.
decorator stringfilter,
requires_system_checks is boolean False.
from django.utils.safestring import mark_safe into default name space.
call the method self.to_python with an argument value, substitute it for value.
call the method self.items, for every field and errors in the result.
call the function format_html with 2 arguments: string '<input{0} />', return value of the function flatatt, called with an argument, input_attrs, append the result to inputs list.
define the function iterbytes with an argument buf.
call the __init__ method with unpacked list args and unpacked dictionary kwargs from the base class of the GenericIPAddressField class.
if format_module_path is true,
from django.utils.encoding import force_str into default name space.
instantiate class Truncator, with an argument value, call the method words on the result with 3 arguments length, html set to boolean True and truncate set to string ' ...', return the result.
define the function become_daemon with 4 argument: our_home_dir set to '.', out_log set to None, err_log set to None,
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method self.split_leading_dir with an argument name, substitute the second element of the result for name.
substitute key for result.key.
increment i by integer 1,
convert self.dict into boolean, return the result.
slice the path list from the result of the match.end method as the start index to the end, substitute it for new_path.
decrement end by one.
if parse_until is None,
unique_check is a list with elements field, for every field in unique_check if field is not equal to self.fk.name.
define the function b64_decode with an argument s.
decorator function register.filter with an argument is_safe set to boolean False.
return an instance of AutoEscapeControlNode with 2 arguments: boolean exception arg equals to string 'on', and nodelist.
call the self.xml.startDocument method.
define the method _start_relational_field with arguments self and field.
call the method self.valid_value with an argument val, if it evaluates to false,
child_nodelists is an tuple with 2 elements: strings 'nodelist_loop' and 'nodelist_empty'.
try,
substitute cls.__text_cast for cls.__str__.
import module os.
if f.primary_key is true,
call the function warnings.warn with 3 arguments: string 'import_by_path() has been deprecated. Use import_string() instead.', RemovedInDjango19Warning and stacklevel as integer 2.
return an empty string.
call the function restart_with_reloader, substitute the return value for exit_code.
call the method readline.parse_and_bind with an argument string "tab:complete".
_called_from_command_line is boolean False.
if not,
derive the class MultiValueField from the base class Field class.
call the method self._update_errors with an argument e.
output is an empty list.
databases is a list containing 2 elements: self.using and None.
call the method formats.sanitize_separators with an argument value, substitute the result for value.
call the options.get method with string 'CULL_FREQUENCY' and integer 3 as arguments, use the string 'cull_frequency' and previous result as the arguments for the call to the params.get method, substitute the result for cull_frequency.
if self.allow_multiple_selected is false,
import module copy.
replace '%s' in string "Cache table '%s' already exists." with tablename, write it to the self.stdout stream.
append name to self._changed_data.
define the method upload_handlers with an argument self.
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary, code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.
get the value under the 'database' key of the options dictionary, use it as a key to access the element under the connections dictionary, substitute it for connection.
for every loader_name in settings.TEMPLATE_LOADERS,
if date is not None,
call the method boundary with an argument string 'ascii', use the result to call to the parse_header function, assign the result to ctypes and opts.
raise an CommandError with an argument string "Unable to find a locale path to store translations for file %s", where '%s' is replaced with file_path.
define the method __init__ with 4 arguments: self, name, old and new set to None.
if origin is true,
append f.name to ignored list.
statement is an empty list.
if Exception, renamed to e, exception is caught,
define the function make_naive with 2 arguments: value and timezone.
if confirm is not equal to string 'yes' or string 'no',
call the function timedelta with an argument seconds as negative time.timezone, subtract the result from the result of the call, to the function timedelta called with an argument seconds as negative time.altzone, return the result.
return s.
raise an CommandError exception with an argument string "Error: %s", with '%s' replaced by message.
as_form is boolean True.
substitute _ for ret.
define the function construct_instance with 4 arguments: form, instance, fields set to None and exclude set to None.
class_types is a tuple with 2 elements: type and types.ClassType.
sys.stderr is an instance of NullDevice class.
if max_length is not None,
call the method self.data.weekday, increment the result by an integer 1, divide it with integer 7, return the reminder of the division.
get the attribute '__module__' from the getattr, if it exists substitute it for m, if not, m is None.
derive the class MultiPartParser from the object base class.
if _urlconfs has an attribute 'value',
return None.
substitute value under 'unique_id' key of item dictionary for unique_id.
raise an TypeError exception with an argument string "Variable must be a string or number, got %s", replace '%s' with type of var.
if answer is false,
for every label in labels,
call the function get_git_changeset, store the result in git_changeset.
if self.is_bound is false,
if exclude is not None,
for every closable in self._closable_objects,
join elements of self.fed into a string, return the result.
if ValidationError, renamed to e, exception is caught,
call the function func with unpacked dictionary kwargs as an argument, substitute the result for translated.
from django.core.exceptions import ImproperlyConfigured and DjangoRuntimeWarning into default name space.
define the method __init__ with 2 arguments: self and key_to_list_mapping set to an empty tuple.
property decorator,
substitute last element of bits for asvar.
call the method parser.parse with an argument tuple with an element string 'endspaceless', substitute the result for nodelist.
if pk is an instance of OneToOneField or ForeignKey classes,
if not,
* Make sure each model has one field with primary_key=True" as the result. yield string "#
import module datetime.
if not,
if attr is contained in obj_dict,
if instance is None,
try,
try,
raise an TemplateSyntaxError exception with an argument string "'firstof' statement requires at least one argument".
if self.flags is true and self.regex is not an instance of a six.string_types type,
if query_string is an instance of bytes,
if ValueError or TypeError exceptions occurred,
define the function same_origin with 2 arguments url1 and url2.
define the method tzname with 2 arguments self and dt.
try,
call the method msgs.decode with an argument string 'utf-8', substitute the result for msgs.
msg_count is integer 0.
define the method __init__ with 4 arguments: self, name, content and content_type defaulting to a string 'text/plain'.
asvar is None.
return value.
call the function re.compile with an argument raw string '(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', substitute the result for re_camel_case.
instantiate Archive class with an argument path, with it renamed to archive, perform,
call the method self.add_item_elements with 2 arguments: handler and item.
split ip_str into parts by ':', for every hextet in the result,
declared_fields is an instance of OrderedDict class.
call the function signed_value with an argument value, substitute the result for signed_value.
_supported is an instance of OrderedDict class, created with an argument settings.LANGUAGES.
for every table_name in return value of the method connection.introspection.table_names called with an argument cursor,
append e to infos list for every e in all_issues, if checks.INFO is lesser or equal to e.level, and e.level is lesser than checks.WARNING and result of the method e.is_silenced in false.
call the self.get method with k and version set to version as arguments, substitute the result for val.
convert new_name to a string and append it to string 'number_', substitute the result for new_name.
classmethod decorator,
call the function six.itervalues with an argument kwargs, convert the result to a list and append it to a list containing args, for every arg in the result,
call the BaseConverter function with BASE56_ALPHABET as argument, store the result in base56.
call the method self.__deepcopy__ with an empty dictionary as an argument.
try,
if not,
derive the class override from the object base class.
get the value under the 'locale' key of the options dictionary, substitute it for locale.
if instance is None,
call the get_valid_filename with argument name, return the result.
if data is None,
define the method loaddata with 2 arguments self and fixture_labels.
define the function debug with 2 arguments: parser and token.
append 2 consecutive newlines to output.
call the method form.add_initial_prefix with an argument name, substitute the result for self.html_initial_name.
if form.errors is true,
call the http.HttpResponseBadRequest function, assign the result to the response.
call the method self.error_class with an argument error_class as an string 'nonfield', substitute the result for value under the field key of the self._errors dictionary.
if settings.configured is true,
for every val in value,
substitute self for self.config.configurator.
substitute origin for self.origin.
define the method bound_data with arguments self, data and initial.
if threading is true,
get value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
call the function warnings.warn with 3 arguments: string "django.utils.dictconfig will be removed in Django 1.9.", RemovedInDjango19Warning and stacklevel set to integer 2.
from .. import Warning, register and Tags into default name space.
otherwise if first element of second row of args equals a string '4',
if value is true,
update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems, called with an argument kw, only if v is not None, substitute the result for kw.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
do nothing.
from django.utils import six into default name space.
define the method __init__ with an argument self.
return None.
call the m2m_convert function with pk as argument, for every pk in field_value, substitute the value under the field.name key of the m2m_data dictionary.
return an instance of SafeText, created with an argument s converted into a string.
created_models is a set.
if not,
call the method self.render with an argument self.context, use it as an argument for the call to the mark_safe function, return the result.
if self.file has an attribute 'tell' and an attribute 'seek',
call the function quote_plus with 2 arguments: result of the function force_str called with an argument url, and result of the function force_str called with an argument safe, use the result as an argument for the call to the function force_text, return the result.
find the first subgroup of the matched string from the match object, strip the whitespaces from the begging and end, replace it for tag.
_get_files is getter function for FILES attribute of this class.
derive the class Error from base class CheckMessage.
if index_sql is not empty,
filemsg is an empty string.
if extend is boolean True,
if self.can_order is true,
substitute old_method_name for self.old_method_name.
define the function _decorator with an argument view_func.
for every d in self.dicts,
define the method __init__ with 5 arguments: self, regex, callback, default_args set to None and name set to None.
derive the class classonlymethod from the classmethod base class.
define the method add_arguments with 2 arguments self and parser.
if kwds is true or typed is true, call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key, otherwise substitute args for key.
call the method tempfile.mkstemp with dir set to self._dir, substitute result for fd and tmp_path, respectively.
define the method render with 2 arguments: self and context.
raise an ValueError with an argument string "'%s.%s' has no field named '%s'.", where '%s' is replaced with, model._meta.app_label, model._meta.object_name, fk_name, respectively.
define the method validate_host with 2 arguments: host and allowed_hosts.
if endbmatch is true,
define delete method with self class instance, key and version set to None, as arguments.
value is an empty string.
assign integer 2 to parts if third element of version equals to zero, otherwise assign it integer 3.
otherwise if second element of args equals a string '304',
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
define the method render with 2 arguments: self and context.
try,
define the function get_serializer_formats.
from .base import CommandError into default name space.
return boolean True.
define the method tzname with 2 arguments: self and dt.
append '/' to prefix.
return self.size.
return the_path.
i is integer 0.
match rest string with self.DIGIT_PATTERN regex, if it evaluates to false,
return the result of the method field.widget.value_from_datadict called with 3 arguments: self.data, self.files and prefix.
return boolean False.
help is a string 'Prints the SQL statements for resetting sequences for the given app name(s).'.
call the object Decimal with string '1' as an argument, divide it by 10, bring the result to the power of self.decimal_places, convert the result to a lowercase string, substitute it for step.
define the function get_unbound_function with an argument unbound.
try,
call the Model._meta.get_field method with an argument field_name, substitute the result for field.
call the method parser.parse_args with an argument args set to args, substitute the result for defaults.
call the method self._base_set with string 'add', key, value and timeout as arguments, return the result.
from django.core.management.commands.check import Command as CheckCommand into default name space.
call the method django.setup.
call the function construct_instance with 4 arguments: self, self.instance, opts.fields and construct_instance_exclude, substitute the result for self.instance.
if not,
call the function self.func with an argument instance, substitute the result for res and value under the self.name key of the instance.__dict__ dictionary.
new_ip is an empty list,
close file_ file descriptor.
import module pickle.
get_language_bidi is lambda function returning boolean True if settings.LANGUAGE_CODE is contained in settings.LANGUAGES_BIDI.
get the value under the 'incomplete' key of the field.error_messages dictionary, append it to errors.
substitute complain for append.
derive the class ResolverMatch with object as base class.
call the functoin callback with an argument self.
if result is equal to integer 0, return boolean True, otherwise return boolean False.
call the method self._cull with db, cursor and now as arguments.
for every key and value in data.items function return value,
return self._post.
call the method nodelist.render with an argument, an instance of Context class, use the result as an argument for the creation of, an instance of VerbatimNode class, return it.
call the nethod self._isdst with an argument dt, if it evaluates to true,
add model to seen_models set.
return data.
define the method __init__ with 3 arguments: self, template_string and origin.
if name is true,
delete entry under the name key of the moves.__dict__ dictionary.
replace '%s' in string "%s; charset=%s" with settings.DEFAULT_CONTENT_TYPE and self._charset, substitute it for content_type.
call the method path.expanduser with an argument template, substitute it for expanded_template.
if name is None,
call the method self.style.NOTICE with string "  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." as an argument, use the result as an argument for the call to the self.stdout.write method.
substitute the settings.MEDIA_ROOT for location.
try,
substitute current_app for self.current_app.
if IndexError exception is caught,
call the os.fdopen function with fd, mode and bufsize as the arguments, assign the file handle object to self.file.
substitute EscapeText for EscapeString.
use global variable _standard_context_processors.
get the value under the name key of the self dictionary, yield it as the return value of the generator.
define the method __deepcopy__ with 2 arguments: self and memodict.
call the method mimetypes.guess_extension with an argument content_type, substitute result for ext.
define the method _has_changed with 3 arguments: self, initial and data.
call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.
from django.utils.translation import ugettext and ungettext_lazy into default name space.
return result.
from django.utils.translation import get_language, to_locale and check_for_language into default name space.
define the method add_prefix with 2 arguments: self and field_name.
substitute tagtype for self.tagtype.
if not,
get the value under the key key of the self.template_cache dictionary, substitute it for template_tuple.
define the function dummy with 2 arguments: unpacked list args and unpacked dictionary kwargs.
_standard_context_processors is None.
call the function __proxy__ with 2 arguments: args and kw, return the result.
find first index of occurrence of character '-' in language, substitute it for p.
input_type is a string 'number'.
if truncate_text is true,
call the method result.utctimetuple, use the result as an argument for the call to the method calendar.timegm, return the result.
define the method _get_validation_exclusions with an argument self.
try,
call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS dictionary value, return it.
append self.msgmerge_options to a list containing string 'msgmerge', append to it a list containing pofile and potfile, substitute the result for args.
endless loop,
get the value under the 'content-transfer-encoding' key of the disposition meta_data, substitute it for transfer_encoding.
substitute the location for self.base_location.
call parser.add_argument method with '--ipv6', string '-6', action set to string 'store_true', dest set to string 'use_ipv6', default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.
define the method has_key with 3 arguments: self, key, and version set to None.
append mw_instance.process_view at the end of self._view_middleware.
try,
substitute is_reversed for self.is_reversed.
call the method self._callback_strs.add with an argument pattern._callback_str.
call the method __copy__ with an argument unpacked list self.dicts, return the result.
call the method self.copy_plural_forms with arguments: msgs and locale, substitute it for msgs.
call the function warnings.warn with 3 arguments: string "get_declared_fields is deprecated and will be removed in Django 1.9.", RemovedInDjango19Warning, stacklevel set to integer 2.
call the method self._assert_mutable.
replace "%s" from the string ' class="%s"' with css_classes, substitute it for html_class_attr.
if value is contained in self.empty_values,
append first element of e.args to not_found list.
self.objects is an empty list.
define the method __enter__ with an argument self.
if ch is not equal to string '\\'.
from functools import wraps into default name space.
replace '%s' in the string  "%s.process_template_response didn't return an HttpResponse object. It returned None instead.", with name of the class type of the middleware_method instance, use it as the argument for call to the ValueError exception raise.
if self.timezone is false,
get the type of self object, call the __bool__ method on the result with an argument self, return the result.
define the method combine with 3 arguments: cls, date and time.
modes is an empty list.
if KeyError exception is caught,
call the method self._archive.extract with an argument to_path.
return string '1'.
from django.core.mail.utils import CachedDnsName and DNS_NAME into default name space.
define the messages with an argument self.
python_2_unicode_compatible decorator,
substitute list_ for first_item and second_item, respectively.
return self.empty_form.media.
return cache.
define the function find_commands with an argument management_dir.
output_transaction is boolean True.
derive the class ContentNotRenderedError from the Exception base class.
inner is an instance of NonCapture, created with elements of result from start index to the end.
self._cull_frequency is integer 3.
substitute field.rel.to with rel_model.
assign the values to the callback, callback_args, callback_kwargs, respectively, from the resolver_match tuple.
substitute nodelist for self.nodelist.
if value under the header key of the self.META dictionary is equal to value,
zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6, and fileobj set to zbuf.
call the timestamp.strftime with string '%Y%m%d%H%M%S' as an argument, substitute the result for changeset.
return an instance of a class RegexURLResolver created with arguments: raw string '^/' and urlconf.
call the method m.groups, use the first element of the result as key for obtaining value from d dictionary,
if data is an instance of bytes,
raise an ViewDoesNotExist exception with an argument string "Could not import '%s'. Parent module %s does not exist.", where string '%s' is replaced by lookup_view and mod_name, respectively.
raise an InvalidTemplateLibrary exception with an argument string "ImportError raised loading %s: %s", where '%s' is replaced with taglib_module and e.
call the function timeuntil with 2 arguments value and arg, return the result.
define the method reset with an argument self.
derive class Command from the BaseCommand base class.
def get_handler with 3 arguments: self, unpacked list args and unpacked dictionary options.
from django.utils.xmlutils import SimplerXMLGenerator into default name space.
define the method pop with 3 arguments: self, key and unpacked list args.
return result.
call the method regex_match.group with an argument integer 1, substitute the result for lang_code.
derive the class NumberInput from the TextInput base class.
import module itertools.
define the method represent_decimal with arguments self and data.
if not,
define the method __call__ with 2 arguments: self and f.
all_models is an empty list.
call the method field.clean with an argument value, substitute the result for value.
call the method self.iterlists, return list of results.
define the function filesizeformat with an argument bytes.
raise an TypeError exception with an argument string "Non-integer base36 conversion input.".
do nothing.
define the method __repr__ with an argument self.
call the method one_percent_re.sub with 2 arguments: string '%%' and g, substitute the result for .
if not,
if not,
for every widget in self.widgets:,
substitute allow_empty_first_page for self.allow_empty_first_page.
get _assertCountEqual attribute of the self object, call the result with 2 arguments: unpacked list args, and unpacked dictionary kwargs, return the result.
call the method self.queryset.filter with an argument, unpacked dictionary with an entry: pk for key.
try,
define the function validate_ipv6_address with an argument value.
if val is None,
call the method __init__ from the base class of the class DecimalField, with 4 arguments: max_value, min_value, unpacked list args and unpacked dictionary kwargs.
return nothing.
if value under the 'indent' key of the self.options dictionary is true,
get 'default_error_messages' from the c object, if it doesnt exists return an empty dictionary, use the result as the argument for the call to the messages.update function.
if TypeError or ValueError exceptions are caught,
call the function datetime.date with 3 arguments: y, m and d all converted into a integers, substitute the result for date_value.
close the _file file.
raise an CommandError exception with an argument string "Destination directory '%s' does not exist, please create it first.", where '%s' is replaced with top_dir.
define the _set_post method with self class instance and post as the arguments.
call the function import_module with an argument taglib_module, substitute the result for mod.
if id_for_label is true,
substitute out for self._out.
decorator function register.filter with an argument is_safe set to boolean False.
substitute bytes for binary_type.
decorator function register.filter with an argument is_safe set to boolean False.
substitute index for self.index.
get the value under the 'filename' key of the disposition dictionary, substitute it for file_name.
__all__is an tuple with 2 elements: strings 'BaseForm' and 'Form'.
raise an CommandError exception with an argument string "You can only use --pks option with one model".
call the function force_str with an argument: default if it is true, or if not, first element of the result of the function, get_format called with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for format.
insert tagname at the beginning of open_tags.
call the function loader with 2 arguments name and dirs, substitute the result for source and display_name, respectively.
for every pattern in allowed_hosts:
zip together new_keys and keys, convert it to dictionary, assign it to m.
from django.utils.module_loading import module_has_submodule into default name space.
map elements from args through the function conditional_escape, substitute the result for args_safe.
if UnicodeEncodeError exception is caught,
if value under the 'ttl' key of the item dictionary is not None,
return self.streaming_content
call the get_bytes_from_wsgi function with self.environ, string 'QUERY_STRING' and empty string as arguments, substitute the return value for raw_query_string.
if not,
define the method lists with an argument self.
define the method __init__ with 13 arguments: self, path, match set to None, recursive set to boolean False, allow_files set to boolean True, allow_folders set to boolean False, required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string, unpacked list args, unpacked dictionary kwargs.
replace '%s' in string "Running post-migrate handlers for application %s" with app_config.label, print it to the standard output.
if not,
substitute settings.STATIC_URL for prefix.
define the method __init__ with 3 arguments: self, attrs set to None and format is None.
if ret equals to integer 0, return boolean True, otherwise return boolean False.
try,
define the method apply_response_fixes with self class instance, request and response as the arguments.
call the function get_connection with argument fail_silently set to fail_silently, substitute it for self.connection.
if self.urlconf_name is an instance of a list type and its length is not zero.
return self.field.widget.is_hidden,
do nothing.
call the pyinotify.WatchManager method, assign the result to wm.
define the method push with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
return string 'nd'.
call the method self.data.isoformat, return the result.
return data.
get the value under ch key of the ESCAPE_MAPPINGS dictionary, if it exists substitute it for representative, if not substitute ch for representative.
perform bitwise exclusive OR on 2 operands integer representation of x and integer representation of y, perform bitwise OR with 2 operands: previous result and result, substitute the result for result.
substitute hashlib.sha256 for digest.
substitute OPERATORS dictionary element under token key for op.
call the function make_origin with 4 arguments: display_name, self.load_template_source, template_name and template_dirs, substitute the result for origin.
return msg.
yaml import CSafeDumper as SafeDumper into default name space.
settings.SITE_ID.
return an instance of IncludeNode class, created with 3 arguments: return value of the method parser.compile_filter,
call the function datetime.date.today, substitute the year field of the result for this_year.
call the method get_template with an argument template, substitute the result for template.
define the method __init__ with 7 arguments: self, regex, max_length set to None, min_length set to None, error_message set to None,
define the method add_item_elements with 3 arguments: self, handler and item.
decorated is an instance of class Node, created with 3 arguments: syms.decorated, list with 2 arguments: decorator and klass, and prefix as node.prefix.
call the function io.open with 3 arguments: self.dirpath and thefile joined into a file path, string 'w', and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
derive the class CacheClass from the DummyCache base class.
call the __init__ method from the base class of the TemporaryFileUploadHandler class with arguments: unpacked list args, and unpacked dictionary kwargs.
take elements of token_string from second to second last element and strip the whitespaces surrounding the result, substitute the result for block_content.
if dirname starts with character '.' or dirname equals a string '__pycache__',
decorator function register.filter with an argument is_safe set to boolean True.
otherwise is template is six.string_types instance,
call the function urlresolvers.set_urlconf with urlconf as the argument.
call the method value.strftime with an argument format, return the result.
return nodes.
define the method S with an argument self.
instantiate class Truncator, with an argument value, call the method words on the result with 2 arguments length, and truncate set to string ' ...', return the result.
if self.verbosity is greater than integer 0,
split string s once, with '=' sign as a delimiter, assign the resulting list to the t.
define the function exhaust with an argument stream_or_iterable.
exception_middleware is an empty list.
import module warnings.
from django.conf import settings into default name space.
return filename and display_url.
try,
floor the division of delta by integer 100 and delta by integer 400, sum the two results, multiply integer 6 by it, substitute the result for off.
call the method parser.add_argument with arguments: string 'args' and nargs set to '*'.
if length of bits is smaller than integer 1,
substitute value under 'warning' key of kwargs dictionary for warning.
if content is empty, substitute it for an empty string.
derive the class Trans from the object base class.
call the mail.send method with fail_silently set to fail_silently as argument.
try,
append list containing pattern to tried.
return modules.s
convert first 2 elements of django.VERSION into a strings, join them together, separated by a '.', substitute the result for docs_version.
if self.scheme equals to string 'https', return boolean True, otherwise return boolean False.
if mw_instance has an attribute named 'process_response'.
return the result of the method self._html_output, called with 5 arguments: normal_row to a string, '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>', error_row set to a a string '<li>%s</li>', row_ender set to a string '</li>', help_text_html set to a string, ' <span class="helptext">%s</span>', and errors_on_separate_row set to boolean False.
call the function warn_about_renamed_method with 2 arguments: class_name and unpacked list renamed_method, substitute the result for wrapper.
while ch is not equal to terminal_char,
call the function os.makedirs with argument directory.
decorator stringfilter,
define the function force_text, with s, encoding set to 'utf-8', strings_only set to False, errors set to string 'strict' as arguments.
raise an exceptions
define the method _update_unget_history with arguments self and num_bytes.
return self.parent_instance.
if result is not root,
call the method apps.get_app_config with an argument app_label, for every app_label in app_labels, append the results to a list, substitute the resulting list for app_config.
if language_code is not contained in self._reverse_dict
call the function binascii.hexlify with an argument x, convert the result to base 16 integer, return the result.
from django.conf import settings into default name space.
if takes_context is true,
try,
define the function _bin_to_long with an argument x.
append a string 'This field type is a guess.' to field_notes.
import module random.
call the method self.regex.search with an argument path, substitute the result for match.
for every field, errors in self.error_dict.items method return value,
return an empty dictionary.
define the method add_css with arguments self and data.
if ValueError exception is caught,
use_func is boolean False.
substitute parent_widget for self.parent_widget.
if self.inverse_match equals to return value of the self.regex.search method converted to boolean, called with argument force_text(value),
call the method parser.compile_filter with an argument value, append the result to args.
substitute i for p.
define the initialization method __init__, with self instance of this class, convert_charrefs set to boolean False, and dictionary of arbitrary length **kwargs as arguments.
dirs is a list containing basedir.
call the method self.has_leading_dir with an argument namelist, substitute the result for leading.
try,
if not,
for every bit in bits,
move integer 1 left for 50 bits, substitute the result for PB.
from django.utils import six into default name space.
from django.apps import apps into default name space.
if value under the 'description' key of the item dictionary is not None,
derive the class DictWrapper from the dict base class.
self.activated is boolean True.
substitute attrs for self.attrs.
define the method __init__ with 4 arguments: self, name, regex and next set to None.
define the method validate with arguments self and value.
define the method ext_convert with 2 arguments: self and value.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
return the length of self.object_list.
self.stderr is an OutputWrapper object instance, created with value under the 'stderr' key of the options dictionary as an argument, if the key doesnt exists use sys.stderr as an argument.
define the method empty_form with an argument self.
if self.verbosity is greater than integer 1,
if OSError, renamed to e, is caught,
return r.
define the function is_safe_url with 2 arguments url and host set to None.
execute code statement """exec _code_ in _globs_, _locs_""". call the function exec_ with an argument string """def reraise(tp, value, tb=None):
substitute logging.NOTSET for logger.level.
if TypeError or ValueError exceptions are caught,
call the method self._assert_mutable.
get the value under the key key of the self.cookies dictionary, substitute boolean True for 'httponly' key of the returned dictionary.
if trim is true,
return self._fqdn.
derive the class HttpResponseNotModified from the HttpResponse base class.
return nothing.
COMMENT_TAG_START is a string '{#'.
convert s to integer of base 36, substitute it for value.
from django.utils import six and lru_cache into default name space.
call the method to_python with an argument data from the base class of the class URLField, substitute the result for value.
return a string "<DeserializedObject: %s.%s(pk=%s)>", where '%s' are replaced with self.object._meta.app_label, self.object._meta.object_name and self.object.pk, respectively.
field_desc is a string '%s = %s%s', where '%s' is replaced with: att_name, an empty string if '.' is contained in field_type, or with string 'models.' if it is not and field_type.
help is a tuple containing a string "Output the contents of the database as a fixture of the given " "format (using each model's default manager unless --all is specified).".
define the method id_for_label with 2 arguments: self and id.
if os.name equals string 'nt',
raise an ValueError exception with an argument string 'Unable to add handler %r: %s' formated with h and e.
call the function force_text with 2 arguments: value under the is_dst key of the time.tzname and DEFAULT_LOCALE_ENCODING, return the result.
from django.core.management.base import BaseCommand into default name space.
for meta_line in return value of the method self.get_meta called with an argument table_name.
define the function get_language_from_path with 2 arguments: path and strict set to boolean False.
define the function ungettext with 3 arguments: singular, plural and number.
for every val in value call the function smart_text with an argument val, return the results in a lit.
if t.token_type equals TOKEN_BLOCK and t.contents equals 'endcomment',
import module os.
define the method __init__ with 2 arguments self and file.
substitute first 2 elements of bits for singular_suffix and plural_suffix, respectively.
call the function allow_lazy with 2 arguments: unescape_entities and six.text_type, substitute the result for unescape_entities.
if code is None,
call the function select_template with an argument file_name, substitute the result for t.
if KeyError, renamed to key, exception is caught,
do nothing.
call the msg.attach with an argument body_msg.
decorator deconstructible,
call the method self.form with unpacked dictionary defaults as an argument, substitute it for form.
if label_suffix and contents are both true and last element of contents is not contained in the result of the function _, called with an argument string ':?.!'.
from django.utils.deprecation import RemovedInDjango20Warning into default name space.
from django.conf import settings into default namespace.
call the function local, substitute the result _urlconf.
define the method upload_handlers with arguments: self and upload_handlers.
if self._callback is not None,
define the method __delitem__ with 3 arguments: self and key.
if jan1_weekday is greater than integer 4,
call the method emit_post_migrate_signal with created_models, self.verbosity, self.interactive and connection.alias as arguments.
raise an CommandError exception with an argument string "errors happened while running xgettext on %s\n%s", where '%s' are replaced by sel.file and errors, respectively.
for every path_to_remove in self.paths_to_remove,
define the method _proxy_method with 3 arguments self, unpacked list args and unpacked dictionary kwargs.
import module errno.
if s is instance of a class Promise,
try,
append value under the 0 key of the opt_dict dictionary to code_list.
append callback to self._post_render_callbacks list.
return lib.
if smtplib.SMTPException exception is caught,
obj._constructor_args is a tuple with 2 elements: args and kwargs.
if not,
define the function strip_entities with an argument value.
import module yaml.
from itertools import chain into default name space.
otherwise if f.unique is true,
derive the class Tok from the object base class.
call the function mark_safe with an argument result, return it.
define the method render_css with an argument self.
call the check function with argument app_config set to app_config, substitute the result for new_errors.
initial_set is set created out of return values of the function force_text called with an argument value, for every value in result of the method self.prepare_value called with an argument initial.
derive the class AppRegistryNotReady from the Exception base class.
substitute self.unparsed_entity_decl for parser.UnparsedEntityDeclHandler.
substitute max_digits and decimal_places for self.max_digits and self.decimal_places.
define the function _set_response_etag, with response as an argument.
substitute model._meta for opts.
format truncate with a dictionary with an element: text for 'truncated_text', return the result.
call the method self._format_value with an argument value, use the result as an argument for the call to the function force_text, substitute the result for final_attrs dictionary value under the 'value' key.
comment_lineno_cache is None,
derive the class SuspiciousOperation from the Exception base class.
call the method __init__ from the base class of the class InlineForeignKeyField, with 2 arguments unpacked list args, and unpacked dictionary kwargs.
append '0' to digits.
_version is a string "0.91".
otherwise if bytes is smaller than TB,
raise an AttributeError with an argument string "%s could not be imported ", formated with self.name.
return result.
with self.mutex perform,
if any element in the return value of the e.is_serious method is true, and if return value of the method e.is_silenced is false, for every e in all_issues,
define the method add_handlers with 3 arguments: self, logger and handlers.
sorted_issues is a list of tuples with 5 entries: criticals and 'CRITICALS', errors and 'ERRORS', warnings and 'WARNINGS', infos, 'INFOS'
call the function re.compile with 2 arguments: raw string "((?:[^\s'"]*(?:(?:"(?:[^"\\]|\\.)*" | '(?:[^'\\]|\\.)*')[^\s'"]*)+) | \+)", and re.VERBOSE, substitute the result for smart_split_re.
from django.utils.deprecation import RemovedInNextVersionWarning into default name space.
define the function configure_logging with 2 arguments: logging_config and logging_settings.
if jan1_weekday equals integer 5, or if jan1_weekday equals integer 6 and call to the function calendar.isleap, with an argument self.data.year decremented by 1, evaluates to true,
call the method Field.__init__ with 8 arguments: self, required, widget, label, initial, help_text, unpacked list args, and unpacked dictionary kwargs.
return self.cleaned_data.
call the server_bind method from the base class of the WSGIServer class.
states is a dictionary with 2 arguments: appended list with an element instance of a class Tok, created with 3 arguments: "punct", result of the function literals called with an argument string "/= /" and next as a string 'reg', to the both_before, appended both_after to the previous result, for 'div' and appended list with an element instance of a class Tok, created with 3 arguments: string "regex", raw string '/([^*\\/[]|\\.|\[( [^\]\\]| \\.)*\])( [^\\/[]| \\.| \[( [^\]\\]| \\.)*\])*/[a-zA-Z0-9]*', and next as a string 'div', to the both_before, appended both_after to the previous result for 'div'.
call the executor.migrate method with, targets, plan and fake set to the value under the 'fake' key of options dictionary, if the 'fake' key doesnt exists set fake to boolean False, as arguments.
define the method copy with an argument self.
if self.close_called is False,
return an empty list.
call the method notifier.check_events with argument timeout set to None.
for every form in self call the form.as_p method, join the results in a string, separated by an empty string.
define the method tzname with 2 arguments: self and dt.
fail_message is a string 'created'.
return callback split into two lists at the dot index, without the element at the dot index.
if not,
call the function params.update with argument kwargs.
call the function conf.copy, substitute it for params.
add key to the self.bad_cookies set.
skip this loop iteration.
call the method calendar.monthrange with 2 arguments: self.data.year and self.data.month, format string '%02d' with the second element of the result, return it.
define the method to_python with arguments self and value.
from django.utils.encoding import force_bytes into default name space.
call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date, called with an argument result of the method self.latest_post_date.
if TypeError, renamed to te, exception is caught,
for every val in value,
do nothing.
if size equals to integer zero.
if not,
substitute _urllib_response_moved_attributes for Module_six_moves_urllib_response._moved_attributes.
skip this loop iteration.
create a tuple out of types of v, for every k and v in sorted_items, extend key tuple with the result.
if '.' is contained in words or '@' is contained in word or ':' is contained in word,
call the method parser.compile_filter with second element of bits as an argument, substitute the result for filepath.
define the function deserialize with 3 arguments: format, stream_or_string and unpacked dictionary options.
define the method __init__ with arguments self, input_formats set to None, unpacked list args and unpacked dictionary kwargs.
call the function urlsplit with an argument url, assign the result to scheme, netloc, path, query and fragment, respectively.
substitute key for result.key.
call the method self.add_handlers with 2 arguments: logger and handlers.
if USE_INOTIFY is true,
substitute smart_bytes for smart_str.
self.connection is a instance of a class contained in connection_class, instantiated with arguments: self.host, self.port, and unpacked dictionary connection_params.
DNS_NAME is a instance of CachedDnsName class.
return an instance of Literal class, created with an argumen value.
call the function timedelta with an argument seconds as negative time.timezone, return the result.
define the method __init__ with 10 arguments: self, subject set to an empty string, body set to an empty string,
use global variable _default.
if KeyError exception is caught,
if self.use_ssl and self.use_tls are false,
join elements of self.vals into a bytes string, substitute the result for ret.
from django.conf import settings into default name space.
define the method __dir__ with an argument self.
if error_class is None,
define the method readline with 3 arguments: self, unpacked list args and unpacked list kwargs.
if Exception exception is caught,
define the method W with an argument self.
if func_name is false,
define the method __iter__ with an argument self.
convert self.children into an boolean, return it.
define the function get_template with 2: template_name and dirs set to None.
if StandardError, renamed to e, exception is caught,
call the function render_value_in_context with 2 arguments: value and context, return the result.
derive DatabaseCache from the BaseDatabaseCache base class.
if length of fixture_files_in_dir is greater than 1,
derive the class TypedMultipleChoiceField from the base class MultipleChoiceField class.
from django.utils.jslex import prepare_js_for_gettext into default name space.
substitute callback.func for callback.
raise an CommandError exception with an argument "Database inspection isn't supported for the currently selected database backend.".
table2model is a lambda function with an argument table_name, return value is the return value of the re.sub method, called with 3 arguments: raw string '[^a-zA-Z0-9]', empty string and result of the method table_name.title.
reverse element order of dicts, join them in a string, substitute the result for number.
from __future__ import unicode_literals into default name space.
find the last index of newline occurrence in self.__starttag_text, subtract it from total length of self.__starttag_text, substitute the result for offset.
raise an ValidationError with 3 arguments: value under the 'max_whole_digits' key of the self.error_messages dictionary, code set to string 'max_whole_digits' and params set to a dictionary with an entry: difference of the self.max_digits and self.decimal_places, for 'max'.
call the function escape with an argument word, substitute the result for i-th element of words.
if self.invoked_for_django is false,
if Exception exception is caught,
append the request to the end of the protected class member response._closable_objects.
substitute filepath for self.filepath.
call the function supports_color, if evaluates to False,
call the method self._reset_dicts with an argument dict_.
call the method self.open, substitute the result for stream_created.
call the method path.decode with an argument fs_encoding, return the result.
call the function no_style, substitute it for self.style.
remover the entry under the 'type' key of the attrs dictionary, substitute it for self.input_type, if the key doesnt exists, substitute self.input_type for self.input_type.
call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store', dest set to string 'verbosity', default set to string '1', type set to int, choices is a list, containing integers: 0, 1, 2 and 3,
if t is not None
sub_match_dict is a dictionary created from self.default_kwargs dictionary using mapping function match.groupdict.
return an empty list.
put to into a list, assign it to self.to.
call the method gettext_module.translation with 5 arguments: domain set to string 'django', localedir set to localedir, languages set to a list with an element self.__locale, codeset set to a string 'utf-8' and fallback set to use_null_fallback, substitute the result for translation.
increment length of template_dir by one and substitute it for prefix_length.
if "__call__" is contained in klass.__dict__ for any klass in __mro__ field of the obj class, return boolean True, otherwise return False.
call get_str_from_wsgi function with self.environ, string 'HTTP_COOKIE' and empty string as arguments, substitute it for raw_cookie.
if self is not contained in context.render_context,
append ch to result.
from django.utils.encoding import force_text and python_2_unicode_compatible into default name space.
substitute force_text for force_unicode.
if value is not contained in result,
msg is a string "Execution of %s failed", with '%s' replaced by self.program.
call the method self._new_gnu_trans with an argument localedir, substitute the result for translation.
call the method parser.add_argument with 3 arguments: string '--pks', dest set to string 'primary_keys', and help is a string "Only dump objects with given primary keys. Accepts a comma separated list of keys. " "This option will only work when you specify one model.".
do nothing.
call the function warnings.warn with 2 arguments string "IPAddressField has been deprecated. Use GenericIPAddressField instead.", and RemovedInDjango19Warning.
get the value under the name key of the self.initial dictionary, if it exists substitute it for initial, if not substitute field.initial for initial.
define the method use_argparse with an argument self,
if first element of str_number equals a string '-'.
return ip_str.
nodelist_true_output is None.
if not,
return boolean False,
call the BaseConverter function with BASE64_ALPHABET and sign set to '$' as arguments, store the result in base64.
define the method render_node with 3 arguments: self, node and context.
call the function re.compile with an argument raw string "(?<!%)%(?!%)", substitute the result for one_percent_re.
call the method self.get_exception_response with request, resolver and integer 404 as the arguments, assign the result to response.
from django.core.management.templates import TemplateCommand into default name space.
breaks from the smallest enclosing loop execution.
for every c in phone converted to lowercase, join the value under the c key of the char2number dictionary into a string, return it.
substitute tok.next for state.
define the function decorator_from_middleware_with_args with an argument middleware_class.
from __future__ import unicode_literals into default name space.
try,
define the method __init__ with 6 arguments: (self, var1, var2, nodelist_true, nodelist_false and negate.
append self.msguniq_options to a list containing a string 'msguniq', append list containing potfile to the result, substitute it for args.
call the get_bytes_from_wsgi function with environ, string 'REDIRECT_URL' and empty strings as arguments, substitute the result for script_url.
doublecolon_start is an integer -1.
define the function urlsafe_base64_encode with an argument s.
call the get_bytes_from_wsgi function with environ, string 'SCRIPT_URL' and empty strings as arguments, substitute the result for script_url.
define the method __repr__ with an argument self.
call the __init__ method with stream_class(content) and name set to name arguments, from the base class of the ContentFile class.
with call to the function transaction.atomic with using set to connection.alias as argument,
from django.conf import settings into default namespace.
return path.
from collections import OrderedDict into default name space.
split lang_code by character '-', substitute the first element of the result for generic_lang_code.
if not,
return an empty string,
define the method render with 2 arguments self and context.
define _get_files method with self class instance as the argument.
derive the class DateInput from the DateTimeBaseInput base class.
define the method enter_command with 3 arguments: self, token and msg.
call the method parser.delete_first_token.
update the self._catalog dictionary with other._catalog.
call the function format_html with 2 arguments: string ' for="{0}"' and self.id_for_label, substitute the result for label_for.
import module codecs.
otherwise if autoescape is true,
substitute value for self.value.
if not,
if self.path is lesser than other.path, return boolean True, otherwise return boolean False.
if self.require_all_fields is boolean true,
call the function contains with 2 arguments: elt and inst, if it evaluates to true,
strip t.contents from the left side of whitespaces, if the result starts with TRANSLATOR_COMMENT_MARK,
substitute value under the key key of self dictionary for val.
do nothing.
if self.encoding exists substitute it for encoding, if not substitute settings.DEFAULT_CHARSET for encoding.
return nothing.
try,
if self.asvar is true,
define the method render with an argument self.
if status is not equal to STATUS_OK,
remove config dictionary element under 'formatter' key, if it exists substitute it for formatter, if not, formatter is None.
for every d in reversed list self.dicts,
targets is a list containing tuple with two elements, app_label and migration.name.
define the method entity_decl with arguments self, name, is_parameter_entity, value, base, sysid, pubid and notation_name.
call the method parser.add_argument with 5 arguments: string '--database', default set to string 'store', dest set to 'database', add set to DEFAULT_DB_ALIAS and help is 'Nominates a specific database to dump fixtures from. Defaults to the "default" database.'.
if self.verbosity is greater than integer 0,
try,
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
substitute length of item for len_item.
substitute empty string, word an empty string for lead, middle and trail, respectively.
call the method _trans.ngettext with 3 arguments singular, plural and number.
from django.utils.encoding import python_2_unicode_compatible and force_st into default name space.
remove config dictionary element under '.' key, if it exists substitute it for props, if not, props is None.
substitute self.version for version.
__all__ is an list containing 6 elements: 'get_cache', 'cache', 'DEFAULT_CACHE_ALIAS', 'InvalidCacheBackendError', 'CacheKeyWarning' and 'BaseCache'
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
call the method logger.addHandler with an argument handler.
substitute message for self.message.
app_dirs is an empty list.
if not,
call the method data, substitute the result for data.
call the method notifier.process_events.
call the method __new__ with 4 arguments: cls, name, bases and attrs, from the base class of the class RenameMethodsBase.
if not,
call the get_bytes_from_wsgi function with environ, string 'SCRIPT_NAME' and empty strings as arguments, substitute the result for script_name.
try,
if extensions is false, substitute it for exts, otherwise exts is a list containing string 'js'.
call the method context_match.group with an argument integer 1, substitute the result for message_context.
httpd.daemon_threads is boolean True.
if 'error_messages' is contained in kwargs,
bring intger 2 to integer 32, decrement the result by 1, multiply it with hlen, if dklen is greater than the previous result,
sum lead and opening, substitute the result for lead.
call the add_argument method on the parser object with string '--backwards', asction set to 'store_true', dest set to 'backwards', default set to False and help set to string'Creates SQL to unapply the migration, rather than to apply it' as arguments.
msg is an instance of a class SafeMIMEMultipart, created with the arguments: _subtype set to self.alternative_subtype and encoding set to encoding.
if ValueError, OverflowError or InvalidOperation exceptions are caught,
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database', default set to DEFAULT_DB_ALIAS and help as a string 'Nominates a specific database to load fixtures into. Defaults to the "default" database.'
define the function get_system_encoding without the input arguments.
if self.warning is an instance of Exception class,
e.args is a tuple, containing 1 element: string "Problem installing fixtures: %s", where '%s' is replaced with e.
call the method self._ordering.sort with an argument key as compare_ordering_key.
remove first and last character from the attrvalue, substitute it for attrvalue.
define the function ungettext with 3 arguments: singular, plural and number.
call the method self.indent with argument integer 2.
consume_next is boolean False.
for every handler in handlers,
derive the class DebugParser from the Parser base class.
if sys.platform starts with string 'java',
if qs._result_cache is not None,
split ip_str into parts by ':', substitute the result for new_ip.
from django.template.base import Lexer, Parser, tag_re, NodeList, VariableNode and TemplateSyntaxError into default name space.
define the method _create_message with arguments self and msg.
response_fixes is a list with  http.fix_location_header and http.conditional_content_removal as elements.
define the method get_default_prefix with an argument cls.
define the function import_by_path with 2 arguments dotted_path and error_prefix set to an empty string..
call the function re.compile with 2 arguments: raw string "([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)(?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?(?:\s*,\s*|$)", and re.VERBOSE, substitute the result for accept_language_re.
call the start_response function with force_str(status) method return value and response_headers as arguments.
for every entry in package_path,
close the file fd.
if '.' is contained in exclude,
if archive.ArchiveException or IOError, renamed to e, exception are caught,
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
define the function get_git_changeset.
substitute ending for self.ending.
call the method handler.endElement with an argument string 'rss'.
derive the class SafeMIMEText from the MIMEMixin and MIMEText base class.
if settings.USE_TZ is true and value is not None and call to the function timezone.is_aware with an argument value, evaluates to true,
data_set is set created out of return values of the function force_text called with an argument value, for every value in data.
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
substitute s without the first element for s.
if not,
kwargs is a empty dictionary.
sublist_item is None.
substitute nodelist_loop for self.nodelist_loop.
if attribute 'winerror' of object e is not equal to integer 32 and if 'errno' attribute is not equal to integer 13,
substitute second element of args for name.
for every c in return value of the method response.cookies.values,
call the method logger.addHandler with an argument: h-th element of value under 'handlers' key of self.config dictionary.
call the method self.__class__ with an argument self, return the result.
msgid is a string '<%s.%s.%s%s@%s>', replace '%s' with utcdate, pid, randint, idstring and idhost, respectively.
if not,
value under the self.var_name key of the context dictionary is an empty list.
create a list with count decremented by 1 number of last element of result elements, extend list result with it.
call the method msg_data.decode with argument charset, substitute the result for msg_data.
if pot_path file path exists,
define the function _get_model with an argument model_identifier.
derive the class OVERLAPPED from the Structure base class.
return arg.
call the method __init__ from the base class of the Field class.
return media.
from django.utils import six into default name space.
if unused_char is false,
if compare_to is not equal to value under the self key of state_frame.
sum index and length of self._boundary, substitute the result for next.
call the cursor.execute method with statement as argument.
call the function date_format with 2 arguments: value and use_l10n as use_l10n, return the result.
from threading import local into default name space.
derive the class URLInput from the TextInput base class.
call os.makedirs function with self._dir and hexadecimal 0o700 as arguments.
decorator python_2_unicode_compatible,
import module re.
call the function date with 2 arguments: result of the call to the function datetime.now with an argument tz set to tzinfo, and self.format_string, return the result.
define the method popitem with an argument self.
call the function force_bytes with 2 arguments: safe and self.encoding, substitute it for safe.
do nothig.
define the method load_template with 3 arguments: self, template_name, template_dirs set to None.
get the value under the 'database' key of the options dictionary, use the result as a key to get the value from the connections dictionary, substitute the result for connection.
delete the entry of self.cleaned_data dictionary under the key field.
define the method end_serialization with an argument self.
targets is a list containing tuple with two elements, app_label and None.
try,
if key is contained in d,
otherwise, if field.rel is true and field.rel is an instance of models.ManyToOneRel,
from django.utils.formats import localize into default name space.
derive the class SsiNode from Node base class.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid date/time.' for 'invalid'.
if not,
raise an exception.
if t is not None,
return view
from django.db.migrations.loader import AmbiguityError into default name space.
if _serializers is false,
if name equals a string 'regex',
call the method self.add_error with 2 arguments name and e.
return an empty string.
do nothing.
call the method connection.creation.sql_destroy_indexes_for_model with arguments model and style, extend the output with the result.
instantiate a class Group with 2 arguments: string "%%(%s)s" formated with name, and name, append it to result.
break from the loop execution.
define the method to_python with arguments self and value.
call the method self.has_leading_dir with an argument list, with elements x.name for every x in members, substitute the result for leading.
output_transaction is boolean True.
yield string "# Feel free to rename the models, but don't rename db_table values or field names." as the result.
call the settings.INSTALLED_APPS.
for every c in choices split into words, concatenate prefix, result of the function re.escape with an argument c and suffix, and join the results into a string, separated with '|' character, return the result.
call the klass method with fail_silently set to fail_silently and dictionary arguments kwds as arguments, return the result.
define the function force_escape with an argument value.
return an empty string.
from django.views import debug into default name space.
if status is not equal to STATUS_OK,
return version
if widget is an instance of the NumberInput,
substitute value for value under the field.attname key of the data dictionary.
format string '%+03d:%02d' with hour and minute, append it to time_str, return the result.
append contents to singular.
get the value under the 'use_natural_keys' key of the options dictionary, substitute the result for use_natural_keys.
try,
call the function _trans.check_for_language with an argument lang_code, return the result.
call the EmailMultiAlternatives function with, subject, message, from_email, recipient_list and connection set to connection, as arguments, assign the result to mail.
substitute node.source for e.django_template_source.
do nothing.
call the method parser.find_filter with an argument filter_name, substitute the result for filter_func.
default_list is an empty list.
call the method self.setlistdefault with an argument key, append value to the result.
define the function now with 2 arguments: parser and token.
if invalid_var_format_string is true,
define the method __init__ with 4 arguments: self, message, code set to None and params set to None.
evaluate method self.literal_regex.match with an argument domain_part, substitute the result for literal_match.
from django.utils.text import smart_split, unescape_string_literal and get_text_list into default namespace.
if lookup_view is contained in self._callback_strs,
define the function dictsort with 2 arguments value and arg.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
update self.filters dictionary with lib.filters.
if safe is true and data is not an instance of dict type.
numbers is a list containing return value of the MigrationAutodetector.parse_number method called with an argument migration.name, for every migration in merge_migrations.
call the self._create_message method with argument msg, substitute it for msg.
derive the class FilterExpression form the base class object.
derive the class SplitDateTimeField from the base class MultiValueField class.
pos is equal to integer 0.
write a newline character into self.stream file stream.
define the method __init__ with 2 arguments: self and nodelist.
substitute link_prev for value under the PREV key of the link_next dictionary.
substitute propagate for logger.propagate.
for every f in post_sql_fields,
nodelist is an empty list.
self._reverse_dict is an empty dictionary.
call the method handler.file_complete with i-th element of counters as an argument, substitute the result for file_obj.
raise an CommandError exception with an argument "Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed.",  where '%s' is replaced with program.
return response.
return self._post and self._files.
return nothing.
define the method with reload with an argument self.
return self.forms element at the index index.
define the method as_json with 2 argumens self and escape_html set to boolean False.
close file descriptor s.
from django.core.management.base import AppCommand into default name space.
self._css is an empty dictionary.
if language_code is not containsed in self._app_dict
return nothing.
call the method operator.attrgetter with an argument _meth_self, substitute the result for get_method_self.
if length of value is not equal to integer 2,
substitute string "Enter at least one %s.", with '%s' replaced by label, for missing_args_message.
if not,
call the function emit_post_migrate_signal with 4 arguments: all_models converted into a set, verbosity, interactive and database.
define the function npgettext_lazy with 4 arguments: context, singular, plural and number set to None.
call the method os.path.basename with an argument candidate, is result is contained in targets,
define the method close with argument self.
define method parse_starttag with self class instance and i as the arguments.
substitute value under the name key of the lib.tags dictionary for value under the name key of the temp_lib.tags dictionary.
return s.
call the function get_library with an argument taglib, substitute the result for lib.
if not,
if self.fail_silently is false,
define the method __add__ with 2 arguments self and rhs.
get the value under the key key of the self.cookies dictionary, substitute path for 'path' key of the returned dictionary.
return result.
substitute content_type_extra for self.content_type_extra.
call the __init__ method from the base class of the HttpResponseNotAllowed class, called with arguments: unpacked list args, and unpacked dictionary kwargs.
call the function force_text with an argument formatstr, use the result as an argument for the call to the method, re_formatchars.split, for every i and piece in enumerated result,
define the method __ne__ with arguments self and other.
if not,
return input_val.
evaluate the boolean expression: locale is None and exclude is false and process_all is false, if the result is true or self.domain is not None,
find position of '-' in the index of the language, substitute the result for p.
evaluate the function force_text with e as an argument, extra is an dictionary with two pair of elements, 'status code' with integer value of 400 and 'request' with value request, respectively use the previous to call the function security_logger.error.
otherwise if self.required is true,
substitute value under the 'interactive' key of the options dictionary for interactive.
call the method executor.loader.get_migration_by_prefix with arguments app_label, migration_name, substitute the result for migration.
if count is equal to integer 0.
call the method m.group with an argument string 'fay', convert the result into a string, substitute it for day.
if m is true,
raise an exception of class NotImplementedError with string 'subclasses of BaseCache must provide an add() method' as argument.
return boolean False.
define the method render with 2 arguments: self and context.
join all of the elements of vary_headers and additional_headers in a string delimited by a comma, substitute it for value of dictionary response under the key 'Vary'.
from django.http import HttpResponse into default name space.
if autoescape is true,
return an instance of TemplateLiteral with 2 arguments: result of the function self.template_parser.compile_filter, called with an argument value and value.
for every module in templatetags_modules,
return s.
write string "  You should commit this migration but leave the old ones in place;" to self.stdout.
from __future__ import unicode_literals into default name space.
define the function ugettext with an argument message.
append boundary to bytes string '--', substitute the result for self._separator.
get the directory name of filename, substitute the result for dirname.
get opt attribute of the opts object, substitute it for value.
call the function smart_split with an argument self.contents, substitute the result converted to an iterable for bits.
call the function f.process with 2 arguments: self and self.domain.
if value is contained in self.empty_values,
as long k is smaller than endpos,
call the method token.split_contents, substitute the result for bits.
call the function get_mod_func with an argument mod_name, store the result in parentmod and submod, respectively.
call the method form.add_prefix with an argument self, substitute the result for self.html_name.
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
convert to an integer first element of the value under the 'content-length' key of the meta_data dictionary, substitute it for content_length.
substitute EscapeText for EscapeUnicode.
internal_use_only is boolean False.
loader is instance of MigrationLoader initialized with connection as an argument.
call the function get_templatetags_modules, substitute the result for templatetags_modules.
_supported is None.
from django.forms.utils import flatatt and to_current_timezone into default name space.
if priority is true,
call the method parser.add_argument with 6 arguments: string '--locale', string '-l', default as an empty list, dest as a string 'locale', action as a string 'append' and help as a string, 'Creates or updates the message files for the given locale(s) (e.g. pt_BR). Can be used multiple times.'.
self.cookies is an instance of SimpleCookie class created with self.cookies as an argument.
get the value under the 'domain' key of the options dictionary, substitute it for self.domain.
from django.core.management.base import BaseCommand and CommandError into default name space.
substitute digits for self.digits.
 return value.
append string "System check identified %s (%s silenced)." to msg, replace first '%s' for: string "no issues", if visible_issue_count equals to integer 0, or for string "1 issue" if visible_issue_count equals integer 1, or for string "%s issues", with '%s' replaced by visible_issue_count, subtract visible_issue_count from length of all_issues, and substitute it for second '%s' in the stirting string.
substitute namespaces for the value under language_code key of the self._namespace_dict dictionary.
break loop execution.
context_extras is an empty dictionary.
call the models.Model.save_base method with arguments self.object, using as using and raw set to boolean True.
call the method parser.add_argument with 6 arguments: string '--ipv6', string '-6', action set to string 'store_true', dest set to string 'use_ipv6', default set to boolean False and help set to string 'Tells Django to use an IPv6 address.'.
define the function prefix with 2 arguments bp and func.
if new_attr is None,
call the method self.setlistdefault with an argument key, append value to the result.
call the method self.args_check with 3 arguments: filter_name, filter_func and args.
derive the class IfEqualNode from Node base class.
call the MigrationAutodetector function with arguments, return value of the call to the method executor.loader.project_state, and return value of the call to the method ProjectState.from_apps with apps as an argument, assign it to the autodetector.
if self.field.empty_label is not None,
define the function validate_ipv46_address with an argument value.
call the methof match.group with an argument "filter_name", substitute the result for filter_name.
define the method _has_changed with 3 arguments: self, initial and data.
all the method field.rel.to._meta.get_field with field.rel.field_name as argument, call the to_python method on the result with, unpacked list field_value as an argument, substitute the result for value.
if name is None,
if not,
call the method self.tzname with an argument dt, substitute the result for self._tzname.
increment int_part_gd by thousand_sep.
if TemplateDoesNotExist, renamed to e, exception is caught,
if not,
add model to models set.
property decorator,
call the method self.xml.startElement with an argument string 'natural'.
from copy import copy into default name space.
call the method self._get_to_python with an argument pk_field, substitute the result for to_python.
call the method __init__ from the base class of the class ContextDict, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
define the method timestamp with an argument self.
call the method form.add_prefix with an argument self._pk_field.name, use the result as an key to get the value of the form.data dictionary, assign it value None.
call the _lock.setdefault method with name and RWLock() as arguments, substitute the result for self_lock.
call the method self.validate_number with an argument number, substitute it for number.
call the method copy.copy with an argument self, return the result.
call the method _time.mktime with an argument tt, substitute the result for stamp.
define the method __getitem__ with arguments self and index.
from django.utils.six.moves import html_entities into default name space.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
define method get_exception_response, with self class instance, request, resolver and status_code as the arguments.
define the method _read_limited with self class instance and size set to None as arguments.
static method,
if not,
nodes is an empty list.
if categories is true,
substitute model for FormSet.model.
in the string "<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>", replace '%s' with the name of the type of this class instance, replace all the '%r' with self.level, self.msg, self.hint. self.obj and self.id, respectively, return the result.
imported_objects is an empty dictionary.
call the method struct.pack with 2 arguments: bytes string '>I' and i, append the result to salt, substitute the result or u.
pop value under the 'ipv6' key of the kwargs dictionary, if it is true,
define the method date with an argument self.
define the method __init__ with 4 arguments: self, url, length and mime_type.
position the file pointer at the start of the self.file file.
substitute viewname for view.
call the method self.create_token with 3 arguments: self.template_string list elements from start index to end index, tuple with 2 elements: start and end and boolean False, append the result to result.
define the method __iter__ with an argument self.
evaluate method connection.cursor, with return value as curs,
call the function force_text with first element of choice as an argument, substitute the result for self.choice_value.
call the method baseconv.base62.encode with result of the time.time function converted to an integer, as an argument, return the result.
raise an TypeError exception with an argument string "invalid keyword arguments to print()".
define the method serialize_headers with an argument self.
try,
replace every occurrence of '\\' in tok with 'U', substitute the result for tok.
join the list of statements into a string separated by new lines, return it.
instantiate class Module_six_moves_urllib_robotparser with an argument, string ".moves.urllib.robotparser" appended to __name__, assign it to value under the string ".moves.urllib_robotparser" appended to __name__ key of the sys.modules dictionary, and to value under the string ".moves.urllib.robotparser" appended to __name__ key of the sys.modules dictionary.
call the method self.find_template_cache.clear.
if Resolver404, renamed to e, exception is caught,
substitute token.source for e.django_template_source.
name is a property object with _get_name as a getter method and _set_name as a setter method.
write string "  No optimizations possible." to self.stdout stream.
define the method serialize with 3 arguments: self, queryset and unpacked dictionary options.
call the method token.contents.split, substitute the result for args.
if middle starts with opening,
substitute self.model._meta.pk for pk_field.
if length of version does not equals to integer 5, raise an exception.
if formfield has an attribute 'queryset',
call the function _ with an argument string 'Ensure this value is greater than or equal to %(limit_value)s.', substitute the result for message.
call the method self._mark_post_parse_error.
if AttributeError exception is caught,
__all__ is a tuple containing strings: 'UploadedFile', 'TemporaryUploadedFile', 'InMemoryUploadedFile' and 'SimpleUploadedFile'.
call the method stream_or_string.decode with an argument string 'utf-8', substitute the result for stream_or_string.
call the method self.write_po_file with 2 arguments: potfile and locale.
derive the class HttpResponseServerError from the HttpResponse base class.
try,
replace '%s' in the string '</\s*%s\s*>' with the result of the function call tag.lower(), use it and the re.I as the input arguments for function re.compile, put the result in the self.interesting.
return plural_suffix.
BUILTIN_SERIALIZERS is a dictionary containing 4 inital entries: "django.core.serializers.xml_serializer" for "xml", "django.core.serializers.python" for "python", "django.core.serializers.json" for "json", and "django.core.serializers.pyyaml" for "yaml".
delete the _serializers dictionary entry at the format key.
call the function locks.unlock with fd as argument.
substitute length for self._length.
leave_locale_alone is boolean False.
define the method validate with arguments self and value.
define the function compress_sequence with an argument sequence.
define the function check_1_6_compatibility with argument kwargs dictionary.
if sixth element of row is not None, substitute it for value under the 'decimal_places' key of the field_params, otherwise, value under the 'decimal_places' key of the field_params is integer 5.
define lambda function that returns self.file.isatty field, use it as an argument for property function, put the result in isatty.
import module time.
for every i and field in enumerated iterable self.fields,
if value under the 'item_copyright' key of the item dictionary is not None,
substitute form.cleaned_data for cleaned_data.
substitute func.__doc__ for compile_func.__doc__.
if supported_platform is False or is_a_tty is False,
_moved_attributes is an empty list.
call the method self._isdst with an argument dt, use it as an key to get the value from the _time.tzname dictionary, return it.
call the function escape with an argument p, replace every occurrence of '\n' in the result for '<br />', format the string  '<p>%s</p>' with the result, for every p in paras, substitute list of results for paras.
otherwis if char is contained in string 'Yy',
define the method send_messages with arguments self and email_messages.
if value is contained in self.empty_values,
from django.conf import settings into default name space.
define the function sort_dependencies with an argument app_list.
call the method self.xml.endElement with an argument string 'field'.
sign is an empty string.
define the function build_request_repr with arguments: request, path_override set to None, GET_override set to None,
take the first i elements of string p, strip the whitespaces from the both sides, convert it to lowercase and apply on it the method, decode with an argument string 'ascii', substitute the result for name.
if settings.FILE_UPLOAD_TEMP_DIR is true,
append app_dir to dirs list.
return output.
define the method __repr__ with an argument self.
instantiate class Module_six_moves_urllib with an argument, string ".moves.urllib" appended to __name__, substitute it for value under the string ".moves.urllib" appended to __name__ key of the sys.modules dictionary.
define the method _add_fallback with an argument self.
call the function get_commands, substitute the value under the name key of the return value, for app_name.
import msvcrt.
if self.verbosity is greater or equal to integer 2, call the self.stderr.write method with string "
call the method node.hasAttribute with string 'pk' as an argument, if it evaluates to true,
in encoded, replace all the occurrences of unicode character "\\054" with ',' character and "\\073" with ';' characters.
remove elements under the 'path' key of the kwargs dictionary, if it exists substitute it for path, if not path is None.
reverse the order of colors elements,
derive the class WSGIRequestHandler from simple_server.WSGIRequestHandler and object base classes.
if not,
substitute http_cookies.Morsel for Morsel.
define the method _coerce with arguments self and value.
yield subnode.
define the method _new_gnu_trans with 3 arguments: self, localedir and use_null_fallback set to boolean True.
for every ext in pathext,
if KeyError exception is caught,
filters is an empty list.
for i in self._ordering append to a list value under the first element of i key of the self.forms dictionary, return resulting list.
define the method _add_installed_apps_translations with an argument self.
LANGUAGE_SESSION_KEY is an string '_language'.
call the function settings.is_overridden with argument string 'MANAGERS', if it evaluates to boolean True,
if not,
from importlib import find_loader as importlib_find.
substitute instance._meta for opts.
if offset is an instance of timedelta class,
derive the class RegexValidator form the object base class.
define the function partition with 2 arguments: predicate and values.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
if ttl is not None,
if package is false,
path is an list containing path.
call the method parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name, substitute the result for args and kwargs, respectively.
call the __init__ method of the base class of the class FilePathField, with arguments: choices set to an empty tuple,4 required set to required, widget set to widget, label set to label, initial st to initial, help_text set to help_text, unpacked list args, unpacked dictionary kwargs.
return an empty string.
if not,
substitute handler for value under name key of handlers dictionary.
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
if connection exists dont change it, if not call the get_connection function with username set to auth_user, password set to auth_password, fail_silently set to fail_silently as arguments, assign the result to connection.
if rel_to is contained in known_models,
evaluate the method get_image_dimensions with self class instance and close set to close as the arguments, substitute the result for self._dimensions_cache.
if not,
is exception is caught,
call the __init__ method of the base class of the EmailBackend class with arguments: unpacked list args and unpacked dictionary kwargs.
substitute include_html for self.include_html.
meta is an instance of a class named 'Meta', derived from the object base class, without any fields.
find the ending position of the regular expression match of the object match, substitute the result for j.
if value is true,
prefix the base64d with a '.' character.
otherwise if ch equals a string '[',
define the method __init__ with 2 arguments: self and tagtype.
_assertRegex is a strnig "assertRegexpMatches".
derive the class ModelMultipleChoiceField from the ModelChoiceField base class.
if auto_id is true and '%s' is contained in result of the call to the function smart_text with an argument auto_id,
return string 'StopUpload: Halt current upload.'.
define method handle_app_config with self class instance, app_config and dictionary options as arguments.
append command.xgettext_options to the list containing 10 elements: string 'xgettext', string '-d', domain, string '--language=C', string '--keyword=gettext_noop', string '--keyword=gettext_lazy', string '--keyword=ngettext_lazy:1,2', string '--keyword=pgettext:1c,2', string '--keyword=npgettext:1c,2,3' and string '--output=-', substitute it for args.
call the params.get method wit string 'VERSION' and integer 1 as arguments, substitute the result for self.version.
return an instance of EscapeBytes, created with an argument, reuslt of the call to the function bytes with an argument s.
call the method __init__ from the base class of the Deserializer class with arguments stream_or_string and unpacked dictionary options.
return boolean False.
if field is contained in self.cleaned_data,
loaders is an empty list.
from django.db.migrations.optimizer import MigrationOptimizer into default name space.
define the method _initialize_handlers with an argument self.
if six.PY3 is true,
if field_type is a tuple,
if model is contained in created_models,
call the function hmac.compare_digest with 2 arguments: result of the function force_bytes called with an argument val1, and result of the function force_bytes called with an argument val2, return the result.
call the method os.dup2 with 2 arguments: result of the method so.fileno and result of the method sys.stdout.fileno.
call the _create_cache with backend and dictionary kwargs as arguments, substitute the result for cache.
replace every occurrence of '"' in s with '&quot;'.
otherwise if piece is true,
call the function force_text with an argument error, return the result.
call the method translation.activate with an argument string 'en-us'.
left justify value under the 'microsecond' key of the kw dictionary, in the field of width 6, fill the rest with '0', substitute the result for value under the 'microsecond' key of the kw dictionary.
if not,
if _file is not None,
trans_bit is a list with an element bit.
return response
call the function blankout with 2 arguments: t.contents and 'X', write the result to out.
raise an TemplateSyntaxError exception with an argument string "%r received an invalid token: %r", where '%r' is replaced with, first element of bits and first element of remaining_bits.
call the function mark_for_escaping with an argument new_obj, substitute the result for obj.
define the function timesince_filter with 2 arguments value and arg set to None.
call the method __init__ from the base class of EmailBackend class, with arguments: unpacked list args and unpacked dictionary kwargs.
return input_val.
if NotImplementedError exception is caught,
if name is not None,
substitute '%s' with title in the string " [X] %s", write it to the standard output.
if self.max_length is not None,
for every key in sorted list of user_settings,
return self.source.
self.deleted_objects is an empty list.
define the function write with an argument data.
call the method base.DeserializedObject with arguments obj and m2m_data, return the result.
if value is false and self.required is true,
if self has an attribute '_object_dict',
call the function digest twice, substitute the results for inner, outer, respectively.
call the result.rsplit method with arguments self.sep and integer 1, substitute the result for value and timestamp, respectively.
call the parser.add_argument method with the string '--database', default set to DEFAULT_DB_ALIAS and help containig string, 'Nominates a database to print the SQL for. Defaults to the "default" database.' as the arguments.
try,
call the method handle_default_options with an argument options.
finally, perform,
yield string "# This is an auto-generated Django model module." as the result.
call the function force_text with an argument s, strip the result of whitespaces from both ends, replace every occurrence of whitespaces in the previous result for '_', substitute the result for s.
substitute subject for self.subject.
if newretval is not None,
skip this loop iteration,
define the method _set with 4 arguments, self class instance, key, value and timeout set to DEFAULT_TIMEOUT.
try,
if not,
define the method __init__ with arguments self and attrs set to None.
value under the DELETION_FIELD_NAME key of the form.fields is an instance of BooleanField class, created with 2 arguments: label set to return value of the function _ called with an string 'Delete' and required as boolean False.
return field.to_python.
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwargs.
if source is an instance of NonCapture class,
define the function parse_boundary_stream with arguments stream and max_header_size.
if self.load_initial_data is not empty,
skip this loop iteration.
ignored  is an empty list.
EndToken is an instance of EndToken class.
append block_name to parser.__loaded_blocks.
if not,
call the method self.fk.rel.to, substitute the result for self.instance.
self.choices is an list containing an tuple with 2 elements: an empty string and string "---------".
if self.use_ipv6 substitute string '::1' for self.addr, if not substitute '127.0.0.1' for self.addr.
call the method self._render with an argument context, return the result,
append an empty string to dirs list.
if attr is contained in flags,
for every punctuation in TRAILING_PUNCTUATION,
derive the class metaclass form the meta base class.
if serializers is None,
substitute auto_id for self.auto_id.
if iterator is None,
if not,
define the method top with an argument self.
return __wrapper__.
call the encode function on the Header class instance, created with arguments addr and encoding, substitute the result for addr.
call the function force_str with an argument value, substitute the result for value.
if not,
call the function make_key with 3 arguments: args, kwds and typed, substitute the result for key.
define the method id_for_label with an argument self.
return string '(%s: %s)', formated with self.connector and string created by joining c into a string, separated by ', ', for every c in self.children.
if target is None,
fail_message is a string changed'.
if string '--commands' is contained in args,
delete value under the key key of dictionary at last element of self.dicts.
if not,
define the function get_key_func with argument key_func.
call the function update_wrapper with 2 arguments: _wrapper and dummy.
call the method m.group with an argument string 'min', convert the result into a string, substitute it for min.
nodelist_empty is None.
self.tokens is an empty dictionary.
code is a string 'min_value'
substitute var1 and var2 for self.var1 and self.var2, respectively.
if StandardError, renamed to e, exception is caught,
from django.utils.text import Truncator, wrap and phone2numeric into default name space.
if self.addr is false,
for every sublist in second_item,
if not,
if vale is None or an empty string,
call the function widget, substitute the result for widget.
import module sys.
split s into parts by '.', substitute the result for name.
if not,
set filter_func objec attr attribute to value.
if KeyError, IndexError and AttributeError exception is caught,
from django.db import models into default name space.
import module random.
substitute fcntl.LOCK_SH for LOCK_SH.
join usage and self.help into a string, separated by 2 new line characters, return it.
from django.conf import settings into a default name space,
DOTS is a list with 6 elements: strings '&middot;', '*', '\u2022', '&#149;', '&bull;' and '&#8226;'.
if missing_fields is true,
return boolean False.
kwargs is an empty dictionary,
return result.
define the method add_prefix with an argument self.
substitute context for self.context.
if not,
concatenate __name__, string '.moves' and attr.name together, use it as an key to get the value from the sys.modules dictionary, substitute attr for the obtained value.
__all__ is a list containing next strings, 'CheckMessage', 'Debug', 'Info', 'Warning', 'Error', 'Critical',
import module hashlib.
return value.
call the method appendlist with 2 arguments: key and value.
define the method copy with an argument self.
convert self to a tuple, call the result with 2 arguments: block.name and block.nodelist, substitute the result for block.
from collections import UserList into default namespace.
convert filename to lowercase, use the result as an argument for the call to the function os.path.splitext, substitute the result for base and tail_ext.
increment num_sent by one.
if self.is_bound is true,
return an instance of DebugVariableNode, created with an argument contents.
if since is lesser or equal to integer 0,
if can fail is true,
define the function remove_tags with 2 arguments: html and tags.
for every opt in list containing 3 elements: strings 'fields', 'exclude' and 'localized_fields',
call the method message.message, substitute the result for msg.
for every k and v in self.choices,
call the method data.replace with an argument microsecond set to integer 0, substitute the result for data.
substitute elements of self.validators list for result.validators.
sys.stdout is an instance of NullDevice class.
if option_value is contained in selected_choices,
python_2_unicode_compatible decorator
call function update with path as the argument, for every path in settings.LOCALE_PATHS, extend basedirs list with previous items.
define the function _resolve_name with 3 arguments: name, package and level.
write msg to self.stderr stream.
if not,
do nothing.
define the method update_error_dict with arguments self and error_dict.
define the method pop with an argument self.
call the function smart_urlquote with an argument middle, substitute the result for url.
result is an instance of SimpleLazyObject class, created with an argument self._setupfunc.
field_value is None.
define the method changed_data with an argument self.
do nothing.
if fake is true,
return nothing.
call the function force_bytes with an argument password, substitute the result for password.
call the command.execute method with arguments: unpacked list args and unpacked dictionary defaults, return the result.
call the method m.group with an argument string 'year', convert the result into a string, substitute it for year.
return boolean False.
do nothing.
substitute DateInput for widget.
 if top_errors is true,
if self.verbosity is greater or equal to integer 2,
return None.
if value under the 'socket' key of the options dictionary is true and values under the 'host' and 'port' keys of the options dictionary are false,
define the function _string_concat with an argument unpacked list strings.
otherwise if count is greater than integer 1,
derive the class EmailValidator form the object base class.
define the function get_library with an argument library_name.
if six.PY3 is true,
for every frag in name.
call the method self.__cast, if the result doesnt equal to other, return boolean True, otherwise return boolean False.
substitute compile_function for self.tags dictionary value under the name key.
return None.
instantiate Variable class, with an argument constant, call the resolve method with an empty dictionary as an argument, substitute the result for var_obj.
decorator stringfilter,
return a tuple with 3 elements: if path is true, path, in not, a string '%s.%s' formated with obj.__class__.__module__, and obj.__class__.__name__, first element of obj._constructor_args and second element of obj._constructor_args.
first element of url_fields is string 'http'.
derive class Command from CheckCommand base class.
call the function format_html with 2 arguments: string '<input{0} />' and result of the function flatatt, called with an argument final_attrs, return the result.
define the function cleanup_url with an argument url.
join elements of output in a string, separated by newlines, return it.
substitute Field.creation_counter for self.creation_counter.
define the method render with 2 arguments: self and context.
define the method fetch_command, with arguments self and subcommand.
self.active_readers is an integer 0.
substitute obj._meta.concrete_model for concrete_model.
ALL_FIELDS is a string '__all__'.
if dec_part is true,
call the method __init__ from the base class of the class IncludeNode, called with 2 arguments: unpacked dictionary args, and unpacked dictionary kwargs.
with self.mutex perform,
call the function endblock_re.match with an argument t.contents, substitute the result for endbmatch.
if not,
substitute self.regexes for regexes.
from .registry import register, run_checks, tag_exists and Tags into default name space.
define the function ngettext with 3 arguments: singular, plural and number.
for every date_key in date_keys,
return value.
call the fastcgi_help function with an argument string "ERROR: Invalid option for daemonize parameter.", return it.
derive the class Command from the BaseCommand base class.
remove config dictionary element under 'name' key, if it exists substitute it for name, if not, name is an empty string.
if value under the 'author_email' key of the self.feed dictionary is not None,
with open file path in append mode,
if not,
leave_locale_alone is boolean True.
return cookiedict.
define the _fd function with argument f.
if token_string starts with VARIABLE_TAG_START,
from django.utils.module_loading import module_has_submodule into default name space.
define the method url with arguments self and name.
return default,
fill_to is an integer 8.
call the method self.tag with 2 arguments name and func, return the result.
import module re.
define the method _itervalues with an argument self.
terminal_char is an string ')'.
define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
for every ext in combo, if ext is true, join it to a string, separated by '.', put the result in a tuple, perform the previous for every combo in result of the function product called with 3 arguments: databases, ser_fmts and cmp_fmts, substitute the result for suffixes.
* Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table" as the result.
get the value under the key 'exclude' of the options dictionary, convert it to an integer, substitute it for exclude.
derive the class CacheClass from the base class LocMemCache.
join app_dir and string 'models/sql' into a file path, use the result as an argument for the call to the function os.path.normpath, append the result to old_app_dirs.
call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.
define the function select_template with 2 arguments: template_name_list and dirs set to None.
if not,
app_configs is not None.
define the function npgettext with 4 arguments: context, singular, plural and number.
call the method self.configure_handler with an argument value under name key of handlers dictionary, substitute the result for handler.
define the initialization function with self class instance, digits and sign defaulting to '-' as arguments.
call the method self.render, return the result.
define the method __next__ with an argument self.
get the value under the self.using key of the connections dictionary, substitute it for connection.
define method load_middleware with class instance self as the argument.
double the chunk size.
raise an InvalidTemplateLibrary exception with an argument string "Unsupported arguments to Library.tag: (%r, %r)", substitute '%r' with name and compile_function.
if not,
get the value under the 'HTTP_X_FORWARDED_HOST' key of the self.META dictionary, substitute the result for host.
define the method __init__ with arguments: self, fields set to an empty tuple, unpacked list args and unpacked dictionary kwargs.
call the message_from_string function with an argument content, substitute the result for content.
if self.timezone is None,
if register_to is true,
define the method next_page_number with an argument self.
self.resolver_match is None.
otherwise if name is not None and compile_function is None,
try,
if app_config.models_module is None,
get the value under the settings.__module__ key of the sys.modules dictionary, use its __file__ field as an argument for the call to the function upath, substitute the result for settingsfile.
import module sys.
if exp is not None and exp is lesser than return value of the function time.time,
substitute sysid for self.sysid.
import module base64.
substitute v for value under the k-th element of m key of _ dictionary.
if definition is true,
call the method self.validate_key with argument key.
pdict is an empty dictionary.
return plist.
create a list of tuples out of 2 lists: appended params list to prefix_args and text_args, covert the result into a dictionary, substitute it for candidate_subs.
derive the class EntitiesForbidden from the DefusedXmlException base class.
if decimals is greater than digits,
if first and second elements of value are contained in self.empty_values,
silent is boolean True.
basedirs is a list containing tuple with strings, 'conf/locale' and 'locale'.
 requires_system_checks is boolean False.
create a tuple out of elements under the key field of the form.cleaned_data dictionary, add elements of date_data to it, substitute it for data.
if ImportError, IndentationError, NameError, SyntaxError, TypeError or AttributeErrorexception is caught,
if plan_node is contained in loader.applied_migrations,
divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.
append ')' to third element of bit, substitute it for sentinal.
if instance is not None,
if ImportError exception is caught,
return resolved_args and resolved_kwargs.
if not,
define the method add with 4 arguments: self, data, conn_type and squash set to boolean True.
call the method self.validate_key with argument key.
call the method self.var.resolve with an argument context, substitute it for obj.
convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the, default string value, substitute it for value.
if nor,
for every basedir in basedirs,
get property attribute _get_height, and substitute it for width.
substitute self for result.parent.
get the absolute file path of the expanded_template, substitute it for absolute_path.
otherwise if self.verbosity is greater than integer 0,
break the loop execution.
yield meta_line as the result.
skip this loop iteration.
cache is an instance of BaseDatabaseCache class, created with arguments: tablename and an empty dictionary.
if tried is true,
from decimal import Decimal and DecimalException into default name space.
reporter is an instance of ExceptionReporter class, created with 3 arguments: request, is_email as boolean True, unpacked list exc_info.
define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
define the method load_label with self and fixture_label as arguments.
if self.file has an attribute 'name',
django.core.exceptions import ImproperlyConfigured, ValidationError, NON_FIELD_ERRORS and FieldError into default namespace.
call the method sys.stderr.write with an argument string "  as a FastCGI application, you will need to get flup from\n". call the method sys.stderr.write with an argument string "  http://www.saddi.com/software/flup/
call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value, and format, return the result.
convert new_name to a string and append it to string 'field', substitute the result for new_name.
if AttributeError exception is caught,
define the method get with 4 arguments, self class instance, key, default set to None and version set to None.
insert mw_instance.process_response at the beginning of self._response_middleware.
if resource_string is not None, is_usable is boolean True, otherwise is_usable is boolean False.
call the method handler.receive_data_chunk with 2 arguments: chunk and i-th element of counters, substitute the result for chunk.
raise an SignatureExpired exception with an argument string 'Signature age %s > %s seconds', where '%s' is replaced by age and max_age, respectively.
evaluate the logic expression, plat does not equals to string 'Pocket PC', and plat does not equals to string 'win32' or string 'ANICON' is in os.environ, substitute the evaluated boolean for supported_platform.
join self._container elements into a string, return it.
call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
self.content_type_extra is None.
substitute '%s' from string "<%s: %s (%s)>" with self.__class__.__name__, self.name and self.content_type, respectively, use it as an argument for the call to the function force_str, return the result.
derive class WindowsError from Exception base class.
append data to self.children.
if self.show_traceback is true,
for every bytes in stream,
assign path_info to the value under the 'PATH_INFO' key of the self.META dictionary.
yield representative and boolean True.
do nothing.
if bf_errors is true,
if mode equals to string 'add' and current_expires is lesser than now, or mode equals to string 'set', and result is true,
define the method eval with 2 arguments: self and context.
define the function gettext with an argument message.
define the method e with an argument self.
derive the class TimeInput from the DateTimeBaseInput base class.
define the function set_urlconf with an argument urlconf_name.
call the method _illegal_formatting.search with an argument fmt, substitute the result for illegal_formatting.
domains is a tuple with 2 elements: strings 'djangojs' and 'django'.
if string 'DJANGO_AUTO_COMPLETE' is not contained in os.environ,
derive the class Paginator from the object base class.
define the method get_host with an argument self.
call the method datetime.timedelta with an argument seconds set to integer 1, increment delta by it.
call the method self._cull.
get the value under the 'tags' key of the options dictionary, if it exists substitute it for tags, if not, tags is None.
derive the class UploadFileException from the Exception base class.
derive the class ConvertingDict from dict base class.
if not,
otherwise if '=' is contained in part,
if fname is contained in self._list_cache_files method return value,
if not,
if value is None,
if there is no match,
if new_name is contained in used_column_names,
from django.utils.six.moves.urllib.request import urlretrieve into default name space.
if value under the 'feed_copyright' key of the self.feed dictionary is not None,
try,
convert x into a string for every x in list of version elements up to the parts index, join the previous into a string separated by '.', assign the result to major.
call the method self.validate_name with 2 arguments: app_name and string 'app'.
if cache_choices is not None,
call the function allow_lazy with 2 arguments: urlquote and six.text_type, substitute the result for urlquote.
define the method pop with 3 arguments: self, k and unpacked list args.
if ImportError exception is caught,
if not,
split locale by '_', append the first element of the result to locales.
_localtime is an instance of LocalTimezone class.
decorator function register.filter with an argument string "escapejs".
result is an tuple with 2 elements: template and return value of the function make_origin called with 4 arguments: display_name,  loader, name and dirs.
self.verbose_name is a string 'cache entry'.
derive the class FilterNode from Node base class.
if index is not None,
yield string 'from %s import models' % self.db_module as the result, where "%s" is replaced with result of the call to the function, table2model with an argument table_name.
media is an instance of Media class.
substitute compressed for data.
return result.
terminal_char is an string '>'.
raise a CommandError exception, with string "No migrations present for: %s" as argument, substitute '%s' in previous string with, string joined from invalided_apps list and separated with string ', '.
if length of fks_to_parent is integer 1,
if not,
if six.PY3 is boolean True,
try,
ORDERING_FIELD_NAME is a string 'ORDER'.
self.config is an instance of ConvertingDict, called with an argument config.
substitute first size elements of self.buffer for result.
_urllib_request_moved_attributes is an list with 33 elements, all of them are the results of the call to the function MovedAttribute with 3 different string arguments.
for every node in self,
return an string "<IfNode>".
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
substitute schemes for self.schemes.
substitute input_data for self._input_data.
append string '-_' to the BASE62_ALPHABET, substitute it for BASE64_ALPHABET.
if end_index is None and s_len is greater than truncate_len,
if cls has an attribute k,
call the self.get_dum_object method with an argument obj, use the result as an argument for the self.objects.append method.
decorator is an instance of class Node, created with 2 arguments: instance of Leaf class created with 2 arguments: token.AT and "@', and instance of Name class created with an argument string 'python_2_unicode_compatible'.
substitute message.error_list for message.
if app_config.models_module is None,
encode is an lambda function with arguments k and v, return value is string '%s=%s', where '%s' is replaced with: return value of the function quote called with arguments k and safe, and with return value of the function quote called with arguments v and safe.
property decorator,
define the method read with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
callback is an lambda function with an argument response and with return value result of the method middleware.process_response, called with 2 arguments: request and response.
from django.utils.encoding import force_text and force_str into default name space.
register.tag decorator function with an argument 'filter',
do nothing.
append string "PRIMARY KEY" to field_output.
call the function get_current_timezone, substitute the result for timezone.
substitute the last element of parts for parts.
if self.field.choice_cache is None,
define the method __init__ with 4 arguments: self, children set to None, connector set to None and negated set to boolean False.
self.cookies is an instance of a class SimpleCookie.
substitute the regex_compiled for value under the language_code key of the self._regex_dict dictionary.
if basedir is not a directory,
bring integer 2 to the power of 31, subtract the result by 4, put the result into a list, append possible_sizes to it, substitute minimal element of the resulting list for self._chunk_size.
endless loop,
call the self.start_object with an argument obj.
try,
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
call the method base.build_instance with arguments Model, data and self.db, substitute the result for obj.
compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})' '(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$', substitute it for datetime_re.
define the __init__ method with arguments: self, text, subtype and charset.
if e.is_serious method evaluates to true, call the function color_style, on the result call the method ERROR with result of the  force_str called with an argument e, if not call the function color_style on the result call the method ERROR with result of the  force_str called with an argument e, for every e in issues, formatted is a tuple containing the previous result.
call the method self.add_arguments with an argument parser.
define the initialization method __init__ with 3 arguments: self, name and params.
define the method _create_message with arguments self and msg.
if not,
call the function time.gmtime with argument timeval, use string '%Y%m%d%H%M%S' and the previous result as an argument for the call to the time.strftime function, substitute the result for utcdate.
substitute base_url for self.base_url.
if i is greater than or equal to length of subject.
import module sys.
define lambda function with self class instance as the argument, lambda function body encapsulates the call to the method, str.__unicode__().encode('utf-8'), call the lambda function and put the result in the __str__ filed of klass.
call the method pyinotify.INotifyWrapper.create, on the return value call the inotify_init method, substitute the result for fd.
define the method __init__ with 3 arguments: self, attrs set to None and check_test set to None.
define the method __init__ with an argument self.
substitute limit for self.remaining.
from django.utils.six.moves.urllib.parse import urlsplit and urlunsplit into default name space.
property decorator,
convert value into an floating point number, substitute it for value.
raise an TemplateSyntaxError exception with an argument string "%s requires %d arguments, %d provided", where '%d' is replaced with name, dlen subtracted from alen, and plen.
substitute arg converted into a integer for length.
if not,
if initial is not an instance of the list type,
import module sys.
raise an ImproperlyConfigured exception with an argument: return value of the method msg.format, called with an argument name set to self.urlconf_name.
raise an exception of the class ValueError with string "Key '%s' not found" as argument, '%s' is substituted for key.
decorator function wraps with an argument fget.
if initial_value is not equal to data_value, return boolean True, otherwise return boolean False.
call the method self._callback_strs.update with an argument pattern._callback_strs.
define the method extract with 2 arguments: self and to_path set to an empty string.
return nothing.
write a string "Resetting sequences\n" to self.stdout stream.
format self.year_field string with name, use it as the key for the data dictionary, substitute the result for y.
define the method G with an argument self.
import module sys.
substitute message for self.message.
try,
from importlib import import_module into default name space.
return nothing.
define the function addslashes with an argument value.
from django.db.migrations.loader import MigrationLoader into default name space.
define the function loads with 5 arguments: s, key set to None, salt set to string 'django.core.signing',
define the method is_hidden with an argument self.
substitute self for result.parent.
substitute name for self.name.
vary_on is an empty tuple.
call the DefaultCacheProxy function, substitute it for cache.
call the MigrationExecutor with the connection as the argument, substitute it for executor.
if not,
put bcc into a list, assign it to self.bcc.
define the function trim_url with 2 arguments: x and limit set to trim_url_limit.
convert name to lower case if it equals to string 'from' or 'to,
define the method clean with an argument self.
sum results of method self.save_existing_objects called with an argument commit and of method self.save_new_objects, called with an argument commit, return the result.
substitute second element of renamed_method for new_method_name.
call the method self.__dict__.copy, substitute the result for state.
derive the class Form from the base classes DeclarativeFieldsMetaclass and BaseForm.
call the method boundary.encode with an argument string 'ascii', substitute the result for boundary.
VARIABLE_ATTRIBUTE_SEPARATOR is a string '.'.
root is an list with 4 elements: root, root, None and None.
append string 'max_digits and decimal_places have been guessed, as this database handles decimal fields as float' to field_notes.
substitute first element of base64d for base64d.
substitute settings.ROOT_URLCONF for urlconf.
return.
define the function check_all_models with app_configs defaulting to None and unpacked dictionary kwargs as arguments.
CRITICAL is integer 50.
set attr.name attribute of the Module_six_moves_urllib_request object to attr.
raise an NotImplementedError exception with an argument string 'subclasses of BaseCommand must provide a handle() method'.
define the method initial_form_count with an argument self.
return boolean True.
define the initialization method __init__ with self, table and params as arguments.
self._raw_ipv6 is boolean False.
if return value of the function connection.introspection.table_name_converter called with an arugment: model._meta.db_table is contained in table_names
decorator function register.filter with an argument is_safe set to boolean True.
for every loader in template_source_loaders,
substitute name for new.
indexes is an empty dictionary.
pytz is None.
return self._wrapped.__dict__.
property decorator,
while rest is true,
define the method extra_forms with an argument self.
if chunk is None,
define the method compile_function_error with 3 arguments: self, token and e.
request_middleware is an empty list.
if whitelist is not None
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " OK" as a argument.
define the method make_key with self class instance, key and version defaulting to None as arguments.
logger.disabled is boolean True.
call the method token.split_contents, substitute results without the first element for bits.
try,
substitute cookie for c.
if not,
return a string '%s:%s' formated with the results of the functions self.g and self.i, respectivley.
define the method add_arguments with self class instance and parse as the arguments.
call the logger.warning method with string 'Bad Request (UnicodeDecodeError)', exec_info set to sys.exec_info() and dictionary extra with one entry 'status_code' is integer 400, as arguments.
define the function get_current_timezone.
define the method __get__ with 3 arguments: self, obj and tp.
call the method __init__ from the base class of the EmailMultiAlternatives class, with 9 arguments: subject, body, from_email, to, bcc, connection, attachments, headers and cc.
if ImportError exception is caught,
call the method __init__ from the base class of the class MultiValueDict, with an argument key_to_list_mapping.
try,
call the __init__ method with 3 arguments: CRITICAL, unpacked list args and unpacked dictionary kwargs from the base class of Critical.
if subcommand equals to a string 'help'.
if not,
get the value under the self.status_code key of the REASON_PHRASES dictionary, if it exists substitute it for the self.reason_phrase, if not, self.reason_phrase is a string 'UNKNOWN STATUS CODE'.
if item is contained in self.dict, return boolean True, otherwise return boolean False.
call the function get_fixed_timezone with an argument offset, substitute the result for tzinfo.
if fk_name is true,
if '::' is not contained in ip_str and number of occurrences of ':' in ip_str is not equal to integer 7,
if ValueError exception is caught,
self._done is boolean True.
if data is an instance of MultiValueDict or MergeDict class,
call the method connection.ops.prepare_sql_script with 2 arguments: return value of the function fp.read, and _allow_fallback set to boolean True, extend the output with the result.
call the method handler.startDocument.
return an empty list.
call method __init__ with argument params from the base class of the FileBaseCache.
break the execution of the smallest enclosing loop.
full_statement is a list containing: string "CREATE TABLE %s (", where %s is replaced by result of the function qn called with an argument tablename.
matches is boolean True,
if s is an instance of an object Promise.
call the function conditional_escape with an argument contents, substitute the result for contents.
call the method loader.graph.forwards_plan with argument a tuple, with 2 elements: app_label and migration_name, substitute the result for migration.ancestry.
strip message_context of '"' characters from both ends, substitute the result for message_context.
substitute v for value under the k converted to lower case key of options dictionary.
if self.data is false,
call the method handler.addQuickElement with 2 arguments: string "category" and cat.
if not,
try,
substitute streaming_content for self.streaming_content.
return boolean False.
define the function sanitize_separators with an argument value.
replace '%s' in string "copying plural forms: %s\n" with plural_form_line, write it to self.stdout.
call the method self.configurator.convert with an argument value.
if self.verbosity is greater than integer 0,
print a string "In the tar file %s the member %s is invalid: %s", where '%s' is substituted with: name, member.name and exc, respectively.
return an dictionary containing 1 entry: return value of the function timezone.get_current_timezone_name for 'TIME_ZONE'.
join self.dirpath and self.file into a file path, substitute it for orig_file.
define the method render with 2 arguments self and context.
if self._upload_handlers is false,
_cookie_allows_colon_in_names is a boolean True.
call the function ugettext with an argument string "Please correct the duplicate data for %(field)s, which must be unique.", where '%(field)s' is replaced with return value of the get_text_list function called with 2 arguments: unique_check and return value of the function six.text_type called with return value of the function _ with an argument string 'and', return the result.
import module django.
if self has an 'error_dict' attribute,
from __future__ import unicode_literals into default name space.
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS, and help set to string 'Nominates a database to synchronize. Defaults to the "default" database.'.
if f is not None append it to a list for every f in tuple containing 3 elements: style_func, self.style_func, and lambda function returning x for x, substitute the firs element of resulting list for style_func.
call the function get_script_prefix, substitute the result for prefix.
define the method handle with 2 arguments: self and unpacked dictionary options.
if _standard_context_processors is None,
call the method parts.reverse.
substitute charset for self.charset.
define the method __init__ with 2 arguments: self and iterable set to None.
from django.utils._os import rmtree_errorhandle into default name space.
if not,
return an instance of a class WithNode, created with 4 arguments: None, None, nodelist and extra_context as extra_context.
append string 'Field renamed to remove unsuitable characters.' to field_notes.
if length of bits is lesser than integer 2,
return retval.
call the method lookups.appendlist with 2 arguments: name and a tuple containing 3 elements: new_matches, sum of p_pattern and pat, and dictionary created by applying defaults mapping on the pattern.default_kwargs dictionary.
call the sys.stderr.write function with an argument msg.
define the method _set_regex with arguments self and regex.
call the function _resolve_name with 3 arguments: name list elements from the level index to the end, package and level, substitute the result for name.
substitute self.model._default_manager for queryset.
return value.
return list_ and boolean False.
if TypeError exception is caught,
if data is None,
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with an entry: cat for 'term'.
if TypeError exception is caught,
if message-id' is not in header_names,
cls is None.
_urllib_response_moved_attributes is a list with 4 elements: result of the function MovedAttribute, called with 3 arguments: strings "addbase", "urllib" and "urllib.response", result of the function MovedAttribute, called with 3 arguments: strings "addclosehook", "urllib", "urllib.response", result of the function MovedAttribute, called with 3 arguments: strings "addinfo", "urllib", "urllib.response" and result of the function MovedAttribute, called with 3 arguments: strings "addinfourl", "urllib", "urllib.response".
if ext doesnt start with '.' character,
while factor is greater or equal to integer 0,
get the directory name of filename, substitute it for dirname.
return msg_count.
delete element under 'warning' key of kwargs dictionary.
call the method parser.add_argument with 5 arguments: string '--no-default-ignore', action as a string 'store_false', dest as a string 'use_default_ignore_patterns', default set to boolean True, and help as a string "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'.".
get the value 'allow_cascade' key of the options dictionary, if it exists substitute it for allow_cascade, otherwise allow_cascade is boolean False.
if not,
do nothing.
add params to extra_params dictionary.
return nothing.
if url_info.netloc is false or url_info.netloc equals host, and if url_info.scheme is false or url_info.scheme equals,
substitute stream for self._stream.
call the method self.handle_field with arguments obj and filed.
get config dictionary element under 'root' key, if it exists substitute it for root, if not, root is None.
use global variable _supported.
call the function force_text with an argument path, substitute the result for path.
define the method delete with self class instance, key and version defaulting to None as arguments.
compile regex from a string '(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])', substitute it for re_formatchars.
_anonymous_ is a list containing one string: '_offset'.
call the function thread.start_new_thread with main_func, args and kwargs as arguments.
subtract year from integer 2000, substitute the result for delta.
visible_issue_count is an integer 0.
if KeyError exception is caught,
for every key and value in items of dictionary self,
define the method format_subject with 2 arguments: self and subject.
return the value under the language_code key of the self._regex_dict dictionary.
substitute content_type for value under the 'Content-Type' key of the self dictionary.
self._errors is an instance of ErrorDict.
call the function force_text with first element of list_ as an argument, return the result.
call the function warnings.warn with 2 arguments: string '"requires_model_validation" is deprecated ' 'in favor of "requires_system_checks".' and RemovedInDjango19Warning.
substitute item for value under the first element of self.loopvars key of the context dictionary.
if cc contains item 'public' and kwargs contains item 'private',
register.tag decorator,
if app_path is None,
return path,
substitute registry.tag_exists for tag_exists.
return settings.TEMPLATE_STRING_IF_INVALID.
substitute max_width for self.max_width.
call the self.style.HTTP_SUCCESS with an argument msg, substitute it for msg.
define the method render with 2 arguments self and context.
define the function write_pot_file with 2 arguments potfile and msgs.
import module sys.
if password is None substitute settings.EMAIL_HOST_PASSWORD for self.username, if not substitute password for self.password.
for every matches, pat and defaults in return value of the method pattern.reverse_dict.getlist called with an argument name,
join elements of output into a string, return the result.
value under the comment_lineno_cache key of the lineno_comment_map dictionary is an empty string.
get the value under the value key of a dictionary with 6 entries: boolean True for '2', boolean True for boolean True, boolean True for 'True', boolean False for '3', boolean False for 'False' and boolean False for boolean False, return it if the key exists, if not return None.
call avoid_wrapping function with name2 modulus count2 as argument, call the ugettext with ', ' as argument, add previous 2 results, increment variable result by it.
raise an ContentNotRenderedError exception with an string 'The response content must be rendered before it can be iterated over.'.
return a instance of the class Page, created with 2 arguments: unpacked list args and unpacked dictionary kwargs.
substitute registry.run_checks for run_checks.
for every attachment in self.attachments,
increment pos by one, substitute the result for last.
insert none_value at the beginning of the choices list.
call the method self._assert_mutable.
define lambda function that returns self.file.writelines field, use it as an argument for property function, put the result in writelines.
call the method self.find_files with an argument string '.', substitute the result for file_list.
substitute new_args for result_args.
import module django.core.checks.model_checks.
try,
derive the class BaseEmailBackend from the object base class.
return singular_suffix.
if widget is an instance of NumberInput and string 'step' is not contained in widget.attrs.
call the method parser.add_argument with string '--database', action containing string 'store', dest set to string 'database', default set to DEFAULT_DB_ALIAS, help containing string 'Nominates a database to synchronize. Defaults to the "default" database.' as arguments.
from django.core.files import uploadhandler into default name space.
call the function var.find with an argument: '_' appended to VARIABLE_ATTRIBUTE_SEPARATOR, if the result is greater than integer -1, or first element of var equals '_',
define the function _findall with 2 arguments text and substr.
call the function t.render with an argument context_instance, return the result.
call the method parser.add_option with an argument opt.
call the method parser.add_argument with 4 arguments: string '--format', default set to string 'json', dest set to 'format' and help is a string 'Specifies the output serialization format for fixtures.'.
try,
if ValueError or self.queryset.model.DoesNotExist exception is caught,
if not,
get the value under log key of root.manager.loggerDict dictionary, substitute it for logger.
call the function re.compile with 2 arguments: filter_raw_string and result for bitwise OR on 2 operands re.UNICODE and re.VERBOSE, substitute the result for filter_re.
define the method __iter__ with an argument self.
if func doesnt have a attribute '__name__',
join statements into a string, separated by newlines, return it.
call the function six.text_type with an argument arg, append the result to '%', format the previous with value, return the result.
from math import ceil into default name space.
WEEKDAYS is an dictionary with 7 entries: result of the call to the function _ with an argument string 'Monday' for 0, result of the call to the function _ with an argument string 'Tuesday' for 1, result of the call to the function _ with an argument string 'Wednesday' for 2, result of the call to the function _ with an argument string 'Thursday' for 3, result of the call to the function _ with an argument string 'Friday' for 4, result of the call to the function _ with an argument string 'Saturday' for 5, and result of the call to the function _ with an argument string 'Sunday' for 6.
substitute '%s' in a string "Merging %s" with app_label, use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.
if data is boolean False,
zip self.loopvars and item is a list to tuples, convert the result to an dictionary, substitute it for unpacked_vars.
get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
from django.core.management.base import BaseCommand into default name space.
return value converted into a list.
substitute object_list for self.object_list.
inplural is boolean False.
instantiate Header class with localpart and encoding, convert it to a string, substitute the result for localpart.
if localized_fields is not None,
define the function get_digit with 2 arguments value and arg.
call the method self._cache.decr with key and delta as arguments, substitute the result for val.
get the value from the options dictionary under the key 'interactive', substitute it for self.interactive.
if self.default_locale_path directory doesnt exists,
call the self.to_python method with an argument value, strip the result of the whitespaces from the sides, substitute the result for value.
define the function dec with an argument func.
return None.
raise an exception.
unpack the manifest.values function return value and feed it to the itertools.chain function, create_models is a set containing chanied list.
if call to the method response.has_header with string 'Cache-Control' as an argument returns boolean True,
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
substitute string 'checked' for value under the 'checked' key of final_attrs dictionary.
call the method self.merge with an argument translation.
try,
return nothing.
append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument: name appended to string '_', as the name of the attribute to get from self object, or if the previous doesnt exist, None.
if cache is None,
from django.utils.daemonize import become_daemon into default name space.
flush the output buffer of the self.stdout object.
if data is empty.
kwargs is an empty dictionary.
substitute charset for self.charset.
substitute iter for iterbytes.
if template_dir is directory,
call the method parser.add_argument with 5 arguments: string '--natural-primary', action set to 'store_true', dest is 'use_natural_primary_keys', default is boolean False and help is a string 'Use natural primary keys if they are available.'.
call the function escape with an argument text, return the result.
substitute name for self._name.
skip this loop iteration,
call the ops.quote_name method with argument self._table on the object under the db key of connections dictionary, substitute the result for table.
define the method __eq__ with self and other arguments:
substitute RadioFieldRenderer for renderer.
define the function urlizetrunc with 3 arguments value, limit and autoescape set to None.
connection_params is a dictionary with 1 initial entry: return value of the function DNS_NAME.get_fqdn for 'local_hostname'.
derive the class Archive from the object base class.
multiply 10 to the power of 200, with itself, substitute the result for pos_inf.
call the method self.can_read.acquire.
substitute value under the f.name key of the labels dictionary for value under the 'label' key of kwargs dictionary.
increment chunk by over_chunk.
method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
substitute self for result.parent.
if d is not an instance of datetime.datetime,
call the method executor.migration_plan wiht return value of te method executor.loader.graph.leaf_nodes as argument, substitute it for plan.
return attrs.
call the function six.reraise with 3 arguments: ImproperlyConfigured, ImproperlyConfigured(msg) and third element of return value of the function sys.exc_info.
try,
define the method create_token with 3 arguments: self, token_string and in_tag.
define the method __get__ with 3 arguments: self, instance and name type to None.
define the method __next__ with an argument self.
substitute renderer for self.renderer.
call the method MIMEText.__setitem__ with arguments self, name and val.
import module warnings.
call the method parser.add_argument with string '--locale', string '-l', dest set to string 'locale', action set to string 'append', default as an empty list and help as an string 'Locale(s) to process (e.g. de_AT). Default is to process all. Can be used multiple times.'.
call the add_argument method on the parser object, with string '--database', default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database to create SQL for. Defaults to the default" database.' as arguments.
for every item in qu append item.pk to a list, substitute resulting list for value under f.name key of the data dictionary.
call the method archive.extract with arguments: filename and tempdir.
if self.timezone is true, call the method self.timezone.tzname with an argument self.data, substitute the result for name, otherwise name is None.
if value is not contained in result,
get the value under the 'id' key of the self.field.widget.attrs dictionary, if the key exists substitute it for id_, if not, substitute self.auto_id for id_.
remove self._regex_validator from self.validators.
call the function warnings.warn with 2 arguments: string "django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. " "Use django.utils.timezone.get_default_timezone instead." and RemovedInDjango19Warning.
format string ' gettext(%r) ' with g, write it to out.
__T is a raw string '(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'.
define the function is_iterable with an argument x.
call the method from_current_timezone with an argument result, return the result.
call the method resolve with an argument context, from the instance of Variable class, created with an argument path.
call the function convert_old_style_list with an argument value, substitute the result for value and converted, respectively.
if not,
define the method o with an argument self.
import module time.
var_obj is an instance of Variable class, created with an argument var.
substitute HTMLParseError from the module _html_parser for HTMLParseError.
if not,
from decimal import Decimal into default name space.
errors is an empty list.
substitute self._meta for opts.
if self._pk_field equals self.fk,
for every k in keys,
delete entry under the oldkey key of the cache dictionary.
call the method self.data.replace with 2 arguments: month as integer 1 and day as integer 1, on the result call the method, weekday, increment the result by integer 1 and substitute it for jan1_weekday.
call the method nodelist.render with an argument context, return the result.
if serializers is None and _serializers is false,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if six.PY2 is true,
return boolean False.
if not,
__all__ is an list containing a string 'File'.
define the function compile_func with 2 arguments: parser and token.
call the function clean_ipv6_address with arguments value and self.unpack_ipv4, return the result.
all the method command.create_parser with arguments: empty and name, substitute the result for parser.
update attrs dictionary with extra_attrs entry.
define lambda function that returns self.file.read field, use it as an argument for property function, put the result in read.
call the method self.reset.
define the get_path_info function with environ as the argument.
call the function allow_lazy with 2 arguments: remove_tags, six.text_type, substitute the result for remove_tags.
if ZeroDivisionError exception is caught,
serializers is an empty dictionary.
property decorator,
call the method call the function warnings.warn with 3 arguments: msg formatted with language and value under the language key, of the _DJANGO_DEPRECATED_LOCALES dictionary, RemovedInDjango19Warning and stacklevel set to integer 2.
klass.__new__ is a static method of the function __new__.
_file is None.
call the method m.end, slice list rest from previous result as starting index to the end, substitute the result for rest.
call the method data.getlist with an argument name, return the result.
call the function force_str with an argument format_type, substitute the result for format_type.
derive the class Critical from base class CheckMessage.
if self._done is true,
get 'editable' attribute from object f, if it doesnt exists or its true,
if ipv4_unpacked is true,
call the style.NOTICE method with an argument string "[%s]", where '%s' is replaced with app, append the result to usage.
replace every occurrence of string 'charset=CHARSET' for string  'charset=UTF-8' in msgs, substitute the result for msgs.
call the method to_python with an argument data from the base class of the class BooleanField, return the result.
define the method appendlist with 3 arguments: self, key and value.
define the method has_other_pages with an argument self.
from datetime import datetime into default name space.
substitute attrs for self.attrs.
return a string '<%s token: "%s...">' with '%s', replace '%s' with token_name and 20 self.contents elements with every newline deleted.
create directories from the elements in filename.
call the method self.nodelist_true.render with an argument context, return the result.
from django.core.management.sql import sql_flush into default name space.
append f.name to exclude.
compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.
do nothing.
try,
format_locations is an empty list.
otherwise if klass is a subclass of logging.handlers.SMTPHandler and string 'mailhost' is contained in config,
if not,
call the mail.attach_alternative method with html_message and string 'text/html' as arguments.
_encoding is None.
get the value under the library_name key of the libraries dictionary, if it exists, substitute it for lib, if not, lib is None.
call the method Model._default_manager.db_manager with an argument db, on the result call the get_by_natural_key with, an unpacked list natural_key as argument, substitute the pk filed of the resulting object for obj.pk.
if self.interactive is true,
define the method values with an argument self.
if option_value is None,
do nothing.
define the method id_for_label with 2 arguments: self and id_.
substitute content_type for self.content_type.
if value equals k2 or text_value equals return value of the function force_text called with argument k2,
if accept_lang equals '*',
raise an exception,
from django.core.mail.backends.base import BaseEmailBackend into default name space.
try,
decorator function register.filter with an argument is_safe set to boolean True.
if os.name equals string 'posix',
if migration.replaces is true,
substitute '%s' in the string '\n%s:\n%s\n', with group_name and formatted, substitute the result for msg.
if is_templatized is true,
get the value under the 'use_natural_primary_keys' key of the options dictionary, substitute the result for use_natural_primary_keys.
if not,
return first element of key.
if schemes is not None,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
substitute block for value under the 'block' key of context dictionary.
derive the class NonCapture from list base class.
define the method value_from_datadict with 4 arguments: self, data, files and name.
return an string "[Included template had syntax error: %s]", where '%s' is replaced with e.
derive the class Input from the Widget base class.
 %s", where '%s' is replaced by name to the usage.
try,
define the method __init__ with 7 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s', prefix set to None, queryset set to None and unpacked dictionary kwargs.
substitute error_messages for value under the 'error_messages' key of attrs dictionary.
if IndexError exception is caught,
return style.
values is an dictionary with entries: return value of the method var.resolve with an argument context for name, for every name and var in return value of the function six.iteritems called with an argument self.extra_context.
call the method handler.endElement with an argument string 'item'.
call the function import_string with an argument dotted_path, substitute the result for attr.
if widget is an instance of the NumberInput class, and string 'step' is not contained in widget.attrs,
import module tempfile.
from django.core.urlresolvers import reverse, NoReverseMatch.
call the method self.build_potfiles, substitute the result for potfiles.
call the getvalue method from the base class of the class PythonSerializer, return the result.
define the method ordered_forms with an argument self.
substitute serialize for __bytes__.
for every path in collect,
evaluate self.stream.getvalue method, return the result.
call the function locks.lock with fd and locks.LOCK_EX as arguments.
if IndexError exception is caught,
get the value under the e.errno key of the ERRORS dictionary, substitute it for error_text.
call the method self.stdout.write with an argument: string "%(started_at)s\nDjango version %(version)s, using settings %(settings)r\n" "Starting development server at http://%(addr)s:%(port)s/\n Quit the server with %(quit_command)s.\n", where '"%(started_at)s' is replaced with now, '%(version)s' is replaced with return value of the method self.get_version, '%(settings)r' is replaced with settings.SETTINGS_MODULE, '%(addr)s' is replaced with self.addr if self._raw_ipv6 is true, or with self.addr if it is false, '%(port)s' is replaced with self.port and '%(quit_command)s' is replaced with quit_command.
call the function chain with 2 arguments: self.choices and choices, convert the result into a list and substitute it for choices.
if contents is not None,
define the method chunks with arguments self ad chunk_size set to None.
from django.utils.encoding import python_2_unicode_compatible into default name space.
otherwise if size is less than length of self.buffer,
return message.
define the method __init__ with 3 arguments self, states and first.
call the function get_commands, call the method keys on the result, substitute sorted result for usage.
call the method self.close.
from django.utils.timesince import timesince and timeuntil into default name space.
skip this loop iteration,
call the function warnings.simplefilter with 2 arguments: string "default" and RemovedInNextVersionWarning.
try,
raise an AttributeError exception with an argument string "You cannot set content to a 304 (Not Modified) response".
if formatter is true,
if string '%(truncated_text)s' is contained in truncate,
get the value under the key of the dictionary self, if key does not exists return evaluated result of the function Morsel, substitute it for M.
if ch is true,
define the function widthratio with 2 arguments: parser and token.
call the method formats.time_format with 2 arguments: value and arg, return the result.
if self.parsed is true,
write a '[' to the self.stream file stream.
property getter decorator,
for field in self if field.is_hidden is true, append field to a list, return the resulting list.
if func is None,
find the first subgroup of the matched string from the match object, convert it to lowercase, substitute it for tag and self.lasttag.
call the method __init__ from the base class of the InMemoryUploadedFile base class, with 6 arguments: file, name, content_type, size, charset, content_type_extra.
return nodelist.
if the value under the 'QUERY_STRING' key of the self.META dictionary is true, call the function iri_to_uri, called with value under the 'QUERY_STRING' key of the self.META dictionary and append it to string '?', append the result th the self.path converted into a string and return it, if the value under the 'QUERY_STRING' key of the self.META dictionary is false, return self.path converted into a string.
call the method gettext_module.GNUTranslations.__init__ with an argument self.
format_key is a string 'TIME_INPUT_FORMATS'.
return guessed_path.
call the method self.val_expr.resolve with an argument context, substitute the result for value.
call the get_deserializer function with an argument format, substitute the result for d.
return an empty string.
otherwise if char is contained in string 'bEFMmNn',
call os.path.splitext function with po_path as argument, substitute the first element of the result for base_path.
return integer -1.
if version is None,
if not,
append self.fk.name to form._meta.fields.
define the function format_html with 3 arguments: format_string, unpacked list args and unpacked dictionary kwargs.
if count does not equals to integer 0,
define the function cookie_date with an argument epoch_seconds set to None.
try,
try,
self.bcc is an empty list.
media is a property object of the current class, with _get_media as getter function.
append first 49 elements of self._unget_history to list containing num_bytes, substitute the result for self._unget_history.
if DatabaseError or IntegrityError, renamed to e, exceptions are caught,
call the method os.dup2 with 2 arguments: result of the method se.fileno and result of the method sys.stderr.fileno.
prepend an empty string to hextets list.
raise an ValidationError exception with 2 arguments: error_message and code as a string 'invalid'.
if in_tag and is not contained in self.verbatim,
raise an TemplateSyntaxError exception with an argument "Could not find variable at start of %s.", replace '%s' with token.
call the function formatdate with 2 arguments: epoch_seconds and usegmt set to boolean True, return the result.
if not,
define the method __prepare_class__ with an argument self.
if item is contained in the list of the elements of self, return boolean True, otherwise return boolean False.
substitute cls for obj.__class__.
derive the class DebugVariableNode from the VariableNode base class.
derive the class BadHeaderError from the ValueError base class.
call the method self._clean_fields.
if base_url is None,
get attribute "urlpatterns" form the self.urlconf_module, substitute it for patterns, if the attribute doesnt exist, substitute self.urlconf_module for self.urlconf_module.
call the method lexer_class with an arguments template_string and origin, substitute the result for lexer.
define the method clean with arguments self and value.
call the method unescape with attrvalue as the argument on the self class instance, substitute the result for attrvalue.
return string 'https'.
call the method sys.stderr.write with an argument string "fork #1 failed: (%d) %s\n", formated with e.errno and e.strerror.
define the method encoding with arguments self and value.
try,
for every cat in value under the 'categories' key of the self.feed dictionary.
if ascii value of char is smaller than integer 33 or is equal to integer 127,
call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the item dictionary.
derive the class ErrorDict from the dict base class.
relations is an empty dictionary.
get the value under the 'id' key of the attrs dictionary, substitute the return value field of the self object for id_.
if not,
define the method _get_size with argument self.
define the function restart_with_reloader.
if filename is true and filename path doesnt exist,
define the method dst with 2 arguments: self and dt.
ch2 is None.
substitute func for self.func.
return an string "Error in formatting: %s", replace '%s' with result of the function force_text,
call the method self.main_help_text append new line to it, write it to sys.stdout.
from django.utils.encoding import force_st into default name space.
try,
args_check is a static method.
define the function _dec with an argument func.
from django.utils import six into default name space.
if IOError, substituted to e, exception is caught,
if end is not a '>' or '/>' character,
return an empty string,
substitute ValueError for error_class.
if not,
try,
if KeyError exception is caught,
replace '%s' in string 'django_%s_template_' with self.app_or_project, substitute it for prefix.
self.verbatim is boolean False.
import module warnings.
label is an empty string.
define the method utcoffset with 2 arguments self and dt.
self.month_none_value is a tuple containing 2 elements: integer 0 and second element of empty_label.
return the first element of bits and an empty string.
from functools import wraps into default name space.
call the function re.compile with an argument raw string '^\w{6,9}, %s-%s-%s %s GMT$' formated with __D, __M, __Y2 and __T, substitute the result for RFC850_DATE.
substitute loader.graph for graph.
call the method self._cache.get_multi with argument new_keys, substitute the result for ret.
filesize_number_format is an lambda function with an argument value, return value is the result of the method formats.number_format, called with 2 arguments: value rounded to 1 decimal point and integer 1.
call the method handler.endElement with 2 arguments: string 'author' and an empty dictionary.
call the method self.source_error with 2 arguments: token.source and msg, return the result.
return boolean False.
divide j by integer 7, substitute the floored result for week_number.
try,
try,
xgettext_options is an list with elements: strings '--from-code=UTF-8' and '--add-comments=Translators'.
substitute template_dirs for self.template_dirs.
if code is contained in _supported and call to the function check_for_language with an argument code evaluates to true,
if not,
call the method parser.add_argument with 5 arguments: string '--noinput', action set to string 'store_false', dest set to string 'interactive', default set to boolean True and help as 'Tells Django to NOT prompt the user for input of any kind.'
append value under the key v of foreground dictionary to code_list.
call the method self.get_resolved_arguments with context as an argument, substitute the result for resolved_args and resolved_kwargs.
call the self.get_backend_timeout with argument timeout, substitute it for the value under the key key of self._expire_info dictionary.
return self._container converted into a iterable.
call the method settings.configure with an argument USE_I18N set to boolean True.
week_number is integer 52.
derive class LimitedStream from the object base class, making it a new-style class.
define the method update with 2 arguments: self and other_dict.
self._errors is None.
if request._post_parse_error is true,
from django.utils import six into default name space.
if node.must_be_first is true and nodelist is true,
join elements of self.cc into a string separated by ', ', substitute the result for value under the 'Cc' key of msg dictionary.
if options.traceback is true or e is not CommandError instance,
try,
substitute i-th element of self.initial for value under the 'initial' key of the defaults dictionary.
for every item in self.items,
in not,
if mimetype is not None raise an error.
call the method self.__class__ with an argument list, with elements: tuples with 2 elements: k and hard copy of list v, for every k and v in result of method the self.lists.
if form._meta.fields is true,
do nothing,
derive the class BaseTemporalField from the base class Field class.
convert locale to lowercase and return it.
substitute flo for self.flo.
write string "  you can delete them." to self.stdout.
define the function valid_ident with an argument s.
import module re.
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
get 'model' attribute from the options object, if it exists substitute it for self.model, if not self.model is None.
from django.utils.encoding import force_text and DEFAULT_LOCALE_ENCODING into default name space.
decorator function register.filter with an argument is_safe set to boolean True.
return value under the DEFAULT_PALETTE key of the PALETTES dictionary.
set attr.name attribute of the _MovedItemst object to attr.
return nothing.
substitute value under the backend key of settings.CACHES dictionary for conf.
append self to nodes.
if fname file path exists,
do nothing.
if request has an attribute 'session',
iterator is iterator created out of stream_or_iterable.
define the function bound_func with 2 arguments: unpacked list args2 and unpacked dictionary kwargs2.
define the method id_for_label with arguments self, data, files and name.
cache_suffix is a string '.djcache'.
call the function get_urlconf with an argument urlconf.
return major.
remove the first element from colors, substitute it for fg.
from IPython import start_ipython into default namespace.
for every cnt and digit in enumerated list int_part with reversed ordering of elements,
get value under the 'level' key of the config dictioanry, if it exists substitute it for level, if not level is None.
from django.utils.datastructures import MultiValueDict into default name space.
if cached is not None,
derive the class LocaleRegexProvider with object as base class.
request_started is a instance of a Signal class.
from django.utils.six.moves.urllib.parse import urlparse into default name space.
call the function os.getpid, substitute it for pid.
_assertRegex is a strnig "assertRegex".
for every regex in tuple with 3 elements: RFC1123_DATE, RFC850_DATE and ASCTIME_DATE,
if extra_attrs is true,
self._container is an list.
call the method g.flatten with arguments self and unixfrom set to unixfrom.
object_data is an empty dictionary.
call the function import_module with an argument string '%s.%s', where '%s' is replaced with app_config.name and module_to_search.
try,
sum the result of the method s.get_data and s.rawdata, return the result.
call the method base64.b64encode with argument pickled, substitute the result for b64encoded.
try
from .html_parser import HTMLParser and HTMLParseError into default name space.
call the function sys.exit with argument exit_code.
skip this loop iteration.
return self.parent_instance.
if AppRegistryNotReady exception is caught,
derive the class TarArchive from the BaseArchive base class.
register.tag decorator,
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS, and help set to a string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.
delete self._get.
result is an empty list.
for every item in elt,
if self.validate_max is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count, is greater than self.max_num, or if value under the TOTAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary, is grater than self.absolute_max,
from django.db.models.fields import Field as ModelField.
define the method back with an argument self.
read data from file fp, use the result as an argument for the call to the function plural_forms_re.search, substitute it for m.
do nothing.
if path is not initialized,
call the executor.loader.detect_conflicts, substitute the result fr conflicts.
if not,
yield an instance of SubWidget class created with 5 arguments: self, name, value, attrs and choices.
call the function _urlize with 4 arguments: value, trim_url_limit as limit converted into an integer, nofollow as boolean True, and autoescape as autoescape, use the result as an argument for the call to the function mark_safe, return the result.
with self.initLock,
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
from django.core import mail into default name space.
def the method get_signed_cookie with 5 arguments: self, key, default set to RAISE_ERROR, salt as an empty string,
from django.utils.functional import cached_property into default name space.
if value is an instance of datetime and settings.USE_TZ if use_tz is None else use_tz and call to the function is_naive, with an argument value evaluates to false, and if 'convert_to_local_time' attribute of value object doesnt exists, or is it does is boolean True, should_convert is boolean True, otherwise is boolean False.
raise an base.DeserializationError exception with an argument string "<%s> node has invalid model identifier: '%s'", where '%s' is replaced with node.nodeName and attr.
try,
define the method token_kwargs: bits, parser and support_legacy set to boolean False.
truncate last 9 elements of filename and append it string ".py".
define the function _generator.
tok is a string '"REGEX"',
define the method __get__ with 3 arguments: self, instance and owner.
questioner is an instance of a InteractiveMigrationQuestioner class, created with an argument: defaults set to dictionary with entry: boolean True for 'ask_merge'.
messages is an instance of the ValidationError class created with an argument messages.
import module copy.
define the method _cache with self class instance as an argument.
if length of self.backout is greater than zero,
if fget is not None,
call the function quote with 2 arguments: result of the function force_str called with an argument url, and result of the function force_str called with an argument safe, use the result as an argument for the call to the function force_text, return the result.
return self.
if timeout is None,
raise an SyntaxError with an argument string "Translation blocks must not include other block tags: %s (%sline %d)", formated with t.contents, filemsg and t.lineno.
call the method queryset.none, substitute it for qs.
define the function gettext_noop with an argument message.
if not,
define the function _get_val.
call the function curry with 2 arguments: _proxy_method and method set to bytes.decode, substitute the result for decode.
call the method self.is_checked, if it evaluates to true,
call the method deactivate.
return an instance of NodeList class.
call the method field_stream.read, substitute the result for raw_data.
get frag attribute from found object, substitute it for found.
do nothing.
call the method loader.get_template with an argument template, return the result.
define the function memoize with 3 arguments: func, cache and num_args.
raise an exception.
replace all the elements of the basedir list by its corresponding absolute directory path, only is that directory exists.
from importlib.util import find_spec as importlib_find.
if not,
return an empty string.
call the method match.group with 2 arguments: strings "constant_arg" and "var_arg", substitute the result for constant_arg, and var_arg, respectively.
call the function ugettext with an argument message.
for every middleware_method in self._request_middleware,
subtract length of hextet from 4, create a string with previous result number of character '0', append hextet to it, convert the result into a lowercase, append it to ret_ip.
 Installing custom SQL for %s.%s model\n" as argument, with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.
substitute _itervalues for values.
define the function has_bom with fn as argument.
if ret equals to integer 0, return boolean True, otherwise return boolean False.
substitute value under the database key of the connections dictionary for connection.
call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.
substitute settings.TEMPLATE_STRING_IF_INVALID for current.
return msg_count.
try,
open filename file in write mode, with the file descriptor renamed to outfile, perform,
substitute params for self.params.
self.callback is None.
define the method __enter__ with an argument self.
if value under the DEFAULT_CACHE_ALIAS key of caches dictionary equals to other, return boolean True, otherwise return False.
derive the class Command from the AppCommand base class.
call the method self._reverse_with_prefix with 4 arguments: lookup_view, an empty string, unpacked list args and unpacked dictionary kwargs.
substitute first element of parts for view.
substitute first decimal_pos elements of dec_part for dec_part.
if e.errno is not equal to errno.EEXIST,
if not,
substitute elements of middle from the beginning to the negative length of punctuation, for middle.
convert return value of the function time.time to an integer, increment timeout by it.
try,
call the method stream.unget with an argument chunk.
if value is contained in self.empty_values,
call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.
import module gzip.
call the function sql_custom with app_config, self.style and connection as the arguments, substitute the result for statements.
foreground is a dictionary created with elements: x appended to a string '3' for value under the key x of color_names dictionary, for every x in sequence of integers from 0 to 7.
call the method self.create_parser with arguments prog_name and subcommand.
call the function starttag_re.sub with 2 arguments: an empty string and html, substitute the result for html.
from __future__ import unicode_literals into default name space.
from django.core.files.utils import FileProxyMixin into default name space.
substitute line for buffer_.
if value is false,
get the value under the 'dry_run' key of the options dictionary, if the key exists substitute it for self.dry_run, if not, self.dry_run is boolean False.
define the function reloader_thread.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
decorator deconstructible,
call the function is_naive with an argument obj.
call he function is_valid_ipv6_address with an argument ip_str, if it evaluates to false,
from __future__ import unicode_literals into default name space.
return boolean True.
if LookupError exception is caught,
call the method logging.getLogger with an argument string 'py.warnings', substitute the result for logger.
convert param to a string, use it as a key to get the value from kwargs dictionary, assign it value.
return an empty list.
define the method compile_filter_error with 3 arguments: self, token and e.
call the method collections.defaultdict with a argument: lambda function without arguments that returns an empty list, substitute the result for commands_dict.
substitute request.urlconf for urlconf.
help is string 'Compiles .po files to .mo files for use with builtin gettext support.'.
for every tok in rules,
define the method __new__ with 5 arguments: cls, fget set to None, fset set to None, fdel set to None and doc set to None.
for every i and choice in enumerated iterable self.choices,
return boolean False.
call the Warning function with 3 arguments: hint tuple containing one string, Django 1.6 introduced a new default test runner. It looks like this project was generated using Django 1.5 or earlier. You should ensure your tests are all running & behaving as expected. See https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner for more information.", obj set to None and id set to a string '1_6.W001', put the result into a list and return it.
try,
define the method __init__ with 6 arguments self, parent_widget, name, value, attrs and choices.
raise CommandError exception, with "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'", with '%s' substituted for name_str, as argument.
for every accessor_name and object_list is return value of the method self.m2m_data.items.
for key and value in result of the function six.iterlists called with an argument,
define the method to_python with arguments self and data.
if ch2 equals string '?',
decorator stringfilter,
call the function strftime with 2 arguments: self and fmt, return the result.
call the method __init__ with an argument data, from the base class of the class DictWrapper.
call the method threading.RLock, substitute the result for self.mutex.
if AttributeError exception is caught,
if VariableDoesNotExist exception is not caught,
call the method self.common_logger_config with 3 arguments: root, config and incremental.
convert self to a list and return it.
raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a delete() method' as argument.
divide num_entries by self._cull_frequency, convert the result to an integer, call the random.sample function with filelist and previous result as arguments, substitute the result for filelist.
for every receiver, _ and _ in receivers,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
if self.choice_value is contained in self.value return boolean True, otherwise return boolean False.
substitute queryset for self.queryset.
if field.rel has an 'to' attribute,
define the function dec with an argument func,
libraries is an empty dictionary.
define the method __repr__ with an argument self.
message is a string 'make sure the name begins with a letter or underscore'.
call the method loader.select_template with an argument template, return the result.
if urlconf is None,
do nothing.
strip message_context of '"' characters from both ends, substitute the result for message_context.
requires_system_checks is boolean False.
for every k2 and v2 in v,
define the function do_for with 2 arguments: parser and token.
define the method make_writeable with arguments self and filename.
if count of occurrence of '::' in ip_str equals integer 1,
return sites.
raise an ValueError exception with an argument string 'Not a valid Python identifier: %r' formated with s.
call the method self._assert_mutable.
return result.
otherwise if t.token_type equals TOKEN_VAR,
skip this loop iteration.
call the method self._is_expired with argument f, invert the boolean result and return it.
increment i by integer 1.
try,
decrement end by one.
call the function form.save_m2m.
if value is None and attr is contained in declared_fields,
define the method __getitem__ with arguments self and name.
if args in None of boolean False, substitute it for an empty list.
decorator function register.filter with 2 arguments string "slice" and is_safe set to boolean True.
raise an exception.
return default.
if incremental is true,
return boolean False.
docs_version is a string 'dev'.
substitute _globs_ with an argument _locs_.
return data.
derive the class Iterator from the base class object.
substitute self.addr without the first and last element for self.addr.
from collections import namedtuple.
get value under the 'filters' key of the config dictioanry, if it exists substitute it for filters, if not filters is None.
if slots is an instance of str,
self.timezone is None.
raise AttributeError exception,
raise an ImportError exception with an argument string "Could not import '%s'. The path must be fully qualified.", where '%s' is replaced by lookup_view.
define the function format with 2 arguments: value and format_string.
get 'help_texts' attribute from the options object, if it exists substitute it for self.help_texts, if not self.help_texts is None.
substitute '%s' in string "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" with self.domain, replace all the occurrences of previous string in msgs for an empty string, substitute the result for msgs.
call the function force_str with raw data as an argument and substitute it for rawdata.
return value.
from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.
define the function cache_info.
derive the class HttpResponseBadRequest from the HttpResponse base class.
from django.forms.formsets import everything into default name space.
substitute gettext_noop for ugettext_noop.
if not,
import module socket.
substitute '%r' in string ' ngettext(%r, %r, count) ' with result of the function join_tokens, called with 2 arguments: singular, and trimmed and result of the function join_tokens called with 2 arguments: plural and trimmed, write the result to out.
skip this loop iteration.
sql_files is an empty list.
skip this loop execution.
define the method listdir with arguments self and path.
if not,
define the function timesince with d, now defaulting to None, reversed defaulting to False as arguments.
try,
get the value under the format key of the _serializers dictionary, return the Deserializer filed of the result.
options is a list containing a tuple with 2 entries: string '--help' and None.
write data bytes to outfile.
if AmbiguityError exception is caught,
if value in self.empty_values,
substitute path for locale_dir.
if context.autoescape is true and output is not an instance of SafeData class or output is an instance of EscapeData class,
raise an exception.
call the field.rel.to._meta.get_field method with an field.rel.field_name argument, on the result call the method to_python, with field_value as an argument, substitute the result for obj_pk.
extend locations with tuple containing dirpath and f, for every f in filenames, only if it ends with string '.po'.
if not,
call the method self.can_read.release.
raise an TypeError exception with an argument sting "can't delete _wrapped.".
substitute first element of level for common_ancestor.
call the method __init__ from the base class of the class Textarea, with an argument default_attrs.
if not,
if not,
if not,
define the method utcoffset with 2 arguments self and dt.
for model in return value of the method router.get_migratable_models with arguments app_config, connection.alias, and include_auto_created set to boolean True,
raise an TemplateSyntaxError exception with an argument string "'%s' takes at least one argument (path to a view)", where '%s' is replaced with first element of bits.
substitute choices for self.choices.
format the string '{scheme}://{host}{path}' by replacing scheme with self.scheme, host with return value of the self.get_host method, and path with self.path, substitute the result for current_uri.
substitute self.to_field_name, if exists, for key, if not substitute string 'pk' for key.
call the function force_bytes with an argument salt, substitute the result for salt.
if language is not contained in _translations,
do nothing.
define the function format with 2 arguments self and formatstr.
if value under the 'microsecond' key of the kw dictionary is true,
if field.rel.to._default_manager has an atttribute 'get_by_natural_key',
if TypeError and AttributeError exceptions are caught,
self._request_middleware is None.
append name to self._changed_data list.
define the method writer_leaves with an argument self.
call the function urlparse with an argument url, substitute the result for url_info.
output is an empty string.
return a string '%s-%s-%s GMT', formated with: first 7 elements of rfcdate, elements of rfcdate from 8-th to the 11-th index, and elements of rfcdate from 12-th to the 25-th index.
call the method parser.parse with an argument tuple with an element string 'endif', substitute the result for nodelist.
call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.
call the method copy.copy with an argument register_to._registry, substitute the result for before_import_registry.
decorator function register.filter with an argument is_safe set to boolean True.
register.tag decorator,
substitute self for result.parent.
try,
define the method  main_help_text with arguments: self class instance and commands_only set to boolean False.
define the method __init__ with 2 arguments: self and source.
if fist and second element of sys.version_info equals to integer 3 and 2, respectively,
call the function touch_import with 3 arguments: string 'django.utils.encoding', string 'python_2_unicode_compatible' and decorated.
join chunks into bytes string, substitute it for chunk.
write string "  the new migration will be used for new installs. Once you are sure" to self.stdout.
call the method parser.delete_first_token.
assign the settings.SECURE_PROXY_SSL_HEADER to header and value, respectively.
return nothing.
substitute limit_choices_to for self.limit_choices_to.
tt is an tuple with 9 elements: dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, result of the function dt.weekday, integer 0 and integer 0.
define the protected method _cull with self class instance, db, cursor and now as arguments.
if self.data and self.files are both False,
call the function lazy with 4 arguments: get_format, six.text_type, list and tuple, substitute the result for get_format_lazy.
if not,
define the method __init__ with 10 arguments: self, queryset, cache_choices set to None, required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty strign, unpacked list args and unpacked dictionary kwargs.
for every exclude in excludes,
return the string '<Page %s of %s>', with occurrences of '%s' replaced by self.number and self.paginator.num_pages, respectively.
return value.
for every key in return value of the method c.keys call,
return self.objects.
call the function iri_to_uri with an argument value, use the result as an argument for the call to the force_text function, return the result.
decorator stringfilter,
for every statements in sql_statements:
set the file pointer at the beginning of the self.file file.
define the function ifchanged with 2 arguments: parser and token.
define the method tzname with 2 arguments self and dt.
if typed is true,
return output.
return integer 0.
call the function cache.close.
if cache is an instance of BaseDatabaseCache,
if csrf_token is true,
if neg is true,
check if lowercase header_query exists is existing_headers, return the boolean result.
import module os.
return name, ser_fmt and cmp_fmt.
call the method cursor.execute with string "DELETE FROM %s WHERE cache_key < %%s" as argument, substitute the '%s' with table and list containing first element of cursor.fetchone method, respectively.
return initial_forms.
if ValueError exception is caught,
define the function serializer with 3 arguments: format, queryset and unpacked dictionary options.
call the function get_supported_language_variant with an argument lang_code, return the result.
derive the SimpleUploadedFile class from the InMemoryUploadedFile base class.
get the value under the key 'verbosity' of options dictionary, substitute it for verbosity.
try,
call the self.user_regex.match method with an argument user_part, if it evaluates to false,
create a generator that for every d in row_data, if d has an '_get_pk_val' attribute, returns the result of the call the method d._get_pk_val, if not return d, put all the generator items into a tuple row_data.
if not,
import module os.
substitute obj.tzinfo for self.timezone.
substitute pattern._callback for callback.
if NotImplementedError exception is caught,
define the method to_python with arguments self and value.
from django.utils.safestring import SafeData and EscapeData into default name space.
from django.core.serializers.json import DjangoJSONEncode into default name space.
substitute '%s' in string '%s_%s' with id_ and first_select, return it.
return an instance of EscapeBytes, created with an argument s.
if language is contained in _DJANGO_DEPRECATED_LOCALES,
increment factor by one.
substitute '%s' in a string "Full migrations file '%s':" with writer.filename, append newline to it, use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.
if not,
call the function _findall with 2 arguments: s2 and sum of year and integer 28, converted into a string, substitute the result for sites2.
from django.utils.text import get_text_list and capfirst into default name space.
call the function formats.localize_input with 2 arguments: value and self.format if true, if not, then the first element of the result of the function formats.get_format called with an argument self.format_key, return the result.
append list containing string '--no-wrap' to self.xgettext_options.
if not,
get the type of form object, return an instance of resulting class created with 3 arguments: class_name, tuple with an element form, and form_class_attrs.
delete entry under the attr key of the attrs dictionary.
try,
if safe_input is true,
get name attribute from the instance object, call it and return the result.
from __future__ import unicode_literals into default name space.
get the value under the if iso_input not in val key of the ISO_INPUT_FORMATS dictionary, if it doesnt exists return an empty tuple, for every iso_input in the result,
if length of bits is lesser than integer 2,
call the method self.get_available_name with argument name, substitute it for name.
if not,
skip this loop iteration,
import module os.
define the method __init__ with arguments: self, fail_silently set to boolean False and unpacked dictionary kwargs.
from __future__ import unicode_literals into default name space.
call the method extend with refs as argument, on the result call the pending_references.setdefault method with refto and empty list as arguments.
msg_count is an integer 0.
app_configs is None.
call the function new_method_proxy with an argument operator.getitem, substitute the result for __getitem__.
if _supported is None,
raise an TemplateEncodingError exception with an argument "Templates can only be constructed from unicode or UTF-8 strings.".
substitute model._base_manager for objects.
call the method self.incr_version with key, negative delta and version as arguments.
return valid.
exit the program with the code integer 1.
call the function dec with an argument func, return the result.
import module sys.
return form.
raise an exception.
from __future__ import unicode_literals into default name space.
call the method parser.parse with an argument tuple with an element string 'endifchanged', substitute the result for nodelist_false.
define the method model_installed with model as an argument.
and errors set to the result of self.default_error_messages.copy.
call the __init__ method of the base class of the class URLValidator, with unpacked dictionary kwargs as argument.
raise an exception.
if f is None,
if text is an empty string and length of opts equals integer 1 and first element of opts equals string 'reset',
return None.
if not,
if length of key is greater than MEMCACHE_MAX_KEY_LENGTH,
do nothing.
return a string '%06d' formated with self.data.microsecond.
append key to self.keyOrder.
decorator python_2_unicode_compatible,
return self._num_pages.
raise an ValueError exception with an argument string "Unable to convert %r" formated with value.
for every supported_code in _supported,
derive the class DateTimeInput from the DateTimeBaseInput base class.
property decorator,
nodelist_false is an instance of NodeList class.
replace hextets list from the best_doublecolon_start index to best_doublecolon_end index with an empty string.
decorator deconstructible,
return duplicate
substitute jython_reloader for reloader.
remove k element from self.keyOrder dictionary.
except if KeyError exception is caught,
register.tag decorator function with an argument 'with',
do nothing.
define the method open with arguments self and mode defaulting to None.
if parsed.scheme is true and parsed.scheme is not contained in self.allowed_schemes,
if sys.stdout has an attribute named 'isatty' and call to the sys.stdout.isatty returns boolean True, substitute True for is_a_tty.
delete the form.cleaned_data dictionary entry under the field key.
get the next element of the iterable pattern_iter, assign the result for ch.
from django.utils import six into default name space.
get_language is a lambda function returning settings.LANGUAGE_CODE.
substitute next for advance_iterator.
from django.template.base import TemplateDoesNotExist into default name space.
if j equals to integer -1,
call the method keyword.iskeyword with an argument new_name, if it evaluates to true,
if y, m and d are all equal to string '0',
from datetime import datetime into default name space.
substitute '%s' in string "UnicodeDecodeError: skipped file %s in %s" with f.file and f.dirpath, write it to self.stdout.
return self._callback.
call the method parser.add_argument with string 'migration_name', nargs set to charcter '?', help containing string, 'Database state will be brought to the state after that migration.' as arguments.
substitute '%r' in string ' pgettext(%r, %r) ' with message_context and result of the function join_tokens, called with 2 arguments: singular and trimmed, write the result to out.
derive the class ValidationError from the Exception base class.
call the __init__ method from the base class of the SimpleUploadedFile class with 7 arguments: BytesIO(content), None, name, content_type, length of content, None and None.
call the method self._expire_info.get with key and integer -1 as arguments, substitute the result for exp.
ipv4_address is a string "%d.%d.%d.%d" formated with first 2 elements of seventh element of hextets converted into hexadecimal number, second 2 elements of seventh element of hextets converted into hexadecimal number, first 2 elements of eight element of hextets converted into hexadecimal number, second 2 elements of eight element of hextets converted into hexadecimal number.
skip this loop iteration.
if InvalidOperation exception is caught,
try,
join into a file path: path and string '%s.pot', where '%s' is replaced with self.domain converted into a string, substitute the result for pot_path.
if app_config.models_module is None,
from django.utils.ipv6 import clean_ipv6_address into default name space.
raise a CommandError exception with an argument: string "%s already exists, overlaying a project or app into an existing directory won't replace conflicting files", where '%s" is replaced with new_path.
substitute save_as_new for self.save_as_new.
join elements of output into a string, separated with newline character, use it as an argument for the call to the mark_safe function, return the result.
call the function phone2numeric with an argument value, return the result.
if not,
if not,
if msgs is true,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call iri_to_uri with return value of the request.build_absolute_uri method, us the result as the argument for the call to the force_bytes function, use the result as the argument for the call to the hashlib.mdb function, store the result in url.
call the self.handle_app_config method with app_config and options as arguments, substitute the result for app_output.
if options is true,
__all__ is a tuple containing 2 initial elements: strigs 'WSGIServer' and 'WSGIRequestHandler'.
if children is true, copy children list to self.children, otherwise self.children is an empty list.
sort fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
call the method self.value.resolve with 2 arguments context and ignore_failures set to boolean True, return the result.
call the function register_serializer with 3 arguments: format, value under the format key of the BUILTIN_SERIALIZERS dictionary and serializers.
derive the class TimeField from the base class BaseTemporalField class.
substitute formfield.limit_choices_to for limit_choices_to.
substitute library for self._lib.
replace all occurrences of '\\' with '\\\\' in value, replace all occurrences of '"' with '\\"' in the previous result, replace all occurrences of "'" with "\\'" in the previous result, return the result.
if AttributeError exception is caught,
call the method parser.parse with an argument tuple with an element string 'endverbatim', substitute the result for nodelist.
define the function rmtree_errorhandler with 3 arguments func, path and exc_info.
raise an exception.
define the method load_template with 3 arguments: self, template_name and template_dirs set to None.
for every handler in self._upload_handlers,
no_settings_commands is a list containing entries: 'help', 'version', '--help', '--version', '-h', 'compilemessages', 'makemessages', 'startapp' and 'startproject'.
if message is an instance of SafeData,
raise a ValidationError exception with arguments self.message and code set to self.code.
call the method self.key_function with key, self.key_prefix and version as arguments, substitute the result for new_key.
if values under the 'socket', 'host' and 'port' keys of the options dictionary are false,
try,
for every item in sequence,
call the function warnings.warn with 3 arguments: string "django.utils.unittest will be removed in Django 1.9.", RemovedInDjango19Warning and stacklevel as integer 2.
if receiver is an instance of types.FunctionType type,
raise a ValidationError exception with arguments self.message and code set to self.code.
define the method write_message with arguments self and message.
define the method setlist with 3 arguments: self, key and list_.
call the method self._expire_info.clear.
if not,
substitute self.min_value for the value under the 'min' key of the attrs dictionary.
call the method add_fields from the base class of the class BaseInlineFormSet, with 2 arguments: form and index.
for every attr in _urllib_error_moved_attributes,
constant_string is a raw string "(?:%(i18n_open)s%(strdq)s%(i18n_close)s|%(i18n_open)s%(strsq)s%(i18n_close)s|%(strdq)s|%(strsq)s)", where 'strdq' is replaced with '"[^"\\]*(?:\\.[^"\\]*)*"', 'strsq' is replaced with "'[^'\\]*(?:\\.[^'\\]*)*'", 'i18n_open' is replaced with return value of function re.escape called with an argument string '_(', 'i18n_close' is replaced with return value of function re.escape called with an argument string ')'.
if self.is_bound is false,
define the method _get_model_from_node with arguments self, node and attr.
derive the class Library form the base class object.
define the method common_logger_config with 4 arguments: self, logger, config and incremental set to boolean False.
from __future__ import unicode_literals into default name space.
call the method tzinfo.__init__ with an argument self.
try,
define the function deactivate.
substitute pattern.regex.pattern for parent_pat.
do nothing
if exception OSError, renamed to e, is caught,
if check is not contained in self.registered_checks.
return boolean False.
call the method zfile.write with an argument s.
get format_type attribute of module object, substitute the result for val.
break from the loop execution.
if Exception exception is caught,
if self.verbosity is greater or equal than integer 1,
return error_dict.
self._populated is boolean False.
if cc is true,
substitute value under n key of dictionary d for d.
if locales in not empty,
substitute length of text for end.
call the method self.get_backend_timeout with argument timeout, substitute it for expiry.
call the method node.render with an argument context, return the result.
call the connection.cursor method, substitute it for cursor.
if new is None,
if TypeError exception is caught,
from django.core.exceptions import ImproperlyConfigured into default name space.
substitute widgets for value under the 'widgets' key of attrs dictionary.
import module warnings.
call the method operator.attrgetter with an argument _meth_func, substitute the result for get_method_function.
do nothing.
if not,
call the method self.validate_unique.
get property attribute _get_width, and substitute it for width.
call the function fields_for_model with 9 arguments: opts.model, opts.fields, opts.exclude, opts.widgets, formfield_callback, opts.localized_fields, opts.labels, opts.help_texts and opts.error_messages, substitute the result for fields.
define the method open with arguments self and mode set to None.
both_before is a list containing 14 elements, all of them are instances of Tok class, created with 2 arguments, a string and a raw string.
define the function total_ordering with an argument cls.
raise an ValueError with an string "Zip-compressed fixtures must contain one file.".
if filename ends with '.pyo', '.pyc' or '.py.class',
call the method __new__ from the base class of the class ModelFormMetaclass, with 4 arguments: mcs, name, bases and attrs, substitute the result for new_class.
derive the class NullDevice.
if extra_attrs is true,
define the function avoid_wrapping with an argument value.
if callback is of instance types.FunctionType,
if third element of bits is not equal to a string 'by',
define the function stringformat with 2 arguments value and arg.
join elements of output into a string with newline as separator, use it as an argument for the call to the function mark_safe, return it.
if TypeError or ValueError exceptions are caught,
_BROWSERS_DEPRECATED_LOCALES is an dictionary with 2 initial entries: 'zh-hans' for 'zh-cn' and 'zh-hant' for 'zh-tw'.
if self has an attribute '_body',
return value.
define the method __exit__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method _format_modules_cache.setdefault with 2 arguments: lang and list created out of the results of the function, iter_format_modules called with 2 arguments: lang and settings.FORMAT_MODULE_PATH, substitute the result for modules.
if use_workaround is boolean False,
for every d in reversed list self.dicts,
define the method __ne__ with 2 arguments: self and other.
call the method translation._catalog.copy, substitute the result for self._catalog.
if app_config.path is true,
return result.
call the function format_html with 3 arguments: self.url_markup_template, value.url and return value of the function force_text, called with an argument value, substitute the result for value under the 'initial' key of the substitutions dictionary.
if new_value equals value,
split arg by ',', substitute the result for bits.
derive the class FirstOfNode from Node base class.
content_length is None.
if AttributeError exception is caught,
self._current is None.
return FASTCGI_HELP.
raise ValueError exception with string 'Sign character found in converter base digits.' as an argument.
locale_dirs is a list of elements from the list of path names that maths the basedir path with '/*' wild card characters for which call to the os.path.isdir returned true, assign it to locale_dirs.
call the function get_callable with an argument self._callback_str, substitute the result for self._callback.
do nothing
if only_initial is false,
define the function getInnerText with an argument node.
call the function parse_accept_lang_header with an argument accept, for every accept_lang and unused in the result,
call the method self.attach with arguments filename, content and mimetype.
self.locale_paths is an empty list.
d is an instance of Decimal class created with an argument input_val.
call the method self.nodelist.render with an argument context, substitute the result for result.
skip this loop iteration.
evaluate next boolean expression, value of converter function with opts.db_table as argument is contained in tables, or opts.auto_created is True and return value of converter function with opts.auto_created._meta.db_table is contained in tables, invert the evaluated expression and return it.
from __future__ import unicode_literals into default name space.
call the threading.local method, assign the result to trans_real._active.
call the self._lock.reader method, with the result perform the following,
outdict is an empty dictionary.
DEFAULT_LOGGING is a dictionary with 5 initial entries: 1 for 'version', False for 'disable_existing_loggers', and 3 additional pairs of dictionaries for string.
if use_grouping is true and grouping is greater than integer 0, use_grouping is boolean True, otherwise it is boolean False.
raise an CommandError exception with an argument message.
from django.utils import six into default name space.
define the method non_form_errors with an argument self.
define the method configure_formatter with 2 arguments: self and config.
pop_context is boolean False.
from django.conf import settings into default name space.
call the method unhandled_params.remove with an argument param.
call the method __init__ with an argument name form the base class of the class _LazyModule.
update defaults dictionary with kwargs.
decorator function register.filter with an argument is_safe set to boolean False.
from itertools import product into default name space.
call the method self_cache.delete_multi with argument list containing keys mapped through function l.
skip this loop iteration,
call the method line.lstrip, if the result starts with TRANSLATOR_COMMENT_MARK,
otherwise if, type of s doesnt equal to six.text_type,
if not,
if length of self.dicts is equal to an integer 1,
from django import http into default name space.
call the function get_format with an argument string 'THOUSAND_SEPARATOR', substitute the result for thousand_sep.
extra_files is an empty list.
yield self.
PALETTES is a dictionary containing 3 elements, a dictionary with 18 pairs of dictionary value and string keys for NOCOLOR_PALETTE, a dictionary with 18 pairs of dictionary value and string keys for DARK_PALETTE, and a dictionary with 18 pairs of dictionary value and string keys for LIGHT_PALETTE.
substitute smart_text for smart_unicode.
call the self._lock.reader method, with the result perform the following,
found is boolean False.
substitute new_second_item with second_item.
from threading import Lock into default name space.
if test_runner_class has an attribute 'add_arguments',
return self.__name.
define the method write with 4 arguments: self, msg, style_func with None and ending set None.
if self._request_middleware is None,
if self.__language equals settings.LANGUAGE_CODE,
define the __call__method with arguments self, unpacked list args and unpacked dictionary kwargs.
if ImportError exception is caught.
call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to string 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".'.
if not,
substitute key for op.id.
define lambda function that returns self.file.tell field, use it as an argument for property function, put the result in tell.
append name to construct_instance_exclude list.
status_code is an integer 403.
substitute value for value under the field.name key of the data dictionary.
define the function get_cache with backend and dictionary pair of elements kwargs as arguments.
if self.activated is boolean True,
pk_value is None.
import module warnings.
call the method parser.add_argument with 5 arguments: string '--no-initial-data', action set to string 'store_false', dest set to string 'load_initial_data', default=True and help as a string 'Tells Django not to load any initial data after database synchronization.'.
define the method to_python with arguments self and value.
if terminal_char is not equal to string ')',
otherwise if ch equals a string '(',
for every basedir in basedirs,
if length of hextet is greater than integer 1,
return data.
call the strftime function with argument string "%Y%m%d-%H%M%S" on the return value of the function datetime.datetime.now, substitute the result for timestamp.
try,
return data.
call the function _create_cache with argument alias.
from django.core.exceptions import ImproperlyConfigured into default name space.
self.test_runner is None.
if 'date' is not in header_names,
import module time.
filter all the subcommands element through the lambda function with an argument x, that evaluates the method x.startswith, with an argument curr, sort the result and join it in a list separated with blank spaces, print it to the standard output.
call the method self.stream.flush.
if lengths of initial and data are not the same,
get the value under the funcname key of the t-th elment of self.__dispatch dictionary, call the result with 3 arguments: res, unpacked list args and unpacked dictionary kw, return the result.
from __future__ import unicode_literals into default name space.
define the method validate_unique with an argument self.
return nothing.
questioner is an instance of a InteractiveMigrationQuestioner class.
define the method compress with arguments self and data_list.
try,
substitute self for result.parent.
from django.core.management.sql import sql_custom into default name space.
substitute logging.getLogger for getLogger.
self.invoked_for_django is boolean False.
singular is an empty list.
call the subprocess.Popen function with, 'git log --pretty=format:%ct --quiet -1 HEAD', stdout set to subprocess.PIPE, stderr set to subprocess.PIPE, shell set to boolean True, cwd set to repo_dir and universal_newlines set to boolean True, as arguments, substitute the result for git_log.
call the method netloc.encode with an argument string 'idna', call the method decode on the result with an argument 'ascii', substitute the result for netloc.
__all__ is a tuple of strings: 'Media', 'MediaDefiningClass', 'Widget', 'TextInput', 'EmailInput', 'URLInput', 'NumberInput', 'PasswordInput', 'HiddenInput', 'MultipleHiddenInput', 'ClearableFileInput', 'FileInput', 'DateInput', 'DateTimeInput', 'TimeInput', 'Textarea', 'CheckboxInput', 'Select', 'NullBooleanSelect', 'SelectMultiple', 'RadioSelect','CheckboxSelectMultiple', 'MultiWidget', 'SplitDateTimeWidget' and 'SplitHiddenDateTimeWidget'.
call the method bmatch.group with an argument integer 1, use the result as an argument for the call to the function context_re.match, substitute the result for context_match.
from importlib import import_module into default name space.
if not,
return an instance of EscapeText, created with an argument s.
otherwise if action equals to string "unapply_success".
if has_old_option and has_new_option are both true,
if default_args exists substitute it for self.default_args, if not, self.default_args is an empty dictionary.
get the value under the 'indent' key of the options dictionary, substitute the result for indent.
g is an instance of a class generator.BytesGenerator called with fp and mangle_from_ set to False.
from django.utils.html import conditional_escape, escapejs, escape, urlize as _urlize, linebreaks, strip_tags, avoid_wrapping, and remove_tags.
return an string '0'.
compile self.match regular expression, substitute it for self.match_re.
substitute elements of s from the end index to end for s.
decrement t by integer 1,
if field_type is not equal to string 'TextField(' or string 'CharField(',
call the params.get method with string 'TIMEOUT' and integer 300 as arguments, use the string 'timeout' and previous result as the arguments for the call to the params.get method, substitute the result for timeout.
self.COOKIES is an empty dictionary.
call the function get_ns_resolver with arguments ns_pattern and resolver, substitute the result for resolver.
if mimetype is None, raise an error.
if root is true,
join elements of words into a string, return it.
import module collections.
from django.conf import settings into default name space.
derive the class MiddlewareNotUsed from the Exception base class.
from functools import reduce into default name space.
break the loop execution,
if message is an instance of dict type,
get executor.loader.graph.nodes list item at the index of the first element of targets list, get the value under the 'backwards' key of options dictionary, put previous two elements is a tuple, tuple is contained in a plan list.
substitute '%s' in 'Forbidden (Permission denied): %s' with request.path, extra is an dictionary with two pairs of elements, 'status_code' with value 403, and 'request with value request, respectively use the previous as the arguments for the call to the logger.warning function.
return instance of _HashedSeq class, created with an argument key.
substitute context for block.context.
substitute _make_key for make_key.
from django.db import DEFAULT_DB_ALIAS into default name space.
if value is None,
return boolean True.
as long as current_chunk is not an empty string,
decorator deconstructible,
do nothing.
if UnicodeError exception is caught,
if not,
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
yield widget.
call the function update_wrapper with 2 arguments: _wrapper and func.
call the method self.stdout.write with an argument string "Checking %s for fixtures...", where '%s' is replaced with result of the function humanize, called with an argument fixture_dir.
get value under the self.blocks dictionary under the name key, return the last element.
if using_sysrandom is false,
call the method os.environ.get with 2 arguments: strings 'PATHEXT' and '.COM;.EXE;.BAT;.CMD', split the result at os.pathsep, substitute it for pathext.
get the value under the 'ignore' key of the options dictionary, substitute it for self.ignore.
substitute TemplateDoesNotExist for self.find_template_cache dictionary value under the key key.
call the method context_instance.push with an argument dictionary, with the result perform,
if i is equal to integer 0, value under the 'first' key of the loop_dict dictionary is boolean True, otherwise it is False.
convert header to lowercase, use it to as a key to get the value of the self._headers dictionary, if it exists return the second element of the result, if not, return alternate.
otherwise if second element of args equals a string '404',
comment is an empty list.
if it exists, get 'stderr' attribute of self, substitute it for stderr, if not, stderr is an instance of OutputWrapper class, created with arguments sys.stderr and self.style.ERROR.
define the method __iter__ with an argument self.
substitute empty_label for self.empty_label.
for every obj in result of the method queryset.iterator,
call the formataddr function with argument tuple containing 2 elements nm and addr.
call the function importlib.import_module with 2 arguments: flup_module converted to string and appended to '.' character, and string 'flup', substitute the result for module.
call the method dict.__setitem__ with 3 arguments: result, result of the function copy.deepcopy, called with 2 arguments: key, and memo, and result of the function copy.deepcopy called with 2 arguments: value and memo.
call the method parser.add_argument with 5 arguments: string '--indent', default set to None, dest set to 'indent', type set to int and help is a string 'Specifies the indent level to use when pretty-printing output.'.
call the method self.indent with argument integer 1.
define the function get_language.
for every smigration in migrations_to_squash,
if illegal_formatting is true,
substitute next for self.next.
call the _tc.load method with the 'foo:bar=1' converted to string as an argument.
return line.
if self._varlist is true,
define the method __iter__ with an argument self.
if token.contents doesn not equals a string 'endif', raise an AssertionError exception,
import module base64.
if length of t is greater than integer 1,
while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,
append a tuple containing 2 elements: full_file and f to self.choices list.
call the method self.flo.read with an argument self.chunk_size, substitute the result for data.
if self._leftover is true,
substitute conditional_escape for escaper.
from __future__ import unicode_literals into default name space.
derive the class Command from the BaseCommand base class.
substitute self.none_value for self.year_none_value.
return integer 1 and ch2.
define the method _wrapper with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if not,
while remaining is not equal to integer 0,
return nothing.
define the function lru_cache with 2 arguments maxsize set to integer 100 and typed set to boolean False.
replace all '%s' from string "%s: %s%s%s" with values of obj, id, self.msg and hint, respectively, return the result.
if rel_model has an attribute 'natural_key' and rel_model is not equal to model,
decorator cached_property.
USE_INOTIFY is boolean True.
call the function new_method_proxy with an argument unicode, substitute the result for __unicode__.
self.verbose_name_plural is a string 'cache entries'.
if value is not contained in result,
define the method nud with 2 arguments: self and parser.
substitute '%s' in 'django.security.%s' with the name of the type of the class object e, use it as the argument for the call to the, function logging.getLogger, assign the result to the security_logger.
if end is None
return an empty string,
for every func and unused in filter_expr.filters,
if not,
call the function func with request and response as arguments, assign the result to response.
if first element of sys.version_info equals integer 2, PY2 is boolean True, otherwise it is boolean False.
return default.
if self does not have an attribute named '_dimensions_cache'.
from django.utils.translation import ugettext_lazy as _ and pgettext_lazy into default name space.
form_class_attrs is a dictionary with 2 entries: Meta for 'Meta' and formfield_callback for 'formfield_callback'.
get fist max_width incremented by 1 elements from line, find index of the first occurrenece of whitespace from the right side, add integer 1 to it, substitute the result for space.
if field.rel.through._meta.auto_created is true,
if self does not have 'bad_cookies' attribute,
otherwise if length of fks_to_parent is zero,
join self.path and f in path, substitute the result for full_file.
raise an SystemRestart exception,
return default.
for every f in fields, if exclude is false, or if exclude is true and f is not contained in exclude, and only if f is not in ignored, append to list, a tuple with 2 elements: f and value under the f key of field_dict dictionary, use the resulting list as an argument, for the creation of the instance of OrderedDict class, substitute it for field_dict.
for form in self.forms append form.cleaned_data to a list, return the resulting list.
if encoding is false.
sort all_files and return it.
inplural is boolean False.
if not,
if not,
import memcache.
call the function zlib.decompress with an argument data, substitute the result for data.
call the function os.unlink with an argument work_file.
if not,
if lang_code is not None,
substitute name for old_attr.
raise an TemplateSyntaxError exception with an argument string "'for' statements should have at least four words: %s", where '%s' is replaced with token.contents.
return scrip_name.decode method result called with UTF_8 as argument.
call the method s.render with 3 arguments: field string formated with name, val and local_attrs, substitute the result for select_html.
call the method self.validate with an argument value.
raise a ValidationError exception with arguments self.message and code set to self.code.
if not,
return boolean False.
from django.forms.widgets import everything into default name space.
open the file whose name is stored in the value under the 'pidfile' key of options dictionary and mode 'w', with the file descriptor as fp,
if not,
python_2_unicode_compatible decorator,
join migrations_directory and string "__init__.py" into a file path, substitute it for init_path.
left justify value under the 'microsecond' key of the kw dictionary, in the field of width 6, fill the rest with '0', substitute the result for value under the 'microsecond' key of the kw dictionary.
define the function smart_urlquote with an argument url.
call the function escape with an argument value, substitute it for value.
break from the endless loop.
assign bits elements to yes, no and maybe, respectively.
define the function urlencode with 2 arguments query and doseq set to integer 0.
define the method open with argument self.
call the method smart_split_re.finditer with an argument text, for every bit in result,
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
if var is not an instance of six.string_types,
define the method __init__ with 2 arguments: self and lexer.
if self.to_field is true,
from django.core import checks into default name space.
try,
call the method warnings.warn with an argument string "No fixture named '%s' found." where '%s' is replaced with fixture_name.
add app_config to excluded_apps set.
call the method s.getvalue, return the result.
call the function six.reraise with 3 arguments: class ValidationError, class ValidationError, created with 3 arguments: message, code as a string 'ambiguous_timezone' and params as params, and third element of the return value of the function sys.exc_info.
substitute field_name for old_field_name.
append model to app_list_value.
raise an self.error with 2 arguments: None and string "Unclosed tags: %s ", where '%s' is replaced with parse_until elements joined into a string, separated with ', '.
if not,
if shutdown_message is true,
call the method node.clone, substitute the result for klass.
call the method validators.ip_address_validators with arguments protocol, unpack_ipv4, substitute first element of the result for self.default_validators.
in the string '%s. You passed in %r (%s)' replace every %s with original and type of the object self.obj as strings, respectively, and replace %r with self.obj, return the result.
if exclude is true and f.name is contained in exclude,
substitute negate for self.negate.
if sub_tried is not None,
if value under the 'comments' key of the item dictionary is not None,
substitute func.__doc__ for compile_func.__doc__.
return boolean False.
if args is true,
call the function re.compile with an argument raw string '\r\n|\r', substitute the result for re_newlines.
if first element of sys.version_info equals integer 3, PY3 is boolean True, otherwise it is boolean False.
output is an empty list.
if value is an instance of six.text_type class,
from django.utils.deprecation import RemovedInDjango20Warning into default name space.
call the method HTMLParser.__init__ with 2 arguments: self and strict set to boolean False.
get the value under the DELETION_FIELD_NAME key of the form.cleaned_data dictionary, if it exists return it, if not, return boolean False.
increment i by integer 1,
append a tuple with 2 elements: f.name and formfield to field_list.
if exception of the class Exception, as e, is caught, call the self.stderr.write method with string "
call the function force_text with an argument bit, append the result to bits.
define the method as_bytes with arguments self and unixfrom set to boolean False.
replace every occurrence of string '\r\n' in message with '\n', replace every occurrence of string '\r', in the previous result for with string '\n', substitute the result for eol_message.
define the method add_initial_prefix with 2 arguments: self and field_name.
get value under the 'database' key of the options dictionary, use it as a key to get the value from the connections dictionary, substitute the result for connection.
if '_' is contained in locale,
import fcntl.
close the process with an argument 1.
substitute _urllib_parse_moved_attributes for Module_six_moves_urllib_parse._moved_attributes.
call the method numberformat.format with 6 arguments: value, result of the function get_format called with 3 arguments: string 'DECIMAL_SEPARATOR', lang and use_l10n set to use_l10n, decimal_pos, result of the function get_format called with 3 arguments: string 'NUMBER_GROUPING', lang and use_l10n as use_l10n, result of the function get_format called with an argument: string 'THOUSAND_SEPARATOR', lang and use_l10n as use_l10n and force_grouping as force_grouping, return the result.
endless loop,
if s is not an instance of the object six/string_types,
append path to self._js.
if error.code equals code,
derive the class EmailBackend from the BaseEmailBackend base class.
if call to the function os.path.exists with argument directory evaluates to boolean False,
call the BaseConverter function with BASE36_ALPHABET as argument, store the result in base36.
instantiate class Truncator, with an argument value, call the method chars on the result with 2 arguments length, and html set to boolean True, return the result.
join full_statement into a string, separated by newlines, use it as an argument for the call to the method curs.execute.
for ext in pathext,
return boolean True.
derive the class AdminEmailHandler from logging.Handler base class.
if settings.DEBUG_PROPAGATE_EXCEPTIONS is True,
call the function empty_form with 3 arguments: auto_id as self.auto_id, prefix set to the return value of the self.add_prefix method, called with string '__prefix__' as an argument and empty_permitted as boolean True, substitute the result for form.
define private method __ne__ with self class instance and other as arguments.
define the function curry with 3 arguments: _curried_func, unpacked list args and unpacked dictionary kwargs.
split tmp at '/' character, substitute the last element of the result for filename.
return text.
define the method handle_file_complete with 3 arguments: self, old_field_name and counters.
remove the first element from result.
call the self.get method with arguments key and version set to version, substitute the result for value.
append new_filenames to _cached_filenames.
raise CommandError with an argument string 'Unknown app in excludes: %s', where '%s' is replaced with exclude.
from django.conf import settings into default name space.
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
define the method _get_page with self class instance, unpacked list args and unpacked dictionary kwargs as arguments.
call the method self.xml.startElement with argument string 'object' and an empty dictionary.
decompress is boolean False.
sup_cls is base class of the class cls.
read data from buf file stream, yield the result.
try,
if allow_overwrite is boolean False and call to the os.access function with arguments new_file_name and os.F_OK evaluates to boolean True,
define the method __repr__ with an argument self.
if s_len is greater than length,
define the method render with 2 arguments: self and context.
if token.token_type equals TOKEN_BLOCK and token.contents equals endtag,
get is a string '<could not parse>'.
join statements into a string, separated by white spaces, append it to statements.
if value.tzinfo is None and call to the method value.tzinfo.utcoffset called with an argument value evaluates to None, return boolean True, otherwise return boolean False.
define the method O with an argument self.
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
otherwise if value is an instance of decimal.Decimal, float or six.integer_types,
with lock,
status_code is an integer 301.
for every base in new_class.__mro__ in reversed order,
if Exception exception is caught,
return ip_str.
call the method self._isdst with an argument dt, if it evaluates to true,
call the method _entity_re.sub with 2 arguments: _replace_entity and text, return the result.
call the json.dump function with 4 arguments: return value of the method self.get_dump_object called with an argument obj,  self.stream, cls set to DjangoJSONEncoder and unpacked dictionary self.json_kwargs.
substitute level for self.level.
call the method self.xml.addQuickElement with an argument string 'None'.
schemes is a list containing 4 initial elements: 'http', 'https', 'ftp' and 'ftps'.
for every statement in index_output,
decorator function register.filter with an argument is_safe set to boolean False.
otherwise if result of the call to the function _len with an argument cache is greater than or equal to maxsize,
call the operator.add on the values of the self object converted into a dictionary, until it is reduced to a single value, return it.
property decorator,
append j to sites.
call the function transaction.atomic, with using set to db.alias as the argument, return value is a function which is called, with the argument view, store the result in the view.
define iterator method __iter__ with self as the argument.
define the method _ipython with an argument self.
from django.conf import settings into default name space.
return result.
return wrapper.
if s is an instance of SafeData or EscapeData,
otherwise if value is an instance of datetime.date,
call the __call__ method from the base class of the class URLValidator, with an argument value.
if self.var is an instance of Variable class,
substitute name for handler.name.
close the process with an argument 0.
derive the EventHandler class from the base class pyinotify.ProcessEvent.
return string 'st'.
define the method unsign with arguments self, value and max_age set to None.
make a directory top_dir.
append d to self.fed.
all_locales is an empty string.
old_field_name is None.
call the method __init__ from the base class of the class SortedDict, called with an argument data.
self.request is None.
if not,
try,
if path_to_remove is file,
if not,
MONTHS_ALT is an dictionary with 12 entries: result of the function pgettext_lazy with 2 arguments: 'alt. month' and 'January' for 1,
property decorator,
convert result of the method self.__iter__ into a list, return element at the idx index.
if self.verbosity is greater or equals integer 2 and fixture_files_in_dir is false,
derive the class MultiValueDictKeyError from the KeyError base class.
call the LockFileEx function with 6 arguments: hfile, flags, integer 0, integer 0, hexadecimal value FFFF0000, return value of the byref function called with argument overlapped, substitute the result for ret.
otherwise if domains equals a string django' and, file_ext equals '.py' or file_ext is contained in command.extensions,
if localized_fields equals ALL_FIELDS, or if localized_fields is true and f.name is contained in localized_fields,
call the os.makedirs function with directory and self.directory_permissions_mode as arguments.
from django.utils.translation import ugettext as _ into default name space.
return empty bytes string.
return new_name, field_params and field_notes.
if NoReverseMatch exception is caught,
format string normal_row with an dictionary containing 6 entries: return value of the function force_text with an argument bf_errors, for 'errors', return value of the function force_text with an argument label for 'label', return value of the function six.text_type, with an argument bf, for 'field', help_text for help_text, html_class_attr for 'html_class_attr' and bf.html_name for 'field_name'.
evaluate the function BytesIO with argument chunk, substitute it for chunk_buffer.
define the protected method _base_set with 4 arguments, self class instance, key, value and timeout set to DEFAULT_TIMEOUT.
call the method self.xml.startElement with an argument string 'object'.
from django.db import models and DEFAULT_DB_ALIAS into default name space.
try,
define lambda function that returns self.file.softspace field, use it as an argument for property function, put the result in softspace.
derive the class FileBasedCache from BaseCache base class.
initial is an empty list.
call the method path.normpath with an argument expanded_template, substitute it for expanded_template.
derive the class MinLengthValidator form the BaseValidator base class.
__Y is a raw string '(?P<year>\d{4})'.
for every node in self.nodelist_loop,
try,
if s is an instance of bytes or Promise and s._delegate_bytes is true,
call the method parser.add_option with 5 arguments: string '--no-color', action is string 'store_true', dest is string 'no_color', default is boolean False, and help is a string "Don't colorize the command output.".
call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib_parse" appended to __name__, assign the result to the value under the string ".moves.urllib_parse" appended to __name__ key of the sys.modules dictionary, and to the value under the string ".moves.urllib.parse" appended to __name__ key of the sys.modules dictionary.
get attribute 'caches' from the self._caches if exists, otherwise get an empty dictionary, call the values method on the return value, return it.
call the method self.compile_function_error with 2 arguments token and e, if it evaluates to false,
shell is an instance of IPShell class, created with an argument argv as an empty list.
for every i and char in enumerated text,
call the baseconv.base62.decode method with an argument timestamp, substitute the result for timestamp.
if name is true, substitute it for function_name, if not get '_decorated_function' attribute from func object, if it exists, substitute __name__ field of the result for function_name, in not, substitute func.__name__ for function_name.
define the method add_arguments with 2 arguments: self and parser.
if data is not an instance of basestring,
define the method add_root_elements with 2 arguments: self and handler.
if file self is not closed,
append ext to guessed_filename.
substitute '%s' in string '%s %s' with the elements of value converted into a tuple, substitute the result for value.
try,
join tempdir and guessed_filename into a file path, substitute it for guessed_path.
substitute length of values for len_values.
try,
append f to file_field_list.
call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.
return obj.
call the method final_output.extend with an argument output.
substitute self for value.configurator.
if lookup equals a string 'date',
substitute name for self.name.
old_field_name is None.
if pattern equals '*' or pattern starts with '.' or pattern equals host, and only if: host ends with '.' and host ends with pattern or host is equal to all but first elements of pattern, substitute boolean true for match, otherwise substitute boolean False for match.
define the method close with argument self.
break the loop execution.
if csrf_token is not None,
if self.is_required is boolean false and call to the method value_from_datadict from the instance of CheckboxInput class, with 3 arguments: data, files and return value of the function self.clear_checkbox_name called with an argument name, evaluates to true,
return iterator object based on the self.file collection object.
define the method configure_handler with 2 arguments: self and config.
if Exception exception is caught,
if filepath starts with root,
return plural.
self.pointer is integer 0.
substitute input_formats for self.input_formats.
add state element to self.__dict__ dictionary.
requires_system_checks is boolean False.
if Exception, renamed to e, exception is caught,
call the method parser.add_argument with 3 arguments: string 'args', nargs set to argparse.REMAINDER and help as a string 'Various KEY=val options.'
define the function fdel with 2 arguments: instance and name set to fdel.__name__.
if chunk_size is false,
call the method return self.format with an argument string 'D, j M Y H:i:s O', return the result.
sort elements of list existing.
if value is not contained in result,
return nothing.
call the function self.path with argument name, use the result as an argument for the call to the function os.path.getmtime, use the result as an argument for the call to the function datetime.fromtimestamp, return the result.
from django.utils.datastructures import MultiValueDict and MergeDict into default name space.
join dirpath and dirname into a file path, use is as an argument for the call to the function os.path.join, use the result as an argument for the call to the os.path.join function, use the result and the norm_patterns as arguments for the call to the is_ignored function, if it evaluates to true,
if third element from the end of the args equals string 'as',
get the value under the format key of the _serializers dictionary, return the Serializer filed of the result.
templatetags_modules is an empty list.
get the value under f key of dictionary under 'filters' key of self.config dictionary, use the result as an argument for the call to the method filterer.addFilter.
define function force_bytes with s, encoding set to 'utf-8', strings_only set to False and errors set to 'strict' as arguments.
call the method parser.next_token, substitute the result for token.
if data is an callable object,
otherwise if '\\' is contained in path,
return None.
call the function force_text with an argument base, substitute the result for base.
if six.PY3 is true,
if level is not None,
cmp_fmt is None.
call the method self.xml.startElement with 2 arguments: string 'field' and a dictionary containing 2 entries: field.name for 'name', and return value of the field.get_internal_type method for 'type'.
raise an exception value.
unpack dictionary final_attrs, map the values through force_text function with an argument v and convert it to a dictionary, again, substitute the result input_attrs.
define the method prepare_value with arguments self and value.
if not,
convert result to lowercase and return it.
define the method Z with an argument self.
if _cached_filenames is empty and settings.USE_I18N is True,
if attr equals any of the strings "__file__", "__name__" or "__path__" and self.mod is not contained in sys.modules,
substitute fail_silently for self.fail_silently.
define the method handle_m2m_field with self, obj and field arguments.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide an accessed_time() method'.
from django.template.loader import BaseLoader into default name space.
if template doesnt have a 'render' attribute,
otherwise if prefix is not equal to common_prefix,
call the re.compile function with 2 arguments: raw string "(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$", "|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)" and re.IGNORECASE, substitute the result for user_regex.
call the method self.clear_checkbox_id with an argument checkbox_name, substitute the result for checkbox_id.
define the function _samefile with arguments src and dst.
merge_migrations is an empty list.
substitute tuple containing 2 elements: sum of p_pattern and prefix, and sub_pattern for value under the namespace key of the namespace dictionary.
increment i by integer 1,
for every message in email_messages:
call the method settings.configure.
call the cursor.fetchone method, substitute the result for row.
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
if not,
substitute notation_name for self.notation_name.
call the method self.split_leading_dir with an argument path, assign the result to prefix and rest, respectively.
call the method fp.read, substitute the result for src_data.
status_code is an integer 302.
if path is not None,
call the self.stdout.write method with string 'processing file %s in %s\n' as argument, replacing all the occurrences of '%s' with f and dirpath, respectively.
derive the class Group from list base class.
if resolved_path is true,
call the method e.encode with an argument string "latin-1".
define the function striptags with an argument value.
if candidate is false,
LockFileEx.argtypes is a list containing 6 elements: HANDLE, DWORD, DWORD, DWORD, DWORD and LPOVERLAPPED.
import warnings.
call the method self.filter_function with arguments name and unpacked dictionary flags, return the result.
substitute media.__dict__ for media_attrs.
call the signals.request_started.send method with sender set to self.__class__ as argument.
if TypeError or AttributeError exceptions are caught,
substitute SplitDateTimeWidget for widget.
return the value under the self.data.month key of the MONTHS dictionary.
if first element of text equals '#',
split msgs by newline characters, for every line in result,
return response.
from xml.sax.saxutils import XMLGenerator into default name space.
if Exception, renamed to e, exception is caught,
decorator cached_property.
define the function get_resolver with an argument urlconf.
STATUS_OK is integer 0.
from io import BytesIO into default name space.
if self.number equals to self.paginator.num_pages,
if not,
call the method __delitem__ from the base class of the class SortedDict, with an argument key.
for every model in return value of the function router.get_migratable_models, called with arguments: app_config, connection.alias and include_auto_created set to boolean True.
from __future__ import unicode_literals into default name space.
try,
call the function allow_lazy with 2 arguments: escape, six.text_type, substitute the result for escape.
from django.core.management.base import BaseCommand and CommandError into default name space.
return inner.
output is an empty list.
finally perform,
call the function time.time, substitute the result for timeval.
with self.mutex perform,
call the method parser.add_argument with 5 arguments: string '-i', string '--interface', choices set to string self.shells, dest as a string 'interface' and help as a string 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"'.
if encoding is true, substitute it for self._encoding, if not substitute settings.DEFAULT_CHARSET for self._encoding.
if primary_keys is true,
if settings.TEMPLATE_STRING_IF_INVALID is true,
return an instance of a SpacelessNode class, created with an argument nodelist.
decorator function register.filter with an argument is_safe set to boolean True.
derive the class _OFFSET_UNION from the Union base class.
while bits is true,
call the method __init__ from the base class of the class PasswordInput, called with an argument attrs.
decorator register with Tags.models as an argument.
raise an CommandError exception with an argument string "you must provide %s %s name", where '%s' is replaced with string 'an', and app_or_project if app_or_project equals to string 'app', if not, it is replaced with 'a' and app_or_project.
raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a get() method' as argument.
define the method __init__ with 2 arguments: self and value.
try,
if label_suffix is None,
call the function ugettext with string 'yes,no,maybe' as an argument, substitute the result for arg.
call the method add_arguments from the base class of the class Command, with an argument parser.
if f.editable is true and f is an instance of models.AutoField, or f.name is not contained in cleaned_data,
if default is true and RAISE_ERROR is false,
key is a list with elements of list key from length of self.prefixes index to the end,
define the function get_objects.
if not,
from django.forms.fields import Field and ChoiceField into default name space.
define the method __init__ with 2 arguments self and func.
call the function six.text_type with an argument self.data.year, return the result without the first 2 elements.
call the function F with an argument x, for every x in sequence of integers from 1 to l, not included, substitute the results in a list for T.
define the method _archive_cls with an argument file.
if self.initial is true and 'initial' key is not contained in kwargs,
if role is contained in value under the NOCOLOR_PALETTE key of the PALETTES dictionary and definition is true,
call the function pformat with an argument sys.modules, append the result for output.
define the function runfastcgi with 2 arguments: argset set to an empty list and unpacked dictionary kwargs.
from django.core.files.move import file_move_safe into default name space.
raise an AttributeError exception with an argument string "This method is available only on the view class.".
evaluate the member method of s, encode with the encoding and errors as the arguments, return the result.
from django.forms.models import everything into default name space.
call the method self.file.close.
call the function timedelta with an argument seconds set to negative _time.altzone, substitute the result for self.DSTOFFSET.
call the method handler.addQuickElement with 3 arguments: string 'atom:link', None and dictionary with 2 entries: 'self' for 'rel', value under the 'feed_url' key of the self.feed dictionary for 'href'.
call the traceback.extract_tb method with argument tb, substitute the first element of last row of the result to filename.
call logging.getLogger method with string 'django.request' as argument, store the result in logger.
 Creating table %s\n" as argument, with all occurrences of '%s' replaced with model._meta.db_table.
if initial is true, substitute it for self.initial, if not self.files is an empty dictionary.
try,
call the function ugettext with an argument string "%s TB", substitute '%s' with the result of the call to the function, filesize_number_format with result of division of bytes by TB as an argument, substitute the result for value.
call the function force_str with an argument: default if it is true, or if not, first element of the result of the function, get_format called with an argument string 'TIME_INPUT_FORMATS', substitute the result for format.
return _localtime.
consume_next is boolean True.
import module re.
if not,
call the method __init__ from the base class of the class SplitDateTimeWidget, with 2 arguments: widgets and attrs.
if not,
if not,
define the function slice_filter with 2 arguments value and arg.
define the method __repr__ with an argument self.
call the six.reraise function with 3 arguments: DeserializationError, DeserializationError called with an argument e, third element of the return value of the function sys.exc_info.
if self._wrapped is empty,
define the method get_response, with self class instance and request as the arguments.
convert self.index into a string and append it to '_' string, substitute it for value under the 'id' key of self.attrs dictionary.
for every fname in return value of the glob.glob1 function called with 2 arguments: self._dir and , self.cache_suffix converted to a string, appended to the character '*', call os.path.join with self._dir and fname as arguments, filelist is a list containing all the previous results.
if slots is not None,
if m is true,
define the method add_item_elements with 3 arguments: self, handler and item.
kwargs is an empty dictionary.
call the method self.configure_filter with an argument value under name key of filters dictionary, substitute the result for filters dictionary value under name key.
import module locale.
ERROR is integer 40.
if attrs is not None,
from email.mime.base import MIMEBase into default name space.
from datetime import timedelta and tzinfo into default name space.
substitute serialize for __str__.
call the method cmatch.group with an argument integer 1, format with the result string ' _(%s) ', write it to out.
if value under the 'indent' key of the self.options dictionary is true,
from __future__ import unicode_literals into default name space.
if self.data.minute equals integer 0 and self.data.hour equals integer 0,
derive the class IPAddressField from the base class CharField class.
if upto is not equal to length of token,
for every opt in options, if first element of opt is not contained in prev_opts, append opt to the list, substitute it for options.
if self.asvar is None,
call the function _trans.get_language, return the result.
call the method self.importer with an argument used.
default_validators is a list with an element, return value of the validators.URLValidator method.
define the function dec with an argument func,
from django.apps import apps into default name space.
call the function unicodedata.normalize with 2 arguments: string 'NFC' and self._wrapped, substitute the result for text.
raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to assignment_tag".
skip this iteration of he smallest enclosing loop.
call the method handler.addQuickElement with 2 arguments: string 'email' and value under the 'author_email' key of the item dictionary.
return self.data.hour.
if klass is a subclass of logging.handlers.MemoryHandler base class and string 'target' is contained in config,
define the method resolve_template with 2 arguments: self and template.
call the method self.validate_key with argument key.
call the method connection.ops.start_transaction_sql, if it evaluates to true,
supported is boolean False.
substitute obj for self.object.
call the function do_translate with 2 arguments: message and string 'gettext', return the result.
call the function re.compile with 2 arguments: string '^([a-z]):' and re.I, substitute the result for _drive_re.
if confirm equals a string 'yes',
return check.
call the re.compile function with an argument raw string '^[\d,]+$', substitute the result for comma_separated_int_list_re.
define the method __deepcopy__ with arguments self and memo.
substitute '%s' in string "No changes detected in app '%s'" with the result of the method app_labels.pop, write it to self.stdout.
define the function divisibleby with 2 arguments value and arg.
append options to output.
call the method calendar.isleap with an argument self.data.year, return the result.
define the method __str__ with an argument self.
_assertCountEqual is a strnig "assertItemsEqual".
from django.core.management.templates import TemplateCommand into default name space.
if item_date is true,
call the function mark_safe with an argument message, return the result.
if csrf_token equals string 'NOTPROVIDED',
call the method connection.constraint_checks_disabled, with the result perform,
substitute s for self.s.
call the function sys.exit with argument integer 3.
if self._dir path doesnt exists,
best_doublecolon_len is an integer 0.
define validate_name with 3 arguments: self, name and app_or_project.
call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _, and _, respectively.
if _default is None,
replace all the occurrences of '\\\\' in string value with '\\' and all occurrences of '\\"' for '"', substitute the result for value.
define the method U with an argument self.
otherwise if self.verbosity is greater than integer 0,
append newline to plural_form_line, substitute the result for line.
if data is true, substitute it for self.files, otherwise self.files is an empty dictionary.
__version__ is a string "0.1".
append contents to plural.
if self.data.hour is greater than integer 11,
if length of bits is not equal to integer 2,
if regex_match is false,
create an object TranslatableFile with arguments: dirpath, filename and locale_dir, append it to all_files.
if BLOCK_CONTEXT_KEY is not contained in context.render_context,
decorator function wraps with an argument func.
return a string "<%s: %s>" formated with self.__class__.__name__, and a result of the method __repr__ called from instance of base class of the MultiValueDict class.
for every field in concrete_model._meta.many_to_many,
call the method self.queryset.filter with an argument, unpacked dictionary with an entry: value for string '__in' appended to key, substitute the result for qs.
for every tag in open_tags,
property decorator.
return self.
self._raw_ipv6 is boolean True.
do nothing.
from django.utils.formats import localize into default name space.
for every templatetag_module in templatetags_modules_candidates,
if IOError or OSError exceptions occurred,
substitute value under the 'suffix' key of dictionary d, substitute it for suffix.
call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
match value string with regex self.CONVERT_PATTERN, substitute the result for m.
try,
define the method IE_sanitize with arguments self and filename.
do nothing.
call the method field.hidden_widget, substitute the result for field.hidden_widget.
from django.utils import six into default name space.
for every cache_alias in settings.CACHES,
return an empty string.
property decorator,
increment objects_in_fixture by one.
decorator function register.filter with an argument is_safe set to boolean True.
substitute third element of renamed_method for deprecation_warning.
join statements into a string, separated by newlines, return it.
if name is None and filter_func is None,
derive the class HttpResponseRedirect from the HttpResponseRedirectBase base class.
call the b64_encode function with an argument data, substitute the result for base64d.
define the function popen_wrapper with 2 arguments: args and os_err_exc_type set to CommandError.
try,
if not,
call the method block_context.pop with an argument self.name, assign the result to push and block.
call the self.sync_apps method with connection and executor.loader.unmigrated_apps as arguments, substitute it for created_models.
encode is an lambda function with 2 arguments k and v, return value is the result of the function urlencode, called with an argument: dictionary containing element v for k.
from django.core import mail into default name space.
from django.db import connection into default name space.
substitute self.registered_checks for checks.
return self._dimensions_cache.
call the method prepare_value from the base class of the class ModelChoiceField, with an argument value, return the result.
substitute the return value of the method self.object_list.count for self._count.
if value is not an instance of bytes or six.text_type classes,
call the method self.max_expr.resolve with an argument context, substitute the result for max_value.
skip this loop iteration,
for every field, initial and data in list of tuples tuple containing elements of self.fields, initial and data, respectively,
replace all the occurrences of character '_' in name with a whitespace, capitalize the first letter and return the result.
call the __init__ method from the base class of the EmailBackend class with argument fail_silently set to fail_silently.
replace '%s' in a string "Created new squashed migration %s" with writer.path, use it as an argument for the call to the method, self.style.MIGRATE_HEADING, write the result to self.stdout.
return boolean False.
otherwise if ch equals a string ')',
__caches is an empty dictionary.
define the function _import_module with an argument name.
self.items is an empty list.
derive the class Deserializer from the six.Iterator base class.
substitute value under the database key of the connections dictionary for connection.
call the method clean with an argument data from the base class of the class URLField, return the result.
cut the last 6 elemetns from r, append character 'Z' to it, substitute the result for r.
define the method __init__ with argument self, server and params.
if method msg.get_charset evaluates to true, call the get_output_charset method on the return value of the msg.get_charset method, substitute the result for charset, otherwise if it is false, substitute the string 'utf-8' for charset.
substitute template for self.template.
call the method deactivate.
if length of password is greater than inner.block_size,
remove config dictionary element under 'class' key, use it as an argument for the call to the method self.resolve, substitute the result for klass.
raise an TemplateDoesNotExist exception with an argument string "No template names provided".
if length of bits is not zero,
call the method parser.compile_filter with an argument, in_index incremented by one, and used to index parser.compile_filter, substitute the result for sequence.
return nothing.
if six.PY3 is true,
return boolean True.
import pytz.
self.bad_cookies is an empty set.
call the function format_html with 2 arguments: string '<optgroup label="{0}">' and return value of the function force_text, called with an argument option_value, append the result to output.
call the method handler.addQuickElement with 3 arguments: string 'guid', value under the 'unique_id' key of the item dictionary, and guid_attrs.
if settings.DEBUG is true,
call the method call_command with string 'loaddata', string 'initial_data', verbosity set to self.verbosity, database set to connection.alias, skip_validation set to boolean True, app_label set to app_label and hide_empty set to boolean True.
derive the class EndToken from the TokenBase base class.
call the method match.groups, substitute the result for args.
if not,
join package.__name__ and module_name into a string separated with '.', substitute it for name.
define the method __getitem__ with 2 arguments: self and key.
if param is contained in unhandled_params,
for every pattern in reversed list self.url_patterns,
from django.core.management.base import AppCommand into default name space.
call the EmailMessage function wit subject, message, sender, recipient and connection set to connection, for every subject, message, sender and recipient in datatuple, store the results in the messages list.
define the method create_var with 2 arguments: self and value.
define the function iterkeys with 2 arguments: d and unpacked dictionary  kw.
try,
get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
if s is an instance of the subclass Exception,
add self.buffer and self._read_limited method return value together, store it in result.
call the function make_origin with 4 arguments: display_name, loader, name and dirs, return a tuple containing 2 elements: source and previous result.
get the value 'reset_sequences' key of the options dictionary, if it exists substitute it for reset_sequences, otherwise reset_sequences is boolean True.
if settings.DEBUG is true and value of the request.META dictionary under the 'REMOTE_ADDR' key is contained in settings.INTERNAL_IPS,
requires_system_checks is boolean False.
open writer.path file in write mode, with the file descriptor as fh, perform,
return boolean False.
substitute name for self.name.
if not,
node is an instance CycleNode class, created with  values,name and silent set to silent.
from django.utils import six into default name space.
return i.
input_type is a string 'file'.
media is an instance of Media class.
call the function is_protected_type with an argument value, if it evaluates to true,
if AttributeError exception is raised,
if Exception exception is caught,
from yaml import CSafeLoader as SafeLoader into default name space.
call the method self.add_error with 2 arguments: None and errors.
derive the class Node from object base class.
from django.utils import six into default name space.
define the method _get_queryset with an argument self.
from email.header import Header into default name space.
define the method render with 4 arguments: self, name, value and attrs set to None.
if failures is true,
define the method M with an argument self.
slice chunk list to get the last rollback elements, if the new list is not empty,
remove '__dict__' key from the orig_vars dictionary.
substitute self._request_middleware for request_middleware.
decorator function register.filter with 3 arguments string "slice", is_safe set to boolean True and needs_autoescape set to True.
otherwise if action equals to string 'unapply_start'.
from django.db.utils import DatabaseError into default name space.
raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide an extract() method'.
if self.errors is true and self.form has an attribute 'error_css_class',
if show_traceback is true,
commands is an dictionary containing elements: string 'django.core' for every name in the function find_commands return value, called with first element of __path__ as an argument.
substitute None for self.style_func.
define the method __setitem__ with 3 arguments: self, key and value.
define the function assertCountEqual with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
define the method regex with an argument self.
if self.timezone is true and call to the method self.timezone.dst with an argument self.data, evaluates to true,
if _localtime is None,
if old_handler is not None,
if KeyError exception is caught,
return an instance of RequestContext class, created with 3 arguments: self._request, context and current_app set to self._current_app.
convert key_prefix, version and key into strings, concatenate them respectively, with character ':' as delimiter, return the result.
return self.limit_choices_to.
from django.utils import autoreload into default name space.
if TypeError exception is caught,
otherwise if bytes is smaller than GB,
define the method t with an argument self.
define the method set_signed_cookie with 5 arguments: self, key, value, salt as an empty string and unpacked dictionary kwarg.
substitute instance._meta for opts.
if m is not False, None is considered False,
html4_singlets is a tuple with 9 elements: strings 'br', 'col', 'link', 'base', 'img', 'param', 'area', 'hr' and 'input'.
substitute the last element of parts for parts.
substitute i for self.pointer.
do nothing.
value is an instance of ConvertingDict class, created with an argument value.
define the method tag with an argument self.
if not,
define the method exit_command with an argument self.
define the method __init__ with 3 arguments: self, producer and length set to None.
call the function func with 3 arguments: context, self.first and self.second, return the result.
call the method popitem from the base class of the class QueryDict, return the result.
call the method formats.sanitize_separators with an argument value, substitute the result for value.
call the method self.error with 2 arguments: token and string "Invalid block tag: '%s'", where '%s' is replaced with command, return the result.
call the method self.as_ul, return the result.
raise an TemplateDoesNotExist exception with an argument, elements of not_found joined into a string, separated with ', '
decorator function receiver with an argument setting_changed,
define the emethod parse with 2 arguments: self and parse_until set to None.
call the method self._cache.set_multi with safe_data, self.get_backend_timeout(timeout) as arguments.
decorator stringfilter,
if unpack_ipv4 is true,
if not,
derive the class ObjectDoesNotExist from the Exception base class.
sort elements formatted, join them in the list separated with newline character, substitute the result for formatted.
decorator function register.filter with an argument is_safe set to boolean True.
call the method handler.addQuickElement with 3 arguments: string 'title', an empty string and a dictionary with 3 entries: field url of the value under the 'enclosure' key of the item dictionary for 'url', field length of the value under the 'enclosure' key of the item dictionary for 'length', and field mime_type of the value under the 'enclosure' key of the item dictionary for 'type'.
do nothing,
define the method find_potfiles with an arguments self and root.
call the self.initial_form_count method, return the sublist of self.forms, using previous result as start index to the end.
call the function validate_ipv46_address with an argument ip_address.
for every path in return value of the call to the function gen_filenames with argument only_new set to boolean True,
yield string "# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'" as the result.
substitute self.deleted_forms for forms_to_delete.
define the function _replace_entity with an argument match.
call the import_string function with an argument settings.SIGNING_BACKEND, substitute the result for Signer.
from IPython.Shell import IPShell into default namespace.
from django.core.exceptions import ValidationError into default name space.
convert if into a string append to it a string '_month', return the result.
content.setter decorator,
import module decimal.
from __future__ import unicode_literals into default name space.
define the method open with argument self.
daemonize is boolean True.
join prefix and path into an url, return it.
extend self.program list with self.program_options, string '-o', return value of the npath function with string '.mo' appended to the base_path as argument, and return value of the npath function with string '.po' appended to the base_path as argument, substitute it for args.
locales is a difference between the locales and exclude sets.
call the method handler.addQuickElement with 2 arguments: string 'uri' and value under the 'author_link' key of the self.feed dictionary.
substitute self.rendered_content for self.content.
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, substitute the result for res.
derive the class Warning from base class CheckMessage.
otherwise if token.token_type equals integer 2,
call the function make_middleware_decorator with an argument middleware_class, return the result.
if value equals k or text_value equals return value of the function force_text called with argument k,
extend list inner_args with args.
if key is not contained in self,
if values under the 'app_label' and 'migration_name' keys of the options dictionary are True,
if AttributeError exception is caught,
define the method is_secure with an argument self.
self._post is an instance of QueryDict created with arguments: an empty string and encoding set to self._encoding, self._files is an instance of class MultiValueDict.
raise an TypeError exception with an argument string "If the flags are set, regex must be a regular expression string.".
renamed_methods is an tuple.
call the function reraise from the module six, with list of arguments exec_info.
if value under the name key of the sys.modules dictionary is not None, return boolean True, otherwise return boolean False.
define the method __init__ with 3 arguments: self, filepath and parsed.
get attribute 'print' from the moves.builtins object, if it exists substitute it for print_, if not print_ is None.
substitute value under the 'database' key of the options dictionary for database.
define the __init__ method with argument self.
join top_dir, relative_dir and return value of the function filename.replace called with 2 arguments: base_name and name, into a file path, substitute it for new_path.
call the method obj.natural_key, substitute the result for natural_key.
define the method close with argument self.
if not,
if context is an instance of Context,
append form.errors to self._errors.
call the method tried.extend with an argument: t added to a list containing element pattern, for every t in sub_tried.
substitute return value of function no_style for style.
from django.utils.encoding import force_text into default name space.
otherwise if formfield_callback is not callable object,
raise a NotImplementedError with an argument string 'subclasses of Serializer must provide a start_object() method'.
substitute http_cookies.SimpleCookie for SimpleCookie.
join elements of out into a string, separated with whitespaces, append ')' to it, append the result to '(', return it.
if not,
return value under the name key of the files dictionary, if it doesnt exists, return None.
call the method self._get_size_from_underlying_file, substitute the result for self._size.
define the method __init__ with 3 arguments: self, args and kw.
define the method resolve with an argument self.
if not,
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
elt is an list with an element elt.
substitute file.name for filename.
call the method self.tag with 2 arguments: function_name and compile_func.
concatenate opts.concrete_fields, opts.virtual_fields and opts.many_to_many, for every f in the result,
if s equals a string '"',
from importlib import import_module into default name space.
last element of result is an instance of Choice class, created with an argument list with 2 elements: None and last element of result.
if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute,
raise an FieldError exception with an argument message.
if mw_instance has an attribute named 'process_exception'.
call the method RE_DATE.match with an argument value, substitute the result for match.
if Exception exception is caught,
call the self.indent method with integer 0 as an argument.
if not,
from django.core.management import call_command into default name space.
if input_formats is not None,
call the method apps.get_app_configs, for app_config in the result,
call the methof model_dependencies.reverse.
if response is True,
call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
convert value to an floating point number if it is not equal to integer 1,
call the method m.end with an argument integer 0, substitute the result for pos.
if not,
if value is an instance of datetime.datetime class,
find the ending position of the regular expression match of the object match, substitute the result for k.
yield emitting as result of the generator.
define the method file_complete with arguments: self and file_size.
if not,
return t.
do nothing.
define the method start_serialization with an argument self.
define the method _get_scheme with self class instance as argument.
if not,
call the method kwargs.update with an argument self.default_args.
call the method __init__ with an argument display_name, from the base class of the LoaderOrigin class.
add model to excluded_models set.
substitute complain for __imul__.
call the method filename.encode with an argument string 'ascii'
call the method lineno_comment_map.setdefault with 2 arguments: t.lineno and an empty list, append t.contents to the result.
convert text to an integer, substitute it for c.
define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
call the function lazy with 2 arguments: func and unpacked list resultclasses, call the result with 2 arguments: unpacked list args, and unpacked dictionary kwargs.
import module os.
get the value under the 'content-type' key of the info dictionary, substitute it for content_type.
derive the TemporaryUploadedFile class from the UploadedFile base class.
derive the class ContentFile from File base class.
join func.__module__ and func.__name__ into a string, separated by character '.', substitute it for self._func_path.
define the method has_key with self class instance, key and version defaulting to None as arguments.
call the function http_cookies.SimpleCookie, on the return value call the value_encode method, with the argument character ';', if the tuple result equals to tuple containing character ';' and string '"\\073"', respectively, assign _cookie_encodes_correctly the boolean True value, otherwise assign it False.
if not,
otherwise if char is contained in string 'dj',
substitute '%s' in TEMPLATE_FRAGMENT_KEY_TEMPLATE string with fragment_name and args.hexdigest(), respectively, return the result.
if ValueError exception is caught,
call the method to_python with an argument value from the base class of the DateTimeField class, substitute the result for result.
if attrs is not None substitute it for self.attrs, or if not self.attrs is an empty dictionary.
self.waiting_writers is an integer 0.
call the function urlsplit with an argument location, substitute the result for bits.
import module warnings.
default_error_messages is a dictionary with an entry, result of the call to the function _ with an argument, string 'Select a valid choice. That choice is not one of the available choices.' for 'invalid_choice'.
call the method self.recipients, if it evaluates to false,
define the function get_language_bidi.
call the method self.make_key with key and version set to version as arguments, substitute it for key.
if not,
register.tag decorator,
raise an StopIteration exception.
call the function re.compile with an argument raw string "^\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?'))\s*", substitute the result for context_re.
if not,
if self.cmd._called_from_command_line is true,
position the file self.file pointer at the end.
define the method a with an argument self.
for every i and item in enumerated iterable values,
call the method form.instance._get_unique_checks with an argument exclude as exclude, substitute the result for unique_checks,  and date_checks, respectively.
if rel_model has an 'natural_key' attribute and rel_model is not equal to model,
if number equals integer 1,
from django.core.management.base import BaseCommand and CommandError into default name space.
define the function with arguments self and filename.
for every arg in s, call the function force_text with arg, encoding, strings_only and errors as arguments, join the result in a string separated by whitespaces, substitute it for s.
return attachment.
substitute settings.DEFAULT_CHARSET for encoding.
call the function base.DeserializedObject with obj and m2m_data as arguments, yield the result as the generator return value.
import module re.
if meta is None,
substitute space for sep.
call the method self.appendlist with 2 arguments: return value of the function force_text with 3 arguments: key, encoding and errors set to string 'replace', and return value of the function force_text with 3 arguments: value, encoding and errors set to string 'replace'.
if self has an '_files' attribute.
try,
if as_ is not equal to string 'as',
if m is None,
if message is an instance of ValidationError class,
call the method translation.activate with an argument settings.LANGUAGE_CODE.
deps is an empty list.
raise an BadHeaderError exception with an argument string "Header values can't contain newlines (got %r)", where '%r' is replaced with value.
self.message_context is None.
call the function ungettext_lazy with 3 arguments: string 'Ensure this value has at most %(limit_value)d character (it has %(show_value)d), string 'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' and string 'limit_value', substitute the result for message.
define the method __init__ with 2 arguments: self and name.
derive the class DateFormat from the base class TimeFormat.
call the function  six.iteritems with an argument blocks, for every name and block in result,
call the method cursor.execute with string "SELECT cache_key FROM %s WHERE cache_key = %%s and expires > %%s" as argument, substitute the '%s' with table and list containing return value of the method call ops.value_to_db_datetime with argument now on the object under the db key of connections dictionary, respectively.
try,
call the function lazy with 2 arguments: lambda function with unpacked dictionary kwargs as an argument and return value an instance of NumberAwareString class and NumberAwareString, call the result with an argument unpacked dictionary kwargs, substitute the result for proxy.
define the method __lt__ with 2 arguments: self and other.
if SkipFile exception is caught,
from django.utils import six and lru_cache into default name space.
break from this loop execution.
return boolean False.
call the function quote with return value of the evaluated function force_bytes(iri), and with safe set to bytes string "/#%[]=:;$&()+,!?*@'~", return the result.
from django.db import connections,  DEFAULT_DB_ALIAS and migrations into default name space.
if field is an instance of InlineForeignKeyField class,
if not,
chunk_size is an integer 1024.
call the method self.stdout.write, with an argument string "Rendering %s template files with extensions: %s\n", where '%s' is replaced with app_or_project and extensions joined into a string, separated by a string ', '.
from io import BytesIO into default name space.
call the self.get_response with request as the argument, substitute the result for response.
substitute WSGIRequest for request_class.
return boolean True.
convert elements of error into a list, substitute the first element for message.
append val to self.vals.
set self.cdata_tag to None.
define the method __getitem__ with 2 arguments: self and key.
yield a tuple with 2 elements: tok.name and toktext.
call the function convert_old_style_list with an argument sublist, substitute the result for item and old_style_list.
append truncate_text to out.
if first two elements of sys.version_info equal to integers 2 ant 7, respectively,
append data to self.children.
if value under the key 'ATOMIC_REQUESTS of db.settings_dic dictionary is True and db.alias is not present in the non_atomic_requests,
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string, 'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice'.
call the method self.validate_key with argument key.
substitute form for self.form.
if not,
call the method self.write_migration_files with an argument changes.
call the parent class of Command class add_arguments method and parser as the arguments.
divide value by max_value, multiply the result with max_width, substitute it for ratio.
if not,
remove last element for quant.
call the function handle_app with 2 arguments: app_config.models_module and unpacked dictionary options.
substituet node for value under the name key of the parser._namedCycleNodes dictionary.
try,
raise an exception.
call te method operator.itemgetter with an argument integer 0, substitute the result for byte2int.
define the function wrapped with 2 arguments: unpacked list args and unpacked dictionary kwargs.
return val and encoded as a tuple.
validate_email is an instance of EmailValidator class.
delete attr.
statement is an empty list.
call the stream_or_string.read function, substitute the result for stream_or_string.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string, '"Upload a valid image. The file you uploaded was either not an image or a corrupted image."' for 'invalid_image'.
if if_is true attrs is an dictionary with initial entry: id_ for 'id', if not, attrs is an empty dictionary.
define the method as_data with an argument self.
substitute cwords element at the cword decremented by 1 index for curr.
define the method __enter__ with an argument self.
for every i in range of integers from 0 to length of result, not included,
call the method self.style.MIGRATE_HEADING with an argument string "Optimizing...", write it to self.stdout.
substitute item_date for latest_date.
if should_convert is true, call the function localtime with an argument value and return the result, otherwise return value.
if value is not contained in result,
define the function autoescape with 2 arguments: parser and token.
define the function validate_integer with an argument value.
substitute token.source for e.django_template_source.
call the LockFileEx function with 5 arguments: hfile, integer 0, integer 0, hexadecimal value FFFF0000, return value of the byref function called with argument overlapped, substitute the result for ret.
substitute complain for insert.
substitute v for value under the k key of self dictionary.
define the method handle with 3 arguments: self, unpacked list app_labels and unpacked dictionary options.
return wrapper.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
if key exists, substitute it for self.key, if not substitute settings.SECRET_KEY for key.
if self.merge and conflicts are both true,
get the attribute '__name__' from the getattr, if it exists substitute it for m, if not, m is None.
old_handler is None.
label is an empty string.
call the method sub_match_dict.update with an argument sub_match.kwargs.
derive the class Operator from the base class TokenBase.
convert bytes to floating point number, substitute it for bytes.
from django.db.migrations import Migration into default name space.
call the method timezone.localize with 2 arguments: value and is_dst as None, return the result.
call the method self.main_help_text with an argument commands_only set to boolean True, append new line to it, write it to sys.stdout.
call to the self.handle_uncaught_exception method with request, resolver and value of the evaluated function sys.exec_info, as the arguments, substitute the result for response.
substitute pos for end_text_pos.
define the method tell with an argument self.
substitute super for _super.
substitute method for value under the funcname key of the dictionary under the klass key of the cls.__dispatch dictionary.
call the function make_middleware_decorator with an argument middleware_class, call the result, return the new result.
try,
call the function ungettext with unpacked dictionary msgs_with_ctxt, substitute the result for result.
call the method self.get_template_sources with 2 arguments template_name and template_dirs, for every filepath in the result,
if template is an instance of list or tuple types,
decorator function register.filter with an argument is_safe set to boolean True.
derive the class IntegerField from the base class Field class.
if best_doublecolon_start equals integer 0,
if the value of the kwargs dictionary under the key k is not equal to v,
derive the class ImproperlyConfigured from the Exception base class.
if over_bytes is true,
call the method os.umask with an argument umask.
if self.message_context is true,
if settings.TEMPLATE_DEBUG is true and origin is None,
create the Singer class with 2 arguments: key appended to string 'django.http.cookies' and salt set to salt, return it.
_fields_ is a list containing 2 tuples: first tuple contains: string 'Offset' and DWORD, second contains: string 'OffsetHigh' and DWORD.
derive the class IncludeNode from the Node base class.
for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
if self.LibraryValueNotFoundException exception is caught,
return out.
define the method add with 2 arguments: self and item.
return self._queryset.
 Failed to install custom SQL for %s.%s model: %s\n" as argument, with all occurrences of '%s' replaced with app_name and model._meta.object_name and e, respectively.
append a tuple with 2 elements: obj and form.changed_data to self.changed_objects.
from django.utils.safestring import mark_safe and SafeData into default name space.
append string '_field' to new_name.
define the function _create_cache with backend and dictionary pair of elements kwargs as arguments.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the function _helper with 2 arguments: sublist_item and tabs incremented by 1, substitute the result for sublist.
call the method self.nodelist.render with an argument context, return the result.
call the function force_text with an argument option_value, substitute the result for option_value.
if value under the 'no_color' key of the options dictionary.
strip value of the first and last element.
if logging_settings is true,
define the method handle_entityref with 2 arguments self and name.
kwargs is a dictionary with elements: config dictionary element under k key for k, for every k in result of function valid_ident, called with an argument k.
for every i in range of integers from 0 to length of result, not included,
call the function re.compile with raw string '(<a [^>]*?)target=[^\s>]+', substitute the result for link_target_attribute_re.
remove dirname from the dirnames.
append 'Z' to time_str, return the result.
decorator function register.filter with an argument is_safe set to boolean True.
call the function cls with 8 arguments: date.year, date.month, date.day, time.hour, time.minute, time.second, time.microsecond, and time.tzinfo, return the result.
if field.help_text is true,
if exclude is true and f.name is contained in exclude,
call the method connection.introspection.table_names, substitute the result for tables.
self._wrapped.
substitute Iterator for create_bound_method.
define the method get with 3 arguments: self, key and default set to None.
if Exception, renamed to e, exception is caught,
substitute TimeInput for widget.
if self.use_argparse is true,
from django.core.management.sql import sql_flush and emit_post_migrate_signal into default name space.
if self.can_import_settings is false,
call the method Encoders.encode_base64 with an argument attachment.
call the method copy.deepcopy with arguments self._choices and memo, substitute the result for result._choices.
django.utils import translation into default namespace.
return an dictionary containing 1 entry: settings.STATIC_URL for 'STATIC_URL'.
decorator stringfilter,
call the method router.db_for_write with argument self.cache_model_class, substitute the result for db.
db_module is a string 'django.db'.
yield nothing.
if VariableDoesNotExist exception is caught,
call the function func with 2 arguments: unpacked list self.__args and unpacked dictionary self.__kw, return the result.
self.active_writers is an integer 0.
if self.verbosity is greater or equal to integer 1.
raise an StopIteration exception.
use global variable _translations.
substitute asvar for self.asvar.
append list containing string '--no-location' to self.msgmerge_options.
define the function comment with 2 arguments: parser and token.
substitute str for string_types.
for every h in handlers,
call the function six.text_type with an argument number, use the result as an argument for the call to the function mark_safe, return the result.
define the method value_from_datadict with 4 arguments: self, data, files and name.
substitute messages.error_list for the value under the field key of the self.error_dict dictionary.
call the method form._get_validation_exclusions, substitute the result for exclude.
return self._body.
call the method self.xml.endElement with an argument string 'field'
TOTAL_FORM_COUNT is a string 'TOTAL_FORMS'.
raise an CommandError with an argument string "errors happened while running msgmerge\n%s", where '%s' is replaced with errors.
missing_args_message is an string "Enter at least one application label.".
if self.sep is not contained in signed_value,
define the method usage with arguments self and subcommand.
call the function os.path.expanduser with an argument pythonrc, substitute the result for pythonrc.
if field.rel.through._meta.auto_created is true,
call the method filed.clean with arguments value and initial, substitute the result for value.
set real_name attribute of the self object to value of real_name attribute of trans object.
raise an TypeError exception with an argument string 'In order to allow non-dict objects to be serialized set the safe parameter to False'.
try,
call the method date.weekday, use the result as an key to obtain the value from the days dictionary, substitute it for dow.
if not.
define the method save with 2 arguments: self and commit set to boolean True.
if value is boolean True,
call the method timezone.normalize with an argument value, substitute the result for value.
match regex time_re with value, substitute the result for match.
return new_key.
return self.cleaned_data.
subtract result of the method self.initial_form_count from i, use the result as an index to get the element from self.initial_extra, substitute it for value under the 'initial' key of kwargs dictionary.
define send_mail funtion with subject, message, from_email, recipient_list, fail_silently set to boolean False,
define the method create_nodelist with an argument self.
if content has an attribute 'temporary_file_path',
raise an ContextPopException.
import module copy.
from __future__ import unicode_literals into default name space.
if self.verbosity is greater or equals to integer 2.
call the method self.normalize_col_name with 3 arguments column_name, used_column_names, is_relation, assign the result to att_name,  params and notes, respectively.
from django.template.base import ALLOWED_VARIABLE_CHARS, BLOCK_TAG_END, BLOCK_TAG_START, COMMENT_TAG_END, COMMENT_TAG_START, FILTER_ARGUMENT_SEPARATOR, FILTER_SEPARATOR, SINGLE_BRACE_END, SINGLE_BRACE_START, TOKEN_BLOCK, TOKEN_COMMENT, TOKEN_TEXT, TOKEN_VAR, TRANSLATOR_COMMENT_MARK, UNKNOWN_SOURCE, VARIABLE_ATTRIBUTE_SEPARATOR, VARIABLE_TAG_END, VARIABLE_TAG_START, filter_re and tag_re.
decrement factor by one.
call the method self._initialize_handlers,
if ImportError exception is caught,
define the function linebreaks with 2 arguments: value and autoescape set to boolean False.
return printable representation of self.dicts.
define the method __len__ with an argument self.
for every form in valid_forms,
convert value to lowercase and return the result.
if not,
otherwise if vale is not an instance of ConvertingTuple and value is an instance of tuple type,
return nothing.
derive the class VariableNode form the base class Node.
call the method self.func with an argument value.
return dec.
substitute value under the f.name key of the error_messages dictionary for value under the 'error_messages' key of kwargs dictionary.
from django.utils.translation import trans_null as trans.
define the method __init__ with 3 arguments: self, value and text.
return id_.
sum length of self.quertset and integer 1 if self.field.empty_label is not None, or integer 0 if not, return the result.
define the private method __str__, with self instance of this class as the only argument.
get the value under the e.code key of the self.error_messages dictionary, substitute the result for e.message.
call the method self.__class__ with an argument list, with 2 elements: key and result of the function copy.deepcopy, called with 2 arguments: value and memo, for every key and value in result for the method self.items, return the result.
call the method notifier.read_events.
if IndexError exception is caught,
if self.initial_forms is false,
call the function warnings.warn with 3 arguments: string "memoize wrapper is deprecated and will be removed in Django 1.9. Use django.utils.lru_cache instead.", RemovedInDjango19Warning and stacklevel set to integer 2.
otherwise if field.rel is true and field.rel is an instance of the models.ManyToOneRel object,
split settings.SETTINGS_MODULE by '.' character, substitute the first element of the result for project_name.
call the function force_bytes with an argument secret, substitute the result for secret.
return state.
raise an ValueError exception with an argument string 'Unable to configure handler %r: %s' formated with name and e.
call the function bytes with an argument value, return the result.
do nothing.
try,
append string "Field renamed because it ended with '_'." to field_notes.
if data is true, substitute it for self.data, otherwise self.data is an empty dictionary.
add ns_pattern and extra, substitute the result for ns_pattern.
if ImportError exception is caught,
if first element of tzinfo equals '-',
call the method __init__ from the base class of the CommandParser class, with unpacked dictionary kwargs as argument.
is self.data has an attribute 'tzinfo' and self.data.tzinfo is true,
call the CacheHandler function, substitute the result for caches.
remove the 'ignorenonexistent' key from the options dictionary, substitute the return value for self.db, if the key doesnt exists substitute boolean False for self.ignore.
substitute RemovedInDjango19Warning for RemovedInNextVersionWarning.
raise an exception.
return an empty string.
from django.utils.regex_helper import normalize into default name space.
call the method self._set with key, pickled and timeout as arguments.
decorator function register.filter with an argument is_safe set to boolean False.
raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' with key converted into a string.
with lock,
requires_system_checks is boolean False.
define the function reverse with 6 arguments: viewname, urlconf set to None, args set to None, kwargs set to None, prefix set to None, current_app set to None.
if BLOCK_CONTEXT_KEY is contained in render_context and call to the method get_block with an argument self.name from the object, under the BLOCK_CONTEXT_KEY key of render_context dictionary dictionary evaluates to be not equal to None,
derive the class MultipleHiddenInput from the HiddenInput base class.
raise an ValueError exception with an argument string 'Unable to configure logger %r: %s' formated with name and e.
if ValidationError renamed to e, exception is caught,
do nothing.
substitute first element of row for column_name.
call the method translation._info.copy, substitute the result for self._info.
from django.utils import six into default name space.
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
if id_ is true,
import module codecs.
get the value under the self.name key of the self.form.initial dictionary, if it exists, substitute it for data, if not, substitute self.field.initial for data.
for dirname in dirs,
substitute WSGIServer for httpd_cls.
from django.conf import settings into default name space.
try,
substitute self for value under the 'block' key of context dictionary.
self.models is an empty set.
call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.
if not,
derive the class DateTimeField from the base class BaseTemporalField class.
call the method cursor.execute with string "SELECT COUNT(*) FROM %s" as argument, substitute the '%s' with table.
choices is an property object of this class where _get_choices is a getter and _set_choices is a setter function.
import module subprocess.
from django.conf import settings into default name space.
help is a string 'Discover and run tests in the specified modules or the current directory.'.
define the method clear with argument self.
define the method handle with arguments self, unpacked list app_labels and unpacked dictionary options.
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
call the function token_kwargs with 3 arguments: remaining_bits, parser and support_legacy set to boolean True, substitute the result for extra_context.
call the method parser.add_option with 2 arguments: string '--settings' and help as a string 'The Python path to a settings module,  e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.'
append work_file to string '#: ', substitute it for old.
import module datetime.
if self.connection is false,
call the function dict with an argument tuple with 2 elements: o.pk and o, for every o in result of the method self.get_queryset, substitute the result for self._object_dict.
if domain is true and return value of the function validate_host called with 2 arguments: domain and settings.ALLOWED_HOSTS, evaluates to true,
raise an TemplateSyntaxError exception with an argument string "expected another tag, found end of string: %s", where '%s' is replaced with subject.
return self.
define the method __repr__ with an argument self.
define the method get_nodes_by_type with 2 arguments: self and nodetype.
self.render_context is a instance of RenderContext class.
try,
call the method logging.Filter with an argument name, substitute the result for result.
if not,
_upload_handlers is an empty list.
define the function parse_http_date_safe an argument date.
define the function humanize with an argument dirname.
call the method formats.number_format with 2 arguments: number and absolute value of p, use the result as an argument for the call to the mark_safe function, return the result.
if block is None,
substitute value under name key of logging._handlers dictionary for handler.
call the function re.compile with 2 arguments: raw string '<.*?>|((?:\w[-\w]*|&.*?;)+)' and bitwise OR performed with 2 operands, re.U and re.S, substitute the result for re_words.
if use_reloader is true,
call the function datetime with an argument unpacked list kw, return the result.
return an empty string.
if app_config.models_module is None,
from django.utils.timezone import template_localtime into default name space.
define the function catalog.
define the method __str__ with argument self.
substitute namespace for self.namespace.
__all__  is a tuple containing 4 strings: 'Template', 'Context', 'RequestContext' and 'compile_string'.
if ':' is not contained in ip_str.
import module json.
substitute TemplateSyntaxError for error_class.
import module os.
call the method states.items, for every state and rules in the result,
call the method parser.delete_first_token.
define the method _get_closed with argument self.
call the function sanitize_address with arguments email_message.from_email and email_message.encoding, substitute the result for from_email.
raise an CommandError exception, with an arguent: string "App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations.", where '%s' is replaced for app_config.label.
page_range is a property object with _get_page_range as a getter method.
define the function int_to_base36 with an argument i.
return value.
for every f in opts.fields,
from importlib import import_module into default name space.
if NotImplementedError exception is caught,
substitute i-th element of value for field_value.
from django.template import Lexer, TOKEN_TEXT, TOKEN_VAR, TOKEN_BLOCK, TOKEN_COMMENT and TRANSLATOR_COMMENT_MARK.
if value is true,
if value under the 'description' key of the item dictionary is not None,
call the method self.prepare_value with an argument initial_value, use it as the argument for the call to the function force_text, if the result is equal to the result of the call to the function force_text with data_value as an argument, return boolean True, otherwise return boolean False.
for every i and widget in enumerated iterable self.widgets,
if http_cookies.CookieError exception is caught,
if not,
return value under the name key of the data dictionary, if it doesnt exists, return None.
from lib2to3.pytree import Leaf and Node into default name space.
floor the division of i by j, use it an an index to get the element of the digits list, append the result for base36.
from email.utils import formatdate,  getaddresses,  formataddr and parseaddr into default name space.
define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
from django.core.files import locks into default name space.
validate_comma_separated_integer_list is a instance of a RegexValidator class, created with 3 arguments: comma_separated_int_list_re, return value of the call to the function _ with an argument string 'Enter only digits separated by commas.' and string 'invalid'.
return None.
from django.core import signals into default name space.
substitute kwargs for self.kwargs.
call the method widget_attrs from the base class of the class CharField, with an argument widget, substitute the result for attrs.
return result.
define the method end_object with arguments self and obj.
otherwise if auto_id is true,
call the method parser.parse, return the result.
if self.settings_exception is not None,
if self._cull_frequency equals to integer 0.
substitute charset for self.encoding.
import module sys.
if remaining_bits is true,
if TypeError or ValueError exceptions are caught,
insert mw_instance.process_exception at the beginning of self._exception_middleware.
join elements of tags into a string, separated with '|', format string '(%s)' with it, substitute the result for tags_re.
return s.
call the method middleware.process_exception with 2 arguments: request and e, substitute the result for result.
from django.core.serializers import base into default name space.
raise an TemplateSyntaxError exception with an argument string "'%s' takes one argument", where '%s' is replaced with first element of bits.
substitute messages for self.error_messages.
self.vals is an empty list.
substitute package.__path__ for package_path.
if self.required is true and value is false,
if value is contained in self.empty_values,
call the method msgs.decode with an argument string 'utf-8', substitute it for msgs.
_urllib_parse_moved_attributes is a list with 16 elemetns, all of them are the results of the call to the function MovedAttribute with different 3 string arguments.
call the function _trans.get_language_bidi, return the result.
substitute greater element between integer 0 and end decremented by one for last.
for every i and handler in enumerated iterable handlers,
define the method enter_command with 3 arguments: self, command and token.
return an empty string,
try,
decorator function wraps with an argument fdel.
return func.
translation._catalog is an empty dictionary.
if os.path.sep is contained in fixture_name,
if not_installed_models is true,
import module logging.
raise CommandError exception with string "The %s file has a BOM (Byte Order Mark). Django only supports .po files encoded in UTF-8 and without any BOM.", with '%s' replaced with po_path, as argument.
if objects_in_fixture equals integer 0,
substitute e for message.
yield line.
define the function get_bytes_from_wsgi with environ, key and default as arguments.
get type of self, call it and substitute the result for result.
call the method parser.add_argument with 5 arguments: string '--tag', string '-t', action set to string 'append', dest set to string 'tags' and help set to string 'Run only checks labeled with given tag.'.
return self.__offset.
raise an ValueError with an argument string "'%s' has no field named '%s'.", with '%s' replaced with self.__class__.__name__ and field, respectively.
if instance.pk is None,
do nothing.
call the method token.split_contents, substitute the result without the first element for bits.
decrement l by integer 1, multiply it with hlen, subtract the result from dklen, substitute the result for r.
if field equals NON_FIELD_ERRORS and opts.error_messages is true and NON_FIELD_ERRORS is contained in opts.error_messages,
from django.core.serializers.python import Serializer as PythonSerializer into default name space.
if vary_on is None,
import module re.
call the method self.sequence.resolve with 2 arguments: context and boolean True, substitute the result for values.
define the function flatten_result with an argument source.
define the initialization method __init__ with self class instance and environ as arguments.
from django.utils import datetime_safe into default name space.
from django.utils.safestring import mark_safe into default name space.
define the function regroup with 2 arguments: parser and token.
if name equals string "_wrapped",
call the function reverse with 4 arguments: view_name, args as args, kwargs as kwargs and current_app as context.current_app, substitute the result for url.
from yaml import SafeLoader, SafeDumper into default name space.
remove the first element of value under the name key of self.blocks dictionary, return it.
if handler has an attribute 'file',
if filename is not contained in _mtimes,
msg is an string "Unclosed tag '%s'. Looking for one of: %s ", where '%s' is replaced with command, and elements of parse_until joined into a string, separated by string ', '.
if site is contained in sites1,
yield and empty string as the result.
if value is true,
call the function lazy with arguments reverse and str, substitute the results for reverse_lazy.
self.error_class is a string 'errorlist'.
call the function warnings.warn with 2 arguments: string "Custom SQL location '<app_label>/models/sql' is deprecated, use '<app_label>/sql' instead." and RemovedInDjango19Warning.
otherwise if intrans is true,
substitute chr for unichr.
call the method s.find with an argument bytes string ';', substitute the result for end.
substitute node.source for e.django_template_source.
if not,
call the method self.add_root_elements with an argument handler.
substitute skipped for model_dependencies.
if self.verbosity is greater or equal to integer 1,
if string 'help' is contained in options,
call the function allow_lazy with 2 arguments: get_valid_filename and six.text_type, substitute the result for get_valid_filename.
encoding.setter decorator,
if root is true,
try,
join dirpath and filename into path, use it as an argument for the call to the function os.path.normpath, substitute it for file_path.
try,
define the method as_ul with an argument self.
from django.utils import six into default name space.
call the method token.split_contents, substitute the result for bits.
if self has an '_get' attribute,
call the method self.as_widget with 3 arguments: instance of a class TextInput, attrs and unpacked dictionary kwargs, return the result.
define the method __setitem__ with 3 arguments: self, kay and value.
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
if match is true,
derive the class TemplateCommand from the BaseCommand base class.
call the function reloader with wrapped_main_func, args and kwargs as arguments.
for every app_config and model_list in app_list,
if self.forms is true,
if return values of the function force_text called two times with 1 argument, with value, and with orig, are equal,
substitute self.var for obj.
if buffer_ is not None,
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary, code set to an string 'invalid_choice' and dictionary params with an entry: value for 'value'.
if AttributeError exception is caught,
if value under the 'setting' key of the kwargs dictionary is equal to string 'LANGUAGES' or strnig 'LANGUAGE_CODE',
define the function get_ns_resolver with arguments ns_pattern and resolver.
if self.body is true,
call the method field_stream.read, substitute the result for data.
call the self.set method with key, new_value and version set to version as arguments.
_assertRaisesRegex is a strnig "assertRaisesRegex".
try,
kwargs is an dictionary, populated for every k and v in result of the method self.kwargs.items with: result of the call to the method v.resolve with an argument context, for result of the function smart_text called with 2 arguments k and string 'ascii'.
if os.name equals to 'nt',
call the function force_bytes with arguments value and self._charset, return the result.
from django.utils.six.moves import zip into default name space.
internal_use_only is boolean True.
from django.apps import apps into default name space.
substitute error.message for message.
self._read_started is boolean True.
sites is an empty list.
from django.conf import settings into default name space.
if elt is an instance of Group class,
define the function constant_time_compare with 2 arguments: length set to integer 12,
yield and empty string as the result.
is_usable is boolean True.
from django.utils.encoding import force_text into default name space.
if self.to_field is true,
return None.
from wsgiref import simple_server into default name space.
if not,
value under the 'debug' key of the context_extras dictionary is boolean True.
split t.contents by '|' symbol, substitute the result for parts,
input_type is a string 'radio'.
increment self.position by length of output.
if want_unicode is true,
for every form in self.saved_forms,
if TemplateSyntaxError, renamed to e, exception is caught,
substitute self.toks for toks.
from django.conf import settings into default namespace.
call the function random.choice with an argument allowed_chars, for every i in range of integers from 0 to lengths, join the results into a string, return it.
remove first 7 elements form template.
property decorator,
create directories from the elements in filename.
define the function length with an argument value.
if directory is not an directory,
call the function _urlize with 3 arguments: value, nofollow set to boolean True, autoescape set to autoescape, use the result as an argument for the call to the function mark_safe, return the result.
updates is an empty dictionary.
get translation_function attribute of the _default object, call the result with 3 arguments: singular, plural and number, return the result.
if fname doesnt start with self._dir and fname file path doesnt exists,
append string '.moves' to __name__, use it as an argument to instantiate _MovedItems class, assign it to moves, and to value under the '.moves' appended to __name__ key of the sys.modules dictionary.
if value is false or for every v in value every v is contained in self.empty_values,
skip this loop iteration,
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'table_name', nargs set to '*' character, and help set to a string 'Optional table names. Otherwise, settings.CACHES is used to find cache tables.' .
join to_path and name into a valid system path, substitute the result for filename.
TOKEN_TEXT is integer 0
open writer.path file in write mode, with the file descriptor as fh, perform the following,
tried_modules is an empty list.
substitute lookup_view for original_lookup,
define the function _add_doc with 2 arguments: func and doc.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
try,
define the function linebreaksbr with 2 arguments value and autoescape set to None.
return nodelist.
call the method self._archive.list.
if data is not None or files is not None, self.is_bound is boolean True, otherwise it is boolean False.
for every node in self.nodelist_loop,
if url starts with '///',
if not,
if method self.validate_domain_part with an argument domain_part evaluates to true,
if not,
call the method self.merge with an argument translation.
if app_config.models_module is None or app_config is contained in excluded_apps
if timezone is None,
define the method set_many with 4 arguments: self, data, timeout set to DEFAULT_TIMEOUT and version set to None.
value under the 'primary_key' key of the extra_params dictionary is boolean True,
raise an DisallowedRedirect exception with an argument string "Unsafe redirect to URL with protocol '%s'", where '%s' is replaced with parsed.scheme.
call the method datetime.datetime.strptime with 2 arguments: return value of the function force_str called with an argument value, and input_format, substitute the result for v.
if LookupError exception is caught,
if stream_or_string is an instance of six.string_types type.
try,
for every key_value in related,
return the value under the language_code key of the self._app_dict dictionary.
call the function self.path with argument name, use the result as an argument for the call to the function os.path.getctime, use the result as an argument for the call to the function datetime.fromtimestamp, return the result.
if target_app_labels_only is true,
call the function new_method_proxy with an argument operator.setitem, substitute the result for __setitem__.
call the function six.StringIO with an argument stream_or_string, substitute the result for self.stream.
params is a dictionary with 2 initial entries: self.limit_value for 'limit_value' and cleaned for 'show_value'.
return self.data.day.
define the method __repr__ with an argument self.
_meta is class Options class instance initialized with table argument.
USE_INOTIFY is boolean False.
integer_types is a tuple with 2 elements int and long.
return self.data.hour.
if self.current_token is not EndToken,
raise an TypeError with an argument string "The argument `field` must be `None` when the `error`argument contains errors for multiple fields.".
call the function _trans.activate with an argument language, return the result.
if self doesnt have an '_body' attribute,
if value is an instance of six.string_types and value is not equal to ALL_FIELDS,
raise an ExternalReferenceForbidden exception with arguments context, base, sysid and pubid.
call the function fastcgi_help with an argument string "ERROR: Implementation must be one of prefork or thread.", return the result.
message_context is None.
if maxsize equals integer 0,
call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
return boolean False.
substitute length for self._remaining.
call the function re.compile with 2 arguments: raw string '<%s(/?>|(\s+[^>]*>))' formated with tags_re and re.U, substitute the result for starttag_re.
if hextet converted to hexadecimal number is smaller than hexadecimal 0, or hextet converted to hexadecimal number is smaller than hexadecimal FFFF,
call the method self._stream.read with an argument integer 1, substitute the result for unused_char.
substitute return value of call to the function _set_response_etag with response as an argument, for response.
call the function tempfile.mkdtemp, substitute the result for tmpdir.
args is an empty list.
if name is contained in existing,
for every form in valid_forms,
define the method execute with 3 arguments self, unpacked list args and unpacked dictionary options.
call the method urlresolvers.set_urlconf with urlconf as the argument.
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
split content by newline character, for every line in result,
convert value, self.sep and return value of the function timestamp, concatenate them, substitute the result for value.
try,
define the method send_messages with arguments self and email_messages.
if data is true, substitute it for self.data, if not self.data is an empty dictionary.
data is None.
define the method namespace_dict with an argument self.
if _file is None,
_empty_value is None.
cached_property decorator,
substitute nonlocal_root for tuple root.
raise KeyError exception with an argument key.
for every ch and escaped in input_iter,
if number is an integer and use_grouping is false and decimal_pos is false,
help is a string, containing "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed.".
raise an KeyError with an argument string 'Unknown media type "%s"', where '%s' is replaced with name.
from email.mime.multipart import MIMEMultipart into default name space.
raise an CommandError exception with an argument string 'Unknown model in excludes: %s', where '%s' is replaced with exclude.
derive the class MIMEMixin.
call the method signing.get_cookie_signer with an argument salt set to sum of key and salt, call the method unsign on the result, with arguments cookie_value and max_age set to max_age.
call the method models.signals.pre_syncdb.send with 6 arguments: sender set to app_config.models_module, app set to app_config.models_module, create_models set to create_models, verbosity set to verbosity, interactive set to interactive, and db set to db.
define the method L with an argument self.
derive the class DefusedXmlException from the ValueError base class.
call the method self._coerce with an argument value, return the result.
call the method __new__ with an argument cls from the base class of the klass function.
convert items of attrs dictionary to list of tuples, for every attr and value in it,
append opts.virtual_fields to opts.many_to_many, for every f in the result,
if data is an instance of datetime.datetime or datetime.time classes, and supports_microseconds field of self.field.widget is false,
define the function is_valid_path with arguments path and urlconf set to None.
if not,
return boolean upload.
if log is contained in child_loggers,
from django.utils import iri_to_uri, force_bytes, force_text to the default name space.
substitute all_locales for locales.
define the method clean with arguments self and value.
derive the class ModelChoiceIterator from object base class.
if f is an instance of ManyToManyField,
substitute value for self.value.
append cleaned_lien to statement.
return usage.
return a string "<DjangoTranslation lang:%s>", where '%s' is replaced with self.__language.
if not,
define the serialize content with an argument self.
help is a string "Checks the entire Django project for potential problems.".
if matches is false,
__all__ is a tuple containing strings: 'LOCK_EX', 'LOCK_SH', 'LOCK_NB', 'lock' and 'unlock'.
from django.utils.encoding import force_str and force_text into default name space.
while model_dependencies is true,
for every key and value in items of other_dict dictionary,
if required is true and initial is not None,
get the value under the 'boundary' key of the opts dictionary, substitute it for boundary.
loaded_objects_in_fixture is integer 0.
call the method bytes_to_text with 2 arguments: default and self.encoding, substitute the result for default.
def initialization method __init__ with self class instance, stream, limit and buf_size set to integer value of the product 64*1024*1024.
OPERATORS is an dictionary with 12 initial entries: result of the function inflix called with 2 arguments, integer 6, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) or y.eval(context) is True, for 'or', result of the function inflix called with 2 arguments, integer 7, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) and y.eval(context) is True for 'and', result of the function prefix called with 2 arguments, integer 8, and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is True for 'not', result of the function inflix called with 2 arguments, integer 9, and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is contained in y.eval(context) for 'in', result of the function inflix called with 2 arguments, integer 9, and lambda function with 2 arguments context and x, returns boolean True if x.eval(context) is not contained in y.eval(context), for 'not in', result of the function inflix called with 2 arguments, integer 10, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '=', result of the function inflix called with 2 arguments, integer 10, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) equals y.eval(context) for '==', result of the function inflix called with 2 arguments, integer 10, and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) doesnt equals y.eval(context) for '!=', result of the function inflix called with 2 arguments, integer 10 and, lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is greater than y.eval(context) for '>', result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is greater than or equal to y.eval(context) for '>=', result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is smaller than y.eval(context) for '<', result of the function inflix called with 2 arguments, integer 10 and and lambda function with 3 arguments context, x and y, returns boolean True if x.eval(context) is smaller than or equal to y.eval(context) for '<=',
try,
call the method field_params.update with an argument new_params.1
define the method has_changed with an argument self.
asvar is None.
for every name in bits from the start index 1 to the end index negative 2,
defaults is a dictionary with 4 entries: data for 'data', files for 'files', auto_id for 'auto_id' and prefix for 'prefix'.
if InputStreamExhausted exception is caught,
call the function ungettext with 3 arguments: singular, plural and number, return the result.
if number is lesser than integer 1,
for key and value in return value of the six.iterlists function called with an argument self,
try,
call the initialization method with argument params for the base class of the BaseMemcachedCache class.
define the method get_default_prefix with an argument cls.
return an empty dictionary.
return value.
define the function iteritems with 2 arguments: d and unpacked dictionary  kw.
substitute app_namefor command.
field_dict is an instance of OrderedDict class, created with an argument field_list.
substitute warning for self.warning.
if eather of settings.USE_I18N or settings.USE_L10N is True, set is_accept_language_redundant to True.
if length of app_labels is equal to integer 1,
run_syncdb is boolean True.
define the method __str__ with an argument self.
substitute i for self.pointer.
define the method update with 2 arguments: self and dict_.
default_error_messages is an dictionary with 5 initial entries: return value of the function _ called with an argument string, "No file was submitted. Check the encoding type on the form." for 'invalid', return value of the function _ called with an argument, string "No file was submitted." for 'missing', return value of the function _ called with an argument "The submitted file is empty.", for 'empty', return value of the function ungettext_lazy called with 3 arguments: string 'Ensure this filename has at most %(max)d character (it has %(length)d).', string 'Ensure this filename has at most %(max)d characters (it has %(length)d).' and string 'max' for 'max_length', and return value of the function _ called with an argument string, 'Please either submit a file or check the clear checkbox, not both.' for 'contradiction'.
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
for every app_config in app_configs,
substitute sys.platform for plat.
if value is not None,
import module time.
define the function sql_flush with 4 arguments: style, connection, only_django set to boolean False,
derive the class ModelFormOptions from object base class.
from __future__ import absolute_import into default name space.
derive the class SafeText from six.text_type and SafeData base classes.
if value under the 'unique_id' key of the item dictionary is not None,
derive the class RadioSelect from the RendererMixin and Select base classes.
def _get_post method with self class instance as the argument.
call the method self.total_form_count, for every i in sequence of integers, from 0 to the previous result,
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
call the method pending_references.setdefault with 2 arguments: refto and an empty list, extend the result with refs.
if value is an instance of six.string_types,
from django.db import connections and transaction into default name space.
MEMCACHE_MAX_KEY_LENGTH is integer 250.
if locales is true,
substitute value under the field key of the self.fields dictionary for form_field.
increment weight by integer 2.
if response.streaming is boolean False,
if self.verbosity is greater or equal to 3, call the self.stdout.write method with string "
self.resolver_match is None.
define the method __eq__ with arguments self and other.
from django.template.base import Origin,  Template,  Context and TemplateDoesNotExist into default name space.
from __future__ import unicode_literals into default name space.
delete _urlconfs.value.
increment res by element of to_digit at the digit index.
call the method self.filter with 3 arguments: name, func and unpacked dictionary flags.
define the method __str__ with an argument self.
call the function _add_doc with 2 arguments: reraise and string """Reraise an exception.""".
if VariableDoesNotExist exception is caught,
derive the class RegexURLPattern with LocaleRegexProvider as base class.
return template and None.
return self._request.
ISO_8859_1 is a string 'iso-8859-1', UTF_8 is a string 'utf-8'.
append self.data.day to the value under the self.data.month key of the self.year_days dictionary, substitute the result for doy.
if val is None,
replace every occurrence of '\t' in s with '\\t'.
do nothing.
define the method handle_app_config with self class instance, app_config and dictionary options as arguments.
call the method widget.render with 3 arguments: name, return value of the method self.value, attrs set to attrs, use it as an argument for the call to the function force_text, return the result.
define the method process with 3 arguments: self, command and domain.
import module zipfile.
raise an exception.
if IndexError exception is caught,
define method readline with self class instance and size set to None.
return d.
call the self.setup_environ method.
return an empty string.
otherwise if first element of second row of args equals a string '3',
split first element of args by ',', convert separated elements to strings, substitute the first 2 elements of the result, for second and third element of args, respectively.
define the method reader with an argument self.
if neg is true,
if length of s is greater than integer 13,
define the method __repr__ with an argument self.
call the method (hidden_widget.value_from_datadict with 3 arguments: self.data, self.files and initial_prefixed_name, use the result as an argument for the call to the field.to_python method, substitute the result for initial_value.
if self.timeout is not None,
define the method __ne__ with self and other as arguments.
open err_log file in append mode with buffering size of the input buffer, substitute the result for sys.stderr.
define the funtion _generate_cache_header_key with key_prefix and request as arguments.
append string 'AutoField?' to comment_notes.
derive the class BooleanField from the base class Field class.
call the method formats.get_format_lazy with an argument string 'DATETIME_INPUT_FORMATS', substitute the result for input_formats.
if not,
join top_dir and relative_dir into a file path, substitute it for target_dir.
bits is an empty list.
call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
if arg is None
self.second is None.
call the function original_urlencode with 2 arguments: list with 2 elements: result of the function force_str with an argument k, and list with results of the function force_str with an argument i, for every i in v, only if v is a list or a tuple, otherwise second element is result of the function force_str with an argument v, for every k and v in query, and doseq, return the result.
define the method resolve_variable with 2 arguments: path and context.
self._post is an instance of QueryDict class, created with an empty string and mutable set to boolean True.
call the function mark_safe with an argument value, return the result.
return None.
substitute prefix for _prefixes.values.
define the function import_module with 3 arguments: name and package set to None.
do nothing.
set response to None.
call the method value_from_datadict from the base class of the class ClearableFileInput, called with 3 arguments: data, files and name, substitute the result for upload.
return a string 'Raw content'.
call the BaseConverter function with BASE62_ALPHABET as argument, store the result in base62.
read file fp, substitute the read data for output.
empty is an instance of object class.
call the function is_valid_ipv6_address with an argument value, if it evaluates to false,
try,
if prefix is true, substitute it for self.prefix, otherwise call the method self.get_default_prefix, and substitute the result for self.prefix.
call the function ugettext with an argument string "Please correct the duplicate values below.", return the result.
define the method _has_changed with arguments self, data and initial.
import module copy.
call the function data with 3 arguments: d.year, d.month and d.day, return the result.
if Exception, renamed to e, exception is caught,
try,
do nothing.
value is boolean True.
if not,
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the item dictionary.
decrement number by one, multiply it with self.per_page, substitute the result for bottom.
call the function constant_time_compare with 2 arguments: sig and return value of the self.signature method with an argument value,  if it evaluates to true,
do nothing.
define the function make_middleware_decorator with an argument middleware_class.
substitute takes_context for self.takes_context.
call the method os.path.splitext with an argument self.file, assign the result to _ and file_ext.
raise an AttributeError exception.
try,
call the function all_locale_paths, for every path is the result,
for every chunk in return value of the method self.chunks,
self.regexes is an empty dictionary.
call the function ugettext_lazy with an argument string 'Currently', substitute the result for initial_text.
for every i in sequence of integers from 0 to result of the method self.total_form_count, call the method self._construct_form, with an argument i, append the result to a list, substitute the resulting list for forms.
from django.utils import six into default name space.
split str_number by '.', substitute the result for int_part and dec_part, respectively.
make a system symbolic link between original_path and symlink_path.
call the method now.replace with the argument microsecond set to integer 0, substitute the result for now.
define the method __iter__ with an argument self.
call the method parser.add_argument with 5 arguments: string '--extension', string '-e', dest set to string 'extensions', help set to a string 'The file extension(s) to examine (default: "html,txt", or "js" ' 'if the domain is "djangojs"). Separate multiple extensions with commas, or use -e multiple times.' and action as a string 'append'.
return results.
call the function sql_indexes with app_config, self.style and connection as arguments, store the result in statements.
taglib_module is an string '%s.%s', where '%s' is replaced to module and library_name.
if 'class' is contained in attrs,
if ',' is contained in second element of args,
if data is contained in self.children,
if pytz is true, substitute pytz.utc for utc, otherwise substitute result of the function UTC for utc.
if hmac has an attribute "compare_digest",
if sys.platform starts with string 'java',
FASTCGI_OPTIONS is a dictionary containing 16 initial entries: 'fcgi' for 'protocol', None for 'host', None for 'port',
call the method new_file from the base class of the TemporaryFileUploadHandler class with arguments: file_name, unpacked list args and unpacked dictionary kwargs.
if use_func is true,
call the method self._callback_strs.add with an argument lookup_str.
call the function datetime_safe.new_datetime with an argument date, on the result call the method strftime with an argument, string '%Y-%m-%d', convert the result into a string and append it to ',', substitute the result for d.
call the method self.target.resolve with 2 arguments: context and boolean True, substitute it for obj_list.
call the method match.group with an arugument name, substitute the result for toktext.
try,
while i is smaller than list_length,
substitute the value under the 'SERVER_NAME' key of the self.META dictionary, substitute it for host.
define the method get_queryset with an argument self.
substitute state for self.state.
finally perform,
return boolean True if self.level is greater than or equals to ERROR, otherwise return boolean False.
call the function next_space_index with 2 arguments subject and i, substitute the result for i.
output is an empty list.
from django.utils import six into default name space.
if node is not an instance of TextNode,
raise an ValueError exception with string "Key '%s' not found" as argument, substitute '%s' for key.
from django.utils.http import urlquote into default name space.
if value under the 'DJANGO_SETTINGS_MODULE' key of os.environ dictionary exists.
define the function salted_hmac with 3 arguments: key_salt, value and secret set to None.
call the method parser.add_option with 3 arguments: string '--traceback', action set to a string 'store_true', and help set to string 'Raise on exception'.
return an empty string and an empty string.
call the __init__ method of the base class of the QueryDict class.
append t.contents to comment.
if expires is an instance of datetime.datetime class,
append name to exclude.
derive the class Parser form the base class object.
return the first element of the return value of the call to the self._det_image_dimensions method.
call the method value.replace with an argument tzinfo as timezone, return the result.
exit program with code integer 0.
join into a string permitted_methods, separated by string ', ', substitute it for value under the 'Allow' key of the self dictionary.
if config dictionary value under 'version' key is not equal to integer 1,
if length of app_labels equals integer 0,
if field_name is false,
define the method save, with 3 arguments: self, save_m2m set to boolean True and using set to boolean True.
substitute value under the unique_for key of form.cleaned_data dictionary for date.
return an empty string,
for every x in sequence of integer from integer 0 to length of data, append an empty string to a list, substitute the resulting list for initial.
from __future__ import unicode_literals into default name space.
return result.
call the method __init__ with 2 arguments: self.states and string 'reg' from the base class of the class JsLexer.
_iterkeys is a string "iterkeys".
call the method parser.compile_filter with an argument, second element of bits, substitute the result for val1.
call the method self.handle_starttag, with tag and attrs as the arguments.
try,
if self.connection_reset is true,
register.tag decorator,
call the os.path.splitex with argument name, assign the result to name and ext, respectively.
for every i and tuple containing 2 elements: seconds and name, in enumerated chunks,
got_request_exception is a instance of a Signal class, created with an argument providing_args as the list containing string 'request'.
decimal_digits is a string '0123456789'.
return errors.
decrement nesting by one.
return boolean True if tag is contained in self.tags_available method return value, return False otherwise.
define the function get_image_dimension with file_or_path and close set to boolean False as the arguments.
do nothing.
derive the class BaseForm from the base class object.
from django.utils.functional import lazy into default name space.
return boolean True.
format self.day_field string with name, use it as the key for the data dictionary, substitute the result for d.
if leading is true,
self._unget_history is an empty list.
if basedirs is empty,
if 'args' is contained in options,
take a tuple with 2 elements: boolean False and instance of Variable class, created with an argument constant_arg, append it to args.
write output to self.stdout stream.
return self.content
append template_dir to app_template_dirs.
define the function camel_case_to_spaces with an argument value.
value is None.
call the method fp.write with an argument msgs.
field_type is a string 'TextField'.
convert value and arg into a integers, return their sum.
resource_string is None.
call the os.umask function with argument old_umask.
define the method __setitem__ with arguments self, name and val.
derive the class BaseInlineFormSet from the BaseModelFormSet base class.
call the os.path.splitext with argument file_name, assign the result to the file_root and file_ext respectively.
if other is an instance of self.__class__ and, self.limit_value equals to other.limit_value, and self.message equals to other.message, and self.code equals to other.code, return boolean True, otherwise return boolean False.
get 'exclude' attribute from the options object, if it exists substitute it for self.exclude, if not self.exclude is None.
from django.conf import settings into default name space.
if TypeError, AttributeError, KeyError or ValueError exceptions are caught,
substitute target_var for self.target_var.
call the method connection.creation.create_test_db with verbosity set to verbosity, autoclobber set to inverse value of interactive, serialize set to boolean False, substitute the return value for db_name.
remove item from self dictionary.
sign is a string '-'.
call the method datetime.datetime.strptime with 2 arguments: result of the function force_str called with an argument value, and format, call the method date on the result, return the result.
tags is a list containing results of the function re.escape with an argument tag, for every tag in tags split into words.
if string '__str__' is not contained in __dict__ field of klass,
loop_dict and value under the 'forloop' key of the context dictionary are dictionaries with an entry: parentloop for 'parentloop'.
call the function runfastcgi with an argument args.
evaluate the method self._cache.decr with key and negative delta as arguments, return the result.
if return value of the self.is_secure method is true and server_port is not equal to string '443', if return value of the self.is_secure is false and server port is not equal to string '80',
convert var into an floating point number, substitute it for self.literal.
append string "Field renamed because it wasn't a valid Python identifier." to field_notes.
define the function do_block with 2 arguments parser and token.
yield v.
raise an ContentNotRenderedError exception with an argument string 'The response content must be rendered before it can be pickled.'.
max_num is integer 1.
call the method threading.RLock, substitute the result for self._lock.
get the value under the field key of the html dictionary, append it to output.
instantiate RelatedObject class with 3 arguments: cls.fk.rel.to, cls.model and cls.fk, call the method get_accessor_name on the result, substitute all occurrences of '+' in the result with an empty string, return it.
append f.name to exclude.
define the method __copy__ with an argument self.
if self.verbosity is grater than, or equal to integer 2,
if KeyError exception is caught,
join management_dir and string 'commands' into a file path name, substitute it for command_dir.
define the function m2m_convert with an argument value.
input_type is a string 'url'.
call the method objects.using with an argument using, call the method order_by on the result with an argument model._meta.pk.name, substitute the result for queryset.
otherwise if bytes is smaller than PB,
remove entry under 'render' key of the kwargs dictionary and substitute it for renderer, if the key doesnt exists, renderer is None.
try,
if self.use_natural_foreign_keys is true and field.rel.to has an 'natural_key' attribute.
define the function templatize with 2 arguments: src and origin set to None.
call the method parser.add_argument with 6 arguments: string '--name', string '-n', dest set to string 'files', action set to string 'append', default as an empty list and help set to a string: 'The file name(s) to render. Separate multiple extensions with commas, or use -n multiple times.'.
call the method self.handle_startendtag with tag and attrs as the arguments.
from django.core.serializers.python import Deserializer as PythonDeserializer into default name space.
define the method encoding with an argument self.
append tuple with 2 elements: command and token.source, append the result to self.command_stack.
substitute self.files for value under the 'files' key of the defaults dictionary.
bitwise shift integer 1 to the left by 31 spaces, substitute integer 1 from the result, convert the result to a integer, substitute it for MAXSIZE.
if field.rel is true and field.rel is an instance of models.ManyToManyRel,
define the function allow_lazy with 2 arguments: func and unpacked list resultclasses.
define the method initial_form_count with an argument self.
from __future__ import unicode_literals into default name space.
format string '&%s;' with name, append it to self.fed.
call the method app_list.setdefault with 2 arguments app_config and an empty list, substitute the result for app_list_value.
contains_nontext is boolean False.
queryset is an property object of this class, with _get_queryset getter and _set_queryset setter functions.
register.tag decorator,
if not,
define the method reader_enters with an argument self.
call the method base64.urlsafe_b64encode with an argument s, on the result call the strip function with '=' as the argument, return the result.
append tuple containing two entries: k and integer 1 to options, for every k in FASTCGI_OPTIONS.
call the method self._update_unget_history with length of bytes as an argument.
if keys is true,
for every app_config in reversed list created out of the return value of the function apps.get_app_configs,
call the method self.parent_widget.render with unpacked list args as an argument, return the result.
import module operator.
if formatter is true,
call the method time_str.decode with an argument string 'utf-8', substitute the result for time_str.
for every k and v in return value of the function defaults.items,
substitute self.closed for close.
define the function default_key_func with 3 arguments, key, key_prefix and version.
if options.settings is true,
from django.utils.six.moves import xrange into default name space.
buffer_types is a tuple with 3 elements: bytes, bytearray and memoryview.
if node is not an instance of ExtendsNode,
define the function parse_accept_lang_header with an argument lang_string.
call the get_serializer function with an argument format, call the return value object and substitute it for s.
TRAILING_PUNCTUATION is a list with 7 elements: '.', ',', ':', ';', '.)', '"' and '\''.
call the method self._find_boundary with 2 arguments: chunk and boolean if length of chunks is lesser than self._rollback, or boolean False if not, substitute the result for boundary.
substitute msg for self.msg.
otherwise, get the 'alters_data' attribute of current object, if it exists and is true,
if field is not contained in self.errors,
call the method self.clear_cdata_mode.
substitute post for self._post.
_templatetags_modules is an empty list.
from django.db import models into default namespace.
try,
substitute exclude for value under the 'exclude' key of attrs dictionary.
call the function _ with an argument string 'midnight', return the result.
call the function _trans.deactivate, return the result.
define the function model_to_dict with 3 arguments: instance, fields set to None and exclude set None.
substitute start for upto.
substitute queryset for self.queryset.
define the method decompress with 2 arguments: self and value.
for every s in strings, call the function force_text with an argument s, join the results in a string, return the result.
call the DefaultStorage method, substitute the result for default_storage.
if with_base_fields is true,
call the function check_for_migrations with an arguments app_config and connection.
call the function handle_default_options with an argument options.
value under the resultclass key of the cls.__dispatch dictionary is an empty dictionary.
call the function number_format with 2 arguments: value and use_l10 as use_l10n, return the result.
if ImportError, AttributeError, renamed to e, exceptions are caught,
call the method block_context.add_blocks with an argument blocks.
if field.show_hidden_initial is false,
if KeyError exception is caught.
if every filter_name in strings 'escape' or 'safe',
if _supported is None,
call the method checks.run_checks with 2 arguments: app_configs set to app_configs, tags set t tags, substitute the result for all_issues.
import pickle.
if ImportError exception is caught,
call the method match.group with 2 arguments: strings "var" and "constant", substitute the result for var and constant, respectively.
otherwise if ch equals a string ':',
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
raise an ValidationError with 2 arguments: value under the 'invalid_list' key of the self.error_messages dictionary and code set to 'invalid_list'.
if truncate is None,
return s.
if not,
call the method f.close.
content is a File object instance created with content argument.
return an instance of a class RegexURLResolver created with arguments: raw string '^/' and a list containing an element ns_resolver.
substitute a tuple with 2 elements: template and None, for self.find_template_cache dictionary value under the key key.
remove idx-th element from self list.
from django.utils import six into default name space.
call the method middleware.process_view with 4 arguments: request, view_func, args and kwargs, substitute the result for result.
try,
substitute boolean False for cache_choices.
row_data is an generator object that returns value under the field key of form.cleaned_data dictionary, for every field in unique_check, if field is contained in form.cleaned_data.
derive the class lazy_property from the property base class.
primary_keys is an empty list.
for every key and value in data.items method return value,
if self._delegate_bytes and six.PY2 are both true,
from __future__ import unicode_literals into default name space.
define the method __getitem__ with 2 arguments: self and key.
substitute stream for self._stream.
try,
append string '_name' to app_or_project, substitute it for base_name.
call the method apps.setdefault with 2 arguments: app_name and an empty list, extend the resulting list with namespaces_list.
if characters '\n' or '\r' are contained in val,
derive the class DisallowedRedirect from the SuspiciousOperation base class.
return last rollback elements of chunk.
substitute _iterlists for lists.
call the method self.loader with 2 arguments: self.loadname and self.dirs, return the first element of the result.
value under f.name key of the dta dictionary is an empty list.
get translation_function attribute of the object t, call the result with an argument eol_message, substitute the result for result.
replace '%s' in string "%s, from %s" with second and first element of the first targets row, respectively, append it to the string "  Target specific migration: ", use it as the argument for the call to the self.style.MIGRATE_LABEL method, call the self.stdout.write method with previous return value as an argument.
from datetime import datetime into default name space.
import module sys.
substitute smart_text for smart_str.
from django.conf import settings into default namespace.
open out_log file in append mode with buffering size of the input buffer, substitute the result for sys.stdout.
skip this loop iteration,
default_error_messages is an dictionary containing entry: return value of the function _ called with an string 'This field is required.' for 'required'.
call the method UnicodeDecodeError.__str__, with self as the argument, substitute the result for original.
try,
define the method initial_forms with an argument self.
if not,
if message is an instance of ValidationError class and message.code is contained in error_messages,
substitute '%s' in string '%s-%s-%s' with y,m and d, return the result.
for app_config in reversed list of apps.get_app_configs() elements,
if converter is true,
call the method data.encode with 2 arguments: fp.encoding and errors, substitute the result for data.
skip this loop iteration.
call the method formats.number_format with 2 arguments, d converted to a integer and then to string, and integer 0, use the result as an argument for the call to the function mark_safe, return the result.
get value under the 'database' key of the options dictionary, substitute it for db.
if data is false and initial is true,
file_field_list is an empty list.
call the method parser.parse with an argument tuple with an element end_tag, substitute the result for nodelist_false.
call the the method __init__ from the base class of the class Context.
return boolean True.
try,
define the function spaceless with 2 arguments: parser and token.
remove config dictionary element under '()' key, substitute it for c.
from email import charset as Charset, encoders as Encoders, message_from_string and generator.
from django.utils.encoding import python_2_unicode_compatible into default name space.
call the method self.var2.resolve with 2 arguments: context and boolean True, substitute the result for val2.
call the method o.isoformat, return the result.
call the method self._get_model_from_node with arguments node and string 'model'.
call the method re.compile with 2 arguments: raw string '^(?P<value>"Plural-Forms.+?\\n")\s*$', and result of the bitwise OR performed on the re.MULTILINE and re.DOTALL operands, substitute the result for plural_forms_re/
if value is None,
if not,
return parser
return FormSet.
define the method __promise__ with 4 arguments: cls, klass, funcname and method.
define the function fget with 3 arguments: instance, instance_type set to None and name set to fget.__name__.
call the function re.compile with an argument raw string "^\s*endblocktrans$", substitute the result for endblock_re.
if changes is true,
import module zlib.
define the method __getitem__ with an argument self.
return an instance of a ResolverMatch class, crated with arguments self.callback, args, kwargs and self.name.
return an empty string.
if 'locale' is a directory,
define the function _explode_shorthand_ip_string with an argument ip_str.
bring integer 2 to the power of 10, multiply it by 64, substitute the result for DEFAULT_CHUNK_SIZE.
if zlib.error as e exception is raised,
define the method __str__ with argument self.
define the method _text_chars with 5 arguments: self, length, truncate, text and truncate_len.
if ValidationError, substituted for e, exception is caught,
from django.test.signals import setting_changed into default name space.
call the function force_text with an argument value, substitute the result for text_value.
if '/' is contained in path, and only if '\\' is contained in path and index of the first occurrence of '/' in path is lesser than, index of the first occurrence of '\\' in path, or alternatively if '\\' is not contained in path,
python_2_unicode_compatible decorator,
if value is contained in self.empty_values,
derive class _LazyDescr from the object base class.
call the function Charset.Charset with argument string 'utf-8', substitute the result for utf8_charset.
if not,
if self._options exists,
return func.
substitute __str__ filed of klass for __unicode__ field of klass.
return value.
define the method render_node with 3 arguments: self, node and context.
join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name, append the result to sql_files.
return boolean False.
call the method self.error_class, substitute the result for self._non_form_errors.
substitute settings.MEDIA_URL for base_url.
if self.connector equals conn_type,
get the name of the type of the callback, append the string '.__call__' to it, substitute it for view_name.
if not,
take two characters from the i-th element of rawdata, if they are not equal to the string '</', throw an exception with string "unexpected call to parse_endtag" as the message.
do nothing.
skip this loop iteration.
url is None.
try,
property decorator.
if settings.ADMINS is false,
if name is boolean False raise an assert error with message string "The name argument is not allowed to be empty.".
remove symlink_path file.
substitute value under the subcommand key of the commands dictionary for app_name.
substitute operator.getitem for indexbytes.
combined is an instance of Media class.
put the double qoutes around encoded.
for every part in singular,
return an instance of a NowNode class, created with an argument format_string.
skip this loop iteration.
join first 5 elements of hextets into a string, separated by ':', substitute the result for result.
if now is false,
call the method parser.add_argument with 5 arguments: string '--liveserver', action set to string 'store', dest set to 'liveserver', default set to None and help set to string 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The default value is localhost:8081.'
call the method self.load_template with 2 arguments: template_name and template_dirs, return the result.
define the method args_check with 3 arguments: name, func and provided.
join rendered_widgets into a string, return it.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
substitute name for self.name.
define the method handle with 3 arguments: self, unpacked list labels and unpacked dictionary options.
for every bit in bits,
tpl is an string "ExternalReferenceForbidden(system_id='{}', public_id={})".
substitute new_name, without the last 3 elements for new_name.
do nothing.
get config dictionary element under 'filters' key, if it exists substitute it for filters, if not, filters is EMPTY_DICT.
substitute DictConfigurator for dictConfigClass.
if value under the 'author_name' key of the self.feed dictionary is not None,
call the method self.as_table, return the result.
substitute force_bytes for force_str.
derive the class HttpResponseForbidden from the HttpResponse base class.
get the unicode representation of result of the method match.group called with an integer 1, format with in a string "\\u%04x", return the result.
otherwise id change equals to I18N_MODIFIED,
return value under the key key of dictionary in last element of self.dicts.
field_notes is an empty list.
define the method fastcgi_help with an argument message set to None.
call the method self.configurator.convert with an arugment value, substitute the result for result.
if renamed is boolean False,
join inner_text elements into a string.
call the function six.text_type with an argument name, return the result.
raise an TemplateDoesNotExist exception with an argument error_msg.
call the function call_command with 3 arguments: string "createsuperuser", interactive is boolean True, and database set to value under the 'database' key of the options dictionary.
if encoded contains string "\\" and if encoded doesnt start with the double quote symbol,
try,
mem_args is a list containing of first num_args elements of args list.
call the cursor.close method.
for every form in valid_forms,
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
call the encode function on the Header class instance, created with arguments val and encoding, substitute the result for val.
if widget is false,
call the function popen_wrapper with argument args, assign the result to msgs, errors and status.
return self.paginator.count.
get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
append an empty string to usage.
define the method as_p with an argument self.
call the function six.unichr with value under the text key of the html_entities.name2codepoint dictionary, return the result.
define the method _existing_object with 2 arguments: self and pk.
try,
for every elt in source,
yield d.
append self.msgattrib_options to a list containing string 'msgattrib', append to it a list containing string '-o', pofile and pofile, substitute the result for args.
from django.utils._os import safe_join into default name space.
if self.verbosity is greater or equal to integer 3, call the self.stderr.write method with string "
call the method handler.addQuickElement with 2 arguments: string 'subtitle' and value under the 'subtitle' key of the self.feed dictionary.
call the function escape with an argument value, return the result.
call the function io.open with 3 arguments: work_file, string 'w' and encoding set to settings.FILE_CHARSET as arguments, with the result renamed to fp, perform the following:
if type of s equals bytes,
if opts.fields is None and opts.exclude is None,
if not,
define the function rjust with 2 arguments value and arg.
call the method formfield_callback with 2 arguments: f and unpacked dictionary kwargs, substitute the result for formfield.
if not,
if key is contained in d,
if not,
if hidden_fields is true,
split second element of hextet into parts by ':', append them to new_ip.
join elements of pieces into a string, return it.
define the function urlquote with 2 arguments: url and safe set to '/'.
if bit starts with '_("' ot bit starts with "_('",
if val is None,
use global variables _format_cache and _format_modules_cache.
UnlockFileEx.argtypes is a list containing 5 elements: HANDLE, DWORD, DWORD, DWORD and LPOVERLAPPED.
call the method token.split_contents, substitute the result for bits.
substitute result for self dictionary under key key.
call the function prepare_js_for_gettext with an argument src_data, substitute it for src_data.
if new_path file path exists,
if KeyError exception is caught,
raise an CommandError exception with an argument string '"%s" is not a valid IPv6 address.' where '%s' is replaced with self.addr.
from __future__ import unicode_literals into default name space.
call the method self.open()
if self.is_bound is true and self.errors is false, return boolean True, otherwise return boolean False.
substitute parent_instance for self.parent_instance.
call the method self._archive.printdir with 2 arguments: unpacked list args and unpacked dictionary kwargs.
substitute second element for bits for block_name.
if args is true,
call the method connection.check_constraints with an arguments table_names set to table_names.
if field_type equals a string CharField' and fourth element of row is true,
create the list of paths from which filename module was included for every filename in new_modules, only is filename has '__file__' attribute, substitute the resulting list for new_filenames.
try,
common_prefix is None.
for every cat in value under the 'categories' key of the item dictionary,
return None.
write 79 '-' characters into self.stream file stream.
convert byte to its integer representation, return all of the results for every byte in buf.
substitute declared_fields for new_class.declared_fields.
do nothing.
convert first element of values into a integer, return the result and ch.
decorator function register.filter with an argument is_safe set to boolean True.
instantiate class ContextDict with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, return it.
evaluate the method type(self).__bool__ with argument self, return the result.
from django.utils.module_loading import import_string into default name space.
for every model in model_list,
if roots is false,
value is boolean False.
try,
skip this loop iteration.
append string '</select>' to output.
define the function request with an argument request.
otherwise if, if value under the 'unique' key of the dictionary contained under the column_name key of the dictionary indexes is true,
call the re.compile function with self.regex and self.flags as arguments, substitute the result for self.regex.
define the method with self class instance and parser as arguments.
while bit doesnt end with sential,
if bytes is contained in resultclasses, cls._delegate_bytes is boolean True, otherwise it is boolean False.
call the method self.get_json_data with an argument escape_html, use the result as an argument for the call to the json.dumps function, return the result.
return from the function
substitute args for self.__args.
if key_function is callable object,
call the function trim_whitespace with an argument message, substitute the result for message.
append x to self.namespaces list for every x in namespaces, only if x is true.
derive the class TemplateResponse from the SimpleTemplateResponse base class.
return first element of t.
substitute self.fk.name for name.
do nothing.
from django.utils import six into default name space.
otherwise if maxsize is None,
get the value under the name key of the self.fields dictionary, substitute it for field.
call the method self.set with key, value, timeout and version as arguments.
substitute substitute TextInput for widget.
replace '%r' from string '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.',  with db_name, substitute it for shutdown_message.
substitute source for self.source.
raise an TemplateSyntaxError with an argument string "'autoescape' tag requires exactly one argument.".
return self.
call the method date.tzinfo.utcoffset with an argument date, substitute the result for offset.
break the loop execution.
substitute c for factory.
if result is not None,
call the method apps.get_app_config with an argument app_label.
define the method copy_plural_forms with arguments self, msgs and locale.
return j.
from django.apps import apps into default name space.
call the function formset.is_valid, if it evaluates to false,
remove file tmp_path.
convert bit to an integer and use it as index to obtain an element for list current, substitute it for current.
return output.
if t.token_type is not equal to TOKEN_COMMENT,
define the method stringfilter with an argument func.
query a string 'Please enter either "yes" or "no": ' and store the result in confirm.
for every var in self.vars,
skip this loop iteration,
define the method det_valid_name with arguments self and name.
substitute result for the value of the memo dictionary, with identity of the self object as an key.
call the self.stderr.write, with string "The po files under %s are in a seemingly not writable location. mo files will not be updated/created." as argument, with '%s' replaced by dirpath.
call the function BytesIO with self.buffer as argument, store the result is sio.
define the method is_rendered with an argument self.
if UnicodeError exception is caught,
if token.contents equals string 'else',
call the method self.configure_root with 2 arguments: root and boolean True.
substitute factory for value under '()' key of config dictionary.
from django.apps import apps into default name space.
define the method tokenize with an argument self.
if cookie is an empty string,
call the method block_context.add_blocks with an argument self.block.
substitute initial for initial_value, if initial is not None, if not, initial_value is an empty string.
self.cleaned_data is an empty dictionary.
if CONTEXT_SEPARATOR is contained in result,
raise an exception.
return statements.
call the function op, return the result.
derive class X from the object base class.
property decorator,
self.field.choice_cache is a list containing results of the method self.choice called with an argument obj, for every obj in result of the method self.queryset.all.
define the method __init__ with 2 arguments: self and unpacked list dicts.
call the function _generate_cache_header_key with key_prefix and request as arguments, substitute the result for cache_key.
call the OVERLAPPED function, substitute the result for overlapped.
call the method callback.rindex with an argument character '.', substitute the result for dot.
if self._is_rendered is false,
call the method self._start_relational_field with an argument field.
derive the class WidthRatioNode from Node base class.
call the function become_daemon with 2 arguments: our_home_dir set to the value under the 'workdir' key of options dictionary and, unpacked dictionary daemon_kwargs.
import bpython.
substitute default for value under the key key of self dictionary.
return boolean True.
define the method __getitem__ with 2 arguments: self and key.
call the function _i18n_cache_key_suffix with request and cache_key as arguments, return the result.
call the method gettext_module.find with 3 arguments: string 'django', path and list with an element: result of the function, to_locale called with an argument lang_code, if the result is not None,
define the function parse_http_date with an argument date.
return settings.LANGUAGE_CODE.
define the method D with an argument self.
if tt.tm_isdst is greater than intger 0, return boolean True, otherwise return boolean False.
from django.utils.itercompat import is_iterable into default name space.
substitute self.entity_decl for parser.EntityDeclHandler.
get the value under the 'interactive' key of the options dictionary, substitute it for self.interactive.
define the method display with an argument self.
call the function forbid_multi_line_headers with 3 arguments: name, val and self.encoding, substitute the result for name and val, respectively.
from django.core.management.base import AppCommand into default name space.
return plural_suffix.
write string "Cleaning up temporary files.\n" to self.stdout stream.
from django.utils.encoding import smart_text into default name space.
if field.rel.to._default_manager has an attribute 'get_by_natural_key',
define function get_connection with backend set to None, fail_silently set to boolean False and dictionary kwds as arguments.
define the method delete_first_token with an argument self.
define the function sql_delete with 4 arguments: app_config, style, connection and close_connection set to boolean True.
call the method self.as_tuple with an argument value under 'address' key of config dictionary, substitute the result for value under 'address' key of config dictionary.
call the method token.contents.split, substitute the result for bits.
get the value under the 'output' key of the options dictionary, substitute the result for output.
if value under the 'primary_key' key of the dictionary contained under the column_name key of the dictionary indexes is true,
return s.
append check.tags into a list for every check in self.registered_checks if check has 'tags' attribute, put the elements into a set and return it.
from django.core.serializers.base import SerializerDoesNotExist into default name space.
request_repr is a string "unavailable".
append tuple containing two entries: app_config.label and integer 0 to options, for every app_config in app_configs.
put elements of ignore_patterns into a set, substitute the length of it for self.ignore_patterns.
if self.active_writers equals integer 0 and self.waiting_writers equals integer 0 and self.active_readers equals integer 0,
call the method errors.extend with argument new_errors.
format self.month_field string with name, use it as the key for the data dictionary, substitute the result for m.
raise an StopIteration exception.
use the remainder of the division of name by count as the argument for the call to the avoid_wrapping function, store the result in result.
if self.first is true,
call the method autodetector.changes with the graph set to executor.loader.graph as an argument, substitute it for the changes.
define the method is_valid with an argument self.
return result.
call the function dictvalue with el as argument for every el in values of dictionary cc, join the resulting sequence in a string with comma as separator, assign the string to cc.
if current is callable object,
derive the class Serializer from the base.Serializer base class.
is_usable is boolean True.
from django.db import connections, router, transaction, models and DEFAULT_DB_ALIAS into default name space.
call the method template.render with an argument context, substitute the result for content.
nonlocal_root is an list with an element root.
define the method __next__ with an argument self.
call the method clean with an argument value from the base class of the EmailField class.
if recursive is true,
split label by '.', assign the result to app_label and model_label, respectively.
from django.utils import archive into default name space.
for every field in return value of the function _parse_date_fmt,
from django.utils import six into default name space.
if ext is false and content_type is true,
from xml.sax.expatreader import ExpatParser as _ExpatParser into default name space.
if verbosity is greater or equal to integer 2,
decorator decorator.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
if not,
if refto is contained in known_models,
define the method value with an argument self.
value under the "RUN_MAIN" key of new_environ dictionary is a string 'true'.
return a list with an element tuple with 2 elements: an empty string and an empty list.
response.content is bytes empty string.
substitute '%s' in string "%s_%s%s" with: file_root, next(count) and file_ext, join the dir_name and previous string into a valid file path, substitute it for name.
handler is an instance of SimplerXMLGenerator class, created with 2 arguments: outfile and encoding.
call close method on a file stream.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a url() method'.
call the method self.setlistdefault with an argument key, append value to the result.
substitute autoescape for self.autoescape.
call the method threading.Semaphore with an argument integer 0, substitute the result for self.can_write.
join first element of django.__path__, string 'conf' and subdir into a valid file path, return it.
while first element of s is equal to bytes string ';',
builtins is an dictionary with 3 initial entries: boolean True for 'True', boolean False for 'False' and None for 'None'.
if not,
append '(' to field_type.
if not,
increment stats dictionary value under the MISSES key by integer 1.
define the method __init__ with 4 arguments: self, dirpath, file_name and locale_dir.
call the method connection.ops.start_transaction_sql, use the result as an argument for the call to the method self.style.SQL_KEYWORD, write the result to the self.stdout stream.
remove the elements from the 'name' and 'dictionary' keys of the options dictionary, substitute them for project_name and target, respectively.
if not,
if tt.tm_isdst is greater than integer 0, return the result.
counters is a list containing length of handlers number of zeros.
from django.template import Template and Context into default name space.
call the method self.get_date_error_message with an argument date_check, append the result to errors.
self.dicts is an list with element builtins.
increment start by length of toktext.
split string s once, with '=' as delimiter, substitute the result for t.
if TypeError exception is caught,
if size is None substitute self._remaining for remaining, if not, substitute size for remaining.
substitute self.lineno for token.lineno.
try,
if match is true,
define the function execute_from_command_line with an argument argv set to None.
if length of args equals integer 2,
if not,
call the function time_format with 3 arguments: value, string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.
if obj_pk is not None,
otherwise if ch equals a string '^',
manifest is OrderDict class instance, created with tuple of two elements, app_name and list of elements of model_list for which model_installed function returned true, for every app_name and model_list in all_modules.
covert to string value under the 'unique_id_is_permalink' key of the item dictionary, convert it to lowercase, substitute the result for value under the 'isPermaLink' key of the guid_attrs dictionary.
for every base in reversed order of bases,
description is a string "An instance of the '%s' class" with '%s' replaced by value of receiver.__class__.__name__.
define the function join_tokens with 2 arguments: tokens and trim set to boolean False.
decorator stringfilter,
call the function lazy with 2 arguments: gettext and str, substitute gettext_lazy.
define private method __getattr__ with self class instance and attr as the arguments.
if self.attachments is true,
define the method add_arguments with arguments self and parser.
define the method __init__ with arguments self, fields set to an empty ilst, unpacked list args and unpacked dictionary kwargs.
call the function force_text with an argument ttl, substitute the result for ttl.
call the method parser.add_option with 8 arguments: string '-v', string '--verbosity', action set to string 'store', dest set to string 'verbosity', default set to string '1', type set to string 'choice', choices is a list containing elements: '0', '1', '2', '3', and help as a string 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output'.
code is a string 'min_length'
raise an ValueError exception with an argument string 'Unable to add filter %r: %s' formated with f and e.
append migration to merge_migrations.
return boolean True.
substitute labels for value under the 'labels' key of attrs dictionary.
if start is greater than upto,
do nothing.
if self.allow_folders is true,
from django.utils.encoding import smart_text into default name space.
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
join source list elements from last till pos indexes into a string, substitute the result for piece.
raise an NotImplementedError with an argument string 'subclasses of Widget must provide a render() method'.
if VariableDoesNotExist exception is caught,
if decimal_pos is not None,
self.nodelist_empty is an instance of NodeList class.
if not,
call the method self.has_previous, if it evaluate to false, call the self.has_next method, return the result.
substitute i-th element of self.forms for form.
call the function new_method_proxy with an argument hash, substitute the result for __hash__.
call the method self.loaddata with an argument fixture_labels.
skip this loop iteration,
join into a string: md5 hash sum of force_bytes(key) and self.cache_suffix, compose root file path out of self._dir and previous result, return it.
for every c in candidate without the last element and in reversed order, convert c into an integer, use the result as an key to get the value from the LUHN_ODD_LOOKUP dictionary, sum all the results and substitute the result for odds.
_func_closure is a string "func_closure".
call the method check_for_language.cache_clear.
from django.utils.six.moves import cPickle as pickle, into default namespace.
call the method self.__cast, return the hash value of the result.
import module os.
call the function re.compile with raw string '(\s+)', substitute the result for word_split_re.
if field_value is cotained in self.empty_values,
decorator function register.filter with an argument is_safe set to boolean False.
for every node_app and node_name in migration.branch,
if not,
call the method self.data.tzinfo.tzname with an argument self.data, if it is true, return it, otherwise return an empty string.
if expires is false,
define the method strptime with arguments self, value and format.
if six.PY3 is true,
call the force_str function with an argument: salt, if it exists, if not with a string '%s.%s', with '%s' replaced by, self.__class__.__module__ and self.__class__.__name__, respectively, substitute the result for self.salt.
for every k and list_ in return value of the method self.lists,
substitute value under the attr key of flags dictionary for value.
if e.errno is not equal to errno.ENOENT,
do nothing.
call the function locks.lock with arguments fd and locks.LOCK_EX.
if call to the function _samefile with old_file_name and new_file_name evaluates to boolean True,
from .messages import CheckMessage, Debug, Info, Warning, Error, Critical, DEBUG, INFO, WARNING, ERROR and CRITICAL into default name space.
if not,
derive the class FilePathField from the base class ChoiceField class.
f.required is boolean False.
define the method __init__ with an argument self.
create md5 hash from string response.content in hexadecimal format, surround the hash with double quotes, and store it in the value of the dictionary response under the key 'ETag'.
call the executor.loader.get_migration_by_prefix with app_label and migration_name with arguments, substitute the result fr migration.
if not,
try,
finally perform,
if propagate is not None,
define the method parse_endtag with self class instance and i as the arguments.
return an instance of SafeBytes, created with an argument s.
close fd file descriptor.
from django.utils.functional import allow_lazy into default name space.
call the function field.value_to_string with an argument obj, substitute the result for value under the field.name key of self._current dictionary.
call the method __init__ from the base class of the class MultipleHiddenInput, called with an argument attrs.
define the method open with argument self.
call the method fixture.close.
call the function allow_lazy with an argument strip_tags, substitute the result for strip_tags.
if self.fail_silently is boolean False,
if fname file path exists,
substitute date_check elements to uclass, lookup, field and unique_for, respectively.
return end ans next.
return dictionary created out of tuple elements k and printable representation of v, for every k and v in return value of the method module.__dict__.items, only if result of the method omittable called with an argument k is false.
if boundary is an instance of six.text_type class,
try,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
substitute SafeText for SafeUnicode.
break from the smallest enclosing loop.
define the method __repr__ with an argument self.
substitute data.size for file_name.
silent_variable_failure is an boolean True.
from django.utils import dateformat, numberformat and datetime_safe into default name space.
if UnicodeDecodeError exception is caught,
call the self._createdir method.
get value under the config_string key of the PALETTES dictionary, call the copy method on the result and substitute it for palette.
call the parse_args method with arguments args and namespace, from the base class of the CommandParser class.
if not,
if not,
call the middleware_method with request and e as the arguments, substitute the result for response.
raise an CommandError with an argument string "%s. Are you sure your INSTALLED_APPS setting is correct?", with '%s' replaced by e.
call the method self.writer_enters.
get value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary, substitute it for block_context.
substitute obj for self.obj.
if attr is an instance of MovedModule.
call the function subclass with 2 arguments string "0001_squashed_%s", where '%s' is replaced with migration.name and app_label, substitute the result for new_migration.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the item dictionary.
define the method __repr__ with an argument self.
import module logging.
value under the INITIAL_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class, created with an argument widget set to HiddenInput.
define the function deactivate.
if not,
return an string '<ExtendsNode: extends %s>', where '%s' is replaced with self.parent_name.token.
call the function six.iteritems with an argument: instance of base class of the MultiValueDict class, return the result.
if language_code is not contained in self._regex_dict,
call the self.stdout.write method with string " (no migrations)" and self.style.MIGRATE_FAILURE as arguments.
call the method self.translate_token with an argument token, append the result to mapped_tokens.
define the function assertRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if e doesnt have an 'django_template_source' attribute,
remove kwargs dictionary element under the 'method' key, substitute it for method.
call the method self.configure_logger with 2 arguments: name and value under loggers dictionary key name.
import module unicodedata.
for every chunk in field_stream,
if not,
convert ip_str to lowercase, if it doesnt start with a string '0000:0000:0000:0000:0000:ffff:',
call the function template_localtime with 2 arguments: obj and context.use_tz, substitute the result for obj.
if not,
call the method pytz.timezone with an argument settings.TIME_ZONE, substitute the result for _localtime.
call the method self.unclosed_block_tag with an argument parse_until.
call the method serializers.serialize with 6 arguments: format, result of the function get_objects, indent set to indent, use_natural_foreign_keys set to use_natural_foreign_keys, use_natural_primary_keys set to use_natural_primary_keys, and stream set to stream, if the stream is true, otherwise stream set to self.stdout.
define the function patch_response_headers, with response and cache_timeout with None as default value, as arguments.
raise CommandError exception, with sring "Can't find %s. Make sure you have GNU gettext tools 0.15 or newer installed." as argument, substitute '%s' with self.program.
call the method value.strftime with an argument format, return the result.
strip message_context of "'" characters from both ends, substitute the result for message_context.
mapped_tokens is an empty list.
replace every occurrence of raw string '\\' in s with a raw string '\\\\', use the result and string "unicode_escape",
from django.utils import six into default name space.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
tpl is an string "DTDForbidden(name='{}', system_id={!r}, public_id={!r})".
from importlib import import_module into default name space.
substitute i for end_index.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a size() method'.
call the method validate with an argument value from the base class of the DecimalField class.
if can_fail is true,
substitute fields for value under the 'fields' key of attrs dictionary.
derive the class EmptyPage from the InvalidPage base class.
define the function date with 2 arguments value and arg set to None.
finally perform,
if AttributeError exception is caught,
if AttributeError or UnsupportedOperation exception occurred.
gett self.attr from the module object, return it.
if exception SuspiciousOperation as e is caught,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
try,
join self into a bytes string, yield the result as the return value of the generator.
raise an self.error exception with 2 arguments: token and string  "Invalid block tag: '%s', expected %s", where '%s' is replaced with command and result of the function get_text_list called with an argument list, with p converted into a string and surrounded with single quotes for every p in parse_until.
define the method value with an argument self.
call the function pickle.dumps with value and pickle.HIGHEST_PROTOCOL as the arguments, substitute the result for pickled.
self.proxy is boolean False.
if extra_context is false,
do nothing.
call the clean method wiht value argument from the base class of the SlugField class, return the result.
if not,
reverse settings.LOCALE_PATHS element order, for every localedir in the result,
return client.
call the method self.start_serialization
define the method clean with an argument self.
derive the class SimplerXMLGenerator form the XMLGenerator base class.
substitute cache_info for wrapper.cache_info.
define the method has_key with self class instance, key and version defaulting to None as arguments.
call the function codecs.open with 3 arguments: sql_file, string 'r' and  encoding set to settings.FILE_CHARSET, with the result renamed to fp,
if sys.platform equals to string "win32",
extend self.children list with data.children.
evaluate self.clear method and return the result.
substitute result for self.find_template_cache dictionary value under the key key.
define the method __init__ with arguments: self class instance and argv set to None.
if six.PY2 is boolean True,
if not,
parsed is boolean True.
join bytes and self._leftover into a bytes string, substitute it for self._leftover.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
substitute nodelist_empty for self.nodelist_empty.
join self.namespaces into a string separated with character ':', substitute it for self.namespace.
if ImportError exception is caught,
call the method apps.get_app_configs, convert the result in a list, reverse the order of elements, substitute the result for app_configs.
if name is None,
define the function ngettext with 4 arguments: context, singular, plural and number.
for every cat in value under 'categories' key of item dictionary,
if value under the 'debug' key of options dictionary is not None, substitute it for value under the 'debug' key of wsgi_opts dictionary.
substitute value for self.value.
if data is an instance of bytes.
call the function self.tag with 2 arguments: function_name and compile_func.
define the function iterlists with 2 arguments: d and unpacked dictionary  kw.
substitute value for the vale under the name key of the pdict dictionary.
new_result is an empty list.
join app_config.path and string 'management' into a file path, substitute it for path.
self.namespaces is an empty list.
if self.save_as_new is true,
if email_messages is false,
if six.PY2 is true,
call the object d with arguments stream_or_string and unpacked dictionary options, return the result.
return an raw string '\"'.
substitute args, without the last element for args.
define the method get_block with 2 arguments self and name.
if UnicodeError exception is caught,
call the method self.template.resolve with an argument context, substitute the result for template.
call the method token.split_contents, substitute the result for bits.
self.object_name is a string 'CacheEntry'.
default_error_messages is an dictionary with 2 entries: return value of the function _ called with an argument string, 'Enter a list of values.' for 'invalid' and return value of the function _ called with an argument string, 'Enter a complete value.' for 'incomplete'.
try,
define the function b64_hmac with arguments salt, value and key.
join elements of output into a string, separated by newline characters, return it.
if IndexError, TypeError or ValueError exception is caught,
if settings.configured,
define the method __next__ with an argument self.
return nothing.
declare that we use global variables cached_modules and _cached_filenames in this function.
from django.utils import six into default name space.
request_queue_size is integer 10.
return boolean False.
__author__ is a string "Benjamin Peterson <benjamin@python.org>".
if not,
call the self.get method with key and version set to version as arguments, return it if it is not None.
try,
convert language to lowercase, return it.
if self.can_delete is true and call to the function self._should_delete_form with an argument form evaluates to true,
from django.utils import six into default name space.
raise an ValidationError with 2 arguments: dictionary self.error_messages value under the key 'list', and code set to string 'list.
if commit is true and form has an attribute 'save_m2m',
if e doesnt have an 'django_template_source' attribute,
return an empty string.
get the value under the BLOCK_CONTEXT_KEY key of the context.render_context dictionary, substitute it for block_context.
substitute arg converted into an integer for length.
substitute utc for tzinfo.
return self._encoding.
define the method items with an argument self.
join output into a string, separated by newline characters, return it.
do nothing.
define the method __nonzero__ with argument self.
bring integer 2 to the power of 10, multiply it by integer 64, substitute the result for DEFAULT_CHUNK_SIZE.
if msg is true,
get attr attribute of self object, if it exists substitute it for nodelist, if not nodelist is None.
if not,
read one line from self file stream, substitute the result for buf.
raise an ImproperlyConfigured exception with argument string 'Path for saving email messages exists, but is not a directory: %s',  replace '%s' with self.file_path.
if not,
call the method self.close.
define the function locale with an argument locale.
if not,
crate a set containing of app_labels elements, substitute it for app_labels.
raise an base.DeserializationError exception with string "<field> node is missing the 'name' attribute" as argument.
call the self._read_limiter with length of self.buffer subtracted from size as argument, store the result into chunk.
if third element of bits equals a string 'parsed',
derive the class Select from the Widget base class.
raise an RawPostDataException exception with an argument string "You cannot access body after reading from request's data stream".
substitute DebugLexer and DebugParser for lexer_class and parser_class.
for every key and value in parse_gsl with query_string is it exists or an empty string if not and keep_blank_values set to boolean True.
modify value at the key 'Location' of the dictionary response by applying function request.build_absolute_uri on it.
if self is not contained in state_frame,
extend new_second_item with item.
call the itertools.count function with argument integer 1, substitute the result for count.
strip trailing '/' from the script_name string, remove first occurrence of '/' in path_info string, append second result to the first, separated with '/', assign the result to self.path.
substitute template_string for self.template_string.
define the method cache_key with 3 arguments: self, template_name and template_dirs.
if self._wrapped is empty,
from __future__ import unicode_literals into default name space.
get the value under the 'error_messages' key of the kwargs dictionary, update errors dictionary with it.
substitute package.__name__ for package_name.
define the method find_template with 3 arguments: self, name, dirs set to None.
define the method get_parent with 2 arguments self and context.
evaluate the function timesince with d, now and reversed set to boolean true as arguments, return the result.
substitute CacheEntry for self.cache_model_class.
call the function save_m2m.
otherwise if field_type equals a string 'IntegerField(' and connection.features.can_introspect_autofield is false,
define the method setlistdefault with 3 arguments: self, key and default_list set to None.
return lang_code.
from wsgiref.util import FileWrapper
derive class _LazyModule from the types.ModuleType base class.
define the method __init__ with 6 arguments: self, name, old_mod, new_mod, old_attr set to None, new_attr set to None.
define the method validate with arguments self and value.
call the method self.style.NOTICE with an argument: string: "\nYou have unapplied migrations; your app may not work properly until they are applied.", write it to self.stdout.
if o.microsecond is true,
define the method _handle_object with arguments self and node.
call the method apps.get_app_configs, for every app_config in the result,
define the method __init__ with 2 arguments: self and offset.
from __future__ import unicode_literals into default name space.
substitute cleaned_data for self.cleaned_data.
args is an list with 3 initial elements self.name, self.value and self.attrs.
call method __init__ from the base class of the class MemcachedCache with arguments: server, params, library set to memcache and value_not_found_exception set to ValueError.
if Exception, renamed to e, exception is caught,
derive the class HttpResponseGone from the HttpResponse base class.
pending_references is an empty dictionary.
append form to self.saved_forms.
_func_defaults is a string "__defaults__".
return result.
contextlib.contextmanager decorator,
from __future__ import unicode_literals into default name space.
mail.outbox is an empty list.
define the method dst with 2 arguments self and dt.
return _curried.
if value under the 'ttl' key of the self.feed dictionary is not None,
derive the class FileInput from the Input base class.
alternatively, if six.PY3 is true check if message does not have an attribute 'message', if six.PY3 is false, check if message doesnt have an attribute 'code', perform the following,
raise an exception e.
if self.domain is not equal to string 'django' or string 'djangojs',
sum punctuation and trail, substitute the result for trail.
get 'editable' attribute from object f, if it doesnt exists or its true,
get the LANG_INFO dictionary value under the generic_lang_code key, return the result.
substitute tzinfo for value under the 'tzinfo' key of the kw dictionary.
try,
convert pattern to lowercase, substitute it for pattern.
define the function normalize with an argument pattern.
call the method response.add_post_render_callback with an argument callback.
self.m2m_data is None.
call the the method __copy__ from the base class of the class Context, substitute the result for duplicate.
define the method created_time with arguments self and name.
if incomment is true,
try,
call the method to_python with an argument value from the base class of the DateField class, return the result.
call the cursor.close method.
from django.apps import apps into default name space.
call the method self.fields.values, for every field in result,
if KeyError exception is caught,
call the method self.importer with an argument used, substitute the result for found.
call the method translation.activate with an argument settings.LANGUAGE_CODE.
derive the class Context from the BaseContext base class.
m2m_value is a lambda function with an argument value, return value is the result of the function smart_text called with arguments: return value of the value._get_pk_val method and strings_only set to boolean True.
if e.errno is not equal to errno.EEXIST,
define the method widget_attrs with arguments self and widget.
call the function module_to_dict with an argument settings._wrapped, substitute it for user_settings.
if comment_notes is true,
if content is None, raise an error.
if string ':::' is contained in ip_str,
if value is true and character ':' is contained in value,
return val.
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string 'Enter a valid time.' for 'invalid'.
if not,
derive the class SimpleNode form the base class TagHelperNode.
define the function m2m_convert with an argument n,
if initial is None,
define the function npath with an argument path.
call the function urlquote with an argument _prefix, use the result as an argument for the call to the normalize function, substitute the fitst element of the result for prefix_norm and prefix_args, respectively.
try,
if re.error, renamed to e, is caught,
if self.fail_silently is boolean True,
define the method _list_cache_files with argument self.
call the method loader.detect_conflicts, substitute the result for conflicts.
if candidate is not an instance of six.string_types,
remove first 2 and last 2 elements from var.
call the method add_arguments from the base class of the Command class, with an argument parser.
define the method __exit__ with self, exc_type, exc_value and tb as arguments.
if not,
remove the first occurrence of the filename value in the _error_files list.
define the function to_locale with an argument language.
get the value under the self.name key of the self.form.errors dictionary, if the key exists, return it, if not evaluate the method self.form.error_class and return the result.
define the function make_decorator with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs.
call the method n.getElementsByTagName with string 'natural' as argument, substitute result for keys.
call the function force_text with an argument val, if the result is not contained in pks,
call the get_path_info function with environ as argument, substitute the result for path_info.
call the method self.template_cache.clear.
nesting is integer 0.
if prefix doesnt end with character '/',
multiply self.number and self.paginator.per_page, return the result.
delete the value under the key key of the self._expire_info dictionary.
evaluate the function get_system_encoding(), substitute the return vale for DEFAULT_LOCALE_ENCODING.
otherwise if self.verbosity is greater than integer 0,
call the function get_language, substitute the result for lang.
import module sys.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if 'coerce' key of the kwargs dictionary exists remove it and substitute its value for self.coerce, if not, self.coerce is an identity lambda function with an argument val.
substitute hashlib.sha256 for digest.
define the method get_connection with arguments self and fail_silently set to boolean False.
derive class Command from the BaseCommand base class.
domain_whitelist is a list containing string 'localhost'.
if potfile file path doesnt exist,
get value under the 'register_to' key of the kwargs dictionary, substitute it for register_to.
define the method __init__ with 3 arguments: self, include_html set to boolean False and email_backend set to None.
if years is true,
if not,
if arg is true,
call the method self.extra_headers.get with string 'From' and self.from_email as arguments, substitute the result for value under the 'From' key of msg dictionary.
raise an self.exception exception.
define the method copy with an argument self.
models is a string 'models'
call the method is_multipart on the first element of self.forms, return it.
return boolean False.
if first element of text is contained in 'xX'.
set attr.name attribute of Module_six_moves_urllib_response object to attr.
if not,
do nothing.
if use_l10n is true, or if use_l10n is None and settings.USE_L10N is true,
try,
get the value under the 'filename' key of the params dictionary, if it is true,
do nothing.
define the method __new__ with 4 arguments: mcs, name, bases and attrs.
otherwise if ch equals a string '|',
call the function POINTER with argument OVERLAPPED, substitute the result for LPOVERLAPPED.
define the method b with an argument self.
do nothing.
derive the OutputWrapper class from the object base class.
self._post_parse_error is boolen False.
call the method m.groups, assign the result to self.addr, _ipv4, _ipv6, _fqdn and self.port, respectively.
call the method text.splitlines with an argument boolean True, for every line in the result,
for every base in reversed order of bases,
raise an TemplateSyntaxError exception with an argument string "Invalid arguments provided to simple_tag".
replace every occurrence of arg is value for an empty string, substitute the result for value.
widget_value is None.
if UnicodeEncodeError exception is caught,
if not,
define method clear_cdata_mode, with self class instance as an argument.
from inspect import getargspec and getcallargs into default name space.
if self._wrapped is empty,
convert whitespace character to unicode and substitute the result for space.
try,
if day_of_year is smaller than or equalt to jan1_weekday subtracted from integer 8 and jan1_weekday is greater than integer 4,
from django.utils.encoding import force_st into default name space.
divide since by seconds, store the floored result in count.
value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 3 arguments: label set to return value of the function _ called with an string 'Order', initial set to index incremented by 1, and required as boolean False.
substitute parser for self.template_parser.
crate a dictionary with app mapping and from the class Migration, created with arguments: string 'custom' and app, for every app in app_labels.
convert is a dictionary with 4 initial entries: list with 3 tuples: tuple with 2 elements: string '__gt__', and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other or self is equal to other, tuple with 2 elements: string '__le__', and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than other or self is equal to other, tuple with 2 elements: string '__ge__', and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other, for '__lt__', list with 3 tuples: tuple with 2 elements: string '__ge__', and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other, or self is equal to other, tuple with 2 elements: string '__lt__', and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than or equal to other, or self is not equal to other, tuple with 2 elements: string '__gt__', and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other, for '__le__', list with 3 tuples: tuple with 2 elements: string '__lt__', and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other or self is equal to other, tuple with 2 elements: string '__ge__', and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than other or self is equal to other, tuple with 2 elements: string '__le__', and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other, for '__gt__', and list with 3 tuples: tuple with 2 elements: string '__le__', and lambda function with 2 arguments: self and other, resulting boolean True if self is not greater than or is not equal to other, or self is equal to other, tuple with 2 elements: string '__gt__', and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than or not equal to other, or self is not equal to other, tuple with 2 elements: string '__lt__', and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than or equal to other, for '__ge__',
for every dep in deps call the method apps.get_model with an argument dep, and append the result to the list, substitute it for deps.
set accessor_name of the self.object to object_list.
if domain equals a string 'djangojs' and file_ext is contained in command.extensions,
call the method self.add_filters with 2 arguments: result and filters.
call the method self.add_error with 2 arguments None and e.
call the function self._truncate_html with 5 arguments: length, truncate, text, truncate_len and boolean False, return the result.
substitute c_int64 for ULONG_PTR.
return boolean True.
if exception is caught,
raise CommandError exception with "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)", with '%s' substituted for app_label, as arguments.
call the method formats.localize_input with an argument value, return the result.
import module copy.
define the method __str__ with an argument self.
for every app_label in app_labels,
return self.empty_value.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
call the method self.__copy__, return the result.
call the method self._populate.
call the method val.encode with argument string 'ascii'.
import module re.
define the function walk_to_end with 2 arguments ch and input_iter.
with call to the io.open function with fname and string 'rb' as arguments, renamed to f,
yield obj, as an return value of the generator.
if not,
call the self._open method with name and mode arguments, return the result.
return the result of the call to the function chain, with an argument unpacked list, containing the result of the function, format_html called with 3 arguments: string '<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />', return value of the function self.absolute_path called with an argument path and medium, for every medium in media and for every path in value under the medium key of the self._css dictionary.
substitute email_backend for self.email_backend.
if f doesnt has an 'save_form_data' attribute,
derive the class FixedOffset from the tzinfo base class.
register.tag decorator,
substitute self.obj for model.
substitute value for value under the self.variable_name key of the context dictionary.
from django.utils.encoding import smart_text into default name space.
return a string '%s...' formated with elements of x up to the index equal to the maximum value between integer 0 and 3 subtracted from limit.
append ending to msg.
call the method self.set_charset with utf8_charset as an argument.
call the method setlist from the base class of the QueryDict class, with arguments key and list_.
derive the class Command from the AppCommand base class.
define the method check_programs with an argument unpacked list programs.
call the method self.get_queryset, return the length of the result.
if not,
define the method add_prefix with arguments self and prefix.
otherwise if cmatches is true,
import module sys.
call the method self.expression.resolve with 2 arguments: context and boolean True, return the result.
loader is an instance of MigrationLoader class, created with an argument connection.
substitute nodelist for self.nodelist.
decrement by length of password, create bytes string with previous result number of characters '\x00', append the result to password.
return input_val.
call the method loader.get_migration with arguments app_label and migration_name, substitute the result for migration.
if self doesnt have an '_deleted_form_indexes' attribute,
call the method parser.add_argument with 4 arguments: string '--plain', action set to string 'store_true', dest as a string 'plain', and help is a string 'Tells Django to use plain Python, not IPython or bpython.'.
call the function ugettext with an argument string "%s KB", substitute '%s' with the result of the call to the function, filesize_number_format with result of division of bytes by KB as an argument, substitute the result for value.
if value is an instance of six.string_types class,
substitute prefix for self.prefix.
call the method token_string.find with an argument TRANSLATOR_COMMENT_MARK, if it evaluates to true,
call the method parser.compile_filter with an argument first element of bits, substitute the result for target.
get the value under the 'traceback' key of the options dictionary, substitute the result for traceback.
substitute csrf_token for value under the 'csrf_token' key of new_context dictionary.
return value.
if model._meta.proxy is false and return value of the function router.allow_migrate called with arguments using and model is true,
break from the loop execution,
want_unicode is boolean True.
define the method get_date_error_message with 2 arguments: self and date_check.
call the method sys.stderr.write with an argument string "Unknown command: %r\nType '%s help' for usage.\n", where '%r' is replaced with subcommand and '%s' is replaced with self.prog_name.
from django.utils import six into default name space.
if format is not contained in _serializers,
decorator deconstructible,
call the method self.to_python with an argument value, strip the whitespaces from the both ends of the result and substitute it for value.
decorator deconstructible,
to_unicode is an lambda function with an argument s, result is the result of the function force_text, called with 2 arguments: s and string_only as boolean True.
derive the class Command from the BaseCommand class.
call the method self.next_token, substitute the result for self.current_token.
exit the program with the integer 2 as exit code.
if not,
join trans_bit into a string separated with whitespaces, substitute the result for bit.
result is an integer 0.
call the function forbid_multi_line_headers with 3 arguments: name, val and self.encoding, substitute the result for name and val, respectively.
define the function media with an argument request.
decorator python_2_unicode_compatible,
if self.paginator.count equals a integer 0,
return self.s.
raise an CommandError exception with an argument string "%r is not a valid port number.", where '%r' is repaced with self.port.
from django.utils.safestring import mark_safe into default name space.
if not,
if not,
if latest_date is true, return it, if not, call the method datetime.datetime.now and return the result.
from __future__ import unicode_literals into default name space.
define the function timeuntil with 2 arguments, d and now defaulting to none.
substitute i for value under the 'counter0' key of the loop_dict dictionary.
if not,
try,
try,
define the function urlunquote with an argument quoted_url.
define the method add_arguments with 2 arguments self and parser.
fields is an tuple containing 3 entries: return value of the method models.CharField called with 4 arguments: name set to a string 'cache_key', max_length set to integer 255, unique set to boolean True and primary_key set to boolean True, return value of the method models.TextField called with argument name set to a string 'value', and return value of the method models.DateTimeField called with 2 arguments: name set to string 'expires' and db_index set to True.
if sep is not None,
NOCOLOR_PALETTE is a string 'nocolor'.
if mw_instance has an attribute named 'process_template_response'.
define the function reset_translation.
define the function wrapper with 2 arguments: unpacked list args and unpacked dictionary kwds.
if self._cull_frequency equals to integer 0.
call the function get_commands, substitute it for commands.
if kwarg_format is false,
for name in attributes of models_signals object,
append field to problem_fields list for every model in apps.get_models with argument kwargs dictionary, only if app_configs is None, or model._meta.app_config is contained in app_configs, for every field in model._meta.local_fields, only if field is an instance of models.BooleanField and field.has_default() evaluates to False.
if file_obj is true,
call the method parser.add_argument with string '--fake', action containing string 'store_true', dest set to string 'fake', default set to False, help containing string 'Mark migrations as run without actually running them' as arguments.
if app_config.models_module is None or app_config is contained in excluded_apps,
define the function activate with an argument timezone.
remove the old_file_name file.
return a string '%s(%s)' formated with self.__class__.__name__ and dictreprs.
if length of app_labels is greater than integer 1 and primary_keys is true,
call the method s.feed with an argument value.
if not,
define the method B with an argument self.
define the method start_object with arguments self and obj.
if host exists substitute it for self.host, if not substitute settings.EMAIL_HOST for self.host.
define the method handle with 2 arguments: self and unpacked dictionary options.
if not,
convert six.PY3 to an integer, substitute it for buffering.
self.FILES is an instance of MultiValueDict class.
define initialization method __init__ with self class instance, level, msg, hint defaulting to None, obj defaulting to None and if defaulting to None as arguments.
from django.conf import settings into default name space.
kwargs is an empty dictionary.
return boolean True.
call the method parser.expression with an argument bp, substitute it for self.seconds.
indent contain tabs number of tab character.
do nothing,
skip this loop iteration,
self._fname is None.
substitute record.exc_info for exc_info.
call the __init__ method from the base class of the HttpResponseNotModified class, called with arguments: unpacked list args, and unpacked dictionary kwargs.
import module os.
raise an NotImplementedError exception with an argument string 'subclasses of LabelCommand must provide a handle_label() method'.
define the method __repr__ with an argument self.
substitute gettext for gettext_noop, gettext_lazy and _.
slice the rawdata from k to endpos, then take the first 20 elements of the previous slice, with it replace %r in the string "junk characters in start tag: %r", call the method self.error with the resulting string as an argument.
import module calendar.
skip this loop iteration.
return html.
define the method handle with arguments self and unpacked dictionary options.
return data.
property decorator,
get the value under the 'indent' key of the options dictionary, multiply it with level, create a string containing number of  whitespaces equal to the previous result, append it to the string containing newline character, use the result as the argument for  the call to the self.xml.ignorableWhitespace method.
call the function unicodedata.normalize with 2 arguments: string 'NFKD' and thousand_sep, put the result and thousand_sep into a set, for every replacement in the resulting set,
try,
default_error_messages is an dictionary with an entry: return value of the function _ called with an argument string, 'Select a valid choice. %(value)s is not one of the available choices.' for 'invalid_choice', and return value of the function _ called with an argument string 'Enter a list of values.' for 'invalid_list'.
match the rawdata from the position i, with _html_parser.endtagfind pattern, assign the result to the match.
if StopIteration exception,
old_style_list is boolean True.
if not,
read chunk_size bytes from the old_file file, substitute the result for current_chunk.
return a list with an element tuple with 2 elements: an empty string and an empty list.
if UnicodeError exception is caught,
call the method parser.add_argument with 5 arguments: string '--merge', action as a string 'store_true', dest as a string 'merge', default set to boolean False and help set to a string "Enable fixing of migration conflicts.".
return s.
substitute None for pickled.
self._stream is a class instance of a LimitedStream class, initialized with self.environ dictionary value under the 'wsgi.input' key, and content_length.
get the value under the lang_code key of the LANG_INFO dictionary, return it.
convert self into a string and return it.
call the method self.set_cookie with 5 arguments: key, max_age as integer 0, path as path, domain as domain, expires as a string 'Thu, 01-Jan-1970 00:00:00 GMT', return the result.
import module types.
call the function call_command with 6 arguments, string 'runserver', addrport as the value under the 'addrport' key of options dictionary,
convert data to string, substitute it for data.
get the value under the index key of the hextets dictionary, remove the leading '0' characters, substitute the result for value under the index key of the hextets dictionary.
join the current working directory and name into a file path, substitute it for top_dir.
option_value is an empty string.
get the index of first occurrence of name in existing, substitute it for i.
return result.
decorator stringfilter,
extend fixture_files list with fixture_files_in_dir.
try,
yield key and value under the key key of self dictionary.
return self.find_template_cache dictionary value under the key key.
reverse the order of modules elements, put them into a list, return it.
property decorator,
call the function os.spawnve with os.P_WAIT, sys.executable, args and new_environ as arguments, substitute the result for exit_code.
replace '%s' in string '</%s>' with tag, append the result to out.
only if form_class is not None, and if form_class has an attribute '_meta' and form_class._meta.fields is not None,
return attrs.
call the function get_internal_wsgi_application, return the result.
if self.negated,
temp_lib is an instance of Library class.
from django.utils.six.moves import _dummy_thread as thread into default name space.
if app_config.models_module is None,
call the method form.is_valid, perform bitwise and with the result and forms_valid as operands, substitute the result for forms_valid.
call the method node.getAttribute with an argument attr, substitute the result for model_identifier.
if return value of the function normcase called with an argument final_path doesnt starts with result of the function normcase, called with sep appended to base_path as an argument and results of the function normcase called twice with final_path, and base_pah are not equal and directory name of the result of the function normcase called with an argument base_path, if not equal to the result of the function normcase called with an argument base_path.
if not,
append migration.name to string ' - ', write it to self.stdout stream.
raise an BadSignature exception with an argument string 'No "%s" found in value', where '%s' is replaced by self.sep.
define the method closed with self as the argument.
yield node as an return value of a generator.
substitute _itervalues for itervalues.
if not,
sum evens and odds, if the result is divisible by integer 10, return boolean True, if not return boolean False.
internal_use_only is a boolean False.
widget.is_localized is boolean True.
decorator stringfilter,
otherwise if self.file_path file path doesnt exists,
if self.output_transaction is true,
call the method connection.close,
substitute self.file for thefile.
call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the item dictionary.
call the method query.items, substitute the result for query.
substitute varlist for self.varlist.
define the method file_complete with arguments self and file_size.
if model is contained in excluded_models,
define the method create_nodelist with an argument self.
call the function context_class with 2 arguments: _dict and unpacked dictionary containing 4 entries: context.autoescape for 'autoescape', context.autoescape for 'current_app', context.use_l10n for 'use_l10n', and context.use_tz for 'use_tz', substitute the result for new_context.
sum max_num and DEFAULT_MAX_NUM, substitute the result for absolute_max.
append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.
update self dictionary with updates.
make basedir directory,
call the method payload.decode with 2 arguments: text and utf8_charset, substitute the result for self._payload.
call the method parser.compile_filter with second element of bits as an argument, substitute the result for viewname.
return value.
assign the return value of the function fn to change.
concatenate CheckCommand.help to string 'Deprecated. Use "check" command instead. ', substitute it for help.
cursor is None.
property decorator,
if obj is instance of models.signals.ModelSignal class,
from itertools import groupby and cycle as itertools_cycle into default name space.
get the name key of the data dictionary, if the key exists return it, if not return None.
while i is lesser than length of subject and i-th element of subject is not an empty space or tab character,
from django.core.servers.fastcgi import runfastcgi into default namespace.
if path is not contained in self._js,
from django.utils import six into default name space.
if args is None,
define the method __init__ with 5 arguments: self, attrs set to None, years set to None, months set to None and empty_label set to None.
if not,
for every digit in number coverted to a string,
for every member in members,
append idstring to the '.' character, substitute it for idstring.
if character is not equal to a string '.',
finally perform,
add plan_node to the shown set.
call the method self.can_write.release.
derive the class DebugNodeList from the NodeList base class.
count is a property object with _get_count as a getter method.
raise an TemplateDoesNotExist exception with an argument name.
return result.
ch2 is None.
substitute bp for lbp.
call the method __init__ from the base class of the class MultiWidget, with an argument attrs.
append value to self.dicts list.
call the method cursor.execute with string "UPDATE %s SET value = %%s, expires = %%s WHERE cache_key = %%s" as argument, substitute the '%s' with table and 3 elements of a list: b64encoded, exp and key, respectively.
define the method handle_m2m_field with argument self, obj and field.
call the method self.event_stream.expandNode with an argument node.
yield buf as return value of the generator.
self.vals is an empty list.
substitute to_field_name for self.to_field_name
evaluate the method six.text_type(s), on the result call the method encode with encoding as an argument, return the result.
define the function deactivate.
from logging.config import dictConfig.
define the method __init__ with 3 arguments: self, initlist set to None and error_class set to None.
try,
call the function force_text with an argument v, for every v in selected_choices, add results to a set, substitute the resulting set for selected_choices.
if not,
call the function _load_serializers.
from itertools import chain into default name space.
return cached.
from django import VERSION as version into default name space.
return translation.
finally perform,
raise an TemplateSyntaxError exception with an argument string "%r expected at least one variable assignment", where '%r' is replaced with first element of bits.
if not,
if sender is true and sender attribute 'handles_files' is also True,
call the method self.get_renderer with 4 arguments: name, value, attrs and choices, call the render method on the result, return the result.
call the function force_text with an argument value, substitute the result for value.
if not,
call the function iter with an argument patterns.
define the function _lazy_proxy_unpickle with 4 arguments: func, args, kwargs and unpacked list resultclasses.
call the function sys.getfilesystemencoding, if it evaluates to true, substitute the result for fs_encoding, if not, call the function sys.getdefaultencoding and substitute the result for fs_encoding.
otherwise if ch equals a string '(',
if self.data.hour is greater than integer 11,
from django.utils import six into default name space.
import module warnings.
data is an dictionary with 2 initial entries: return value of the smart_text function with the argument obj._meta for 'model', and self._current for 'fields'.
call the function translation with an argument settings.LANGUAGE_CODE, substitute the result for _default.
raise an TemplateSyntaxError exception with an argument string "widthratio final argument must be a number".
substitute self.choice_input_class for sub_ul_renderer.choice_input_class.
call the function modelform_factory with 10 arguments: model, form as form, fields as fields, exclude as exclude, formfield_callback as formfield_callback, widgets as widgets, localized_fields as localized_fields, labels as labels, help_texts as help_texts and error_messages as error_messages, substitute the result for form.
if doublecolon_len is greater than best_doublecolon_len,
call the function allow_lazy with an argument chars, substitute the result for chars.
get the value of dictionary cache under the key cache_key, if key is not available return None, substitute it for headerlist.
try,
join the executor.loader.unmigrated_apps into a string separated by string ', ' append it to the end of a string "  Synchronize unmigrated apps: ", use it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result of the previous method as an argument for the call to the self.stdout.write method.
find first index of occurrence of character '-' in locale, substitute it for p.
instantiate base class of the class ModelMultipleChoiceField, substitute filed to_python of the  result for to_py.
join app_config.path and string 'fixtures' into a valid file path, substitute it for app_dir.
call the method self.validate_key with argument key.
if _serializers is false,
define the function import_library with an argument taglib_module.
return an instance of _CacheInfo class, created with 4 arguments: value under the HITS key of the stats dictionary, value under the MISSES key of the stats dictionary, maxsize and length of cache.
if file path sql_file exists,
import module collections.
define the method render with 4 arguments: self, attrs set to None, date_format set to None and time_format set to None.
call the function ugettext with an argument string "%s GB", substitute '%s' with the result of the call to the function, filesize_number_format with result of division of bytes by GB as an argument, substitute the result for value.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to 'app_label', nargs set to '+', and help set to string 'One or more application label.'.
call the method autoreload.main with 3 arguments: self.inner_run, None and options.
format string 'tag:%s%s:%s/%s' with bits.hostname, d, bits.path and bits.fragment, return it.
call the method opts.model, substitute the result for self.instance.
raise an TemplateSyntaxError exception with an argument error_msg.
define the method __init__ with 4 arguments: self, nodelist_true, nodelist_false and unpacked list varlist.
substitute self.none_value for self.day_none_value.
if file_or_path has an attribute 'read',
for every node in self.nodelist_empty,
derive the class LazyObject from the object base class.
call the method self.set_cookie with 3 arguments: key, value and unpacked dictionary kwargs, return the result.
convert number to a string, truncate first element.
define method add_arguments with self class instance and parser as the arguments.
from django.db import models into default name space.
define the method is_ajax with an argument self.
if UnicodeDecodeError exception is caught,
for every i and widget in enumerated iterable self.widgets, call the function widget.value_from_datadict with 3 arguments: data, files and string created with concatenation of: name, string '_' and i converted into a string, return the results in a list.
call the function new_method_proxy with an argument dir, substitute the result for __dir__.
define the method _handle_fk_field_node with arguments self, node and field.
define the method __init__ with arguments self, context, base, sysid and pubid.
call the method to_delete.add with an argument model.
import module argparse.
use global variable template_source_loaders.
position the file pointer at the beginning of self file.
get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_, if not, substitute self.auto_id for id_.
substitute apps for the value under language_code key of the self._app_dict dictionary.
replace '%s' in string "### %s = %s" with key and value under the key key of the user_setting dictionary, append it to the output.
if TemplateLoader has an attribute 'load_template_source',
VARIABLE_TAG_END is a string '}}'.
evaluate the function callback with request and dictionary of parameters param_dict as the arguments, return the result.
if self.alternatives is true,
call the function datetime.fromtimestamp with argument timeout, substitute it for exp.
call the method self.handle_m2m_field with arguments obj and filed.
return func.
if value is contained in self.empty_values,
if length of fks_to_parent equals integer 1.
from lib2to3.pgen2 import token into default name space.
convert result of the method self.__iter__ into a list, return its length.
call the function datetime.datetime with 3 arguments, d.year, d.month and d.day, substitute the result for d.
text_kwargs is a dictionary created from the result of the function force_text with an argument v, mapped through function k, for every k and v in return value of the kwargs.items.
substitute self for result.parent.
if fields is not None,
append param to i-th element of result_args.
call the method posixpath.splitext with an argument the_path.
raise an EnvironmentError exception with string "Cache directory '%s' does not exist and could not be created" as argument, substitute '%s' with self._dir converted to a string.
get the value under the 'charset' key of content_params dictionary, substitute it for self.encoding.
substitute klass.__dict__ for next.
call the method fp.read, substitute the result for src_data.
if not,
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
substitute args for key.
define the method nud with 2 arguments: self and parser.
if LookupError exception is caught,
return an instance of a class IfChangedNode, created with 3 arguments: nodelist_true, nodelist_false and unpacked list values.
inputs is an empty list.
substitute url_name for self.url_name.
define the method get_template_source with 3 arguments: self, template_name, template_dirs set to None.
if not,
from django.utils.six.moves import _thread as thread into default name space.
if 'empty_value' key of the kwargs dictionary exists remove it and substitute its value for self.empty_value, if not, self.empty_value is an empty list.
substitute v.year, v.month and v.day for year_val, month_val and day_val, respectively.
if pos is greater than or equal to last,
define the function truncatewords_html with 2 arguments value and arg.
define the method __getattr__ with 2 arguments: self and attr set to None.
if IndexError exception is caught,
return a string '%02d' formated with the result of the function self.g.
exp is an instance of Decimal, created with an argument integer 1.
define the method decr with arguments self, key, delta defaulting to integer 1 and version defaulting to None.
call the method local, substitute the result for _active.
define the function check_errors with argument fn.
num_sent is an integer 0.
return obj.
instantiate class BoundaryIter with 2 arguments: self._stream and self._boundary, use it to instantiate LazyStream class, return it.
call the function os.path.dirname with an argument settingsfile, join the result an string 'locale' into a file path, substitute it for localedir.
substitute nodelist_true and nodelist_false for self.nodelist_true and self.nodelist_false, respectively.
return an empty string,
self.lookups is None.
substitute complain for remove.
raise an EntitiesForbidden exception with arguments name, value, base, sysid, pubid and notation_name.
if length of args is not equal to integer 2,
if contents is false, substitute self.label for contents.
get 'exec' attribute from the moves.builtins object, substitute it for exec_.
substitute member.name for name.
return size of the image that was fed to the parser p.
decorator stringfilter,
if not,
if arg is smaller than integer 1,
_trans is an instance of Trans class.
return t.
call the method self._assert_mutable.
define the function boolean_check with an argument v.
define the function add_to_builtins with an argument module.
substitute value under the key key of the self.COOKIES dictionary, substitute it for cookie_value.
if base.DeserializationError exception is caught,
if year is lesser than integer 70,
raise an exception.
decorator deconstructible,
call the method self.compress with an argument clean_data, substitute the result for out.
for every fixture_dir in fixture_dirs,
from django.core.validators import validate_ipv4_address.
call the method parser.add_argument with 5 arguments: string '--no-obsolete', action as a string 'store_true', dest as a string 'no_obsolete', default as boolean False and help as a string "Remove obsolete message strings.".
for every pos and elt in enumerated iterable source,
if self.use_argparse is false,
call the method __deepcopy__ with an argument memo from the base class of the class ChoiceField, substitute the result for result.
from django.core.files.uploadedfile import TemporaryUploadedFile and InMemoryUploadedFile into default name space.
call the method parser.next_token, substitute the result for token.
raise an TemplateSyntaxError exception with an argument string "No named cycles in template. '%s' is not defined", where '%s' is replaced with name.
from django.conf import settings into default name space.
if cursor is true and return value of the function connection.introspection.table_name_converter called with an arugment:  model._meta.db_table is contained in table_names,
define the method _get_count with an argument self.
existing_headers is a set containing lowercase strings header for every header in vary_headers.
add self.default_validators and validators, substitute the result for self.validators.
call the method parser.add_argument with 5 arguments: string '--no-location', action set to string 'store_true', dest set to string 'no_location', default as boolean False and help as a string "Don't write '#: filename:line' lines.".
derive the class Template form the base class object.
call the method value.astimezone with an argument timezone, substitute the result for value.
while end is greater than integer 0 and return value of the s.count called with 3 arguments: an empty string, integer 0 and end, is an even number,
otherwise if child.nodeType equals to child.ELEMENT_NODE,
var_obj is None.
id is a string "literal".
if parent is false,
call the function force_text with 3 arguments: field_name, encoding and errors as a string 'replace', substitute the result for field_name.
return self.
call the method shell.mainloop.
call the function import_string with an argument logging_config, substitute the result for logging_config_func.
append string 'django.conf.locale.%s' to format_locations.
call the function _ with an argument string '%(datetime)s couldn\'t be interpreted in time zone %(current_timezone)s; it ' 'may be ambiguous or it may not exist.', substitute the result for message.
increment i by integer 1.
substitute model._meta for opts.
return s.
define the function check_model_signals with app_config defaulting to None and unpacked dictionary kwargs as arguments,
split ip_str into 2 parts from right, return second element of the result.
return value.
requires_system_checks is boolean False.
substitute new_value for value.
do nothing.
add obj.object.__class__ to self.models set.
call the function exhaust with an argument stream.
set opname attribute of cls object to opfunc.
do nothing.
for every dict_ in self.dicts,
return _standard_context_processors.
decorator stringfilter,
if text ends with truncate,
call the method self.configure_filter with an argument value under name key of formatters dictionary, substitute the result for formatters dictionary value under name key.
substitute response dictionary value under the key 'Cache-Control' for cc.
call the method __init__ with an argument UNKNOWN_SOURCE, from the base class of the class StringOrigin.
call the params.get function with string 'OPTIONS' and None as arguments, substitute the result for self._options.
if node is an instance of Node,
import module traceback.
_format_cache is an empty dictionary.
substitute '%s' in a string "Migrations for '%s':" with app_label, append newline to it, use it as an argument for the call to the method self.style.MIGRATE_HEADING, write the result to self.stdout.
call the function middleware_class with 2 arguments: unpacked list m_args and unpacked dictionary m_kwargs, substitute the middleware.
if t is not None,
raise an ValueError exception with an argument string 'Unable to configure formatter %r: %s' formated with name and e.
call the method msg.attach with an argument attachment.
if safe is true,
define the method exists with arguments self and name.
if ImportError exception is caught,
from __future__ import unicode_literals into default name space.
kwargs is a dictionary created with tuples with 2 elements: k and value under k key of config dictionary, for every k in config, only if result of the function valid_ident called with an argument k evaluates to true.
call the function force_text with an argument bf.label, use the result as an argument for the call to the function conditional_escape, substitute the result label.
write string "Flush cancelled.\n" to self.stdout stream.
append '/' to tmp, substitute it for display_url.
input_type is None.
method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
join hidden_fields elements into a string, without separation, substitute the result for str_hidden.
define the function module_has_submodule with 2 arguments: package and module_name.
evaluate the method s.getvalue, return the result.
derive the class MultipleObjectsReturned from the Exception base class.
call the function bound_func with 2 arguments: unpacked list args and unpacked dictionary kwargs, return the result.
call the method __init__ from the base class of the FileField class, with 2 arguments: unpacked list args and unpacked dictionary.
call the context.push method, with the result, perform,
define the function pprint with an argument value.
return self.file.name.
otherwise if value under the key key of the user_settings dictionary is not equal to the value under the key key of the default_settings dictionary,
if self.loaded_object_count is greater than zero,
define the method __init__ with 3 arguments: self, stream_or_string and unpacked dictionary options.
call the function _trans.templatize with 2 arguments: src and origin, return the result.
return form.
define the method unclosed_block_tag with 2 arguments: self and parse_until.
create directories from the elements in filename.
if string 'charset' is contained in content_params,
substitute self._wrapped for repr_attr.
get config dictionary element under 'format' key, if it exists substitute it for fmt, if not, fmt is None.
call the method params.get with 2 arguments, string 'KEY_FUNCTION' and None, use the result as the argument for the call to the function get_key_func, substitute the result for the self.key_func.
WARNING is integer 30.
SINGLE_BRACE_END is a string '}'.
filemsg is a string 'file %s, ', where '%s' is replaced with origin.
if common_ancestor is None,
call the function import_string with an argument path, substitute the result for func.
try,
call the function flatten_result with an argument item, assign the result to res and args, respectively.
derive the class PasswordInput from the TextInput base class.
call the method __init__ from the base class of the ExternalReferenceForbidden class.
valid is boolean True.
call the method __init__ from the base class of the class RendererMixin, with 2 arguments: unpacked list args, and unpacked dictionary kwargs.
otherwise if obj is an instance of EscapeData,
if e.args list first element starts with string "Error -5",
call the function get_supported_language_variant with 2 arguments: lang_code and strict set to strict, return the result.
define the method writer_enters with an argument self.
call the method __delitem__ from the base class of the QueryDict class, with an argument key.
define the function __init__ with 3 arguments: self, token and parser.
derive the class RequireDebugTrue from logging.Filter base class.
define the method A with an argument self.
from django.db import connections, router, transaction, DEFAULT_DB_ALIAS, IntegrityError and DatabaseError into default name space.
call the function from_current_timezone with an argument result, return the result.
define the function get_language_from_request with 2 arguments: request and check_path set to boolean False.
if self.file is false or self.file.closed is true, return boolean true, otherwise return boolean false.
assign StringIO.StringIO to StringIO and BytesIO.
substitute the result of the function data.temporary_file_path for file.
substitute third and first element of bits for key and value, respectively.
map elements of self._iterator through self.make_bytes function, return the result.
call the method __setitem__ from the base class of the QueryDict class, with arguments key and value.
is length of list_ equals integer 0,
derive class Module_six_moves_urllib_robotparser from the _LazyModule base class.
if NameError exception is caught,
call the function os.path.abspath with an argument dirpath, if it starts with return value of the method os.path.dirname, called with an argument path,
define the method create_parser with 3 arguments: self, prog_name and subcommand.
multiply offset.days with 86400, add offset.seconds to the result, return the result.
append an empty string to list hextets.
substitute form.instance for obj.
delete frame.
otherwise if length of fks_to_parent is zero,
call the function mark_safe with an argument template, formated with substitutions, return the result.
derive the class NullBooleanSelect from the Select base class.
from django.core.mail.backends.base import BaseEmailBackend into default name space.
define the method render with 4 arguments: self, name, value and attrs set to None.
if not,
call the function run with 5 arguments: self.addr, self.port converted to an integer, handler, ipv6 set to self.use_ipv6,  and threading set to threading.
return boolean True.
call the method apps.get_app_config with an argument model._met.app_label, substitute path field of the result for app_dir.
pk_value is None.
from django.conf import settings into default name space.
if key is not contained in self,
if old_style_list is true,
call the method datetime.datetime.combine with unpacked list data_list, substitute the result for result.
otherwise if value under the 'CONTENT_TYPE' key of hte self.META dictionary starts with 'application/x-www-form-urlencoded',
derive the class QueryDict from the base class MultiValueDict.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'test_label', nargs set to string '*', and help is a string 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method'.
supported is boolean True.
if name starts with an string '.',
if num_entries is lesser than self._max_entries,
skip this loop iteration,
try,
call the method update_watch.
if not,
define the method __contains__ with 2 arguments: self and key.
call the method __init__ from the base class of the class SplitHiddenDateTimeWidget, with 3 arguments: attrs, date_format,  and time_format.
if string end ends with string '/>',
define the method load_template_source with 3 arguments: self, template_name, template_dirs set to None.
self._current is None.
call the method parser.parse with an argument tuple with one element string 'endblock', substitute the result for nodelist.
define the function unlock with argument f.
import module json.
if not,
call the method handler.addQuickElement with 2 arguments: string 'ttl' and value under the 'ttl' key of the self.feed dictionary.
delete the value under the key key of self._expire_info dictionary.
define the method __init__ with 2 arguments: self and loaders.
derive the class EmailBackend from the BaseEmailBackend base class.
define the function lock with arguments f and flags.
executor is an instance of MigrationExecutor, created with value under the DEFAULT_DB_ALIAS key of the connections dictionary.
call the ops.quote_name method with argument self._table on the value under the db key of connections dictionary, substitute the result for table.
define the method receive_data_chunk with arguments: self, raw_data and start.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
if not,
return boolean True.
update widget.attrs dictionary with extra_attrs.
call the method self.create_token with 3 arguments: self.template_string list elements from upto index to start index, tuple with 2 elements: upto and start and boolean False, append the result to result.
substitute module for the value under the format key of the serializers dictionary.
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
call the method app_config.get_models, substitute the result fr model_list.
call the signed_value.rsplit method with arguments self.sep and integer 1, substitute the result for value and sig, respectively.
import module opera.
inplural is boolean True.
define the method _truncate_html with 6 arguments: self, length, truncate, text, truncate_len and words.
fork a child process, if the result equals integer 0,
call the method parser.parse with an argument tuple with 3 elements: strings 'elif', 'else' and 'endif', substitute the result for nodelist.
missing_args_message is a string "You must provide a project name.".
call the method parser.add_option with 3 arguments: string '--version', action set to string 'version', and version set to result of the method self.get_version.
if invalid_apps in not empty,
define the function get_language_info with an argument lang_code.
if six.PY2 is true,
otherwise if base_url does not ends with '/' character,
fp is a instance of a class six.StringIO.
call the method content.decode with an argument string 'utf-8', substitute it for content.
return kwargs.
return a string '%02d' formated with self.data.minute.
try,
if entry is a directory,
call the method node.replace with an argument decorated.
substitute self.literal for value.
call the function self._key_to_file with key and version as arguments, substitute it for fname.
define the function conditional_content_removal with request and response as the arguments.
from django.utils import six into default name space.
if bad_app_labels is true,
remove element from kwargs dictionary under the key 'pk_field', substitute it for self.pk_field if it exists, if not self.pk_field is boolean False.
if value is an instance of six.string_types and value converted to lowercase is not equal to strings 'false' or '0',
call the method parser.add_argument with an argument string '--pythonpath'.
if limit_choices_to is callable object,
endless while loop,
substitute stream for self._stream.
for every fixture_file, fixture_dir and fixture_name in return value of the method self.find_fixtures called with an argument fixture_label,
call the method self.clean, substitute the result for cleaned_data.
append iso_input to val.
if not,
call the function with 7 arguments: self, self.instance, self._meta.fields, fail_message, commit, self._meta.exclude, and construct as boolean False, return the result.
call the function timedelta with an argument integer 0, return the result.
call the function MovedModule with 2 arguments: strings "_thread" and "thread",
call the method self._setup.
if imoportError exception is caught,
raise an TemplateDoesNotExist exception with an argument name.
call the function re.compile with an argument raw string "_\(((?:".*?")|(?:'.*?'))\)", substitute the result for constant_re.
call the method expires.utcnow, subtract the result from expires, substitute the result for delta.
import module ssl.
from django.utils.html import conditional_escape and format_html into default name space.
get 'value' attribute of the _active object, if it exists return it, if not, call the function get_default_timezone and return the result.
call the method add_arguments from the base class of the class Command, with an argument parser.
call the function six.iteritems with an argument self.months, convert the result to a list and substitute it for choices.
define the function parse_cookie with cookie as the argument.
input_type is None.
do nothing.
if not,
if not,
template_with_initial is a string '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'.
if NameError exception is caught,
self.fixture_count is integer 0.
return instance.
call the self._list_cache_files method, substitute the result for filelist.
singular is an empty list.
get the value under the key key of the self.cookies dictionary, domain expires for 'domain' key of the returned dictionary.
otherwise if first element of message_context equals to character "'",
tf is an instance of TimeFormat class, created with an argument value.
pop the element form the path as substitute the result for ns.
call the method self.iteritems, return the list of results.
substitute app_or_project for self.app_or_project.
call the method self.emit_post_migrate with arguments verbosity, interactive and database.
if second element of k is None,
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
skip this loop iteration.
if not,
try,
if keys is true,
if not,
derive the class DebugNode from Node base class.
set old_method_name attribute of the base object to the result of the function wrapper called with an argument old_method.
define the function i18n with an argument request.
define the function create_bound_function with 2 arguments: func and obj.
call the function warnings.warn with 2 arguments: string "NoArgsCommand class is deprecated and will be removed in Django 2.0. " "Use BaseCommand instead, which takes no arguments by default." and RemovedInDjango20Warning.
define the method __init__ with 2 arguments self and file.
derive the class Command from the BaseCommand class.
from django.utils.safestring import mark_safe into default name space.
define the method __init__ with 4 arguments: self, out, style, func set to None and endings set to newline character.
return an instance of ExtendsNode with 2 arguments nodelist and parent_name.
call the method self.make_key Whit key and version set to version as arguments, substitute the result for key.
if self.id exists, convert self.id to a string, surround it with round brackets, substitute id for it, otherwise id is an empty string.
status_code is an integer 400.
call the method __init__ from the base class of the class BaseModelFormSet, with an argument unpacked dictionary defaults.
call the method clean with an argument value from the base class of the class TypedChoiceField, substitute the result for value.
return new_value.
paths is a list containing results of the function force_text called with an argument p, for every p in paths.
call the method filter_re.finditer with an argument token, substitute the result for matches.
call the method to_python with an argument value, from the base class of the IntegerField class, substitute the result for value.
if locale is not false or None, substitute it for locales, otherwise substitute all_locales for locales.
call the function ugettext with an argument string "Please correct the duplicate data for %(field_name)s which must be unique for, the %(lookup)s in %(date_field)s.", where '%(field_name)s' is replaced with third element of data_check, '%(date_field)s' is replaced with fourth element of date_check and '%(lookup)s' is replaced with result of the function, six.text_type called with second element of date_check as an argument, return the result.
for every app_label and migration_names in result of the method conflicts.items,
define the method tell with an argument self.
do nothing.
call the method ETAG_MATCH.findall with an argument etag_str, substitute the result for etags.
if self._wrapped is empty,
if is_relation,
substitute WindowsError for WindowsError.
increment mes_count by one.
increment self.fixture_object_count by objects_in_fixture.
for every sql in return value of the function connection.creation.sql_for_pending_references called with arguments: model, style, and pending_references append sql to the string '-- ', put the results in a list, extend alter_sql with the result.
convert the value under the 'daemonize' key of options dictionary to lowercase, if it equals to string 'false', 'no' or 'f',
call the self.make_key with key and version set to version as arguments, substitute the result for key.
call the self.style.HTTP_SERVER_ERROR with an argument msg, substitute it for msg.
call the function io.open with 3 arguments: work_file, string 'w' and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a created_time() method'.
reverse order of elements of self.keyOrder, return the result.
define the method to_python with arguments self and value.
call the method base.build_instance with arguments Model, data and db, substitute the result for obj.
python_2_unicode_compatible decorator,
from django.utils import six into default name space.
split into two parts string main_value_pair at character ':', substitute the parts for name and value, respectively.
join host and server_port into a string, separated with ':', substitute the result for host.
define the function do_ifequal with 2 arguments: parser, token and negate.
define the function parse_date with an argument value.
call the function get_supported_language_variant with an argument accept_lang, return the result.
substitute app_name for self.app_name.
call the function format_html with 3 arguments: self.inner_html, choice_value set to result of the function force_text, called with an argument w, and sub_widgets as an empty string, append the result to output.
if errors is true,
do nothing.
define the method __init__ with 4 arguments: self, template, unpacked list args and unpacked dictionary kwargs.
register.tag decorator,
update messages dictionary with error_messages, if it exists, if not don't update it.
return rv.
call the function is_library_missing with an argument taglib_module, if it evaluates to true,
delete the first element of self.tokens.
is_compressed is boolean False.
output is an empty list.
define the function strftime with 2 arguments dt and fmt.
substitute FILE for TYPE.
categories is a list containing the results of the function to_unicode, called with an argument c, for every c in categories.
make a directory migrations_directory.
define the method tzname with 2 arguments: self and dt.
derive the class LocalTimezone from the tzinfo base class.
append string "Field renamed because it contained more than one '_' in a row." to field_notes.
if AttributeError exception is caught.
skip this loop iteration.
append templatetag_module to _templatetags_modules.
define the function u with an argument s.
substitute Lexer and Parser for lexer_class and parser_class.
call the function force_text, with the function get_current_timezone_name and errors set to string 'ignore' as arguments, replace the result for tz_name.
return s.
if data is None or data is an instance of dict type,
define the method get_full_path with an argument self.
append x converted to an integer to bits.
define the function sql_all with 3 arguments: app_config, style and connection.
define the method __repr__ with an argument self.
call the function limit_choices_to, substitute the result for limit_choices_to.
yield obj as generator return value,
call parser.add_argument method with 'args', metavar set to string 'fixture', nargs set to string '*' and help set to string 'Path(s) to fixtures to load before running the server.'.
call the function timezone.get_current_timezone, substitute the result for current_timezone.
call the re.compile function with an argument raw string '^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$', substitute the result for ipv4_re.
if shell is true substitute list with element shell for available_shells, if not substitute self.shells for available_shells.
split ip_str into parts by ':', substitute the result for hextets.
from django.utils.functional import cached_property into default name space.
from django.utils.safestring import SafeData, EscapeData, mark_safe and mark_for_escaping into default namespace.
define the method __reduce_ex__ with 2 arguments self and proto.
try,
tpl is an string "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})".
define the method clean with arguments self, data and initial set to None.
call the self.style.MIGRATE_HEADING with string "Synchronizing apps without migrations:" as an argument, use the result as an argument for the call to the self.stdout.write.
self.saved_forms is an empty list.
in string '-W%s' replace '%s' with o for every o in sys.warnoptions, put the result into a list, append the list to a list containing sys.executable, append sys.argv to the end of the resulting list, substitute the result for args.
call the function smart_text with argument key_value, use the result as an argument for the call to the self.xml.characters method.
bad_app_labels is an empty set.
sort value with key set to filed resolve of instance of a class Variable, created with an argument arg, reverse the sort and return the result.
define the method __init__ with 3 arguments: self, func and name set to None.
instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and param, append it to result.
derive the class HttpRequest from the object base class.
call the method self.handle_merge with 2 arguments: loader and conflicts, return the result.
decorator stringfilter,
define the method urlencode with 3 arguments: self and safe set to None.
define the method widget_attrs with arguments self and widget.
define the method validate_key with self class instance and key as arguments.
substitute before_import_registry for register_to._registry.
append a tuple with 2 elements: None and nodelist to conditions_nodelists.
remove self.value_converters dictionary element under prefix key, if it exists substitute it for converter, if not, converter is None.
if url ends with '/' character,
WRAPPING_PUNCTUATION is a list with 6 elements: tuple with 2 elements: '(' and ')', tuple with 2 elements: '<' and '>', tuple with 2 elements: '[' and ']', tuple with 2 elements: '&lt' and '&gt', tuple with 2 elements: '"' and '"', and tuple with 2 elements: '\'' and '\''.
call the method self._archive.read with an argument name, substitute the result for data.
define the method write with 3 arguments: self, outfile and encoding.
define the method clean with an argument self.
try,
subtract _cached_modules from module_values, assign the result to new_modules.
call the function _ with an argument string 'Ensure this value is less than or equal to %(limit_value)s.', substitute the result for message.
for every obj in return value of the PythonDeserializer created with 2 arguments: return value of the function yaml.load, with 2 arguments: stream and Loader set to SafeLoader, and unpacked dictionary options,
plural is an empty list.
return a list containing 2 elements: return value of the value.date method and return value of the replace method, called with the argument microseconds set to integer 0, on the result of the method value.time.
return saved_instances.
define the method write_message with arguments self and message.
help is an string "Introspects the database tables in the given database and outputs a Django model module.".
if length of words is greater than length,
locales is a list with an element locale.
define the function _make_key with 9 arguments: args, kwds, typed, kwd_mark as a tuple with an element result of the function object,
try,
define the method _get_regex an argument self.
define the method get with 3 arguments: self, key and default set to None.
try,
if ValidationError exception is caught,
call the function digest, substitute the filed digest_size of the result for hlen.
define the method __init__ with 6 arguments: self, regex set to None, message set to None, code set to None, inverse_match set to None and flags set to None.
define the method _send with arguments self and email_message.
for every pk in value,
from django.utils.six.moves import input into default name space.
do nothing.
extend all_locales list with the elements of locale_dirs list on which os.path.basename function was applied.
widgets is a tuple with 2 elements: instance of DateInput class, created with 2 arguments: attrs as attrs and format as date_format, and instance of TimeInput class, created with 2 arguments: attrs set to attrs and format set to date_format.
define the function _check_test_runner with app_config set to None and kwargs dictionary as arguments.
return an string "<IfEqualNode>".
substitute '%s' is string 'processing file %s in %s\n' with self.file and self.dirpath, write it to command.stdout.
return an empty list.
substitute self.is_localized for widget.is_localized.
define the method __init__ with 4 arguments: self, permitted_methods, unpacked list args and unpacked dictionary kwargs.
from IPython.frontend.terminal.ipapp import TerminalIPythonApp into default namespace.
tried is an empty list.
if OverflowError or ValueError exceptions are caught,
return created_models
if primary_keys is true,
if self.lookups is not None,
if self.is_localized is true,
call the function os.unlink with an argument work_file.
if old_attr is None,
for every issues and group_name in sorted_issues,
substitute ngettext for ungettext.
return forms.
from django.db.migrations.writer import MigrationWriter into default name space.
substitute decimals for digits.
excluded_models is an empty set.
if boundary is true,
replace '%s' in sting '%s-%s' with self.prefix and index, return the result.
from __future__ import unicode_literals into default name space.
call the __init__ method with an argument name from the base class of the MovedModule class.
if MiddlewareNotUsed exception is raised,
define the method _populate with an argument self.
raise an CommandError with argument: string "Can't resolve dependencies for %s in serialized app list.", where '%s' is replaced with: model._meta.app_label and model._meta.object_name joined into a string, with separator '.', result joined into a string, separated by string ', ' for every model and deps in sorted list of elements skipped sorted by key: return value of the lambda function with an argument obj, and result the __name__ field of the first element of obj.
if NotImplementedError exception is caught,
import module os.
try,
obj is an instance of Node class, created with 2 arguments: connector set to self.connector and negated set to self.negated.
if cmd ends with ext,
raise an exception.
define the method write with 3 arguments self, outfile and encoding.
call the datetime.datetime.utcfromtimestamp with timestamp converted to an integer as argument, substitute result for timestamp.
from django.utils.translation import get_language to the default name space.
substitute col_name for value under the 'db_column' key of the field_params dictionary.
decorator function register.filter with an argument is_safe set to boolean False.
if cls._delegate_text is true,
return retval.
if not,
substitute stat.st_mtime for mtime.
define the method multiple_chunks with arguments self and hunk_size set to None.
define the function urlsafe_base64_decode with an argument s.
define the method __init__ with arguments: self and options set to None.
if not,
try,
if not,
call the function socket.getfqdn, substitute the result for self._fqdn.
return boolean False.
if AttributeError exception is caught,
format string ' pgettext(%r, %r) ' with message_context and g, write it to out.
if rhs is an instance of SafeText,
call the function get_quantifier with 2 arguments: ch and pattern_iter, substitute the result for count and ch, respectively.
call the get_script_name function with environ as argument, substitute the result for script_name.
for every node in nodelist,
substitute self.choices for self.widgetchoices.
call the method token.split_contents, convert the result into a list and substitute it for bits.
if ret is true.
try,
define the next_space_index with 2 arguments: subject and i.
substitute the value under the entry key of the sys.path_importer_cache dictionary for finder.
from django.utils import timezone into default name space.
if data is false,
if ImportError, renamed to e, exception is caught,
join output into a string, separated by newline characters, use it as an argument for the call to the mark_safe, return the result.
derive the class DateTimeBaseInput from the TextInput base class.
for every middleware_method in self._exception_middleware,
for every dict_ in self.dicts,
call the method __init__ from the base class of the class RadioChoiceInput, with 2 arguments: unpacked list args, and unpacked dictionary kwargs.
define the method resolve with 2 arguments: self and s.
consume_next is boolean True.
if to_lower is true,
call the method self.coerce with an argument choice, append the result to new_value.
return an instance of SafeText, created with an argument t.
FILE_MODIFIED is integer 1.
from optparse import OptionParser into default name space.
raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv6 address.', and code set to string 'invalid'.
call the method validators.MinLengthValidator with min_length converted into an integer, append the result to list self.validators.
derive the class NullBooleanField from the base class BooleanField class.
return default.
if self._request_middleware is None,
define the function make_msgid with argument idstring set to None.
call the timezone.now function, substitute the result for now.
get format_type attribute of the settings object, return it.
output_transaction is boolean True.
if list_ is not an instance of tuple or list types and length of list_ is not equal to integer 2,
call the method add_fields from the base class of the class BaseModelFormSet, with 2 arguments: form and index.
if email_messages is false,
try,
call the function re.sub with 3 arguments: string "([a-z])'([A-Z])", lambda function with an argument m and return value, result of the m.group method called with an argument integer 0 converted into lowercase and result of the method value.title, substitute the result for t.
from django.core.management.base import CommandError and BaseCommand into default name space.
from django.utils.module_loading import import_string into default name space.
call the method value.replace with an arugment tzinfo set to None, return the result.
define the method add_arguments with self and parser as arguments.
if row_data is true and None is not contained in row_data,
if function pk_is_not_editable called with an argument pk evaluates to true, or pk.name is not contained in form.fields,
if las equals integer 1,
call the function ugettext with an argument string "%s PB", substitute '%s' with the result of the call to the function, filesize_number_format with result of division of bytes by PB as an argument, substitute the result for value.
if token.contents equals string 'empty',
derive the class BadHeaderError from the ValueError base class.
perform binary or for operands: fourth element of_attr_list and termios.ECHO, store the result in fourth element of attr_list.
call the function logging.getLogger with string 'django.request' as the argument, assign the return object handle to logger.
evaluate the function force_bytes, with the arguments s, encoding, strings_only and errors, return the result.
return context.
func.is_usable in false,
call the function six.iteritems with an argument kwargs, for every k and v in the result,
if level is an instance of int type,
derive the class CommandError from the base class Exception.
if ValueError or TypeError exceptions are caught,
define the method resolve_context with 2 arguments: self and context.
substitute complain for reverse.
join template_dirs elements into a string, separated by '|', use it as an argument for the call to the function force_bytes, use the result as the argument for the call to the function hashlib.sha1, call the hexdigest method on the result, join template_name and previous final result into a string, separated with '-', return it.
raise CommandError exception with msg as argument.
define the method __init__ with 2 arguments self and var.
if command.use_argparse is true,
define the function bytes_to_text with 2 arguments s and encoding.
call the function _is_shorthand_ip with an argument ip_str, if it evaluates to false,
property decorator,
define the method as_hidden with 3 arguments: self, attrs set to None and unpacked dictionary kwargs.
from django.forms.widgets import TextInput, NumberInput, EmailInput, URLInput, HiddenInput, MultipleHiddenInput, ClearableFileInput, CheckboxInput, Select, NullBooleanSelect, SelectMultiple, DateInput, DateTimeInput, TimeInput, SplitDateTimeWidget, SplitHiddenDateTimeWidget and FILE_INPUT_CONTRADICTION.
substitute '%s' in string 'id_%s' with name, return it.
if cleaned_line is false,
do nothing.
raise an Resolver404 exception with an argument dictionary containing 1 entry: path for 'path'.
call the function write with an argument sep.
if dklen is false,
call the function c with an argument unpacked dictionary kwargs, substitute the result for result.
if object response has an attribute 'render' and if response.render is callable object,
return nothing.
for every ext in extensions,
otherwise if ch equals a string 'P',
substitute self.waiting_readers for t.
compile regular expression based on the string '\s*,\s*' and assign the result to cc_delim_re.
for every o in opts,
define the function is_valid_ipv6_address with an argument ip_str.
if not,
substitute settings.TEMPLATE_DIRS for template_dirs.
try,
do nothing.
define the method add_root_elements with 2 arguments: self and handler.
return an instance of the class Media, called with an unpacked dictionary with an entry: name appended to string '_', attribute of the self object for name converted into a string.
fill_to is an integer 7.
remove 'BACKEND' key from params dictionary and put it into backend.
call the method render from the instance of CheckboxInput class, with 3 arguments: checkbox_name, boolean False, attrs as a dictionary with an entry: checkbox_id for 'id', substitute the result for value under the 'clear' key of the substitutions dictionary.
derive the class NoReverseMatch with Exception as base class.
call the method to_python with an argument value from the base class of the TimeField class, return the result.
import module os.
if not,
if m and n are not None,
count occurrences of '\n' in t.contents, add the result to t.lineno, substitute the result for cur_lineno.
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
append list containing string '--no-location' to self.xgettext_options.
define the method reverse with arguments self, lookup_view, unpacked list args and unpacked dictionary kwargs.
raise a SerializerDoesNotExist exception with an argument format.
call the method Model._meta.pk.to_python with one argument: value under the 'pk' key of dictionary d, or None if previous doesnt exists, substitute the result for the value under the Model._meta.pk.attname key of data dictionary.
substitute val_expr for self.val_expr.
new_args is an empty list.
from django.core.management.base import CommandError into default name space.
call the response.render() method and assign the return to the response.
replace all occurrences of symbol '_' in string k with symbol '-', use new string as key to find a value in dictionary cc, replace this value with v.
call the function local, substitute the result for self._caches.
define class dummy.
substitute module.WSGIServer for WSGIServer.
define the method compile_filter_error with 3 arguments: self, token and e.
call the function normalize with an argument p_pattern, substitute the result for bits.
define the method d with an argument self.
call the function template_dir.decode with an argument fs_encoding, substitute the result for template_dir.
position the file pointer at the beginning of self file.
ip_address_validator_map is a dictionary containing 3 initial entries: tuple containing 2 elements: list with an element,  validate_ipv46_address and return value of the function _ with an argument string 'Enter a valid IPv4 or IPv6 address.' for 'both', tuple containing 2 elements: list with an element validate_ipv4_address and return value of the function _ with an argument string, 'Enter a valid IPv4 address.' for 'ipv4' and tuple containing 2 elements: list with an element validate_ipv6_address, and return value of the function _ with an argument string 'Enter a valid IPv6 address.' for 'ipv6'.
raise an MultiValueDictKeyError exception with printable representation of key.
compile the regex "^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$", substitute it for host_validation_re.
return filelist.
import module sys.
for every form in self.extra_forms,
call the method list.__getitem__ with 2 arguments self and key, substitute the result for value.
instantiate a class Group with 2 arguments: string "%%(%s)s" formated with param, and None, append it to result.
use the global variables _mtimes and _win in this function.
call the function six.text_type with an argument bf, append the result to hidden_fields.
define the method __init__ with 3 arguments: self, filter_expr and nodelist).
substitute the value under the pk_key key of the self.data dictionary for pk.
if not,
create list out of last_row elements from the start to the last length of row_ender element, append str_hidden and row_ender to it, substitute the result for last element of output.
substitute hlen for dklen.
join elements of the output into a string, separated by newlies, return the string.
define the method save with arguments self, name and content.
from django.core.management.base import AppCommand into default name space.
define the method to_python with arguments self and value.
call the method handler.addQuickElement with 2 arguments: string 'language' and value under the 'language' key of the self.feed dictionary.
self.method is None.
return response.
define the function phone2numeric with an argument phone.
if self.hint exists, replace '%s' in a string "\n\tHINT: %s" with value of self.hint, substitute it for hint, otherwise hint is an empty string.
define the method error with arguments self and message.
substitute META for self._meta.
return dirs.
_mtimes is an empty dictionary.
result is an empty list, upto is integer 0.
from django.db.migrations.autodetector import MigrationAutodetector into default name space.
define the function normalize_newlines with an argument text.
append k into a list for every k and v in return value of the six.iteritems function with an argument _serializers, only if v.Serializer.internal_use_only is false, return the resulting list.
call the method parser.add_argument with 5 arguments: string '--database', action set to string 'store', dest as a string 'database', default set to DEFAULT_DB_ALIAS and help set to a string: 'Nominates a database onto which the cache tables will be installed. Defaults to the "default" database.'
for every bwidget in self.widgets,
compatibility is a string 'compatibility'.
if not,
define the method __repr__ with an argument self.
substitute 3 successive elements starting from the i-th index of pieces for first, lang and priority, respectively.
if p is greater or equal to integer 0,
return nothing,
call the function warnings.warn with 2 arguments: warn_msg and TranslatorCommentWarning.
try,
if replaces filed of graph.nodes element at the plan_node index is true,
call the method self.fields.values, for every field in result,
for every bit in bits,
if code is not None
call the method self.configure_custom with an argument config, substitute the result for result.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
if message is not an instance of the ValidationError class,
if Exception, renamed to e, exception is caught,
move integer 1 left for 40 bits, substitute the result for TB.
get the position of the file self.file pointer, substitute it for size.
substitute declared_fields for new_class.base_fields.
if max_num is None,
get the value under the 'incomplete' key of the field.error_messages dictionary, if it is not contained in errors,
call the __init__ method with arguments file and name, from the base class of the UploadedFile class.
define the method add_fields with 3 arguments: self, form and index.
if commit is true,
from email.mime.message import MIMEMessage into default name space.
return dec.
raise an ViewDoesNotExist exception with an argument string "Could not import '%s'. View does not exist in module %s.", where string '%s' is replaced by lookup_view and mod_name, respectively.
call the method self.connection.login with arguments self.username and self.password.
from django.http.cookie import SimpleCookie into default name space.
from django.utils.encoding import smart_text and force_text into default name space.
append orig_file to string '#: ', substitute it for new.
define the method to_python with arguments self and value.
for every attr in _urllib_robotparser_moved_attributes,
define the function mark_for_escaping with an argument s.
substitute exception for self.exception.
define the method __init__ with an argument self.
do nothing.
return obj_dict.
from django.test.utils import get_runner into default namespace.
crate a file named init_path.
TOKEN_COMMENT is integer 3.
try,
calculate length of provided and increment it by one, substitute the result for plen.
join into a file path: self.locale_dir and string '.pot' appended to domain converted to string, substitute it for potfile.
call the method parser.add_argument with 5 arguments: string '--no-optimize', action as a string 'store_true', dest as a string 'no_optimize', default set to boolean False and help as a string 'Do not try to optimize the squashed operations.'.
derive the class StreamingBuffer from the object base class.
define the method N with an argument self.
for every sub_stream in boundarystream,
call the __bool__ method with argument self, on the return value of the type function with argument self, return the result.
define the method _iter with an argument self.
save.alters_data is boolean True.
append self.pointer to self.backout.
from django.utils.encoding import force_bytes, force_str and force_text into default name space.
for every i and line in enumerated iterable lines,
return value if six.PY2 is true, if not return value.encode(ISO_8859_1).decode(UTF_8).
if upload is true,
call the sio.readline method with size as an argument, substitute the result for line.
from django.utils import formats into default name space.
call the method self.write_items with an argument handler.
return boolean False.
if not,
from django.conf import settings into default name space.
define the method __nonzero__ with argument self.
call the method self.reverse_dict.getlist with an argument lookup_view, substitute the result for possibilities.
evaluate the logical expression, if other is an instance of RegexValidator and self.regex.pattern equals to other.regex.pattern, and self.regex.flags equals to other.regex.flags and self.message equals to other.message and self.code equals to other.code, and self.inverse_match equals to other.inverse_match, return the result.
import module cgi.
call the method tempfile.NamedTemporaryFile with argument suffix set to string '.upload'.
for every model in app_models,
if file path old_app_dir exists,
substitute qs for self._queryset.
delete _prefixes.values.
from __future__ import unicode_literals into default name space.
if check_path is true,
for every filename in gen_filenames(),
raise an AttributeError with an argument attr.
do nothing.
import module os.
if index is negative inter 3, if is_reversed, substitute it for in_index, if not, in_index is negative integer 2.
value under the cache_key key of the _format_cache dictionary is None.
return self._size.
if message is not None
if not,
self._post is an instance of QueryDict created with arguments: an empty string and encoding set to self._encoding, self._files is an instance of class MultiValueDict.
define the method run_checks with self class instance, app_configs defaulting to None, tags defaulting to None as argument.
join result of the parts function into a bytes string, substitute it for out.
call the method parser.add_argument with 5 arguments: string '--empty', action as a string 'store_true', dest as a string 'empty', default set to boolean False and help as a string "Create an empty migration.".
html_class_attr is an empty string.
call the function time_format with 2 arguments: value and arg, return the result.
otherwise if o is an instance of decimal.Decimal object,
if self.waiting_writers is not equal to integer 0,
if f is an instance of ModelFiled, for every f in opts.virtual_fields, append f to a list, substitute the resulting list for sortable_virtual_fields.
_format_modules_cache is an empty dictionary.
append tuple with 2 elements: i and value under the ORDERING_FIELD_NAME key of form.cleaned_data dictionary to self._ordering.
substitute self.config for config.
call the method self.nodelist_false.render with an argument context, return the result.
call the connection.introspection.table_names with tables as argument, store the result in seen_models.
if LookupError exception is caught,
widget.input_type is a string 'hidden'.
color_names is a tuple with 8 elements: strings 'black', 'red', 'green', 'yellow', 'blue', 'magenta', 'cyan' and 'white'.
return a list containing an empty string and a list containing an empty list.
for every field in concrete_model._meta.local_fields,
try,
raise an ValidationError with 2 arguments: value under the 'contradiction' key of the self.error_messages dictionary and code set to 'contradiction'.
call the function re.compile with an argument string '</%s>' formated with tags_re, substitute the result for endtag_re.
call the method parser.add_argument with 6 arguments: string '-n', string '--natural', action is string 'store_true', dest is string 'use_natural_keys', default is boolean False and help is a string 'Use natural keys if they are available (deprecated: use --natural-foreign instead).'.
if response has an attribute 'render' and response.render is a callable object,
define the function is_naive with an argument value.
for every x in slice of cwords from the second element to the element at the cword decremented by 1 index, split x by character '=' and append first element of the result to the prev_opts list.
define the __init__ method with 3 arguments: self, unpacked list args and unpacked dictionary **kwargs.
substitute self.version for version.
convert col_name to lowercase, substitute the result for new_name.
if location is None,
if subcommand_cls.use_argparse is true,
define the method id_for_label with arguments self and id.
call the function get_connection with 2 arguments: backend set to self.email_backend and fail_silently set to boolean True.
return boolean True.
import module datetime.
read the whole file f, substitute the result for content.
call the M.set method with the key, real_value, coded_value as the arguments.
if IndexError exception is caught,
if elt is an instance of Choice or NonCapture classes,
index_output is an empty list.
try,
call the function file_move_safe with content.temporary_file_path function result and full_path.
days is a tuple with 7 elements: strings 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' and 'Sun'.
if not,
if not,
from django.template.loader import BaseLoader, get_template_from_string, find_template_loader and make_origin into default name space.
call the function handle_m2m with an argument relobj.
call the handle_filed method of the base class of the Serializer class, with arguments obj and field.
resolved_args is an list with elements, return value of the method var.resolve with an argument context, for every var in self.args.
if f.blank is false and form_field.required is false and field_value is contained in form_field.empty_values,
call the function bytes with an argument self, divide the result with rhs and return the reminder of the division.
otherwise if value is an instance of datetime.date,
call the BaseCache initialization method __init__ with 3 arguments self, list of arguments args and dictionary of arguments kwargs.
raise an ValueError with an argument string 'The joined path (%s) is located outside of the base path component (%s)', where '%s' is replaced with final_path and base_path.
from django.core.mail.backends.console import EmailBackend as ConsoleEmailBackend into default name space.
try,
call the method self.exit_command.
if ValueError exception is caught,
if app_config is None,
define the method previous_page_number with an argument self.
members is a list with elements member for every member in the result of the function self._archive.getmembers, only if member.name is not equal to string 'pax_global_header'.
if item_type equals FIELD,
delete the value under the 'Content-Transfer-Encoding' key of self dictionary.
call the method cursor.close,
define the function address_string with an argument self.
for every operation in migration.operations, substitute '%s' in a string "
call the function force_bytes with argument content, substitute it for content.
define the method render with 2 arguments: self and context.
if response is None,
substitute name for self.name.
skip this loop iteration.
try,
if app_config.models_module is None.
increment i by integer 1, substitute the result for i.
define the method __copy__ with an argument self.
if length of tzinfo is greater than integer 3, convert elements of tzinfo from indexes 1 to 3 to an integer, substitute the result for offset_mins, otherwise offset_mins is integer 0.
substitute filter_func for value under the name key of self.filters dictionary.
call the function force_bytes with an argument salt, substitute the result for salt.
call the method __init__ with an argument lexer, from the base class of the class DebugParser.
derive the class TextNode form the base class Node.
add self.form.error_css_class to extra_classes set.
if kwds is true,
from django.utils.dates import MONTHS, MONTHS_3, MONTHS_ALT, MONTHS_AP, WEEKDAYS and WEEKDAYS_ABBR into default name space.
finally perform,
seen is an empty set.
raise an NoReverseMatch exception with an argument string "Reverse for '%s' with arguments '%s' and keyword ", "arguments '%s' not found. %d pattern(s) tried: %s", replace '%s' with lookup_view_s, args, kwargs, length of patterns, patterns,  and respectively.
substitute field for self.field.
derive the class TagHelperNode form the base class Node.
substitute the self.DEFAULT_CHUNK_SIZE for chunk_size.
chars is a string 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'.
substitute object for Iterator.
if not,
if err_log is true,
if token.contents equals a string 'else',
append potfile to potfiles.
skip this loop iteration.
format string '<a href="%s"%s>%s</a>' with lead, middle and trail, use it as an argument for the call to the function mark_safe, substitute the result for i-th element of words.
if boundary is false or return value of the method cgi.valid_boundary called with an argument boundary evaluates to false,
if sent is true,
from __future__ import unicode_literals into default name space.
models is an empty set.
if first element of the url_fields is false,
slice root starting from the prefix_length index to the end, substitute it for path_rest.
extend basedirs list with settings.LOCALE_PATHS.
from django.utils import baseconv into default name space.
define the method getlist with 2 arguments: self and key.
allowed_schemes is an list containing 3 elements: strings 'http', 'https' and 'ftp'.
field_type is a string 'NullBooleanField('
define the method set_cookie with 9 arguments: self, key, value set to an empty string, max_age set to None, expires set to None,
substitute length of list_ for list_length.
if not,
message is an string 'Unknown field(s) (%s) specified for %s'.
try,
if length of value is not equal to integer 1,
from io import BytesIO into default name space.
substitute flags for self.flags.
from django.forms import Form into default name space.
call the method f.save_form_data with 2 arguments: instance and value under the f.name key of cleaned_data dictionary.
return a tuple with 2 elements: resource and string 'egg:%s:%s', where '%s' is replaced with app_config.name and pkg_name, respective.
call the function force_text with an argument value, substitute the result for value under the 'value' key of the final_attrs.
if not,
if kwds is true,
define the function render_value_in_context with 2 arguments: value and context.
define the method _delete with arguments self and key.
for every message in email_messages,
call the function timesince with an argument value, return the result.
call the function is_aware with an argument date, if it evaluates to true,
for every path in self.locale_paths,
raise an TemplateSyntaxError exception with an argument string "Malformed arguments to url tag".
return boolean False.
return boolean True.
decorator stringfilter,
property decorator.
substitute result for value under the self.asvar key of context dictionary.
do nothing.
call the method base64.urlsafe_b64decode with sum of s and pad as argument.
call the function parse_http_date with an argument date, return the result.
call the function allow_lazy with 2 arguments: normalize_newlines and six.text_type, substitute the result for normalize_newlines.
call the method form.add_initial_prefix with an argument self.auto_id, substitute the result for self.html_initial_id.
self.filters is an empty dictionary.
for every x is the range of integers from level to the integer 2, in the reversed order,
if NameError exception is caught,
load_template_source.is_usable is boolean True.
define the method validate with arguments self and value.
substitute fields for new_class.base_fields.
call the method connection.creation.sql_indexes_for_model with arguments model and style, extend output with the result.
try,
define the method defalt with arguments self and o.
call the function warnings.warn with 3 arguments: msg, RemovedInDjango19Warning and stacklevel as integer 2.
call the function os.path.basename with an argument fixture_file, use the result as an argument for the call to the method, self.parse_name, assign the result to _, ser_fmt and cmp_fmt, respectively.
if key starts with self.prefix.
if attrvalue is not an empty string,
try,
changed is boolean True.
return self.file.closed.
call the method _trans.gettext_noop with an argument message.
if arg is not string 'on' or 'off',
if not,
input_type is a string 'password'.
call the function force_text with an argument redirect_to, use the result as an argument for the call to the function urlparse, substitute the result for parsed.
if fourth element of version does not equals to string 'alpha' or 'beta' or 'rc' or 'final', raise an exception.
substitute self for value.configurator.
evaluate the method connection.introspection.table_name_converter with model._meta.db_table as argument, append it to tables.
if not,
d is an empty dictionary.
substitute greater element between integer 0 and end decremented by one for last.
if data is bound to the same object as FILE_INPUT_CONTRADICTION,
define the method get_data with an argument self.
from django.db.migrations.loader import AmbiguityError into default name space.
if fd is greater or equal to integer 0.
from django.conf import settings into default name space.
if ImportError exception is caught,
substitute connection for self.connection.
substitute settings.LANGUAGES for the value under the 'LANGUAGES' key of the context_extras dictionary.
if self.required is false,
if data is true,
from django.utils.safestring import mark_safe into default name space.
substitute SelectMultiple for widget.
call the function ugettext with an argument msg_with_ctxt, substitute the result for result.
substitute args for self.args.
if self.fixture_count equals integer 0 and self.hide_empty is true,
if VariableDoesNotExist exception is caught,
if StandardError, renamed to e, exception is caught,
as_form is boolean False.
define the function find_template_loader with an argument loader.
for every model in app_models,
if every input_val in special_floats,
take locale or all_locales, whichever is not empty, respectively, and substitute it for locales.
register.tag decorator,
for every loader in self._loaders,
fetch next entry for the database that cursor points into, substitute first element of it for num.
if KeyError exception is caught,
split instructions by ',' character, substitute the result for styles.
call the method custom_sql_for_model with model, no_style() and connection as arguments, substitute the result for custom_sql.
join elements of quant into a string, split it by string ',', substitute the result for values.
convert fist p elements of language to lowercase, append '_' to it, covert to uppercase language elements from (p+1)-th index to the end, append it to the previous result, return it.
try,
call the function self.filepath.resolve with an argument context, substitute the result for filepath.
match rest string with self.INDEX_PATTERN regex, substitute the result for m.
import module glob.
multiply offset.days, integer 24 and integer 60, sum the result with floored result of division of offset.seconds, and integer 60, substitute the result for timezone.
substitute self._parser for parser.
call the method self.create_select with 6 arguments: name, self.year_field, value, year_val, choices and self.year_none_value, substitute the result for the value under the 'year' key of the html dictionary.
get name attribute from the instance object, call it and return the result.
lbp is integer 0.
for every field_name in self.fields,
call the method match.groupdict, substitute the result for kw.
call the __init__ method from the base class of the WSGIRequestHandler class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
define the method render with 2 arguments: self and context.
if timeout equals to DEFAULT_TIMEOUT,
derive the class WithNode from Node base class.
substitute settings.TEMPLATE_STRING_IF_INVALID for current,
define the method save_existing_objects with 2 arguments: self and commit set to boolean True.
substitute setting and nodelist for self.setting and self.nodelist, respectively.
define the method send_messages with arguments self and email_message.
day_field is a string '%s_day'.
define the function escapejs_filter with an argument value.
from django.core.cache.backends.db import BaseDatabaseCache into default name space.
from django.template.loader import get_template, select_template.
return boolean False.
call the method parser.print_help.
define the method render with 4 arguments: self, name, value and attrs set to None.
define the method unsign with arguments self and signed_value.
call the function add_to_builtins with an argument string 'django.template.defaultfilters'.
if self.pk_field,
define the method add_arguments with arguments self and parser.
if UnicodeError, renamed to e, exception is caught,
join elements of comment_notes into a string, separated by whitespaces, append it to the string ' #', append the result to field_desc. yield string '
try,
if ignore_failures is true,
define the method prepare_value with 2 arguments: self and value.
derive the class HttpResponsePermanentRedirect from the HttpResponseRedirectBase base class.
define the method has_changed with an argument self.
call the method six.iteritems with an argument dict_, for every k and v in the result,
from pprint import pformat into default name space.
substitute app_template_dirs for template_dirs.
flat is an empty dictionary,
for every format in settings.SERIALIZATION_MODULES,
for every module_to_search in args,
from django.core import signals into default name space.
from django.utils.safestring import mark_safe, SafeData and mark_for_escaping into default name space.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'fixture', nargs set to '+', and help set to 'Fixture labels.'.
call the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and function_name, substitute the result for args and kwargs.
if self.m2m.data and save_m2m are true,
add ext to f, substitute the result for fext.
return nothing.
call the method field.value_to_string with an argument obj, use the result as an argument for the call the method self.xml.characters.
for every root in settings.ALLOWED_INCLUDE_ROOTS,
if varargs is None,
define initialization method __init__ with argument self.
call the method writer.as_string, write the result to file fh.
from django.http.cookie import SimpleCookie and parse_cookie into default name space.
if OSError, renamed to e, exception is caught,
call the function date.strftime with an argument string '%Y-%m-%dT%H:%M:%S', substitute the result for time_str.
delete all the whitespaces from ext, split it by ',' character, extend ext_list with the result.
call the function format_html with 3 arguments: string ('<textarea{0}>\r\n{1}</textarea>', return value of the function flatatt, called with an argument final_attrs and return value of the function force_text called with an argument value, return the result.
break the loop execution.
from __future__ import unicode_literals into default name space.
substitute new_obj for obj.
break from the loop execution.
from django.core import signing into default name space.
if lengths of new_operations and operations are the same,
for every key and value in return value of the self._headers.values method, call the function to_bytes with 2 arguments: key, and string 'ascii' and call the function to_bytes with 2 arguments: value and string 'latin-1', join the previous 2 results into a string, separated by ': ', append it to a list, substitute the resulting list for headers.
return a class instance FilterNode, called with an arguments filter_expr and nodelist.
if sys.platform starts with a string 'java',
for every hook in sys.path_hooks,
from __future__ import unicode_literals into default name space.
for every form in self call the form.as_ul method, join the results in a string, separated by an empty string.
if not,
if the UnicodeEncodeError exception is caught,
call the method prepare_value the base class of the class ModelMultipleChoiceField, with an argument value, return the result.
call the method os.setsid.
append ':' and ipv4_address to result.
substitute data.name for file_name.
substitute self._options for client.behaviors.
define the method unget with arguments self and bytes.
if self.localize is true,
if strict is false,
if i-th element of subject is '"' character or "'" character,
pos and last are integer 0.
call the method prepare_value from the base class of the class ModelMultipleChoiceField, with an argument v, for every v in value, return the list of results.
divide message by error.params, substitute the residue of the division for message.
call the method self.extend_nodelist with 3 arguments: nodelist, compiled_result and token.
substitute widget for self.widget.
if StopIteration exception,
for every check in checks,
append tempdir to self.self.paths_to_remove.
call the function get_tag_uri with 2 arguments: values under 'link' and 'pubdate' keys of item dictionary, substitute the result for unique_id.
define the method render with 2 arguments: self and context.
define the method end_object with arguments self and obj.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a modified_time() method'.
return value,
define the function new_method_proxy with an argument func.
call the function re.compile with 2 arguments: elements of parts joined into a string, separated with '|', and result of bitwise OR performed on 2 operands: re.MULTILINE and re.VERBOSE, substitute the result for value under the state key of the self.regexes dictionary.
get the value under the 'content-disposition' key of the info dictionary, substitute it for content_disposition.
define the method encoding with arguments self and val.
define the method __init__ with 4 arguments: self, target, expression and var_name.
if self.verbosity is greater than integer 0,
try,
call the method b64_decode with an argument base64, substitute the result for data.
call the Parser object with stream and self._boundary, for every item_type, meta_data and field_stream in return value,
define the function do_with with 2 arguments: parser and token.
call the method tag.groups, substitute the result for closing_tag, tagname and self_closing, respectively.
import module sys.
call the method logging.getLogger, substitute the result for root.
decorator function register.filter with an argument is_safe set to boolean False.
call the _expire_info.setdefault method with name and empty dictionary as arguments, substitute the result for self_expire_info.
substitute empty bytes string for self.buffer.
return an dictionary containing 1 entry: request for 'request'.
if not,
get the value under the 'CONTENT_TYPE' key of environ dictionary, if the key doesnt exist get the empty string, use it to call the cgi.parse_header method, assign the result to the _ and content_params respectively.
if value is not equal to value or value equals return value of the call to Decimal with argument 'Inf', or value equals return value of the call to Decimal with argument '-Inf'
gettext._translations is an empty dictionary.
define ensure_echo_on function.
call the method self.nodelist.render with an argument context, strip the result of the surrounding whitespaces, use the result as an argument for the call to the function strip_spaces_between_tags, return the result.
call the method self.resolve_context with an argument self.context_data, substitute the result for context.
if length of list_ equals integer 1,
execute regardless of the exception being raised,
substitute first 12 elements of r for r.
char2number is an dictionary, with 26 elements: 2 for 'a', 2 for 'b', 2 for 'c', 3 for 'd', 3 for 'e', 3 for 'f', 4 for 'g', 4 for 'h', 4 for 'i', 4 for 'j', 5 for 'k', 5 for 'l', 5 for 'm', 6 for 'n', 6 for 'o', 6 for 'p', 7 for 'q', 7 for 'r', 7 for 'r', 7 for 's', 7 for 't', 8 for 't', 8 for 'u', 8 for 'v', 9 for 'w', 9 for 'x', 9 for 'y' and 9 for 'z'.
define the method __init__ with 5 arguments: self, display_name, loader, name and dirs.
return boolean True.
raise a TypeError exception,
substitute first args for other_dict.
if Model.DoesNotExist exception is caught,
import module errno.
call the method self.stdout.write with an argument string "No fixture '%s' in %s.", where '%s' is replaced with fixture_name, and result of the function humanize called with an argument fixture_dir.
define the method add_arguments with self and parser as arguments.
call the function self.compress with empty list as an argument, return the result.
derive the class MLStripper from the HTMLParser base class.
self.invoked_for_django is boolean True.
define the method add_arguments with 2 arguments self and parser.
import module warnings.
substitute self for data.
try,
import module warnings.
from django.template.base import Variable, Library and VariableDoesNotExist into default name space.
if PY3 is true,
define the method modified_time with arguments self and name.
call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.
concatenate var_name, VARIABLE_ATTRIBUTE_SEPARATOR and fourth element of bits, use the result as an argument for the call the method, parser.compile_filter, substitute the result for expression.
append string ".moves.urllib_error" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for error.
if key is not contanied in self,
call the function conditional_escape with an argument checkbox_name, substitute the result for value under the 'clear_checkbox_name' key of the substitutions dictionary.
decorator function register.filter with 2 arguments is_safe set to boolean True and needs_autoescape set to boolean True.
call the os.path.basename with path as argument, substitute the result for filename.
define the method configure_root with 3 arguments: self, config and incremental set to boolean False.
ch is None.
raise an ImportError exception with an argument string "No IPython".
call the method test_runner.run_tests with an argument test_labels, substitute it for failures.
try,
if url is false,
substitute content_length for self.content_length.
define the method _get_context_stack_frame with 2 arguments: self and context.
if six.PY2 is true,
call the nethod self._isdst with an argument dt, if it evaluates to true,
if alternatives exists substitute it for self.alternatives, if not self.alternatives is an empty list.
decorator function wraps with 2 arguments: view_func and assigned set to result of the function available_attrs, called with an argument view_func.
define the method start_serialization with an argument self.
from os import path into default name space.
value under the 'empty_permitted' key of the defaults dictionary is boolean True.
substitute subject elements from p-th to i-th index for res.
if KeyError or AttributeError, renamed to exc, exceptions are caught,
with return value of the function io.open with fname and string 'rb' as arguments, named as f,
call the method apps.get_app_config with an argument exclude, substitute the result for app_config.
call the method self.nodelist.render with an argument context, substitute the result output.
define the function F with an argument i.
substitute self for retval.
output_transaction is boolean True.
from django.core.exceptions import ValidationError into default name space.
append bytes to chunks.
if submod is true and return value of the function module_has_submodule called with 2 arguments: result of the function: import_module called with an argument parentmod and submod, evaluates to false.
raise an InvalidTemplateLibrary exception with an argument string ("Unsupported arguments to Library.filter: (%r, %r)", where '%r' is replaced with name and filter_func, respectively.
define the method __mod__ with 2 arguments: self and rhs.
property decorator,
return None.
from pkg_resources import resource_string into default name space.
get is a tuple containing elements generated by the call to the function pformat with an argument POST_override, if POST_override is not None, or otherwise generated with the call to the function pformat with an argument request.POST.
if not,
define the method render with 2 arguments: self and context.
return text.
if message is true,
_itervalues is a string "values".
if self.is_bound is true and i is smaller than self.initial_form_count,
substitute params for self.params.
_empty_value is an empty string.
substitute instance._meta for opts.
call the function new_method_proxy with an argument str, substitute the result for __str__.
take elements of p from index i incremented by 1 to the end, strip the result of the whitespaces, substitute it for value.
put elements of validators.EMPTY_VALUES to a list, substitute the result for empty_values.
raise an exception.
if not,
substitute settings.CACHE_MIDDLEWARE_SECONDS for cache_timeout.
call the method self._archive.close.
if field_type equals a string 'DecimalField',
append a tuple with 2 elements: condition and nodelist to conditions_nodelists.
do nothing.
get 'nodelist' attribute from self object. if it doesnt exists return boolean False, if the result evaluates to false,
if not,
define the method _set_queryset with 2 arguments: self and queryset.
if not,
substitute value under the KEY key of the root dictionary for oldkey.
return boolean False.
call the method self._handle_fk_field_node with field_node and field as arguments, substitute the result for the value under the field.attname of the data dictionary.
substitute self.html_initial_name for name.
call the self.compile_messages with locations as argument,
define the function csrf with an argument request.
self.to is an empty list.
if ignore is true,
if self.selected_fields is None or last three elements of field.attname are contained in self.selected_fields:
skip this loop iteration.
value under the 'required' key of the kwargs dictionary is boolean False.
call the method self.style.NOTICE with string "  Your models have changes that are not yet reflected in a migration, and so won't be applied." as an argument, use the result as an argument for the call to the self.stdout.write method.
templatetags_modules_candidates is an list with an argument string 'django.templatetags'.
self.directory_permissions_mode is a tuple containing: directory_permissions_mode if directory_permissions_mode is not None, or settings.FILE_UPLOAD_DIRECTORY_PERMISSIONS if it is.
raise SuspiciousMultipartForm exception with an argument string, "The multipart parser got stuck, which shouldn't happen with" " normal uploaded files. Check for malicious upload activity; if there is none, report this to the Django developers.".
return text.
call the function get_runner with arguments settings and self.test_runner, substitute the result for test_runner_class.
for every x in upload_handlers if x.chunk_size is true, append x.chunk_size to a list, substitute the result for possible_sizes.
call the function lazy with 2 arguments: ugettext and six.text_type, substitute ugettext_lazy.
if not,
if self.connection is None,
define the function compare_ordering_key with an argument k.
call the method self.parse_file_upload with arguments self.META and data, assign the result to self._post and self._files.
define the function default_if_none with 2 arguments value and arg.
try,
call the self.clear method.
if value is an instance of Field class,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
return value.
if not,
class method decorator,
define the method __init__ with 4 arguments: self, content set to an empty list, unpacked list args and unpacked dictionary kwargs.
increment the offset by the length of self.__starttag_text.
substitute the value under the 'outlog' key of options dictionary for value under the 'out_log' key of daemon_kwargs dictionary.
if self equals to other return boolean False, otherwise return boolean True.
if ValueError exception is caught,
if response.streaming is true,
from __future__ import unicode_literals into default name space.
call the method self.port.isdigit, if it evaluates to false,
if field is not equal to NON_FIELD_ERRORS and field is not contained in self.fields,
return boolean True.
yield nothing.
if html_message is True,
DEFAULT_ATTACHMENT_MIME_TYPE is a string 'application/octet-stream'.
define the method eval with 2 arguments: self and context.
child_loggers is an empty list.
define the method has_next with an argument self.
if self.cc is true,
raise an ValueError exception with an argument string "Base36 conversion input too large.".
call the hashlib.md5 fuction with force_bytes(key) as argument.
raise an ValueError exception with an argument string 'Unable to convert %r at %r' formated with value and rest.
safe_data is an empty dictionary.
define function color_style, without input arguments.
instantiate class ChunkIter with 2 arguments: self._input_data and self._chunk_size, use it to instantiate LazyStream class, assign the handle to stream.
define the method value_from_datadict with 4 arguments: self, data, files and name.
add elements from new_modules set to _cached_modules set.
code is a string 'limit_value'
call the function os.path.dirname with an argument django.__file__, join the result into a path, use it as an argument for the call to the function os.path.normpath, substitute the result for django_dir.
if not,
call the method self._cache.set with key, value, self.get_backend_timeout(timeout) as arguments.
convert cls to a dictionary, convert the result into a set and convert convert into a set, roots is a set of differences of the two previous sets.
call the function user_function with 2 arguments: unpacked list args and unpacked dictionary kwds, substitute the result for result.
if renderer is true,
substitute error_class for self.error_class.
define the method _isdst with 2 arguments: self and dt.
alternative_subtype is a string 'alternative'.
from django.forms.fields import Field and FileField into default name space.
substitute form.cleaned_data for cleaned_data.
if IndexError exception is caught,
DELETION_FIELD_NAME is a string 'DELETE'.
self.pos is integer 0.
call the method self.validate_key with key as argument.
define the method write_items with 2 arguments: self and handler.
call the method self._archive.close.
while i is lesser than length of subject and i-th element of subject is not equal to c,
call the method self.options.copy, substitute the result for self.json_kwargs.
call the function force_text with an argument ttl, substitute the result for ttl.
if self.verbosity is greater than integer 1,
return self._fname.
if settings.TEMPLATE_DEBUG and display_name are both true,
do nothing.
call the method self._delete with argument key.
substitute element at self.pos index of self.tokens for retval.
fks_to_parent is a list containing f for every f in opts.fields, only if f is an instance of ForeignKey, and, if f.rel.toequals parent_model or f.rel.to is contained in result of the call to the method parent_model._meta.get_parent_list.
call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
substitute model._meta for opts.
help is a string "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available.".
join base an unpacked list paths into a string, get the absolute path in unicode representation of the result, substitute the result for final_path.
call the function six.text_type with an argument value, use the result as an argument for the call to the function mark_safe, return the result.
get value under the key settings.CACHE_MIDDLEWARE_ALIAS of caches dictionary, substitute with it the cache.
supports_microseconds is boolean False.
yield field and ValidationError object converted to an list, created with an argument errors.
append app_name to the invalid_apps.
define the method as_p with an argument self.
if ch is not equal to a sring '?' or escaped is true,
call the method self.set_cdata_mode with tag as the argument.
return an empty string.
append a tuple with elements key and value to current_fields.
for every code in tuple with 2 elements: lang_code and generic_lang_code,
if not,
define the method __init__ with arguments self and request defaulting to None.
if return value of the method UserModel._default_manager.exists is false and value under the 'interactive' key of the options dictionary is true,
from django.utils.functional import lazy into default name space.
if key is not contained in self,
do nothing.
define the method errors with an argument self.
call the method f.post_create_sql with arguments: style and model._meta.db_table, extend the output with the result.
call the method extend_nodelist with 3 arguments: nodelist, node and token, from the base class of the class DebugParser.
class static method,
derive the class SplitDateTimeWidget from the MultiWidget base class.
while t is greater than integer 0,
take a tuple with 2 elements: boolean False and method resolve called with an empty dictionary on the instance of Variable class, created with an argument constant_arg, append it to args.
if not,
call the method self._add_fallback.
if var ends with '.',
for every c in reversed order of self.__class__.__mro__,
if ValueError exception is caught,
evaluate self._has_expired with argument key, if the result is True,
substitute record.request for request.
get the value under the 'database' key of the options dictionary, substitute the result for database.
if s is an instance of bytes or Promise and s._delegate_bytes is true,
import module warnings.
from email.header import Header into default name space.
for every message is message,
call the function urlretrieve with arguments url and tempdir and filename joined into a file path, assign the result to the_path,  and info, respectively.
priority is floating point number 1.0.
otherwise if value is boolean False, string 'False' or string '0'
call the method cursor.execute with an argument line.
append self.pointer to self.backout.
if val equals an empty list.
for every line in chunk_buffer,
self._done is boolean False.
from __future__ import unicode_literals into default name space.
if not,
call the method parser.next_token, substitute the result for token.
if not,
raise an ValidationError with 2 arguments: value under the 'invalid_date' key of the self.error_messages dictionary and code set to string 'invalid_date'.
call the function _check_middleware_classes with dictionary kwargs as argument, use the result as an argument for the call to the function errors.extend.
do nothing.
self._template_response_middleware is an empty list.
if self.selected_fields is None or field.attname is contained in self.selected_fields,
if KeyboardInterrupt exception is caught,
_ is an empty dictionary.
substitute self.default_timeout for timeout.
call the method self.error with 2 arguments: token and string "Empty block tag", return the result.
substitute self.widget if the widget is false, otherwise substitute widget for widget.
if self.setting is true,
return None.
return result.
call the method block.nodelist.render with an argument context, substitute the result for result.
call the function strip_tags with an argument value, return the result.
if not,
get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
define the function dumps with 5 arguments: obj, key set to None, salt set to string 'django.core.signing',
evaluate the function bytes with the argument s, and return the result.
define the method __init__ with 4 arguments: self, redirect_to, unpacked list args and unpacked dictionary kwargs.
if value under the 'feed_copyright' key of the self.feed dictionary is not None,
substitute doc for func.__doc__.
return an empty string.
call the self.read method with argument chunk_size, substitute the result for data.
define the function ngettext_lazy with 3 arguments: singular, plural and number set to None.
substitute sys.maxsize for MAXSIZE.
self.connection is None.
import module zlib.
call the os.path.split with argument name, assign the result to the dir_name and file_name respectively.
call the method validators.MinValueValidator with min_value converted into an integer, append the result to list self.validators.
define the method handle_raw_input with arguments: self, input_data, META, content_length, boundary and encoding set to None.
save.alters_data is boolean True.
call the method serializers.get_serializer with an argument format.
join self.dirpath and self.file in a string, substitute with it '%s' in string "<TranslatableFile: %s>", return the result.
return commands.
substitute callable for callable.
if daemonize is true,
if value is an instance of bool.
if AttributeError exception is caught,
define the method __setitem__ with 3 arguments: self, header and value.
if key is not contained in default_settings,
self.managed is boolean True.
substitute object_list for self.object_list.
define the method addQuickElement with 4 arguments: self, name, contents set to None and attrs set to None.
if header_end equals integer negative 1,
define the method delete_many with 3 arguments: self, keys, and version set to None.
substitute msg for body_msg.
define the function sql_destroy_indexes with 3 arguments: app_config, style and connection.
if run_syncdb and executor.loader.unmigrated_apps exist,
append pattern into a list patterns, for every possibility, pattern and defaults in possibilities.
call the method self.compile_filter_error with 2 arguments: token and e, if it evaluates to false,
return self._size.
return obj_pk.
call the field.to_python method with field_value, substitute the result for field.name key of the data dictionary.
writer is instance of MigrationWriter class, created with new_migration argument.
if upto is not equal to start.
import module re.
call the function allow_lazy with an argument phone2numeric, substitute the result for phone2numeric.
call the function timesince with 2 arguments: value and arg, return the result.
m is an instance of Media class.
if TypeError or ValueError exceptions are caught,
for every message in messages,
call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options and args.
define lambda function that returns self.file.readinto field, use it as an argument for property function, put the result in readinto.
define the function check_for_migrations with 2 arguments: app_config and connection.
call the function force_bytes with an argument key_salt, substitute the result for key_salt.
property decorator,
substitute filter_expr and nodelist for self.filter_expr and self.nodelist, respectively.
define the method end_index with an argument self.
if change equals to FILE_MODIFIED,
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
if settings.DEBUG is true,
return boolean True.
_func_defaults is a string "func_defaults".
for every part in plural,
meta is a string '<could not parse>'.
define the method handle_merge with arguments self, loader and conflicts.
call the method parser.add_argument with 5 arguments: string '--all', action set to string 'store_true', dest set to string 'all', default set to boolean False and help set to a string 'Display all settings, regardless of their value. Default values are prefixed by "###".'
substitute value for field.name key of self._current dictionary.
call the function re.compile with 2 arguments: raw string '<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' and bitwise OR performed with 2 operands, re.U and re.S, substitute the result for re_chars.
msg is a instance of a SafeMIMEText class created with arguments: self.body, self.content_subtype and encoding.
define the method __init__ with 15 elements: self, title, link, description, language set to None, author_email set to None, author_name set to None, author_link set to None, subtitle set to None, categories set to None, feed_url set to None, feed_copyright set to None, feed_guid set to None, ttl set to None and unpacked dictionary kwargs.
from django.utils.module_loading import import_string into default name space.
input_type is a string 'hidden'.
call the function reloader_thread.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
otherwise if name equals a string 'id'.
define the method id_for_label with 2 arguments: self and id_.
_translations dictionary value, under the language key is an instance of DjangoTranslation class, created with an argument language.
define the function from_current_timezone with an argument value.
define the method __deepcopy__ with 2 arguments self and memo.
from django.views.debug import ExceptionReporter and get_exception_reporter_filter into default name space.
call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults.
call the self._lock.writer method, with the result perform the following,
get the type of the exc object, substitute it for exc_type.
for every sql in custom_sql,
call the function warnings.warn with 2 arguments: "django.utils.tzinfo.FixedOffset will be removed in Django 1.9. " "Use django.utils.timezone.get_fixed_timezone instead." and RemovedInDjango19Warning.
call the function re.compile with 2 arguments: string '^([a-z])[:|]' and re.I, substitute the result for _url_drive_re.
raise a NotImplementedError with an argument string
if Exception, renamed to e, exception is caught,
call the method self.path with argument name, substitute the result for full_path.
try,
define the function add_move with an argument move.
return result.
if error is an instance of ValidationError,
raise a ValidationError exception with 2 arguments: return value of the function _ called with an argument string 'Enter a valid IPv4 or IPv6 address.', and code set to string 'invalid'.
call the __init__ method with 3 arguments: ERROR, unpacked list args and unpacked dictionary kwargs from the base class of Error.
join into a file path: app_dir and string %s.%s.sql, where '%s' is replaced by opts.model_name and backend_name, respectively, append the result to sql_files.
call the function _trans.get_language_from_path with an argument path, return the result.
call the method token.split_contents, substitute the result for bits.
define the function get_format_modules with 2 arguments: lang set to None and reverse set to boolean False.
call the self._cache.get method with argument key, substitute the result for val.
 %s%s' with: line and character ',' if i is lesser than length of table_output decremented by one, or with an empty string if its not, append the resulting string to full_statement.
define the function deactivate_all.
call the function mark_safe with an argument arg, append it to arg_vals.
if self.old_timezone is None,
if bcc is not an six.string_types instance raise an error with message string '"bcc" argument must be a list or tuple'.
call the method self.cache_key with 2 arguments name and dirs, substitute the result for key.
from django.core.mail import get_connection into default name space.
define the method __init__ with an argument self.
substitute regex for self._regex.
if self.is_reversed is true, substitute reversed_text is an string ' reversed', if not, reversed_text is an empty string.
call the function dropwhile with 2 arguments: function len and msgs spit into parts at newlines, join the result into a string, separated by newline, substitute it for msgs.
if command.verbosity is greater than integer 0,
if not,
self.file is a instance of a class TemporaryUploadedFile initialized with arguments: self.file_name, self.content_type, integer 0, self.charset and self.content_type_extra.
derive the class MemcachedCache from the BaseMemcachedCache base class.
self._unget_history is an empty list.
return proxy.
call the method password.translate with an argument hmac.trans_36, update inner dictionary with the result.
return value.
derive the class JsLexer from the Lexer base class.
raise an TemplateSyntaxError exception with an argument string 'The %r option was specified more than once.', where '%r' is replaced with options.
raise an CommandError with an argument string "App '%s' does not have migrations (so squashmigrations on it makes no sense)", where '%s' is replaced with app_label.
return form.
if call to the function response.has_header with string 'Last-Modified' as an argument returns boolean False,
if prefix is false,
call the method serializers.get_public_serializer_formats, substitute the result for ser_fmts if ser_fmt is None, otherwise ser_fmts is a list containing ser_fmt.
return result.
if decompress is true,
delete the value under the key key of self._cache dictionary.
raise an CommandError exception with an argument string '"%s" is not a valid port number or address:port pair.', where '%s' is replaced with value under the 'addrport' key of the options dictionary.
define the method get with 4 arguments, self, key, default set to None and version set to None.
call the function translation with an argument language, substitute the result for _active.value.
format settings.TEMPLATE_STRING_IF_INVALID with self.var, return the result.
if option is contained in options,
if self.paths_to_remove is true,
if field_value has an attribute '__iter__' and is not an instance of six.text_type object,
return result.
substitute t.lineno for comment_lineno_cache.
define the handle_app_config with 3 arguments self, app_config and unpacked dictionary options.
derive the class Widget from the base class in the return value of the six.with_metaclass called with an argument MediaDefiningClass.
call the force_bytes function with an argument settings.SECRET_KEY, substitute the result for key.
if e.errno equals errno.EEXIST,
from __future__ import unicode_literals into default name space.
define the method __iter__ with an argument self.
if second element of data_list is contained in self.empty_values,
return klass.
if domain is not None,
call the email_message.recipients method, if it evaluates to false,
define the method create_variable_node with 2 arguments self and filter_expression.
get the value under the state key of the regexes dictionary, call the method finditer on the result with 2 arguments: text and start, for every match in the result,
if opts.model is true,
for every attr in _urllib_parse_moved_attributes,
define the method _iterkeys with an argument self.
substitute name and value for self.name and self.value.
break from the loop execution,
define private method __str__ with argument self.
has_bz2 is boolean True.
if not,
from lib2to3 import fixer_base into default name space.
define the method to_python with arguments self and value.
call the method token.split_contents, substitute the result for bits.
substitute self.queryset for qs.
if want_unicode is false,
remove first element from self.command_stack.
call the method apps.get_app_config with an argument app_label, substitute the result for app_config.
if extensions is false, substitute it for exts, otherwise exts is a list containing 2 elements: string 'html' and string 'txt'.
if OSError, renamed to e, exception is caught,
define the method __repr__ with an argument self.
call the method tz_name.encode with the arguments 'ascii' and 'ignore', call the method decode on the result with 'ascii' as argument, in the resulting string replace all occurrences of ' ' with '_' and append it to the end of cache_key.
evaluate the function backend_cls with location and params as arguments, return the result.
delete entry under the attr key of obj_dict dictionary.
derive the class PyLibMCCache from BaseMemcachedCache base class.
call the function _generate_cache_key with request, request.method, headerlist, key_prefix as arguments, return the result.
raise an NotImplementedError with an argument string "Subclasses of AppCommand must provide a handle_app_config() method.".
otherwise if vale is not an instance of ConvertingList and value is an instance of list type,
reverse elements order of values.
decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.
define the function include_is_allowed with an argument filepath.
join printable representation of d into a string separated with ', ', for every d in self.dicts, substitute the result for dictreprs.
open the output file in writing mode if output is true, assign the file descriptor to stream, otherwise stream is None.
return expanded_template.
singular is an empty list.
comment is an empty list.
deifne the method __init__ with 5 arguments: self, class_name, old_method_name, new_method_name and deprecation_warning.
if TemplateDoesNotExist exception is caught,
call the method DjangoSafeDumper.add_representer with arguments decimal.Decimal and DjangoSafeDumper.represent_decimal.
import module os.
return value.
for every char in key,
call the method bytes_to_text with 2 arguments: key and self.encoding, substitute the result for key.
to_unicode is an lambda function with an argument s, result is the result of the function force_text, called with 2 arguments: s and string_only as boolean True.
if i is greater than length of subject,
call the method self.get_backend_timeout with argument timeout, substitute the result for timeout.
substitute style.ERROR for style.ERROR_OUTPUT.
call the method clean with an argument value from the base class of the class TypedMultipleChoiceField, substitute the result for value.
call the method unlink on self with self.name as the argument.
if protocol is not equal to string 'both' and unpack_ipv4 is true,
if NameError exception is caught,
if view_function is not a callable function,
logger.handlers is an empty list.
define the private method __init__, with self instance of this class, obj and list of arbitrary length *args as arguments.
convert settings.FIXTURE_DIRS to a list, extend dirs by it.
if request has an attribute named 'urlconf',
substitute args for self.args.
if features.needs_datetime_string_cast field of object under the db key of connections dictionary is true and current_expires is not an instance of datetime object.
define the method render with 2 arguments: self and context.
call the function warnings.warn with 3 arguments: string "The django.forms.util module has been renamed. " "Use django.forms.utils instead.", RemovedInDjango19Warning and stacklevel set to an integer 2.
define the method __iter__ with argument self.
derive the class Command from the AppCommand base class.
if value has an attribute 'close',
call the method imatch.group with an argument integer 2, use the result as an argument for the call to the method context_re.match, substitute the result for context_match.
call the method self._archive.extractfile with an argument member, substitute the result for extracted.
if constant_arg is true,
call the function io.open with 3 arguments: potfile, string 'a' and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
from django.utils.encoding import force_bytes into default name space.
_anonymous_ is a list containing one string: '_offset_union'.
define the function get_language_bidi.
for every field in self.fields,
split dotted_path into two parts from the right at the '.' character, assign the result to module_path and class_name, respectively.
call the sql_flush function with self.style, connections under the key with the value of options dictionary under the 'database' key,
if filters is true,
import module time.
try,
derive the class HTMLParser from the base class HTMLParser located in the module _html_parser.
define the method __init__ with 4 arguments: self, template_string, origin set to None and name set to None.
if self.leave_locale_alone is false,
call the function type with 3 arguments: string 'WSGIServer', tuple containing 2 elements: socketserver.ThreadingMixIn and WSGIServer, and an empty dictionary, substitute the result for httpd_cls.
self.app_label is a string 'django_cache'.
call the function os.chmod with arguments dst and mode.
substitute inverse_match for self.inverse_match.
import module base64.
from django.utils.html import format_html, format_html_join and escape into default name space.
call the method parser.next_token, substitute the result for token.
call the function shutil.rmtree with 2 arguments: path_to_remove and onerror set to rmtree_errorhandler.
define the method body with an argument self.
call the function msvcrt.get_osfhandle with return value of the _fd(f) function as argument, substitute the result for hfile.
define the function get_text_list with 2 arguments: list_ and last_word set to result of the function ugettext_lazy called with an argument string 'or'.
define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.
derive the class EmailBackend from the BaseEmailBackend base class.
from __future__ import unicode_literals into default name space.
call self._delete method with argument fname.
substitute level for rv.
substitute result for value under key key of self dictionary.
call the method parser.next_token, substitute the result for endblock.
define the method __init__ with 3 arguments: self, input_date_formats set to None, input_time_formats set to None,
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
return an instance of TemplateSyntaxError class with an argument msg.
do nothing.
return default.
define lambda function that returns self.file.readline field, use it as an argument for property function, put the result in readline.
decorator stringfilter,
return result.
TOKEN_BLOCK is integer 2
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label[.ModelName]', nargs set to '*' and help is a string 'Restricts dumped data to the specified app_label or app_label.ModelName.'.
substitute language for self.language.
define the method _get_filename with argument self.
define initialization method __init__ with self class instance, unpacked list args, unpacked dictionary kwargs as arguments.
if PY3 is true,
while i is lesser than length of subject and i-th element of subject is not equal to p-th element of subject,
call the method time.mktime with an argument tt, substitute the result for stamp.
e is an instance of TemplateSyntaxError class, created with an argument msg.
evaluate the http.QueryDict method with raw_query_string and encoding set to self._encoding as arguments, return the result.
import module sys.
derive the class Http404 from the Exception base class.
append settings.LOCALE_PATHS converted into a list to a list containing an element globalpath, return it.
import module tempfile.
define the function get_quantifier with 2 arguments ch and input_iter.
break from the loop execution.
do nothing.
if KeyError exception is caught,
define the method has_changed with arguments self, initial and data.
return path_info.decode method return value called with UTF_8 as the argument.
define the method __call__ with arguments self and value.
define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
for every fixture_label in fixture_labels,
call the method self.make_key with key and version set to version as arguments, substitute it for key.
from django.utils import six into default name space.
from django.utils.text import normalize_newlines into default name space.
if extend is true,
self._app_dict is an empty dictionary.
if '_meta' is not an attribute of obj,
open writer.path file in write mode, with file descriptor as fh, perform the following,
call the self._get_pages method with 3 arguments: self.object_list from the bottom to the top index, number and self, return the result.
define the method __nonzero__ with an argument self.
if related_att is not None,
call the method query_string.decode, substitute the result for query_string.
raise an ImportError exception.
url is a string 'mailto:%s@%s' formated with local and domain.
call the function normalize_newlines with an argument value, substitute the result for value.
if i is greater than or equal to the result of the method self.initial_form_count, and call to the method form.has_changed evaluates to false,
decorator method lru_cache.lru_cache with an argument maxsize set to None.
substitute self._stream for stream.
try,
register is an instance of Library class.
if field.help_text is true, substitute field.help_text for self.help_text, if not self.help_text is an empty string.
call the function os.path.basename with an arguments path, substitute the result for filename.
if not,
append entry to files list.
call the function constant_time_compare with 2 arguments: val1 and val2.
if new_mod is None,
from ctypes import sizeof, c_ulong, c_void_p, c_int64, Structure, Union, POINTER, windll and byref into default name space.
sort current_fields elements with key being a lambda function with argument x and return value creation_counter filed of first element of x.
derive the class Choice from list base class.
return get_git_changeset.cache.
from django.forms.utils import everything into default name space.
substitute the value under the 'HTTP_HOST' key of the self.META dictionary, substitute it for host.
if self.to_field_name is true,
define the function advance_iterator with an argument it.
call the function thread.start_new_thread with main_func and args as arguments.
from django.core.files.uploadhandler import StopUpload,  SkipFile and StopFutureHandlers into default name space.
substitute arg converted into an integer for length.
from django.core.management.base import BaseCommand and CommandError into default name space.
substitute error.error_dict for error.
call the method self.widget_attrs with an argument widget, substitute the result for extra_attrs.
sort result in reversed order by the key as lambda function with an argument k and reeturn value second element of k.
for every sql_file in sql_files,
define the method widget_attrs with arguments self and widget.
call the method self.fetch_command with first element of options.args as argument, on the result call the method print_help, with 2 arguments: self.prog_name and first element of options.args.
call the function os.path.dirname with an argument writer.path, substitute the result for migrations_directory.
define the method flush with an argument self.
prepend string '_' to i converted to an string, append the result to the value under the 'id' key of the attrs_plus.
try,
call the method related.natural_key, substitute the result for value.
join app_config.path and string 'locale' into a file path, substitute it for localedir.
skip this loop iteration.
if autoescape is true and safe_input is false,
skip this loop execution,
substitute lineno for translators_comment_start.
del self._post
define the function get_template_from_string with 3: source, origin set to None and name set to None.
define the method write with 2 arguments: self and val.
if args is true,
remove entry at the key key of the attrs dictionary.
define the method eval with 2 arguments self and context.
define the function constant_time_compare with 2 arguments: val1 and val2.
return supported.
define the method delete with arguments self and name.
convert priority into a floating point integer, substitute it for priority.
call the function get_format with an argument string 'DATE_FORMAT', substitute it for fmt.
replace every occurrence of '\\' in s with '\\\\'.
from django.conf import settings into default name space.
replace '%s' in string "%s = %s  ###" with key and value under the key key of the user_setting dictionary, append it to the output.
try,
from django.core.management.color import no_style into default name space.
if locations is not empty,
substitute exc for self.settings_exception,
call the method self._new_instance with 3 arguments: self.children, self.connector and self.negated, substitute the result for obj.
 - %s\n" with return value of the operation.describe method, write the result to self.stdout.
derive the class EmailMessage from the object base class.
append None to bits.
raise an EntitiesForbidden exception with arguments name, None, base, sysid, pubid and notation_name.
define the function load_handler with arguments: path, unpacked list args and unpacked dictionary kwargs.
call the function force_str with an argument string '<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>', where '%s' is replaced with request.__class__.__name__, path, return value of the function six.text_type called with an argument get, return value of the function six.text_type called with an argument post, return value of the function six.text_type, called with an argument cookies and return value of the function six.text_type called with an argument meta.
call the os.path.samefile with arguments src and dst, return the result.
write errors to self.stdout.
if not,
define the method is_hidden with an argument self.
substitute callback for self._callback.
convert '\n' to a string, if it is contained in value or '\r' converted to an string is contained in value,
define the method __repr__ with an argument self.
_iterkeys is a string "keys".
_func_closure is a string "__closure__".
return Operator.
import module time.
call the method self.get_resolved_arguments with an argument context, substitute the result for resolved_args and resolved_kwargs.
if OSError exception is caught,
call the x.split method with arguments: character '=' and integer 1, store the result in k and v, respectively.
define the method render with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
if self.field.show_hidden_initial is true,
if six.PY2 is true, _BASE64_DECODE_ERROR is TypeError, if not, _BASE64_DECODE_ERROR is binascii.Error.
call the method self.configurator.convert with an argument value, substitute the result for result.
 Processing %s.%s model\n" as argument, with all occurrences of '%s' replaced with, app_name and model._meta.object_name, respectively.
deactivate and deactivate_all are lambda functions returning None.
if f equals to string '__pycache__',
in string '%s_%d', replace '%s' with new_name and '%d' with num, substitute the result for new_name.
call the method handler.addQuickElement with 2 arguments: string 'name' and value under the 'author_name' key of the self.feed dictionary.
for every i and v in enumerated iterable value,
self.first is boolean True.
append name to 'add_' use it as the name of the attribute to get from combined object , call the result with an argument: name appended to string '_', as the name of the attribute to get from other object, or if the previous doesnt exist, None.
define the function get_unbound_function with an argument unbound.
if not,
change access mode of path to stat.S_IWRITE mode.
define the method _get_num_pages with an argument self.
self._non_form_errors is None.
if offset is smaller than integer 0, sign is '-', otherwise sign is '+'.
define the method render with 4 arguments: self, name, value and attrs set to None.
call the method context.new with an argument values, use it as an argument for the call to the method template.render, return the result.
define function no_style, without input arguments.
define the method __init__ with 4 arguments: self, takes_context, args and kwargs.
call the method validate with an argument value, from the base class of the FloatField class.
define the function get_valid_filename with an argument s.
return an instance of OrderedDict class, created with an argument fields.
get _iterlists attribute of the class d, call the result with an argument unpacked dictionary kw, convert the result to a iterable, return it.
opts is a tuple created out of elements s, for every s in styles is s is in the keys of the opt_dict dictionary.
get the value under the 'csrf_token' key of the context dictionary, if it exists substitute the result for csrf_token, if not csrf_token is None.
define the method id_for_label with an argument self.
num_pages is a property object with _get_num_pages as a getter method.
substitute self.rawdata for rawdata.
if settings.DEBUG is True,
from django.http.response import REASON_PHRASES as STATUS_CODE_TEXT into default name space.
property decorator,
return lookup_view
call the method parser.add_argument with 7 arguments: string '--ignore', string '-i', action as a string 'append', dest as a string 'ignore_patterns', default as an empty list, metavar as a string 'PATTERN', and help as a string 'Ignore files or directories matching this glob-style pattern. Use multiple times to ignore more.'.
both_after is an list with an element instance of Tok class, created with 2 arguments: string 'other' and raw string '.'.
raise an ViewDoesNotExist exception with an argument string "Could not import '%s.%s'. View is not callable.", where string '%s' is replaced by mod_name and func_name, respectively.
substitute text_kwargs for candidate_subs.
if not,
convert value to an integer, return it.
call the force_str function with an argument value, substitute the result for value.
call the method self.setFeature with 2 arguments: handler.feature_external_pes and boolean False.
from __future__ import unicode_literals into default name space.
call the method connection.introspection.table_names, substitute the result for tables.
return boolean False.
if auto_id is true and 'id' is not contained in attrs and 'id' is not contained in widget.attrs,
return node.
if f.name is contained in cleaned_data,
while ch is not equal to a string '}',
return an empty string,
get the values under the 'app_label' and 'migration_name' keys of the options dictionary, substitute them for app_label and migration_name, respectively.
read file fp, call the method decode on the result with an argument settings.FILE_CHARSET, return tuple containing 2 elements, previous result and filepath.
title is an empty string.
data is an instance of BytesIO class, created with an argument: self._body.
return string "<Block Node: %s. Contents: %r>", where '%s' is replaced with self.name and '%r' with self.nodelist.
return first element of value.
use the global variable _serializers.
return an empty list.
define the method autocomplete with an argument self.
try,
open out_log flie in append mode with buffering size of input buffer, substitute the result for so.
while length of digits is smaller than or equal to absolute value of exponent,
call the function cache_get with an argument key, substitute the result for link.
define the method decompress with 2 arguments: self and value.
substitute _iteritems for iteritems.
define the method encode with self class instance and i as arguments.
return boolean True.
derive the class Literal from the TokenBase base class.
try,
cc is a dictionary populated with items by calling function _to_tuple with el as an argument, for every el in split string cc_delim_re, with delimiter being the value of dictionary response under the key 'Cache-Control'.
define the function next_space_index with 2 arguments: self and subject.
define the method add_arguments with an argument self and parser.
define the function truncatechars_html with 2 arguments value and arg.
call the method self.paginator.validate_number with self.number incremented by 1 as argument, return the result.
from xml.sax import handler into default name space.
call the function constant_re.findall with an argument t.contents, substitute the result for cmatches.
LOCK_NB is a hexadecimal 1.
for every app_label in bad_app_labels,
if form.is_bound is true,
import module warnings.
substitute cls.__bytes_cast for cls.__bytes__.
define the method add_arguments with self and parser.
if self.timezone is true,
call the function self.path with argument name, use it and mode as arguments for the call to the function open, use it as an argument for creatinon of a File object instance, return it.
define the method __call__ with 3 arguments: self, template_name and template_dirs set to None.
return raw_data.
if not,
define the function load with 2 arguments: parser and token.
call the method get_language, substitute the result for language_code.
if r ends with string '+00:00',
if six.PY3 is true,
if limit_choices_to is not None,
call the function table_name_filter with an argument table_name, if it evaluates to true,
call the method self.create_parser with first and second element of argv, substitute the result for parser.
call the function self._resolve_lookup with an argument context, substitute the result for value.
for every path in paths,
try,
from django.utils.synch import RWLock into default name space.
define the method decr_version with 4 arguments, self, key, delta defaulting to integer 1 and version defaulting to None.
define the function Deserializer with arguments object_list and unpacked dictionary options.
get the value under the name key of the data dictionary, if it exists return it, if not return None.
if number is greater than self.num_pages,
try,
return path.
categories is a list containing the results of the function force_text, called with an argument c, for every c in categories.
if ImportError exception is caught,
if '.' is not contained in var and 'e' is not contained in var converted into lowercase,
raise the exception ValueError, with string as argument, "@python_2_unicode_compatible cannot be applied", "to %s because it doesn't define __str__().", replace %s with string value of klass.__name__.
otherwise if sep is not an instance of string type,
define the function save_instance with 7 arguments: form, instance, fields set to None, fail_message as string 'saved',
call the function parse_header with an argument line, substitute the result for main_value_pair and params, respectively.
call the method close on self.
if not,
from django.db.migrations.executor import MigrationExecutor into default name space.
derive the class Resolver404 with Http404 as base class.
return nothing.
if bases equals a tuple with an element: class BaseModelForm.
define the method receive_data_chunk with arguments: self, raw_data and start.
define the function truncatechars with 2 arguments value and arg.
call the function escape with an argument value, return the result.
if length of bits is greater or equal to integer 4 and second last element of bits equals sting 'from',
from django.utils.encoding import force_text into default name space.
convert the first element of the first row of targets to string, append it to the string "  Unapply all migrations: ", use the it as an argument for the call to the self.style.MIGRATE_LABEL method, use the result to cal the self.stdout.write method.
if init_path is not a file,
define the method skip_past with 2 arguments: self and endtag.
writer is an instance of a class MigrationWriter, created with an argument new_migration.
substitute dt.year for year.
node is an instance of CycleNode class, created wiht an argument values.
if self_closing is true or tagname is contained in html4_singlets,
define the function reraise with 3 arguments: tp, value and tb set to None.
raise an NotImplementedError exception with an argument string 'subclasses of BaseArchive must provide a list() method'.
from django.core.cache import caches into default name space.
help is a string "Starts a lightweight Web server for development.".
substitute last element of bits for target_var.
subtract decimals from digits, substitute the result for whole_digits.
call the method o.isoformat substitute the result for r.
try,
define the method dst with 2 arguments self and dt.
decorator function register.filter with an argument is_safe set to boolean False.
define the method configure with an argument self.
decrement self.active_writers by integer 1,
if is_relation is true,
if last_bit is true,
while current_len is smaller than or equal to length,
define the method copy with an argument self.
define the method sign with arguments self and value.
define the function print_ with 2 arguments: unpacked list args and unpacked dictionary kwargs.
return singular.
buffer_ is None.
define the method getvalue with an argument self.
define function smart_bytes with s, encoding set to string 'utf-8', strings_only set to False and errors set to string 'strict', as arguments.
val is None.
if OSError exception was raised,
call the serializer function, call the loads method on the return value with an argument data, return the result.
for every node in compiled_parent.nodelist,
call the method self.fields.items, for every name and field in return value,
for model in self.models append model._meta.db_table to a list, substitute the resulting list for table_names.
input_type is a string 'email'.
define the function iri_to_uri with iri as an argument.
call a function _ with a string 'Enter a valid value.' as an argument, substitute the result for message.
is_compressed is boolean True.
ADDRESS_HEADERS is a set containing strings: 'from', 'sender', 'reply-to', 'to', 'cc', 'bcc', 'resent-from', 'resent-sender', 'resent-to', 'resent-cc' and 'resent-bcc'.
derive the class Tags with base class object.
define the method __text_cast with an argument self.
return nothing.
substitute timeout for self.timeout.
call the method self.make_view_atomic with callback as the argument, substitute the result for the wrapped_callback.
derive the WSGIHandler class from the base class base.BaseHandler.
return res.
remove the 'stream' key from the options dictionary and substitute it for self.stream, if the key doesnt exists call the six.String function and substitute the result for self.stream.
define the method _reverse_with_prefix with arguments self, lookup_view, _prefix, unpacked list args and unpacked dictionary kwargs.
try,
if self.can_delete is true,
add model to known_models set.
call the method copy.deepcopy with arguments self.widget and memo, substitute the result for result.widget.
call the function os.path.basename with first element of self.argv as an argument, substitute the result for self.prog_name.
derive the class EscapeText from six.text_type and EscapeData base classes.
raise an ValueError exception with an argument e.
define the function tz with an argument request.
call the method tmpfile.mkstemp with suffix set to suffix, prefix set to prefix and dir set to dir, store the result in the fd and name, respective.
call the method MONTHS.index with 6 arguments: year, month, day, hour, min and sec, substitute the result for result.
multiply seconds by count, subtract it from since, divide the result by seconds2, store the floored result in count2.
define the method list with 3 arguments: self and unpacked list args and unpacked dictionary kwargs.
value is None.
get the value under the 'app_label' key of the options dictionary, substitute it for self.app_label.
call the dict function with 2 arguments: final_attrs and id set to string '%s_%s', where '%s' is replaced with id_ and i, substitute the result for final_attrs.
define the method __init__ with an argument self.
derive the class RemovedInDjango19Warning from DeprecationWarning base class.
call the method parser.parse with an argument tuple with an element string 'endfor', substitute the result for nodelist_empty.
raise an TemplateSyntaxError exception with an argument "'%s' received unexpected keyword argument '%s'", where '%s' are replaced with name and param.
raise an NotImplementedError exception with an argument sting 'subclasses of LazyObject must provide a _setup() method'.
cache_key is a tuple with 2 argumetns: format_type and lang.
call the method self.error_class with an argument list with a element: result of the method self.get_form_error, substitute the result for value under the NON_FIELD_ERRORS key of the form._errors dictionary.
for every form in self call the form.as_table method, join the results in a string, separated by an empty string.
regex is an property object of this class, with _get_regex getter and _set_regex setter function.
except ImportError.
if IOError, renamed to e, exception is caught,
derive the class TimeFormat from the base class Formatter.
return None.
if not,
decorator function register.filter with 2 arguments expects_localtime set to boolean True and is_safe set to boolean False.
get the value under the 'verbosity' key of the options dictionary, convet it to an integer and substitute for self.verbosity.
call the function logging_config_func with an argument DEFAULT_LOGGING.
raise an ValueError exception with an argument string "%r is not in a valid HTTP date format" formated with date.
raise an exception.
value under the BLOCK_CONTEXT_KEY key of context.render_context dictionary is BlockContext class instance.
return lambda function with text as argument and return value being result of the function colorize, called with 3 arguments: text, opts and unpacked dictionary kwargs.
try,
define the method __exit__ with 4 arguments: self, exc_type, exc_value and traceback.
pending_references is a empty dictionary.
increment self.active_readers by 1.
get the integer representation of the first element of bs, return it.
substitute timezone for _active.value.
if errors is True,
try,
if key_func is not of None type,
split first and second element of hextet into parts by ':', sum their lengths, substitute the result for sep.
return size.
increment i by integer 1, substitute the result for i.
call the method connection.introspection.get_field_type with 2 arguments: second element of row and row, substitute the result for field_type.
raise an NotImplementedError with an argument string 'Subclasses must define this method.'.
substitute the first 255 elements of ext for ext.
if LookupError or TypeError exceptions are caught,
substitute origin for self.origin.
call the method b64encoded.decode with string 'latin1' as argument, substitute the result for b64encoded.
call the popen_wrapper with args as the argument, assign the result to the output, errors and status, respectively.
if other is an instance of Promise class,
substitute Command for BaseRunserverCommand.
otherwise if self.reason_phrase is None,
property decorator,
define the function pgettext with 2 arguments: context and message.
define the method __setattr__ with 3 arguments: self, name and value.
define the function assertRaisesRegex with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
if not,
if dirname is true, return dirname converted to a string and surounded by single quotes, if not return string 'absolute path'.
call the httpd_cls function with 4 arguments: server_address, WSGIRequestHandler and ipv6 set to ipv6, substitute the result for httpd.
define the function flatatt with an argument attrs.
from __future__ import unicode_literals into default name space.
call the method __init__ from the base class of the class DebugLexer, with 2 arguments: template_string and origin.
get the value under the 'name' key of the disposition dictionary, strip it of whitespaces, substitute the result for field_name.
try,
define the method create_var with 2 arguments: self and value.
if Exception, renamed to e, exception is caught,
define the method rendered_content with an argument self.
from django.utils import six into default name space.
if i is greater than, or equal to subject,
if not,
call the BaseCache.__init__ method with self class instance and params as the arguments.
compile regex from the raw string '(\d{4})-(\d\d?)-(\d\d?)$', substitute it for RE_DATE.
define the method filter with 2 arguments: self and record.
call the method handler.startElement with 2 arguments: string "channel" and result of the method self.root_attributes.
get the unicode representation of current working directory, join it and path into a string, substitute the result for path.
append list containing string '--no-location' to self.msgattrib_options.
if condition is not None,
if self._is_rendered is false.
options_list is an empty tuple.
call the method self.__class__ with 3 arguments: an empty string, mutable is boolean True, encoding is self.encoding, substitute the result for result.
if not,
while length of line is grater than max_width,
from django.db.migrations.autodetector import MigrationAutodetector into default name space.
import module glob.
if id_ is true,
if color_setting is True,
finally perform,
import module time.
return an instance of VariableNode class with an argument filter_expression.
for bit in self.lookups,
derive the class JsonResponse from the HttpResponse base class.
if self.verbatim is true and block_content equals self.verbatim,
property decorator,
convert self.object_list to a list.
derive the class Storage from the object base class.
define the method __init__ with 6 arguments: self, _subtype set to string 'mixed', boundary set to None, _subparts set to None, encoding set to None and unpacked dictionary _params.
call the function func with 2 arguments: context and self.first, return the result.
call the method parser.add_argument with 5 arguments: string '--dry-run', action as a string 'store_true', dest as string 'dry_run', default set to boolean False, help as a string "Just show what migrations would be made; don't actually write them.".
return dec.
if self.field.required is true and self.form has an attribute 'required_css_class',
define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.
evaluate the method self._has_expired with argument key, if it as False,
substitute language for self.__language.
return first element of t converted to lowercase and second element of t, as a tuple.
try
raise an ValueError with an argument string "MultiValueDict.update() takes either a MultiValueDict or dictionary".
import module warnings.
if pattern.app_name is true,
close file_ file descriptor.
derive the class DebugLexer from the Lexer base class.
return an empty string.
extension_map is a dictioanry with 6 initial elntries: TarArchive for '.tar', TarArchive for '.tar.bz2', TarArchive for '.tar.gz',
raise an raise self.warning with an argument self.warning.
define the method __init__ wiht 5 arguments: self, META, input_data, upload_handlers and encoding set to None.
call the method self.can_read.release.
I18N_MODIFIED is integer 2
define the method from_dict with argument cls and file_dict.
call the function _load_serializers.
try,
get the length of the options, use it as a starting index for the slicing arg list, substitute it for self.test_runner.
define the function is_protected_type with obj as the only argument.
import module shutil.
evaluate the function bytes with the argument s, and return the result.
call the function get_callable with an argument callback, return the result and an empty dictionary.
try,
return tuple containing 3 elements: RAW, an empty dictionary and stream.
default_error_messages is an dictionary with 2 entries: return value of the function _ called with an string 'Enter a valid date.', for 'invalid_date' and return value of the function _ called with an string 'Enter a valid time.', for 'invalid_time.
if not,
define the method get_backend_timeout with self class instance and timeout set to DEFAULT_TIMEOUT as arguments,
call the function bf.label_tag with an argument label, if the result is true substitute it for label, otherwise label is an empty string.
define the function get_complete_version with in argument version, defaulting to None.
call the method self._base_set with string 'set', key, value and timeout as arguments.
derive the class BaseConfigurator from object base class.
if six.PY2,
call the __init__ method from the base class of the NoArgsCommand class.
remove first element of result from self.keyOrder dictionary.
attachment is an instance of a class SafeMIMEMessage, created with the arguments content and subtype.
convert timeout into an integer.
EMPTY_VALUES is a tuple containing 5 initial elements: None, empty string, empty list, empty tuple and an empty dictionary.
call the function get_language, substitute the result for lang.
define the method split_leading_dir with 2 arguments self and path.
import gettext module.
define the method value_from_datadict with 2 arguments: self, data, files and name.
call the method self.set with arguments key, value, timeout set to timeout, version set to version.
define the method __init__, with 3 arguments: self, m2m and data set None.
evaluate the binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREATE, binary or 'O_BINARY' attribute of object os, binary or os.O_EXCL if allow_overwrite is boolean False, use the previous as the mode to open new_file_name file, assign the file descriptor to fd.
call the method self.__text_cast, return the result.
define the function _load_serializers.
define the function handle_extensions with 2 arguments: extensions set to tuple containing string 'html' and ignored set to tuple containing string 'py'.
define the method handle_fk_field with arguments self, obj and field.
append ch to result.
convert deader to lowercase, if it is contained in self._headers return boolean True, if not, return boolean False.
if exctype is not WindowsError or string 'Access is denied' is not contained in value converted into a string,
if ch is contained in string "iLmsu#",
define the method _itervalues with an argument self.
substitute table for self.db_table.
get the next element of the self._producer iterable, substitute it for output.
define the method close with an argument self.
decorator stringfilter,
from django.utils.six.moves.urllib.parse import quote, unquote, urlsplit and urlunsplit into default name space.
self._num_pages and self._count are None.
substitute nonlocal_root for a tuple with an element root.
call the method self.prepend_token with an argument token,
help is an string "Creates the tables needed to use the SQL cache backend.".
join tmpdir and sting 'original' into a file path name, substitute it for original_path.
if stream is true,
call the method self.xml.startElement with arguments string 'object' and attrs.
if not,
split middle into two parts from the right by '@' character, assign the resulting parts to local and domain.
call the function six.reraise with 3 arguments: ImproperlyConfigured, instance of ImproperlyConfigured class created with msg, and third element of the function sys.exc_info result.
convert self.changed_data into boolean, return it.
for every w in self.widgets, if all elements w.is_hidden are true, return boolean True, otherwise return boolean False.
append string '.' to result.
call the method password.translate with an argument hmac.trans_5C, update outer dictionary with the result.
get the value under the 'width' key of the options dictionary, if it exists, substitute it for namemap, if not namemap is an empty dictionary.
return None.
try,
element of data at the index last equals to carriage return bytes character.
from django.db import router and DEFAULT_DB_ALIAS into default name space.
from django.utils import six into default name space.
call self.stdout.write method with app_name and self.style.MIGRATE_LABEL as arguments.
if commit is true,
define function _i18n_cache_key_suffix, with request and cache_key as arguments.
if k is contained in seen,
call the function new_method_proxy with an argument len, substitute the result for __len__.
if self.verbosity is greater or equal to integer 2,
call the method self.nodelist.render with an argument context, substitute the result for output.
if self.empty is true,
define initialization method __init__ with 4 arguments: self, host, list of arguments args and dictionary of arguments kwargs.
call the method self.writer_leaves.
finally perform,
for every elt in list_ call the method bytes_to_text with 2 argument: elt and self.encoding, append the result into a list, substitute the resulting list for list_.
define the method __init__ with 8 arguments: self, file, field_name, name, content_type, size, charset and content_type_extra set to None.
call the serializer function, call the dumps method on the result with an argument obj, substitute result for data.
import io.
call the method parser.delete_first_token.
mime_type is a string 'application/atom+xml; charset=utf-8'.
if length of bits equals integer 4,
define the function sql_create with 3 arguments: app_config, style and connection.
import imp.
__M is a raw string '(?P<mon>\w{3})'.
derive the class LocalTimezone from the ReferenceLocalTimezone base class.
substitute the tuple containing 2 elements p_pattern and pattern for value under the pattern.namespace key of the namespaces dictionary.
_dec.__name__ is a string 'method_decorator(%s)' formated with decorator.__class__.__name__.
import module warnings.
import module django.
call the method self.compile_filter with an argument token.contents, substitute the result for filter_expression.
do nothing.
set field cdata_tag for this class instance to None.
from django.db.models import ForeignKey.
self.waiting_readers is an integer 0.
define the function load_command_class with arguments: app_name and name.
if call to the method self.is_valid, evaluates to false or self.can_delete is boolean false,
import dummy_threading as threading.
raise an EmptyPage exception with string 'That page contains no results' as an argument.
if not,
define the method handle with 3 arguments: self and unpacked dictionary options.
from django.utils import six into default name space.
if self.data.hour is greater than inreger 12,
for every namespace and tuple containing: prefix and sub_pattern, in return value of the method pattern.namespace_dict.items,
try,
raise an exception.
from django.template.base import Node, NodeList, Template, Context, Library, TemplateSyntaxError, VariableDoesNotExist, validTemplateLibrary, BLOCK_TAG_START, BLOCK_TAG_END, VARIABLE_TAG_START, VARIABLE_TAG_END, SINGLE_BRACE_START, SINGLE_BRACE_END, COMMENT_TAG_START, COMMENT_TAG_END, VARIABLE_ATTRIBUTE_SEPARATOR, get_library, token_kwargs, kwarg_re and render_value_in_context.
import module warnings.
get the value under the key key of the self.cookies dictionary, substitute max-age for 'max-age' key of the returned dictionary.
call the function import_module with an argument path, substitute it for package.
self._view_middleware is an empty list.
substitute unpack_ipv4 for self.unpack_ipv4.
derive the class Info from base class CheckMessage.
call the method six.reraise with 3 arguments: MultiPartParserError, MultiPartParserError created with msg, and third element of the result of the function sys.exc_info.
call the function add_to_builtins with an argument string 'django.template.loader_tags'.
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to string 'required'.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the function six.reraise with 3 arguments: DeserializationError, return value of the DeserializationError called with an argument e,
increment doy by integer 1.
call the function import_module with argument self.urlconf_name, substitute the result for self._urlconf_module.
if app_dir is a directory,
call the method command.stdout.write with an argument errors.
derive class SimpleCookie from the base class http_cookies.SimpleCookie.
return self.STDOFFSET.
derive the class ManagementForm from the Form base class.
evaluate debug.technical_500_response with request and list of arguments exec_info, return the result.
if not,
try,
import hashlib module.
define the method get_dump_object with arguments self and obj.
call the method self.get_field_type with 3 arguments connection, table_name and row, assign the result to field_type, field_params, field_notes, respectively.
BASE2_ALPHABET is a string '01'.
evaluate the self.get_fqdn method, return the result.
msg is a string "%s doesn't look like a module path" formated with dotted_path.
call the function that is the return value of get_storage_class method, substitute the result for self._wrapped.
subtract length of dec_part from decimal_pos, multiply the number of character '0' by the result, append the resulting string to dec_part, substitute it for dec_part.
if commit is false,
slice list unhandled_params from the beginning to the length of defaults last element,
define the method build_attrs with 3 arguments: self, extra_attrs set to None and unpacked dictionary kwargs.
call the method parser.add_argument with 5 arguments: string '--nothreading', action set to string 'store_false', dest set to string 'use_threading', default set to boolean True and help set to 'Tells Django to NOT use threading.'.
define the method remove with 2 arguments: self and item.
if self.addr is true,
replace '%s' in string "Running pre-migrate handlers for application %s" with app_config.label, print it to the standard output.
define the method get with 3 arguments: self, key and otherwise set to None.
from django.utils.encoding import force_str, force_text and iri_to_uri into default name space.
return output.
call the function mark_safe with an argument output.
from django.utils import six into default name space.
call the function copy.deepcopy with an argument self.base_fields, substitute the result for self.fields.
replace all '%s' in string '<%s %s (%s:%s) %s>' with self.__class__.__name__, urlconf_repr, self.app_name, self.namespace and self.regex.pattern, respectively. return it.
append value to the '-', substitute it for value.
instantiate class Module_six_moves_urllib_response with an argument, string ".moves.urllib.response" appended to __name__, assign it to value under the string ".moves.urllib_response" appended to __name__ key of the sys.modules dictionary, and to value under the string ".moves.urllib.response" appended to __name__ key of the sys.modules dictionary.
return a tuple with 3 elements: TYPE, outdict and stream.
if self.save_as_new is true,
if not,
from django.conf import settings into default name space.
try,
call the method self._create_mime_attachment with unpacked list alternative as an argument, use the result as an argument for the call to the msg.attach method.
get the value under the 'use_base_manager' key of the options dictionary, substitute the result for use_base_manager.
if translators_comment_start is not None and lineno is greater than or equal to translators_comment_start,
define the method url_patterns with an argument self.
define the function get_serializer with an argument format.
substitute i-th element of self.data for error.
if self.verbosity is greater or equal to integer 2.
call the function smart_text with argument related_att, use the result as an argument for the call to the self.xml.characters method.
from django.utils.timezone import get_current_timezone_name to the default name space.
if message_context is true,
define the function file_complete with arguments self and file_size.
decorator python_2_unicode_compatible,
call the method self.error_class with an argument list with one element, return value of the method self.get_form_error, substitute the result for the value under the NON_FIELD_ERRORS key of form._errors dictionary.
try,
return the value under the language_code of the self._regex_dict dictionary.
call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class MultiValueField.
join elements of hextets into a string, separated with ':', substitute it for result.
for every ch in input_iter,
status_code is an integer 405.
delete self.name attribute from the obj.__class__ object.
if t is not None,
from django.db.migrations.loader import MigrationLoader into default name space.
substitute m2m_data for self.m2m_data.
continue with the next iteration of the for loop.
app_list is an instance of OrderedDict class, created with an argument a tuple containing elements: app_config and None, for every app_config in return value of the method apps.get_app_configs, only if app_config.models_module is not None, and app_config is not contained in excluded_apps.
assign return value of the call to the http_cookies.SimpleCookie function to _tc.
return an empty list.
if not,
raise an self.source_error exception with 2 arguments: source and msg.
define the method extend_nodelist with 4 arguments: self, nodelist, node and token.
substitute name for self.__name.
substitute string " " for space.
define the function is_library_missing with an argument name.
if mode is not contained in app_list_value,
try,
try,
call the function next_char with an argument iterator pattern, substitute the result for pattern_iter.
from django.core.management.base import AppCommand into default name space.
self.year_none_value is a tuple containing 2 elements: integer 0 and first element of empty_label.
substitute form.instance.pk for pk_value.
define the function cycle with 2 arguments: parser and token.
if nodelist is true,
for every attr in _urllib_request_moved_attributes,
as_form is boolean True
for every obj in PythonDeserializer called with arguments objects and unpacked dictionary options,
call the method self.limit_choices_to, return the result,
substitute fist and second element of exc_info for exctype and value, respectively.
call the function decorator with 2 arugments: unpacked list args and unpacked dictionary kwargs, return the result.
remove the value under 'max_length' key from the kwargs dictionary and if the key exists substitute it for self.max_length, if not self.max_length is None.
convert self.use_ipv6 to boolean, substitute it for self._raw_ipv6.
if type of result is ConvertingDict, ConvertingList or ConvertingTuple,
return template.
if incremental is true,
if age is greater than max_age,
call the function self.to_python with an argument data, substitute the result for data.
break from the smallest enclosing loop execution.
if field_value is not None,
call the function _helper with an argument value, use it as an argument for the call to the function mark_safe, return the result.
convert value under the 'REQUEST_METHOD' key of the environ dictionary to uppercase, substitute it for self.method.
writer is an instance of MigrationWriter class, created with an argument migration.
call the method cls.__promise__ with 3 arguments: resultclass, k and v, substitute the result for meth.
if not,
app_list is an instance of a class OrderedDict.
call the method widget_attrs with an argument widget, from the base class of the FloatField class, substitute the result for attrs.
lookups is an instance of the MultiValueDict class.
call the function force_str with an argument sep, substitute the result for self.sep.
substitute pubid for self.pubid.
if secret is None,
call the method migration.ancestry.index with an argument common_ancestor, increment the result by one, slice migration.ancestry list from the last result as an starting index to the end, substitute the slice for migration.branch.
from logging import NullHandler.
call the method self._archive_cls with an argument file, call the result with an argument file, substitute the result for self._archive.
derive the class SerializerDoesNotExist from the KeyError base class.
from django.utils.translation import ugettext_lazy as _ into default name space.
substitute connection.ops.quote_name for qn.
substitute value under the 'verbosity' key of the options dictionary for self.verbosity.
define the method latest_post_date with an argument self.
from PIL import Image into default namespace.
call the method self.build_attrs with 2 arguments: attrs and name set to name, substitute the result for final_attrs.
if data is contained in seen_data,
if self.decimal_places is not None and decimals is grater than self.decimal_places:
derive the class RenameMethodsBase from type base class.
if filter_name is contained in self.filters,
 Installing index for %s.%s model\n" as argument, with all occurrences of '%s' replaced with app_name and model._meta.object_name, respectively.
call the method filter.get_request_repr with an argument request, format string '\n{0}' with the result, substitute the result for request_repr.
return duplicate.
try,
substitute '%s' in string '<%s: %s>' with self.__class__.__name__ and self, if exists, or string 'None' if it doesnt, return it.
if field is contained in self.errors return boolean True, if not, return boolean False.
derive the class EmailField from the base class CharField class.
define the function wordwrap with 2 arguments value and arg.
all_files is an empty list.
substitute type for class_types.
if now equals to boolean True and now is not an instance of datetime.datetime,
define the method render with 2 arguments: self and context.
if not,
define the method _iterlists with an argument self.
call the function _trans.get_language_from_request with 2 arguments: request and check_path, return the result.
if attrs is None,
define the function pbkdf2 with 5 arguments: password, salt, iterations, dklen set to integer 0 and digest set to None.
return boolean True.
if self.merge is true and conflicts is false,
self.file_name is None.
if TypeError exception is caught,
substitute format for self.format if format is true, if not self.format is None.
from django.utils.six.moves import input into default name space.
self.abstract is boolean False.
try,
if not,
tr,
derive class Module_six_moves_urllib_parse from the _LazyModule base class.
replace '%s' in string 'django_%s_template_' with self.app_or_project.
get the value under the name key of the self.initial dictionary, if it exists substitute it for initial_value, if not substitute field.initial for initial_value.
if match is true and call to the method match.group with an argument integer 1 evaluates to true, kwarg_format is boolean True, otherwise it is boolean False.
call the function exhaust with an argument self._input_data.
format string '\x1b[%sm' with RESET, return the result.
 call the re.compile function with 2 arguments: raw string '(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$', and re.IGNORECASE, substitute the result for domain_regex.
if not,
append site to sites.
if smtplib.SMTPException exception is caught,
define the method __len__ with an argument self.
if not,
call the method imp.find_module with 2 arguments: module_name and list containing element entry, assign the result to file_, _, and _, respectively.
call the function sys.exc_info with an argument exc_info.
try,
import module stat.
get the bit attribute of current object, substitute it for current.
define the method H with an argument self.
substitute the compiled_regex for value under the language_code key of the self._regex_dict dictionary.
define the method __multiple_chunks__ with arguments self and chunk_size defaulting to None.
call the method self.connection.starttls.
call the method self.full_clean.
break from the loop execution.
derive the class RegexURLResolver with LocaleRegexProvider as base class.
return host.
if PY3 is true,
increment doublecolon_len by integer 1,
do nothing.
if pk.editable is true, or pk.auto_created is true or pk is an instance of AutoField class, or if pk.rel is true, and pk.rel.parent_link is true and function pk_is_not_editable called with an argument pk.rel.to._meta.pk evaluates to true,
define the method __contains__ with 2 arguments: self and item.
substitute definition for value under the role key of palette dictionary.
if only_django,
return new_context.
define the function check_1_7_compatibility with argument kwargs dictionary.
if any exception is caught,
define the method _find_boundary with an arguments self, data and eof set to boolean False.
if s is an instance of SafeData.
return args and kwargs.
call the function next_space_index with 2 arguments: subject and i, substitute the result for i.
convert tag to lowercase, use it as the argument for the call to the method self.handle_endtag.
if self._cull_frequency equals to integer 0.
if value is None,
return self.text.
try,
return boolean True.
define the method item_attributes with 2 arguments self and item.
break the loop execution.
call the method transaction.get_autocommit with an argument self.using, if it evaluates to true,
args is a list containing arg surrounded by double quotes for every arg in args.
from django.utils.module_loading import import_string into default name space.
return an instance of a SsiNode class, created with 2 arguments: filepath and parsed.
return decorator.
if exp is None or exp is greater than the return value of the call to the function time.time,
instantiate the TimestampSigner object with arguments key and salt set to salt, call its method sign with an argument base64, return it.
try,
substitute self.form.required_css_class for the value under the 'class' key of the attrs dictionary.
value under the MAX_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class, created with 2 arguments: required as boolean False and widget set to HiddenInput.
from django.db import models into default name space.
define the function parse_color_setting with an argument config_string.
if CommandError exception is caught,
call the function random_module.choice with an argument value, return the result.
if not,
if self._count is None,
if months is true,
derive class Module_six_moves_urllib_error from the _LazyModule base class.
return msg.
get the value under the 'id' key of the self.attrs dictionary, return it, if the key doesnt exists return an empty string.
if not,
substitute max_value and min_value for self.max_value and self.min_value.
call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class TypedMultipleChoiceField.
define the method __init__ with 4 arguments: self, data set to None, files set to None, auto_id is an string 'id_%s', prefix is None, initial set to None, error_class set to ErrorList, label_suffix set to None, empty_permitted set to boolean False.
call the method queryset.filter with an argument pk__in set to primary_keys, substitute the result for queryset.
call the method self.format with an argument string '0', substitute the result for name.
MEDIA_TYPES is a tuple with 2 strings: 'css' and 'js'.
remove the value under the 'ignorenonexistent' key from the options dictionary, assign it to the ignore, if the entry doesnt exists, substitute boolean False for ignore.
substitute ev.filename for filename.
substitute context.autoescape for old_setting.
for every event and node in self.event_stream,
raise a NotImplementedError with an argument string 'subclasses of Deserializer must provide a __next__() method'.
if s is an instance of object bytes,
from django.utils.encoding import force_str into default name space.
define the method handle with arguments self and unpacked dictionary options.
call the function get_format with an argument string 'DECIMAL_SEPARATOR', substitute the result for decimal_separator.
if ValueError exception is caught,
if self.max_digits is not None and digits is grater than self.max_digits,
output is a list containing an element: result of the function format_html called with 2 arguments: string '<select{0}>', and return value of the function flatatt called with an argument final_attrs, substitute the result for output.
if value is not equal self.empty_value,
if p equals integer 0,
otherwise if content is not an instance of Message class,
call the function _generate_cache_key with request, method, headerlist, key_prefix as arguments, return the result.
if format is not contained in _serializers,
return value.
call the method self._setupfunc, substitute the result for self._wrapped.
call the function re.compile with 2 arguments: raw string '^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' and re.IGNORECASE, substitute the result for language_code_re.
if mime_encode is true,
define the method is_serious with argument self.
call the function re.compile with an argument string "^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?\s*", substitute the result for inline_re.
label is a string 'label'
define the method visible_fields with an argument self.
if strings_only and boolean return value of the call to the function is_protected_type for argument s are boolean True,
call the method self.render_options with 2 arguments: choices and list with an entry, value, substitute the result for options.
call the function urlunsplit with an argument url_fields, substitute the result for value.
if autoescape is true,
call the function force_text with an argument self.value, substitute the result for self.value.
call the method self.split_leading_dir with an argument name, substitute the first element of result for name.
match the rawdata from the position i+1, with tagfind pattern, assign the result to the match.
from PIL module import ImageFile as PillowImageFile.
root is a list with elements: root, root, None and None.
derive the class Lexer form the base class object.
call the method self.common_logger_config with 3 arguments: logger, config and incremental.
get the value under the 'addrport' key of the options dictionary, if it is false,
define the method save with 2 arguments: self and commit set to boolean True.
do nothing.
call the method self.save_existing with 3 arguments: form, obj and commit as commit, append the result to saved_instances.
define the method __newobj__ with 2 arguments cls and unpacked list args.
derive the class IfChangedNode from Node base class.
return the result of the method self.errors.get called with 2 arguments: NON_FIELD_ERRORS and return value of the method, self.error_class called with an argument error_class set to string 'nonfield'.
import module re.
sort elements of handlers, for every name in result,
substitutions is a dictionary with 4 initial entries: self.initial_text for 'initial_text', self.input_text for 'input_text', an empty string for 'clear_template' and self.clear_checkbox_label for 'clear_checkbox_label'.
return value.
call the function six.text_type with s as an argument, substitute result for s.
call the function force_bytes with an argument password, substitute the result for password.
get the value under the 'hide_empty' key of the options dictionary, if the key exists substitute it for self.hide_empty, if not, self.hide_empty is boolean False.
if last element of args is not equal to a string "silent",
call the method selected_choices.remove with an argument option_value.
error_msg is a string "Invalid template name in 'extends' tag: %r.", where '%s' is replaced with parent.
if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.
substitute _iterkeys for iterkeys.
else if timeout converted into an integer equals to integer 0,
if ImportError exception is caught,
define the method __enter__ with argument self.
if InputStreamExhausted exception is caught,
do nothing.
reason_phrase is None.
define the method close with an argument self.
call the method style.NOTICE with an argument string "Note that only Django core commands are listed as settings are not properly configured (error: %s).", where '%s' is replaced by self.settings_exception, append the result to usage.
define the __init__ method with arguments: self, unpacked list args and unpacked dictionary kwargs.
define the function ip_address_validators with arguments protocol and unpack_ipv4.
call the function table2model with an argument table_name, append the result to known_models.
is_usable is boolean True.
call method self.stdout.write with statement as an argument.
substitute current_app for self._current_app.
return host.
define the method end_serialization with an argument self.
return week_number.
return an empty string.
define the method items with an argument self.
return nothing.
if exception of class Exception, as e, is caught, call the self.stderr.write method with string "
substitute self.parent_instance.pk for orig.
call the function six.reraise with unpacked list exc_info as an argument.
return a list with 5 elements: strings 'parse', 'error', 'request', 'response' and 'robotparser'.
substitute lookups for the value under language_code key of the self._reverse_dict dictionary.
define the function get_declared_fields with 3 arguments: bases, attrs and with_base_fields set to boolean True.
fixture_files is an empty list.
remove entry under 'initial' key of the kwargs dictionary, substitute it for self.initial_extra if it exists, if not self.initial_extra is None.
call the method _ExpatParser.__init__ with arguments self, unpacked list args and unpacked dictionary kwargs.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
call the function get_current_timezone, use the result as an argument for the call to the function _get_timezone_name, return the result.
define the function compress_string with an argument s.
call the traceback.print_exc method.
from django.utils.timezone import is_aware into default name space.
define the method handle_noargs with 2 arguments: self and unpacked dictionary options.
substitute class_name for self.class_name.
define the method words with 4 arguments: self, num, truncate set to None, html set to boolean False.
call the method resolver._reverse_with_prefix with 4 arguments: view, prefix, unpacked list args, unpacked dictionary kwargs, use the result as an argument for the call to the function iri_to_uri, return the result.
return code.
func is an instance of TemplateLoader class, created with unpacked list args.
decorator function register.filter with an argument is_safe set to boolean True.
if content_type is false,
define the method run_validators with arguments self and value.
if KeyError exception is caught,
from logging import _checkLevel.
call the method m.group with an argument integer 0, use it as an argument for the call to the re_tag.match function, substitute the result for tag.
if bits is true and kwarg_format is false,
call the function is_aware with an argument value, if it evaluates to true,
append to options a tuple containing 2 entries: result of the method s_opt.get_opt_string and s_opt.nargs, for every s_opt in parser.option_list.
if timeout is not None,
if not,
split file by ',' character, apply on its every element a lambda function which takes an argument x, and returns x striped of the surrounding whitespaces, extend the extra_files with the mapped list.
call the method self.load_template_source with arguments template_name and template_dirs, assign the result to source and display_name.
vary_headers is an empty list.
define the method __repr__ with an argument self.
call the function module_to_dict with an argument global_settings, substitute it for default_settings.
return a tuple with 2 elements: integer 0 and second element of k.
url is an empty string.
define the method start_index with an argument self.
do nothing.
from django.core.mail.message import sanitize_address into default name space.
define the method __repr__ with an argument self.
if self._cached_loaders is false,
call the function allow_lazy with 2 arguments: wrap and six.text_type, substitute the result for wrap.
if exclude is true and f.name is contained in exclude,
call the method self.render, return the result.
define the method resolve_expression with 3 arguments: self, obj and context.
derive the class Command from the AppCommand base class.
if self._wrapped is contained in empty,
if not,
define function dictitem with s as an argument.
call the method self._coerce with an argument value, return the result.
if DatabaseError exception is caught,
call the method self._css.setdefault with 2 arguments medium and an empty string, append path to the result.
raise an ValidationError with 2 arguments: value under the 'invalid' key of the self.error_messages dictionary and code set to 'invalid'.
if not,
call the method s.get_data, return the result.
define the method full_clean with an argument self.
if self._is_rendered is true,
decorator function register.filter with an argument is_safe set to boolean True.
do nothing.
self._max_entries is integer 300.
extend the self.error_list list with message.error_list.
return s.
call the cursor.execute method with sql as argument.
call the function get_template with an argument parent, return the result.
derive the class SortedDict from the dict base class.
call the function update_wrapper with 2 arguments: wrapper and user_function, return the result.
substitute kw for self.__kw.
from django.utils import lru_cache into default name space.
return result.
path_info is a character '/'.
cal the method re.subn with 3 arguments: raw string '\W', string '_' and new_name.
define the function timeuntil_filter with 2 arguments value and arg set to None.
append string ".moves.urllib_response" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for response.
call the method connection.ops.sql_flush with arguments: style, tables, seqs and allow_cascade, substitute the result for statements.
call the method get_supported_language_variant.cache_clear.
call the method dig1.update with an argument u.
call the method operator.methodcaller with 3 arguments: string 'to_bytes', integer 1 and string 'big', substitute the result for int2byte.
from django.core.files.base import File into default name space.
if m is false,
if not,
return the value under the self.data.month key of the MONTHS_AP dictionary.
define the method __init__ with 4 arguments: self, cyclevars, variable_name set to None and silent set to boolean False.
from django.conf import settings into default name space.
try,
import module datetime.
for every uclass, unique_check in all_unique_checks,
call the method match.group with an argument integer 0, return the result.
self.feed is an dictionary with 13 initial entries, result of the function to_unicode called with an argument title for 'title', result of the function iri_to_uri called with an argument link for 'link', result of the function to_unicode called with an argument description for 'description', result of the function to_unicode called with an argument language for 'language', result of the function to_unicode called with an author_email description for 'author_email', result of the function to_unicode called with an argument author_name for 'author_name', result of the function iri_to_uri called with an argument author_link for 'author_link', result of the function to_unicode called with an argument subtitle for 'subtitle', if true, categories is value for 'categories' key, if not, empty tuple is value for 'categories' key, result of the function iri_to_uri called with an argument feed_url for 'feed_url', result of the function to_unicode called with an argument feed_copyright for 'feed_copyright', if true, feed_guid is value for 'id' key, if not, lik is value for 'id' key and ttl for 'ttl'.
invert self.negated.
return result and result_args.
import module os.
call the function timezone.make_aware with arguments value and current_timezone, return the result.
if base has an 'declared_fields' attribute,
if StandardError, renamed to e, exception is caught,
derive the class DjangoTranslation from gettext_module.GNUTranslations base class.
call the method apps.get_model with 2 arguments: string 'auth' and string 'Permission'.
call the method self.add_fallback with an argument default_translation.
return id_.
namespaces is an empty dictionary.
return boolean False.
call the method warnings.warn with string '"validate" has been deprecated in favor of "check".' and RemovedInDjango19Warning as arguments.
derive the class SelectDateWidget for the Widget base class.
call the function _ with an argument string 'p.m.', return the result.
format a string "(?P<%s>%s)" with groupid and tok.regex, append it to the parts.
from django.forms.utils import ErrorList into default name space.
return obj.
define the function lock with arguments f and flags.
if _win is true,
define the function sql_indexes with 3 arguments: app_config, style and connection.
if status is not None.
get the value under the 'indent' key of self.options dictionary, if it is true,
import module warnings.
for every filename in files,
from __future__ import unicode_literals into default name space.
msg is an empty string.
if e.errno equals to errno.ENOENT,
call the function runfastcgi with an argument all the elements, except the first from the sys.argv list.
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of the self.feed dictionary.
define the get_str_from_wsgi function with environ, key and default as arguments.
if initial is not None, substitute initial for initial_value, otherwise initial_value is an empty string.
define the method content with self and value.
if ValueError exception is caught,
substitute self.pointer for i.
derive the class HiddenInput from the Input base class.
substitute cls.__bytes_cast for cls.__str__.
return nothing.
return new_class.
call the function import_library with an argument module, append the result to builtins.
define the method render_options with 3 arguments: self, choices and selected_choices.
return None.
return an string "<For Node: for %s in %s, tail_len: %d%s>", substitute '%s' with elements of self.loopvars joined into a string, separated with string ', ', substitute '%s' with self.sequence, substitute '%d' with length of self.nodelist_loop, substitute '%s' with reversed_text.
append string 'Field name made lowercase.' to field_notes.
import module sys.
call the function avoid_wrapping with an argument value, return the result.
skip this loop iteration.
substitute url for value under the self.asvar key of context dictionary.
if self.base_url is None,
define the method _dec with 2 arguments: unpacked list args and unpacked dictionary kwargs.
convert to k and v to strings for every k and v in return value of the response.item method, response_headers is a list containing all the above iteration elements.
format string ' _(%s) ', with fmatch, write it to out.
return boolean False.
call the method apps.setdefault with 2 arguments: pattern and an empty list, append to the resulting object pattern.namespace.
logger.propagate is boolean True.
call the self.style.HTTP_NOT_FOUND with an argument msg, substitute it for msg.
call the method parser.add_argument with string '--no-initial-data', action containing string 'store_false', dest set to string 'load_initial_data', default set to True, help containing string 'Tells Django not to load any initial data after database synchronization.' as arguments.
return output.
join return value of the function six.text_type called with an argument self.management_form and forms into a string, separated by newline, use it as an argument for the call to the function mark_safe, return the result.
define the method utcoffset with 2 arguments: self and dt.
call the function post_callback with an argument retval, substitute the result for newretval.
call the function warnings.warn with 2 arguments: string "``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." and RemovedInDjango19Warning.
return _default.
delete dictionary item 'private' from cc.
if self.file_permissions_mode is not None,
if ValueError exception is caught,
arg_vals is an empty list,
derive the class Variable form the base class object.
sum bottom and self.per_page, substitute the result for top.
try,
if InvalidOperation exception is caught,
raise an TemplateSyntaxError exception with an argument string "'now' statement takes one argument".
from django.utils import six into default name space.
substitute self._meta for opts.
raise an TemplateSyntaxError exception with an argument string "Could not parse some characters: %s|%s|%s", where '%s' is replaced with first upto elements of token string, token string elements from upto to start index, and token string elements from start index to the end.
define method set_cdata_mode, with self class instance and tag as the arguments.
if message_context is true,
return boolean False.
define the method flush with an argument self.
if name is None,
if self.negate is true and val1 is not equal to val2, or if, self.negate is false and val1 equals val2,
from django.db import models and DEFAULT_DB_ALIAS into default name space.
for every form in self call the method form.has_changed if any of the results evaluates to true, return boolean True, if not return boolean False.
return the first element of self.client_address.
call the method self.save_new with 2 arguments: form and commit as commit, append the result to self.new_objects.
raise a SerializerDoesNotExist exception with an argument format.
default is a string 'DEFAULT'.
call the method self._resolve, substitute the result for _module.
open err_log flie in append mode with buffering size of input buffer, substitute the result for se.
call the method widget.id_for_label with an argument id_, substitute the result for id_for_label.
if s is not an instance of the object Exception,
divide num by self._cull_frequency, floor the result and substitute it for cull_num.
if item is not an instance of list or tuple class,
if not,
value under the ORDERING_FIELD_NAME key of the form.fields is an instance of IntegerField class, created with 2 arguments: label set to return value of the function _ called with an string 'Order' and required as boolean False.
from django.utils._os import upath into default name space.
substitute '%s' in string "No changes detected in apps '%s'" with the app_labels joined into a string, separated by string "', '", write it to self.stdout.
return None.
open filepath file in read mode, with file descriptor as fp, perform,
return neg and res.
call the formatdate function, substitute it for value under the 'Date' key of msg dictionary.
return s.
substitute first element of s for quote.
otherwise if msg and visible_issue_count are true,
zip val1 and va2 into list of tuples, for every x and y in the result,
if not,
if initial_forms is grater than self.max_num is grater or equal to integer 0,
define the function csrf_token with 2 arguments: parser and token.
import module errno.
raise an BadHeaderError exception  with argument string "Header values can't contain newlines (got %r for header %r)", where '%r' are replaced by val and name, respectively.
from django.utils.itercompat import is_iterable into default name space.
values is an dictionary with 2 arguments: boolean False for 'false' and boolean True for 'true'.
call the value.split method with '://' as argument, convert first element of the result to lower case, substitute the result for scheme.
for every arg in s, evaluate the function force_bytes for the arguments arg, encoding, strings_only and errors, put the results in a list, join the list elements in a string separated by whitespace separator, return the string as the bytes string.
locations is an empty list.
call the __init__ method from the base class of the HttpResponseRedirectBase class, called with arguments: unpacked list args, and unpacked dictionary kwargs.
return the element at the index index of the tuple containing 3 elements: self.func, self.args and self.kwargs.
call the function check_programs with an argument string 'xgettext'.
for every k and v in items of dictionary kwargs, respectively,
from django.conf import settings into default name space.
evaluate pickle.loads with argument pickled, return the result.
call the method node.getElementsByTagName with an argument string 'None', if it evaluates to true,
from django.core.management.color import no_style into default name space.
current_chunk is None.
update flat dictionary with d.
define class dummy.
append string '-0000' to time_str, return the result.
import module datetime.
otherwise if token_string starts with COMMENT_TAG_START,
from django.core.serializers.base import DeserializationError into default name space.
call the method middleware.process_request with an argument request, substitute the result for result.
define the method __init__ with 6 arguments: self, loopvars, sequence, is_reversed, nodelist_loop and nodelist_empty set to None.
from django.core.management.base import CommandError into default name space.
try,
if i is true,
define the function localtime with 2 arguments: value and timezone set to None.
define the function formset_factory with 9 arguments: form, formset set to BaseFormSet, extra set to integer 1,
return an empty string,
from django.db.migrations.executor import MigrationExecutor into default name space.
try,
msg is an string "django.utils.text.javascript_quote() is deprecated. Use django.utils.html.escapejs() instead.".
try,
self._current is None.
define the function unordered_list with 2 arguments value and autoescape set to None.
raise an AttributeError with an argument string "This QueryDict instance is immutable".
define the function server_bind with an argument self.
define the method __iter__ with an argument self.
call the method self._handle_object with an argument node, return the result.
return boolean False.
if i is greater than or equal to length of subject,
if KeyError exception is caught,
return boolean False.
split template once at the first character ':', convert the first element to lowercase and substitute it for scheme.
if active has an attribute 'value',
substitute value for value under the key key of safe_data dictionary.
args is an empty string.
from django.utils.text import normalize_newlines and slugify as _slugify into default name space.
call the function block_re.match with an argument t.contents, substitute the result for bmatch.
from importlib import import_module into default name space.
if self.use_ipv6 is true and socket.has_ipv6 is false,
return the result of the method self._html_output, called with 5 arguments: normal_row to a string, '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>', error_row set to a a string '%s', row_ender set to a string '</p>', help_text_html set to a string, <span class="helptext">%s</span>' and errors_on_separate_row set to boolean True.
if self.timezone is false,
call the function force_bytes with argument value, use the result as an argument for the call to the method base64.b64decode, use the result as the argument for the function call to the pickle.loads, return the result.
call the method re.sub with 3 arguments: raw string '>\s+<', string '><' and result of the function force_text, called with an argument value, return the result.
call the os.utime function with arguments dst and tuple containing 2 elements: st.st_atime and st.st_mtime.
call the method handler.startElement with 2 arguments: string 'entry' and result of the function self.item_attributes, called with an argument item.
return lookup_view
if loader is an instance of tuple or list,
for every part in parts,
substitute new_attr for self.attr.
get handler_config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
if i is greater or equal to integer 0,
fks_to_parent is a list containing f, for every f in opts.fields if f.name equals fk_name.
substitute python_reloader for reloader.
return a string '<%s: %r>', format it with __name__ field of the self class and repr_attr.
if not,
if len_values is smaller than integer 1,
yield and empty string as the result.
if first element of g equals a string '"',
call the method bpython.embed.
if x equals to integer 0,
define the function sql_custom with 3 arguments: app_config, style and connection.
return boolean False.
raise an CommandError exception with an argument string 'You must set settings.ALLOWED_HOSTS if DEBUG is False.'.
from django.core.files import File into default name space.
return a string "%s%02d%02d" formated with sign, floored result of the division of seconds by integer 3000, reminder of the division of floored result of division of seconds by 60, by integer 60.
from django.core.servers.fastcgi import FASTCGI_HELP into default namespace.
for every app_name and model_list in return value of manifest.items method,
update dictionary item with an argument kwargs.
try,
call the method language_code_re.search with an argument lang_code, if it evaluates to false,
convert header to lowercase, use it as the key to get the value from the self._headers dictionary, return the second element of the result.
sum media and w.media, substitute the result for media.
use global variable _supported.
try,
append the tempdir to self.paths_to_remove.
from django.utils.translation import ugettext_lazy as _ and ungettext_lazy into default name space.
call the function format_html with an argument empty string, return the result.
from django.utils.six.moves import cPickle as pickle into default name space.
if IndexError exception is caught,
slice the rawdata to obtain substring from i-th to j-th element, use it as the argument for the method call to the self.handle_data.
call the function allow_lazy with 2 arguments: javascript_quote and six.text_type, substitute the result for javascript_quote.
call the method self.check_for_whole_start_tag with i as an argument, substitute result for the endpos.
put loaders elements in a tuple, substitute it for template_source_loaders.
do nothing.
substitute False for self.close_called.
call the function get_callable.cache_clear.
if not,
derive the class Loader from the BaseLoader base class.
call the method self.add_fields with arguments form and None.
substitute self._leftover for output.
raise an ValueError exception with an argument string "make_aware expects a naive datetime, got %s", where '%s' is replaced with value.
self._files is an instance of MultiValueDict class.
define the method __init__ with 10 arguments: self, data set to None, files set to None, auto_id set to string 'id_%s', prefix set to None, initial set to None, error_class set to ErrorList, label_suffix set to None, empty_permitted set to boolean False, instance set to None.
self._changed_data is None.
from django.conf import settings into default name space.
call the method qs.values_list with 2 arguments: string 'pk' and flat set to boolean True, put the results in a list, substitute the result for value under the f.name key of data dictionary.
msg is a string "The use of the language code '%s' is deprecated. Please use the '%s' translation instead.".
add together self.to, self.cc and self.bcc, return the result.
define the method to_python with 2 arguments: self and value.
m2m_convert is an lambda function with an argument n, return value is the return value of the method field.rel.to._meta.pk.to_python, called with n.getAttribute('pk') method.
from django.utils.module_loading import module_has_submodule into default name space.
call the add_argument method on the parser object, with string 'migration_name', and help set to string 'Migration name to print the SQL for.' as arguments.
return a string '"%s"' formated with etag, in which every occurrence of '\\' is replaced with '\\\\' and every occurrence of '"', is replaced with '\\"'.
from __future__ import unicode_literals into default name space.
return an empty list.
define the function floatformat with 2 arguments text and arg set to integer -1.
call the urlsplit with an argument url, convert the result into a list and return it.
if translation has an attribute '_catalog',
get the value under the 'exclude' key of the options dictionary, substitute it for exclude.
substitute memoryview for memoryview.
move integer 1 left for 10 bits, substitute the result for KB.
try,
define the method valid_value with arguments self and value.
open old_path file in 'rb' mode, with file descriptor renamed to template_file,
define the method __getitem__ with an argument self.
for every i and handler in enumerated iterator self._upload_handlers,
call the method self.validate_key with argument key.
from django.utils import datetime_safe into default name space.
try,
import module warnings.
return doy.
post is a string '<could not parse>'.
call the method self.apply_response_fixes with the request and response as the arguments, substitute the result for response.
if match is false or call to the method match.group with an argument integer 1 evaluates to boolean false,
if finder is None,
call the method m.groupdict, substitute the result for d.
call the function get_wsgi_application, return the result.
call the function cache_get with 2 arguments: key and root, substitute the result for result.
strip the content_type of the whitespaces, substitute it for content_type.
set field interesting for this class instance to interesting_cdata from module _html_parser.
call the method parser.add_argument with 5 arguments: string '--noinput', action set to 'store_false', dest set to 'interactive', default set to boolean True, help set to string 'Tells Django to NOT prompt the user for input of any kind.'.
err_msg is a string "Tried %s", where '%s' is replaced with tried.
leave_locale_alone is boolean True.
from django.conf import settings into default name space.
replace every occurrence of '\n' in subject with '\\n' and replace every occurrence of '\r' in subject with '\\r', substitute the result for formatted_subject.
call the self._cull method.
define the method __init__ with 2 arguments: self and attrs set to None.
missing_fields is difference between set containing none_model_fields and set containing result of the method, new_class.declared_fields.keys.
replace '%s' in string "'%s' already exists" with top_dir, substitute it for message.
strip whitespaces from both sides of the value, substitute it for value.
define the method save_existing with 4 arguments: self, form, instance and commit set to boolean True.
call the function local, substitute the result for _active.
call the method self.as_widget, return the result.
raise an AttributeError with an argument string "This %s instance has no `content` attribute. "Use `streaming_content` instead.", where '%s' is replaced with self.__class__.__name__.
import StringIO.
_default is None.
define the method render with 2 arguments: self and context.
from django.utils.timezone import utc and get_fixed_timezone into default name space.
return integer 0 and ch2.
call the function token_kwargs with 3 arguments: remaining_bits, parser, support_legacy set to boolean False, substitute the result for value.
finally perform,
if length of args is not equal to the sum of the lengths of params and prefix_args,
define the method widget_attrs with arguments self and widget.
substitute ngettext for ngettext_lazy.
return tuple, consisting of first element of t converted to lowercase and True.
if self.file_path is not an instance of six.string_types,
get format_type attribute of the settings object, return it.
get the value under the 'empty' key of the options dictionary, if the key exists substitute it for self.empty, if not, self.empty is boolean False.
call the timezone.now function, substitute the result for now.
yield subwidget, as the result of the generator.
call the method match.group with an argument integer 1, substitute the result for text.
add k to seen.
derive the class Node form the base class object.
from django.core.mail.utils import DNS_NAME into default name space.
if self._wrapped is empty,
define the method __init__ with 6 arguments: self, name, value, attrs, choice and index.
substitute return value of function no_style for style.
define the method end_serialization with an argument self.
from django.utils import six into default name space.
if field PY2 of the module six is boolean True,
call the function itertools_cycle with an argument self.cyclevars, substitute the result for value under the self dictionary context.render_context.
define lambda function that returns self.file.fileno field, use it as an argument for property function, put the result in fileno.
define the method get_many with 3 arguments, self class instance, keys and version set to None.
derive the class Command from the BaseCommands base class.
write a new line to the self.stream file stream.
split the string cc_delim_re with value under the key 'Vary' of response dictionary as delimiter, substitute result for vary_headers.
call the method normalize with sum of parent_pat and pat as an argument, substitute the result for new_matches.
convert value to an integer.
call the method viewname.split, with an argument ':', substitute the result for parts.
set attr.name attribute of the Module_six_moves_urllib_parse object to attr.
define the function translation with an argument language.
call the function partial with 8 arguments: generic_tag_compiler, params set to params, varargs set to varargs, varkw set to varkw, defaults set to defaults, name set to function_name, takes_context set to takes_context and node_class set to InclusionNode, substitute the result for compile_func.
convert keys of dictionary self.dict into a iterable, return it.
define the method _new_instance with 4 arguments: (cls, children set to None, connector set to None and negated set to boolean False.
define the method __init__ with an argument self.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
call the function datetime.datetime with utc as argument if call to the is_aware(d) returns True, if not None is the argument, store the result in now.
if self has an '_post' attribute,
define the function supports_color, without arguments.
convert protocol to lowercase, use it as a key to get a value from the ip_address_validator_map dictionary, return it.
if TemplateSyntaxError, replaced with e, exception is caught,
if use_grouping is true substitute it for use_grouping, otherwise substitute force_grouping for use_grouping.
docsring
define the method url with arguments self and name.
call the method unicodedata.normalize with 2 arguments: string 'NFKD' and value, encode the result with 2 arguments: string 'ascii', and string 'ignore', call the method decode on the result with an argument string 'ascii', substitute the result for value.
return nothing.
define the method render with 2 arguments: self and context.
substitute value under the number key of the rhs dictionary for number_value.
append string '_fork' to flup_module.
append work_file to string '#: ', substitute it for old.
call the method parser.compile_filter with an argument second element for bits, substitute the result for parent_name.
if value is false or value is not an instance of list or tuple types,
from importlib import import_module into default name space.
if AttributeError exception is caught,
import module datetime.
append list containing string '--no-wrap' to self.msgmerge_options
raise an ValueError exception with an argument string 'must define at least one ordering operation: < > <= >='.
if value under the name key of self.cleaned_data dictionary is not None, and field _state.adding of value under the name key of self.cleaned_data dictionary is true,
try,
substitute so and se for sys.stdout and sys.stderr.
from io import BytesIO into default name space.
otherwise if form.has_changed method evaluates to true,
call the method __init__ from the base class of the class BaseInlineFormSet, with 5 arguments: data, files, prefix set to prefix, queryset set to qs and unpacked dictionary kwargs.
try,
derive the class InputStreamExhausted from the Exception base class.
define the method configure_filter with 2 arguments: self and config.
import module sys.
call the method self.as_tuple with an argument value under 'mailhost' key of config dictionary, substitute the result for value under 'mailhost' key of config dictionary.
derive the class ImmutableList from the tuple base class.
call the function smart_text with an argument value, strip the result of whitespaces from both ends and substitute it for value.
call the method app.rpartition with an argument '.', substitute last element of the result for app.
split into two parts token.contents by None, substitute the parts for _ and rest, respectively.
if self.required is boolean true,
if settings.USE_L10N is true,
if template_dirs is true,
define the function reset_format_cache.
define the method hidden_fields with an argument self.
raise an exception,
call the method self.render_option with 2 arguments: selected_choices and unpacked list option, append the result to output.
write shutdown_message to self.stdout file stream.
otherwise if field is contained in self.fields,
substitute the value under the 'app_label' key of options dictionary for app_label.
if year is lesser than integer 100,
if self.data.hour equals integer 0,
call the method self._populate.
call the method settings.configure.
define the method __init__ with 9 arguments: self, choices set to an empty tuple, required set to boolean True, widget set to None, label set to None, initial set to None, help_text set to an empty string, unpacked list args and unpacked dictionary kwargs.
return self.connection.
for every lookup and arg in args,
instantiate ValidationError class with an argument self.data, return its field error_list.
append rel_to to string 'ForeignKey(, append character "'" to it, substitute the result for field_type.
call the method token.split_contents, substitute results without the first element for bits.
if self.max_value is not None,
evaluate method self.has_key with key and version as arguments, if the result is true,
append to a list elements of the iterator self, return the resulting list.
call the method self.error_class, substitute the result for value under the field key of the self._errors dictionary.
from django.utils.crypto import constant_time_compare and salted_hmac into default name space.
define the function split_domain_port with an argument host.
remove first element from non_capturing_groups, substitute it for start.
all_unique_checks is union of all_unique_checks set and unique_checks set.
call the method f.seek with an argument integer 0.
join statements into a string, separated by newline characters, return it.
result is an integer 0.
message_context is None.
if filename ends with string "$py.class",
get attribute 'pk' of the pk_value object, if it doesnt exists use pk_value, set to it self.fk.get_attname return value attribute, of the obj object.
call the method self.add_library with an argument lib.
for every key in return vale of the method executor.loader.graph.leaf_nodes, check if the first element of key equals to app_label, if it does append it to targets list.
define the method __exit__ with 4 arguments self, exc_type, exc_value and traceback.
if not,
return boolean True.
define the function int2byte with an argument i.
settings.BASE_DIR.
if bytes_read is greater than rollback,
get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
yield one element of line iterable.
define the method handle_fk_field with argument self, obj and field.
existing_headers is a set of lowercase headers for every header in vary_headers.
get config dictionary element under 'datefmt' key, if it exists substitute it for dfmt, if not, dfmt is None.
return self.__language.
from django.utils import six into default name space.
define the method clean with 2 arguments self and value.
substitute HiddenInput for hidden_widget.
call the method t.nud with an argument self, substitute the result for left.
call the method package.rindex with 3 arguments: string '.', integer 0 and dot, substitute the result for dot.
if six.PY2 is true,
substitute length of existing for num_existing.
substitute ClearableFileInput for widget.
from django.core.management.base import BaseCommand into default name space.
define the method streaming_content with 2 arguments: self and value.
substitute x for k and boolean True for v.
call the method bit.group with an argument integer 0, yield the result.
call the method date_value.strftime with an argument input_format, return the result.
call the method context.update with an argument unpacked_vars.
if length of tablenames is greater than zero,
if value is true,
return self.tag_function.
do nothing.
try,
if value is an instance of SafeData, safe is boolean True, otherwise it is boolean False.
import module re.
check_for_language is lambda function that returns boolean True for every argument x.
if self.pos is greater than or equal to self.tokens,
for every sql in index_sql,
from django.conf import settings into default namespace.
define the function get_cookie_signer with an argument salt set to string 'django.core.signing.get_cookie_signer'.
call the method self._truncate_html with 5 arguments: length, truncate, self._wrapped, length and boolean True, return the result.
substitute title for sublist_item.
if id_ is true,
define the method _make_parser with an argument self.
call the function escapejs with an argument value, return the result.
append string '0000' to new_ip.
yield one element of data iterable.
append a tuple with 2 elements: f and f with first occurrence of the path replaced with an empty string, to self.choices.
try,
call the new_file method form the base class from the MemoryFileUploadHandler class with arguments: unpacked list args and unpacked list kwargs.
call the function get_resolver.cache_clear.
call the function time.strftime with 2 arguments: fmt and and timetuple without the first element, added to a tuple with an element sum of year an integer 28, substitute the result for s2.
if not,
for every e in errors convert e into a string and append it to a string '  * ', join all the results into a string separated by newlines, append the result to output.
call the self._load_post_and_files method.
if name converted to lower case equals to string 'subject',
call the method self.error_class with an argument list containing results of the function conditional_escape, called with an argument error, for every error in bf.errors, substitute the result for bf_errors.
if settings.USE_X_FORWARDED_HOST is true and 'HTTP_X_FORWARDED_HOST' is contained in self.META.
substitute base for self.base.
sum return value of the function call time.time() and cache_timeout, use it as an argument for function call of http_date, and substitute the return value for value under the key 'Expires' of dictionary response.
call the method self.requires_system_checks with an argument: self.requires_system_checks if has_new_option is true, or if it is false, but has_old_option is true use self.requires_model_validation, if they are both false use boolean True as an argument.
if OSError, renamed to e, is caught,
substitute paginator for self.paginator.
if not,
substitute value under the 'use_reloader' key of the options dictionary for use_reloader.
from pprint import pformat.
define the method assignment_tag with 4 arguments: self, func set to None, takes_context set to None and name set to None.
increment self.active_writers by 1.
from django.utils import six into default name space.
from django.utils import datastructures into default name space.
if script_url is false,
raise an AttributeError exception with string "Unable to determine the file's size." as argument.
call the method token.split_contents, substitute the result for bits.
sublist is an empty string.
return _make_decorator.
return template_name.
raise an exception.
if name equals a string 'content-disposition',
f _serializers is false,
call the method handler.addQuickElement with 2 arguments: string 'link' and value under the 'link' key of the self.feed dictionary.
substitute node for bit.
if self.stream is not None,
if return value of the code_changed function is true,
return boolean False.
call the method __init__ with an argument initlist from the base class of the class ErrorList.
call the method transaction.atomic with 2 arguments: using set to database, savepoint set to connection.features.can_rollback_ddl, with the result,
if data_list is true,
call the method attachment.set_payload with an argument content.
define the method __deepcopy__ with arguments self and memo.
define the method j with an argument self.
define the method __repr__ with an argument self.
return an empty string.
convert base to lowercase, if it ends with string '.tar',
if not,
if template has an attribute 'render',
comment_notes is an empty list.
call the function warnings.warn with 3 arguments: string "cache_choices has been deprecated and will be removed in Django 1.9.", RemovedInDjango19Warning and stacklevel set to integer 2.
if fourth element of version equals to string 'alpha' and fight element of version equals to integer 0,
call the function call_command with string 'flush', verbosity set to greater element, self.verbosity decremented by 1 or integer 0, interactive set to boolean False, database set to db, reset_sequences set to boolean False, inhibit_post_migrate set to boolean True.
return a dictionary with 2 entries: value under the 'language' key of the self.feed dictionary for "xml:lang", and self.ns for "xmlns".
define the method __eq__ with an argument self.
from django.core import serializers into default name space.
if file path of src and dst files are the same, return boolean True, otherwise return boolean False.
do nothing.
return context.
call the method handler.startElement with 2 arguments: string 'author' and an empty dictionary.
for every filename is filelist,
return an empty string.
call the make_msgid function, substitute it for value under the 'Message-ID' key of msg dictionary.
call the method app_config.get_models with an argument include_auto_created set to boolean True, substitute it for app_models.
operations is an empty list.
return result.
errors is an empty list.
call the method cls.__dict__.copy substitute the result for orig_vars.
register.tag decorator function with an argument 'if',
return an instance of Media class, created with definition as an argument.
return list with 2 elements: first_item and second_item, and old_style_list.
__all__ is a tuple containing strings: 'ModelForm', 'BaseModelForm', 'model_to_dict', 'fields_for_model', 'save_instance', 'ModelChoiceField', 'ModelMultipleChoiceField', 'ALL_FIELDS', 'BaseModelFormSet', 'modelformset_factory', 'BaseInlineFormSet', and 'inlineformset_factory'.
if not,
print opt_label to the standard output.
from django.core import urlresolvers into default name space.
if data is true, substitute it for data, otherwise data is an empty list.
substitute _upload_handlers for self.__upload_handlers.
raise an ImproperlyConfigured with an argument string 'Loader does not define a "load_template" callable template source loader'.
substitute message for self.message.
buffer_types is a tuple with 2 elements bytearray and memoryview.
import module sys.
for every middleware_path in settings.MIDDLEWARE_CLASSES:
BASE36_ALPHABET is a string '0123456789abcdefghijklmnopqrstuvwxyz'.
define the method render with 5 arguments: self, name set to None, value set to None, attrs set to None and choices set to an empty tuple.
if not,
call the function StringIO with an argument stream_or_string, substitute the result for stream.
call the method validators.MaxValueValidator with max_value converted into an integer, append the result to list self.validators.
call the function urlunsplit with a tuple containing 5 elements: scheme, netloc, path, query and fragment, as an argument, substitute the result for url.
call the method self.get_queryset, substitute field pk under the result at the index index for pk_value.
if middleware has an attribute 'process_response',
use global variable _default.
call the method parser.compile_filter with an argument value, substitute the result for value under the name key of kwargs dictionary.
from importlib import import_module.
TRANSLATOR_COMMENT_MARK is a string 'Translators'.
if ValidationError exception is caught,
from subprocess import PIPE and Popen into default name space.
if length of x is equal to integer 0,
try,
split ip_str into parts by ':', if '.' is contained in the last element of the result,
if format_module_path is an instance of six.string_types,
concatenate string '%0', width and string "d. %s", format the previous string with i incremented by 1, and result of the function escape called with an argument line, substitute the result for i-th element of lines.
raise a ValueError exception with an argument "The protocol '%s' is unknown. Supported: %s", replace '%s' with protocol, and ip_address_validator_map converted to a list, respectively.
call the method self.attrs.copy, substitute the result for obj.attrs.
call the method n.getAttribute with string 'pk' as argument, use the result as an argument for the call to the field.rel.to._meta.pk.to_python method, substitute the result for obj_pk.
call the method self._existing_object with an argument pk, substitute the result for value under the 'instance' key of kwargs.
if ImportError, renamed to exc, exception is caught,
BASE62_ALPHABET is string '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.
call the method urlresolvers.RegexURLResolver with raw literal string '^/' and urlconf as the arguments, substitute the result for resolver.
append tuple containing element attr to boolean_attrs.
return result.
call the addr.split method with character '@' and integer 1 as arguments, substitute the result for localpart and domain, respectively.
try,
define the method __mod__ with 2 arguments: self and rhs.
if basetype equals a string 'text',
chunks is a tuple containing 6 initial tuples: result of multiplication of integers: 60,60,24,365, and return value of ungettext_lazy with 2 arguments: '%d year', '%d years', result of multiplication of integers: 60,60,24,30, and return value of ungettext_lazy with 2 arguments: '%d month', '%d month', result of multiplication of integers: 60,60,24,7, and return value of ungettext_lazy with 2 arguments: '%d weeks', '%d weeks', result of multiplication of integers: 60,60,24, and return value of ungettext_lazy with 2 arguments: '%d days', '%d days', result of multiplication of integers: 60,60, and return value of ungettext_lazy with 2 arguments: '%d hours', '%d hours', result of multiplication of integers: 60, and return value of ungettext_lazy with 2 arguments: '%d minutes', '%d minutes',
define the method _get_name with argument self.
needs_multipart_form is boolean True.
call the method __init__ from the base class of the DTDForbidden class.
call the function six.text_type with s, encoding and errors as the arguments, substitute the result for s.
import module os.
define the method read with self class instance and size set to None as arguments.
define the method sync_apps with self class instance, connection and app_labels as arguments.
acceptable_endblocks is a tuple with 2 elements: string 'endblock' and 'endblock %s', where '%s' replaced with block_name.
derive the class Command from the BaseCommand base class.
call the self.style.HTTP_REDIRECT with an argument msg, substitute it for msg.
nesting is integer 1.
otherwise if self.nodelist_false is true,
return integer 0.
define the method handle with self class instance, list of arguments fixture_labels and dictionary options as arguments.
remove entry under the 'formfield_callback' key of the attrs dictionary, if it exists substitute if for formfield_callback, if not formfield_callback is None.
define the method dumps with arguments self and obj.
derive the class InlineForeignKeyField from the Field base class.
define the method migration_progress_callback with self class instance, action, migration and fake set to boolean False as arguments.
replace '%s' in the string 'handler%s' with view_type, use it as an name of the attribute to get from the urls, substitute it for callback.
return result.
date_keys is a tuple with 2 arguments: strings 'updateddate' and 'pubdate'.
from django.utils.encoding import force_text and filepath_to_uri into default name space.
substitute io.BytesIO for BytesIO.
do nothing.
extend comment_notes list with field_notes.
if ValueError or TypeError exceptions occurred,
call the function _ with an argument string 'PM', return the result.
define the function pluralize with 2 arguments value and arg set to character 's'.
call the method __init__ from the base class of the TemporaryUploadedFile class with arguments: file, name, content_type, size, charset and content_type_extra.
from django.conf import settings into default name space.
try,
for every shell in available_shells,
substitute boundary for self._boundary.
try,
has_bz2 is boolean False.
for every date_check in all_date_checks,
decorator method register.tag with an argument 'include',
raise an KeyError with an argument string "Key %r not found in '%s'", substitute '%s' with name and self.__class__.__name__.
return elements of words joined in a string, separated with whitespaces.
call the method stream.unget with last rollback elements of chunk as an argument.
join tokens elements into a string, substitute it for message.
if six.PY2 is true,
call the method context_match.group with an argument integer 1, substitute the result for message_context.
call the method clear from the base class of the class SortedDict.
define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
substitute connection_reset for self.connection_reset.
return boolean False.
if not,
define the method _resolve with an argument self.
call the function time.sleep with argument integer 1.
append string ".moves.urllib_robotparser" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for robotparser.
bytes_read is integer 0.
return left.
derive the class IfNode from Node base class.
define the function get_default_timezone.
return decorating_function.
define the method emit with 2 arguments: self and record.
if exception LookupError is caught,
substitute self.setting for context.autoescape.
append str_hidden to output.
if git_changeset is true,
define the function make_aware with 2 arguments: value and timezone.
if first element of bits is not equal to string 'and',
substitute value under the 'prefix' key of dictionary d, substitute it for prefix.
parser is an instance of CommandParser class, created with 3 arguments: self, prog as a string created by joining: os.path.basename(prog_name) and subcommand, separated by whitespace and description set to self.help, if exists, or None, otherwise.
call the function reset_translations.
define the method delete with self class instance, key and version defaulting to None as arguments.
call the function getargspec with an argument func, substitute the result for params, varargs, varkw and defaults, respectively.
get the value under the 'symlinks' key of the options dictionary, substitute it for self.symlinks.
move integer 1 left for 20 bits, substitute the result for MB.
define the method path with an argument self.
otherwise if name is not None and filter_func is None,
if ch is contained in string '*?+',
if initial is None,
child_nodelists is a tuple with 2 initial elements: strings 'nodelist_true' and 'nodelist_false'.
default_error_messages is a dictionary with 4 initial entries: return value of the function _ called with string as an argument, 'Enter a number.' for 'invalid', return value of the function ungettext_lazy called with 3 string arguments: 'Ensure that there are no more than %(max)s digit in total.', 'Ensure that there are no more than %(max)s digits in total.', and 'max' for 'max_digits', return value of the function ungettext_lazy called with 3 string arguments: 'Ensure that there are no more than %(max)s decimal place.', 'Ensure that there are no more than %(max)s decimal places.' and 'max', for 'max_decimal_places' and return value of the function ungettext_lazy called with 3 string arguments: 'Ensure that there are no more than %(max)s digit before the decimal point.', 'Ensure that there are no more than %(max)s digits before the decimal point.' and 'max' for 'max_whole_digits'.
remove '__weakref__' key from the orig_vars dictionary.
return parent.
define the method value_from_datadict with 4 arguments: self, data, files and name.
write string "Performing system checks...\n\n" to self.stdout stream.
define the method get with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
if not,
if dt.year is greater than or equal to integer 1900,
from django.utils.six.moves.urllib.parse import urljoin into default name space.
otherwise, if s has an attribute '__unicode__',
delete the value under key key of self._cache dictionary.
try,
return context_extras.
if value is not None,
do nothing.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
call the method parser.parse with an argument tuple, with an element string 'endwith', substitute the result for nodelist.
from django.utils.translation import ugettext as _ into default name space.
substitute allow_files and allow_folders for self.allow_files and self.allow_folders.
get the value under the 'no_location' key of the options dictionary, if it is true,
return value.
bring integer 36 to the power of factor, if i is smaller than the result,
return result.
call the method attrs.copy, substitute the result for self.attrs.
define the method decr with self, key, delta defaulting to integer 1 and version defaulting to None as arguments.
define function python_2_unicode_compatible, with klass as an argument.
define the method colorize with 3 arguments: text set to an empty string, opts set to an empty tuple and unpacked dictionary kwargs.
call the function pformat with an argument value, return the result.
import module os.
return an empty list.
if match is true,
call the method self._setup.
from django.utils import six into default name space.
call the function pgettext with an argument 'String to return when truncating text', '%(truncated_text)s...', substitute the result for truncate.
define the method convert with 2 arguments: self and value.
silent is boolean False.
call the function import_string with backend if exists or settings.EMAIL_BACKEND if not, store the result into klass.
call the function os.path.basename with argument name, substitute the result for name.
call the method self.unclosed_block_tag with an argument list with an element endtag.
if representative is None,
from django.template.base import Context, FilterExpression, Lexer, Node, NodeList, Parser, RequestContext, Origin, StringOrigin, Template, TextNode, Token, TokenParser, Variable, VariableNode, constant_string and filter_raw_string.
define the method __iter__ with an argument self.
call the method self.to_python with an argument value, strip the whitespaces from the result, substitute it for value.
for every key_value in natural,
for every option in options,
self.find_template_cache is an empty dictionary.
call the method operations.extend with an argument smigration.operations.
call the method self.add_filters with 2 arguments: logger and filters.
return chunk.
define the method check with 4 arguments: self, app_configs set to None, tags set to None, display_num_errors set to boolean False.
doublecolon_len is integer 0.
try,
decorator function register.filter with an argument is_safe set to boolean True.
import module copy.
call the method MIMEMessage.__setitem__ with arguments self, name and val.
define the function clear_script_prefix.
return an empty list.
call the method value.rjust with an argument, arg converted into a integer, return the result.
if call to the settings.is_overridden with string 'TEST_RUNNER' evaluates to boolean False.
format string '%+03d%02d' with hour and minute, append it to time_str, return the result.
raise an ValueError with an argument string "Non-reversible reg-exp portion: '(?P%s'" formated with ch.
call the method resultclass.mro, reverse the order of elements, for every type_ in the result.
define the method __init__ with 3 arguments: self unpacked list args and unpacked dictionary kwargs.
define the method tell with an argument self.
if o is contained in opt_dict,
call the method self.options.update with dictionary as an argument, containing 1 element: boolean False for 'use_decimal'.
define the method media with an argument self.
skip this loop iteration,s
derive the class HttpResponseRedirectBase from the HttpResponse base class.
try,
otherwise is settings.USE_TI is true,
substitute _iterkeys for keys.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
derive the class RemovedInDjango20Warning from PendingDeprecationWarning base class.
return nothing.
try,
if Exception, renamed to e, exception is caught,
get the value under the key 'only' of the options dictionary, if it exists substitute the result for isolated_context, if not, isolated_context is boolean False.
if self.limit_choices_to object is callable,
from django.forms.utils import flatatt,  ErrorDict and ErrorList into default name space.
self.use_ipv6 is boolean True.
try,
substitute old_setting for context.autoescape.
if qs.ordered is false,
allow_multiple_selected is boolean False.
raise an IOError exception with string "Destination file %s exists and allow_overwrite is False" as argument, where '%s' is replaced by new_file_name.
remove value under key key of self dictionary, if it doesnt exists return default, substitute the result for value.
return result.
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
from django.utils.http import urlquote into default name space.
return translated.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
while i is lesser than length of subject and i-th element of subject is an empty space or tab character,
derive the class SerializationError from the Exception base class.
if six.PY3 is true,
define the function u with an argument s.
return num_sent.
define the function register_serializer with 3 arguments: format, serializer_module and serializers set to None.
write msgs to fp.
if value is None,
convert key and default to strings, get the value under the key string key of the environ dictionary, if it does not exists use the, default string value, substitute it for value.
call the method stat.S_IMODE with an argument st.st_mode, calculate binary OR with the result and stat.S_IWUSR, as operands, substitute the result for new_permission.
replace all the occurrences of the '%' string for '%%', append result to the previous result, substitute it for candidate_pat.
return an empty list.
call the method pop from the base class of the class SortedDict, with 2 arguments k and unpacked list args, substitute the result for result.
for every f in fields,
call the function force_text with an argument text, substitute the result for text.
try,
if not,
for every name in namelist,
substitute source for e.django_template_source.
define the functionbase36_to_int with an argument s.
incomment is boolean True.
substitute True for self.close_called.
from django.utils.encoding import force_str into default name space.
call the method bytes_to_text with an arguments key and self.encoding, substitute the result for key.
if data is not None,
random is an instance of random.SystemRandom class.
from functools import total_ordering.
if conflicts is true and self.merge is false,
convert self.file to a string and append '.c' string to it, substitute the result for thefile.
substitute DateTimeInput for widget.
append entry to the directories list.
if c doesnt have an attribute '__call__' and types has an 'ClassType' attribute and type of c is not equal to types.ClassType,
call the method self.get_exception_response with request, resolver and integer 403 as the arguments, assign the result to response.
if i is even number,
return result
substitute auto_id for self.auto_id.
compile the handle.read in mode 'exec' source is read from file pythonrc, execute the compiled script with imported_objects variables.
for every migration in app_migrations,
raise an v exception.
if not,
join elements of output into a string, separated by newline characters, use it as the argument for the call the function mark_safe, return the result.
import pickle.
if attachments exists substitute it for self.attachments, if not attachments is an empty list.
call the method validators.MaxLengthValidator with max_length converted into an integer, append the result to list self.validators.
for every obj in objects,
define method value_encode with self class instance and val as arguments.
define the method __init__ with 5 arguments: self, template, context set to None, content_type set to None and status set to None.
otherwise if func is callable,
from django.core.management.base import BaseCommand into default name space.
if not,
call the method self._get_scheme, return the result.
try,
call the __init__ method from the base class of the WSGIServer class, with 2 arguments: unpacked list args and unpacked dictionary kwargs.
if inhibit_post_migrate is false,
assign self.origin, source to token.source.
if call to the method os.access with arguments: filename and os.W_OK, evaluates to false,
remove config dictionary element under 'disable_existing_loggers' key, if it exists substitute it for disable_existing, if not, disable_existing is boolean True.
call the method self.next_token, substitute the result for self.current_token.
get func_name attribute from the mod object, substitute it for view_func.
call the method hashlib.sha1 with an argument secret appended to key_salt, call the method digest on the result, return the result.
raise an ValueError exception with an argument string 'Cannot resolve %r: %s', formated with s and e.
import module warnings.
from django.db import connections, transaction, router and DatabaseError into default name space.
define the method render with 2 arguments: self and context.
if AttributeError exception is caught,
define the method clean with arguments self and value.
format_module_path is a list containing an element format_module_path.
substitute whitelist for self.domain_whitelist.
define the method __len__ with an argument self.
property decorator,
define the method __init__ with 2 arguments: self and data set to None.
substitute value under the 'use_ipv6' key of the options dictionary for self.use_ipv6.
get 'widgets' attribute from the options object, if it exists substitute it for self.widgets, if not self.widgets is None.
otherwise if k equals a string 'bg',
while i is lesser than num_existing and first pflen elements of i-th element of existing equals prefixed,
call the method value.serializable_value with an argument self.to_field_name, return the result.
concatenate name and string '_id', return it.
raise an ValidationError with 2 arguments: value under the 'invalid_time' key of the self.error_messages dictionary and code set to string 'invalid_time'.
define the function do_extends with 2 arguments parser and token.
if not,
call the method self._create_mime_attachment with the arguments content and mimetype, substitute the result for attachment.
substitute self.__class__ for obj.__class__.
if ValueError exception is caught,
for every model in model_list,
try,
if p_pattern starts with a string '^',
value is an instance of a class Decimal created with value as an argument.
if initial is not equal to data, return boolean True, if it is return boolean False.
define the method strptime with arguments self, value and format.
if self doesnt have an attribute '_fqdn',
try,
return an empty string.
decorator classmethod,
if ImportError exception is caught,
return result.
get the value under the self key of the context.render_context dictionary, substitute it for cycle_iter.
otherwise if self._delegate_text is true,
return cache_key.
try,
join root and f in path, substitute the result for f.
from django.conf import urls into default name space,
if self.can_delete is true and call to the method self._should_delete_form with an argument form, evaluates to true,
call the method tuple.__new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs, substitute the result for self.
from django.db import models into default name space.
try,
define the method __deepcopy__ with 2 arguments: self and memo.
call the method cursor.execute with string "DELETE FROM %s WHERE cache_key = %%s" as argument, substitute the '%s' with table and list containing key, respectively.
define the method expression with 2 arguments: self and rbp set to integer 0.
return an empty string.
if not,
define the method __str__ with an argument self.
from django.db.models.fields.related import ManyToManyField.
join together callback.__module__, character "." and callback.__name__, substitute the result for lookup_str.
define the method __contains__ with 2 arguments: self and other.
call the method node.get_nodes_by_type with an argument nodetype, extend nodes with it.
import module sys.
if value is an instance of datetime.date class,
if default_list is None,
define the method __init__ with 3 arguments: self, template_string and origin.
for every f in return value of the os.listdir function called with an argument command_dir, append f without 3 last elements to a list, only if f doesnt start with character '_' and doesnt ends with string '.py', return the resulting list.
if not,
from django.conf import settings into default name space.
call the method other.__cast, substitute the result for other.
otherwise if item_type equals FILE,
call the method form.save with an argument commit as commit, return the result.
wrte to the standard output result of the call to the method self.style.MIGRATE_SUCCESS with string " FAKED" as a argument.
param is None.
try,
call the method result.setFormatter with an argument formatter.
used_column_names is an empty list.
substitute content_type for self.content_type.
call the method self.is_url with an argument template, if it evaluates to true,
if value is None,
increment stats dictionary value under the HITS key by integer 1.
derive the class CheckboxFieldRenderer from the ChoiceFieldRenderer base class.
call the method find_indentation with an argument node, append the result to newline, substitute the result for klass.prefix.
for every f in opts.local_fields that has an 'post_create_sql' attribute, append f to a list, substitute the resulting list for post_sql_fields.
if six.PY3 is true,
if length of parts is greater than integer 1.
call the model.check method with unpacked dictionary kwargs for every model in return value of function apps.get_models, only if app_configs is None ot model._meta.app_config is contained in app_configs, error is a list containing all the previous elements.
call the function get_library with an argument taglib, substitute the result for lib.
define the method __getitem__ with 2 arguments: self and key.
define the function _curried with 2 arguments: unpacked list moreargs and unpacked dictionary morekwargs.
if response is None,
raise an TemplateSyntaxError exception with an argument string "'cycle' tag requires at least two arguments".
call the self.delete method with key and version set to version as arguments.
from django.conf import settings into default name space.
__locks is an empty dictionary.
try,
substitute result for cache dictionary value under the key key.
if 'Location' is contained in response and function request.get_host evaluates to True,
target_app_labels_only is boolean True.
call the self._delete method with argument f.name.
substitute name for self.name.
otherwise if first element of g equals a string "'",
missing_args_message is a string "You must provide an application name.".
if not,
if ext is true,
response.streaming_content is an empty list.
create a tuple out of types of v, for every v in args, extend key tuple with the result.
call the method parser.add_option with 5 arguments: string '--no-color', action set to a string 'store_true', dest set to string 'no_color' default set to boolean False and help set to a string "Don't colorize the command output.".
make target_dir directory,
raise an exception.
pop the value under the 'stream' key of the kwargs dictionary, if it exists replace it for self.stream, if not replace sys.stdout for self.stream.
try,
define the method validate with arguments self and value.
from django.utils import six into default name space.
define the method run_from_argv with arguments self and argv.
return val.
substitute model._meta for opts.
call parse.add_argument method, with string '--database', default set to DEFAULT_DB_ALIAS, and help as a string 'Nominates a database to print the SQL for. Defaults to the "default" database.', as arguments.
zfile is an instance of GzipFile class, created with 3 arguments: mode set to string 'wb', compresslevel set to integer 6, and fileobj set to buf.
break the loop execution.
get the next element of the iterable pattern_iter, assign the result for ch2 and escaped, respectively.
from django.db.migrations.loader import MigrationLoader and AmbiguityError into default name space.
define the method __repr__with an argument self.
substitute loader, name and dirs for self.loader, self.loadname and self.dirs, respectively.
raise an CommandError with an argument string "Problem installing fixture '%s': %s is not a known serialization format.", replace '%s' with: elements of last element of parts joined into a string and last element of parts.
define the method clear with argument self.
call the method zfile.close.
substitute current_app for ns.
_js_escapes is a dictionary with 11 initial entries: '\\u005C' for integer representation of string '\\', '\\u0027' for integer representation of string '\', '\\u0022' for integer representation of string '"', '\\u003E' for integer representation of string '>', '\\u003C' for integer representation of string '<', '\\u0026' for integer representation of string '%', '\\u003D' for integer representation of string '=', '\\u002D' for integer representation of string '-', '\\u003B' for integer representation of string ';', '\\u2028' for integer representation of string '\u2028' and '\\u2029' for integer representation of string '\u2029'.
call the method __init__ from the base class of the class ModelMultipleChoiceField, with 10 arguments: queryset, None, cache_choices, required, widget, label, initial, help_text, unpacked list args and unpacked dictionary kwargs.
dirs is an empty dictionary.
define the method as_ul with an argument self.
call the method self.fields.items, for every name and field in the result,
replace '%s' in string "Creating %s\n" with new_path, write it to the self.stdout stream.
if KeyError exception is caught,
do nothing.
define the method __str__ with an argument self.
from django.forms.fields import IntegerField and BooleanField into default name space.
if app_output is true,
raise an ValueError with an argument string "attempted relative import beyond top-level package".
define the method get_many with 3 arguments: self, keys, and version set to None.
define the function itervalues with 2 arguments: d and unpacked dictionary  kw.
call the method LocaleRegexProvider.__init__ with arguments self and regex.
for every a and n in targets, put a into a set, join all the set elements into a string separated by string ', ', if set is empty return string '(none)' instead, append the previous to the string " Apply all migrations: ", use the previous string as the argument for the call to the method self.style.MIGRATE_LABEL, use the result as an argument for the call to the method self.stdout.write.
call the method self.end_serialization.
remove the first element of context.
get maximal element from roots and substitute it for root.
do nothing.
create directories from the elements in filename.
convert value and arg to integers, if value is divisible by arg, return True, otherwise return boolean False.
substitute self.__class__.__doc__ for self.__doc__.
from django.utils.six.moves.urllib.parse import quote into default name space.
yield string 'day' as an return value of the generator.
if string '()' is contained in config,
define the method _resolve_lookup with 2 arguments: self and context.
derive the class DummyCache from the base class BaseCache.
call the function re.sub with 3 arguments: raw string "\\.|.", escape_quotes and tok without the first and last element, substitute the result for guts.
define the function add_library with 2 arguments: self and lib.
derive the class SlugField from the base class CharField class.
call the function os.stat with an argument path, perform bitwise and on 2 operands st_mode field of the result and stat.S_IREAD, if it is not equal to stat.S_IREAD,
define the method complain with 3 arguments: self, unpacked dictionary wargs and unpacked dictionary kwargs.
if name equals string "_wrapped",
from django.utils.module_loading import import_string into default name space.
try,
from django.db.migrations.executor import MigrationExecutor into default name space.
substitute i-th element of self.forms for form.
define the method handle with 5 arguments: self, app_or_project, name, target set to None and unpacked dictionary options.
if not,
if app_config.models_module is None,
substitute lookup_view for lookup_view_s.
define the method __init__ with 2 arguments: self and attrs set to None.
call the smart_text function with 3 arguments: field_value, value under the 'encoding' key of the options dictionary or, settings.DEFAULT_CHARSET if the key doesnt exists and strings_only set to boolean True.
get the value from the options dictionary under the key 'traceback', substitute it for self.show_traceback.
return obj_pk.
call the function _import_module with an argument self.mod, return the result.
call the method field.rel.to._default_manager.db_manager with an argument self.db, on the result call the method get_by_natural_key, with unpacked list field_value as an argument, substitute the result for obj.
call the function errors.error_dict.items, for every field and messages in the result,
if KeyError exception is caught,
raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_pk_value', code set to string 'invalid_pk_value and params with an entry: pk for 'pk'.
call f.read function, use the result as the argument for zlib.decompress function call, call the pickle.loads function with the previous result as argument, return the result.
if UnicodeDecodeError exception is caught,
__all__ is an list with an element 'luhn'.
raise an TemplateSyntaxError exception "'%s' is decorated with takes_context=True so it must have a first argument of 'context'", where '%s' is replaced with name.
RAISE_ERROR is an instance of object class.
join tmpdir and sting 'symlink' into a file path name, substitute it for symlink_path.
call the method self.next_token, substitute the result for token.
define the method close with an argument self.
call the function ugettext with an argument string "Please correct the duplicate data for %(field)s.", where '%(field)s' is replaced with first element of unique_check, return the result.
if AttributeError exception is caught,
import module types.
self.day_none_value is a tuple containing 2 elements: integer 0 and third element of empty_label.
decorator function lru_cache.lru_cache with an argument maxsize set to integer 1000.
call the function six.text_type with s as an argument, substitute the result for s.
derive class _HashedSeq from list base class.
skip this loop iteration.
try,
for every key and value in return value of the parse_qsl with 3 arguments: query_string is it exists or an empty string if not, keep_blank_values set to boolean True, encoding set to encoding.
if prefix is false, and self doesnt have '_callback_str' attribute,
call the method _time.localtime with an argument stamp, substitute the result for tt.
if nofollow is true nofollow_attr is a string ' rel="nofollow"', otherwise nofollow_attr is an empty string.
raise an ValueError exception with an argument string "Unsupported version: %s" formated with value under 'version' key of config dictionary.
call the function os.chmod with arguments full_path and self.file_permissions_mode.
if ValueError or TypeError exceptions are caught,
upload_handlers.setter decorator.
from django.utils.crypto import get_random_string into default name space.
if not,
if row_data is contained in seen_data,
replace '%s' in string "%s = %s" with key and value under the key key of the user_setting dictionary, append it to the output.
from django.utils.safestring import mark_safe into default name space.
define the method get_nodes_by_type with 2 arguments: self and nodetype.
classmethod decorator,
call the os.utime unction, with path and None as arguments.
raise an TemplateSyntaxError exception with an argument string "'for' statements should use the format 'for x in y': %s", where '%s' is replaced with token.contents.
raise an TemplateSyntaxError exception with an argument string "'templatetag' statement takes one argument".
define the initialization function __init__ with self class instance and params as arguments.
code_list is an empty list.
call the function to_locale with an argument lang, substitute the result for locale.
substitute value under the cache_alias key of the caches dictionary for cache.
define the method as_ul with an argument self.
for every choice in value,
default_validators is a list with an element validators.validate_email.
if string 'trimmed' is contained in result of the method t.split_contents, trimmed is boolean True, otherwise is boolean False.
substitute _iteritems for iteritems.
define the function mail_admins with subject, message, fails_silently set to boolean False, connection set to None,
define the method write_po_file with arguments self, potfile and locale.
substitute _itervalues for itervalues.
break from the loop execution.
close the file object.
substitute windll.kernel32.LockFileEx for LockFileEx.
if 'step' key of the attrs dictionary doesnt exists assign it step as an value.
call the method self.full_clean.
raise an ValueError with an argument string "Invalid header: %r", where '%s' is replaced with line.
substitute first element of loader for loader and loader without the first element for args.
from __future__ import unicode_literals into default name space.
if self._read_started is true,
for every key in self,
define the method lex with 2 arguments self and text.
ESCAPE_MAPPINGS is an dictionary with 10 initial entries: None for 'A', None for 'b', None for 'B', '0' for 'd', 'x' for 'D', ' ' for 's', 'x' for 'S', 'x' for 'W', '!' for 'W' and None for 'Z'.
call the function force_text with an argument truncate, substitute the result for truncate.
get return value of the field.get_attname function attribute of the obj object, substitute it for value.
call the load method on the c class instance, with the cookie argument.
call the method os.chdir with an argument our_home_dir.
if not,
if 'fields' attribute of Meta object is None and 'exclude' attribute of Meta object is None,
if expires is lesser than now,
if stream_or_string is an instance of bytes,
errors is a string "strict".
otherwise if any other exception is caught,
substitute urlconf_name for self.urlconf_name.
import pyinotify module.
convert value under the 'HTTP_CONTENT_LENGTH' key of the META dictionary to an integer of base of value under the 'CONTENT_LENGTH' key of META dictionary, if the key doesnt exists use 0 as the base, substitute the result for content_length.
call the method field.rel.to._meta.pk.to_python with an argument value, use the result as an argument for the call to the, smart_text function, return the result.
get attr attribute from the _module object, substitute it for value.
__all__ is a list containing a string "runfastcgi".
call the method self.indent with argument integer 2.
define the function _sanitize_ipv4_mapping with an argument ip_str.
call the method self._cache.disconnect_all.
define the method set_many with self, data, timeout set to DEFAULT_TIMEOUT and version set to None as arguments.
derive the class warn_about_renamed_method from object base class.
define the method __init__ with arguments: self, host set to None, port set to None, username set to None, password set to None, use_tls set to None, fail_silently set to False, use_ssl set to None, timeout set to None and unpacked dictionary kwargs.
return the value under the language_code key of the self._reverse_dict dictionary.
otherwise if value under the key 'all' of the options dictionary is true,
call the method tpl.format with an arguments self.sysid and self.pubid.
_assertRaisesRegex is a strnig "assertRaisesRegexp".
call the method self._lib.Client with argument self._servers.
try,
for every domain in domains,
call the mimetypes.guess_type with an argument filename, assign the result to the mimetype and _, respectively.
skip this loop iteration.
call the method self.getlist with an argument key, return the result.
define the method add_item_elements with 2 arguments, handler self and item.
increment i-th element of result by piece.
if LookupError or BinasciiError, renamed to e, exceptions are caught.
substitute name for new_attr.
return the value under the INITIAL_FORM_COUNT key of the self.management_form.cleaned_data dictionary.
call the method apps.get_app_config with an argument app_label, substitute the result for app_config.
call the function formset_factory with 10 arguments: form, formset, extra as extra, min_num as min_num, max_num as max_num, can_order as can_order, can_delete as can_delete, validate_min as validate_min, validate_max as validate_max, substitute the result for form.
define the method __init__ with 2 arguments: self and token.
try,
import module zipfile.
import module glob.
define the method __setitem__ with arguments self, name and val.
self.choice_cache is None.
if not,
return self.var.
derive the class MaxValueValidator form the BaseValidator base class.
call the function v with an argument value.
call the function io.open with 3 arguments: potfile, string 'w' and encoding set to string 'utf-8' as arguments, with the result renamed to fp, perform the following:
try,
define the method close with argument self.
if not,
define the method __iter__ with an argument self.
substitute serialize_headers for __bytes__.
define the method resolve with arguments self and path.
define the function template_localtime with 2 arguments: value and use_tz set to None.
derive the class LocMemCache from the base class BaseCache.
define the method __init__ with 3 arguments: self, attrs set to None and choices set to an empty tuple.
import module re.
raise a ValueError exception with an argument "You can only use `unpack_ipv4` if `protocol` is set to 'both'".
return self.object_list element at index.
join localpart and domain in a string separated by '@' character, substitute it for addr.
if new_name ends with string '_id',
url_schemes is list of strings 'http', 'https' and 'ftp'.
self.changed_objects is an empty list.
call the method self.connection.close.
ser_fmt is None.
call the function format_html with 4 arguments: string '<label{0}>{1} {2}</label>', label_for, result of the method self.tag, and self.choice_label, return the result.
if value equals self.empty_value or value is contained in self.empty_values,
from django.utils.safestring import mark_safe into default name space.
call the method handler.addQuickElement with 2 arguments: string 'rights' and value under the 'feed_copyright' key of the self.feed dictionary.
if self.is_required is false,
define the method end_serialization with an argument self.
fields is an tuple containing instances of the class DateField, created with 3 arguments: input_formats set to input_date_formats, error_messages as an dictionary with an entry: value under the 'invalid_date' of errors dictionary for 'invalid', localize set to localize, and an instance of the class TimeField created with 3 arguments: input_formats set to input_time_formats, error_messages as an dictionary with an entry: value under the 'invalid_time' of errors dictionary for 'invalid', localize set to localize
define the method _media with an argument self.
import module sys.
return name and tuple containing 2 elements value and params.
define the method strftime with 2 arguments: self and fmt.
define the method _get_scheme with an argument self.
get translation_function attribute of the object _default, call the result with an argument eol_message, substitute the result for result.
call the add_arguments method from the base class of the class Command with parser as an argument.
if self.active_readers equals integer 0 and self.waiting_writers is not equal to integer 0,
break the loop execution.
if TypeError, ValueError or UnicodeDecodeError exceptions are caught,
call the function register_serializer with 3 arguments: format, value under the format key of the settings.SERIALIZATION_MODULES dictionary and serializers.
call the method connection.introspection.get_relations with 2 arguments cursor, table_name and substitute the result for relations.
call the method parser.next_token, substitute the result for token.
import threading module.
if not,
call the private dict.__setitem__ method with self class instance, key and result of the function http_cookies.Morsel() as arguments.
for every site in sites,
content_length is integer 0.
define the method widget_attrs with arguments self and widget.
sum day_of_year, result of the subtraction of weekday from integer 7 and subtraction of integer 1 from jan1_weekday.
call the method router.get_migratable_models with arguments app_config, database and include_auto_created set to boolean True, extend all_models list with the result.
from . import six into default name space.
if settings.USE_TZ is True,
if TypeError exception is caught,
if val is an instance of bytes, return val, otherwise return result of the method val.encode called with an argument encoding.
substitute label for app_label.
otherwise if func is callable object,
delete first element of bits.
from django.template.base import TemplateDoesNotExist into default name space.
define the method clean with 2 arguments: self and value.
define the function get_format with 3 arguments: format_type, lang set to None and use_l10n set to None.
self.lineno is integer 1.
substitute text for self.text.
define the method __new__ with 4 arguments mcs, name, bases and attrs.
call the get_major_version wit version as argument, store the result in major.
otherwise if var is None,
define the function _is_shorthand_ip with an argument ip_str.
get the value under the 'ignore_patterns' key of the options dictionary, substitute it for ignore_patterns.
from django.utils.deprecation import RenameMethodsBase and RemovedInDjango19Warning into default name space.
get models.signals name attribute, store it in obj.
self.connection is None.
cache is an empty dictionary.
if best_doublecolon_len is greater than integer 1,
if link is not None,
model_dependencies is an empty list.
if other is not equal to list containing elements of self, return boolean True, otherwise return boolean False.
derive the class NumberAwareString from the resultclass base class.
if other is an instance of BaseContext class,
break the loop execution.
return the length of self.content.
from __future__ import unicode_literals into default name space.
if close is True,
write string "  Installing indexes...\n" to the standard output.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
if not,
call the method pk.rel.to._default_manager.get_queryset, substitute the result for qs.
substitute s1 for s.
if settings.SECURE_PROXY_SSL_HEADER is true,
num_entries is length of filelist.
substitute reason for self.reason_phrase.
increment i by integer 1.
if length of bits is greater than integer 2,
define the method __nonzero__ with an argument self.
if priority is false,
for every _ and nodelist in self.conditions_nodelists,
if six.PY2 is true,
define the method has_key with self class instance, key and version defaulting to None as arguments.
if cache is None,
do nothing.
if number equals a integer 1 and self.allow_empty_first_page is true,
if response is None,
property decorator,
if 'warning' is contained in kwargs,
call the method cursor.execute with string "SELECT cache_key, value, expires FROM %s WHERE cache_key = %%s" as argument, substitute the '%s' with table and list containing key, respectively.
substitute parent_name for self.parent_name.
append tuple containing 3 elements: candidate, fixture_dir and fixture_name to list fixture_files_in_dir.
finally perform,
name is an empty list.
do nothing.
define the method _get_request with self class instance as argument.
statements is an empty list.
define the method __init__ with 4 arguments: self, form, field and name.
append func to processors.
for every char in fmt,
return attrs.
call the method m.group with an argument string 'mon', convert the result to lowercase, use it as an argument for the call to the, method MONTHS.index, increment the result by integer 1, substitute it for month.
if self.verbosity is greater or equal to integer 2,
if not,
remove the first element from str_number.
define the method __init__ with 3 arguments: self, widgets and attrs set to None.
if not,
call the method parser.add_argument with 6 arguments: string '--ignorenonexistent', string '-i', action as a string 'store_true', dest as a string 'ignore', default set to boolean False and help set to string 'Ignores entries in the serialized data for fields that do not currently exist on the model.'.
define the method render with 4 arguments: self, name, value and attrs set to None.
get field.name attribute of obj, convert it to a string, substitute it for the value under the filed.name key of self._current dictionary.
call the method self.download with an argument template, substitute the result for absolute_path.
return first and second element of result.
substitute DEFAULT_ATTACHMENT_MIME_TYPE for mimetype.
call the function re.compile with arguments regex and re.UNICODE, substitute the result for compiled_regex.
if f equals to string '__pycache__',
replace '%s' in the string "<BaseConverter: base%s (%s)>" with length of self.digits and self.digits, respectively, return the string.
raise an CommandError exception with an argument string "%r conflicts with the name of an existing Python module and cannot be used " "as an app name. Please try another name.", where '%r' is replaced with app_name.
if character '-' is not contained  in lang_code,
substitute first element of app_list for ns.
call the method form.save with an argument commit as commit, return the result.
if AttributeError exception is caught,
do nothing.
if StopIteration exception,
call the method parser.add_argument with 3 arguments: string '--database', default set to DEFAULT_DB_ALIAS, and help set to string 'Nominates a database to print the SQL for. Defaults to the "default" database.'.
if not,
if template_name_list is false,
if lengths of value and arg are equal, return boolean True, otherwise return boolean False.
define the function _split_statements with an argument content.
return nothing.
initial is boolean False.
define the method __iter__ with an argument self.
define the method __repr__ with an argument self.
return field_dict.
_iterkeys is a string "iterkeys".
call the method appendlist from the base class of the QueryDict class, with arguments key and value.
append string " You may need to add %r to ALLOWED_HOSTS." to msg, where '%s' is replaced with domain.
call the method setdefault from the base class of the class SortedDict, with 2 arguments key and default, return the result.
derive the class ForNode from Node base class.
call the method parser.add_argument with 2 arguments: string 'args' and nargs set to '*'.
call the method __init__ from the base class of the class CheckboxInput, with an argument attrs.
raise an ValidationError with 2 arguments: value under the 'empty' key of the self.error_messages dictionary and code set to 'empty'.
call the method content.message, substitute the result for content.
call the function get_language, substitute the result for language_code.
else if timeout equals to integer 0,
convert ret to a boolean, return it.
if migrations_directory is not a directory,
if self.verbosity is greater than integer 0,
if not,
saved_locale is None.
from __future__ import unicode_literals into default name space.
i is the reminder of the division of i by j.
if six.PY2 is true,
FILE_INPUT_CONTRADICTION is an instance of object class.
from django.utils.encoding import smart_text and is_protected_type into default name space.
if key_prefix is None,
substitute choices for self.choices.
if TypeError or ValueError exceptions are caught,
join app_config.path and string 'templates' into file path, substitute it for template_dir.
if Exception, renamed to e, exception is caught,
call the method host_validation_re.match with an argument host.
if self.verbosity is greater or equal to integer 1,
call the function allow_lazy with an argument unescape_string_literal, substitute the result for unescape_string_literal.
split self._wrapped into words, substitute the result for words.
substitute value for rest.
define the method __init__ with 11 arguments: self, subject set to an empty string, body set to an empty string,
if Exception exception is caught,
compare is a lambda function with arguments self, a and b, return value is boolean true if a is lesser than b, otherwise is false.
replace every occurrence of '\\' in url with '/'.
if not,
convert col_name to lowercase, on the result call the method find with an argument string '__', if the result is greater of equal to integer 0,
append f.name to exclude.
from django.core.management.base import AppCommand into default name space.
define private method __eq__ with self class instance and other as arguments.
if y and m and d are all true,
call the method self.endElement with an argument name.
message is an instance of the ValidationError class created with an argument message.
return wrapper.
call the function pgettext_lazy with an argument self.message_context and value, return the result.
call the method fp.write with an arguments src_data.
from django.forms.widgets import Media,  MediaDefiningClass,  TextInput and Textarea into default name space.
from binascii import Error as BinasciiError into default name space.
if message has an 'error_dict' attribute,
define the method got with 3 arguments: self, key and otherwise set to None.
if not,
do nothing.
if i is smaller than integer 0,
call the function calendar.isleap with an argument self.data.year, if it evaluates to true,
return result.
get the value under the '__slots__' key of the orig_vars dictionary, substitute it for slots.
if self.include_html is true, call the method reporter.get_traceback_html and substitute the result for html_message, otherwise html_message is None.
if values is None,
define the function urlencode with 2 arguments value and safe set to None.
if not,
lang is None.
get 'labels' attribute from the options object, if it exists substitute it for self.labels, if not self.labels is None.
if httponly is true,
substitute value under the name key of the lib.filters dictionary for value under the name key of the temp_lib.filters dictionary.
flush zfile stream buffer.
substitute self.pointer for i.
do nothing.
derive the class TemplateDoesNotExist form the base class Exception.
if IndexError exception is caught,
return new_class.
if NotImplementedError exception is caught,
from django.utils.deconstruct import deconstructible into default name space.
round up radio, convert it to an integer and the convert it to a string and substitute the result for result.
do nothing.
call the signal.signal method with signal.SIGTTOU and signal.SIG_IGN as arguments, store the result in old_handler.
compile regex from raw string '(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$', substitute it for date_re.
self.fed is an empty list.
if parser doesnt have an '_namedCycleNodes' attribute,
if self.decimal_places is not None,
call the function to_language with an argument language, substitute it for self.__to_language.
define the method close with an argument self.
if Exception exception is caught.
if self.method is not equal to string 'POST',
define the function import_string with an argument dotted_path.
get field.name from the obj, substitute it for related.
if shown is an empty set,
form is an instance of ManagementForm class, created with 3 arguments: self.data, auto_id as self.auto_id and prefix as self.prefix.
call method self.serialize_headers, append bytes string '\r\n\r\n' to the result, append self.content to the result, return it.
if self.dry_run is false,
define the method send with arguments self and fail_silently set to boolean False.
write 79 '-' characters into self.stream file stream.
doctring
substitute encoding for self.encoding.
define the method subwidgets with 5 arguments: self, name, value, attrs set to None and choices set to an empty tuple.
if not,
increment i by one.
if six.PY3 is true,
breaks from the smallest enclosing loop.
call the __init__ method with 3 arguments: DEBUG, unpacked list args and unpacked dictionary kwargs from the base class of Debug.
update a dictionary with an entry v converted to an integer for k, for every k and v in result of the function six.iteritems, called with an argument kw, only if v is not None, substitute the result for kw.
call the method parser.add_argument with string '--noinput', action containing string 'store_false', dest set to string 'interactive', default set to True, help containing string 'Tells Django to NOT prompt the user for input of any kind.' as arguments.
zip val1 and va2 into list of tuples, for every x and y in the result,
return a string '%02d' formated with self.data.second.
set self.name attribute of the obj object to result.
substitute '%r' in string ' gettext(%r) ' with  result of the function join_tokens, called with 2 arguments: singular, and trimmed, write the result to out.
find index of the occurrence of string ':_(' in p, if its greater or equal to integer 0,
trimmed is boolean False.
from django.apps import apps into default name space.
call the method __init__ from the base class of the class RegexField, with 4 arguments: max_length, min_length, unpacked list args, unpacked dictionary kwargs.
raise an ImproperlyConfigured exception with argument string 'Path for saving emails is invalid: %r', replace '%r' with self.file_path.
get the value under the old_method_name key of the base.__dict__ dictionary, substitute it for old_method.
if seconds smaller than integer 0, sign is '-', otherwise sign is '+',
if not,
define the function calculate_app_template_dirs.
value under the klass key of the cls.__dispatch dictionary is an empty dictionary.
call the function do_ntranslate with 3 arguments: singular, plural, number and string 'ngettext', return the result.
define the method __init__ with 4 arguments: self, key set to None, sep set to ':' and salt set to None.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
subject is an string '%s: %s' formated with record.levelname and result of the method record.getMessage, respectively.
if attribute '_client' of the self object is None,
substitute request for self._request.
replace '%s' in string '%s_%s' with id_ and i, substitute the result for input_attrs dictionary value under the 'id' key.
if length of args is greater than 4.
join app_config.path and 'locale' into a valid directory path, separated by '/', append it to basedirs.
substitute cached_loaders for self._cached_loaders.
if bytes is smaller than KB,
call the method self.add_item_elements with 2 arguments: handler and item.
call the method self.decompress with an argument value, substitute the result for value.
call the function method with 3 arguments: self, unpacked list args and unpacked dictionary kwargs, substitute the result for data.
define the method __new__ with 4 arguments: cls, name, bases and attrs.
derive the class BlockNode from the Node base class.
call the method default with an argument o from the base class of the class DjangoJSONEncoder, return the result.
return WSGIHandler object.
if not,
if use_ssl is None substitute settings.EMAIL_USE_SSL for self.username, if not substitute use_ssl for self.use_ssl.
return an instance of Template class, created with 2 arguments: source, origin and name, return the result.
import module os.
if not,
python_2_unicode_compatible decorator,
call the function new_method_proxy with an argument operator.eq, substitute the result for __eq__.
raise an NotImplementedError exception with argument string 'subclasses of Storage must provide a delete() method'.
if AmbiguityError exception is caught,
from django.conf import settings into default namespace.
substitute MultipleHiddenInput for hidden_widget.
define the method __getinitargs__ with an argument self.
return a tuple containing 3 entries: output, result of the function force_text, called with 3 arguments: errors, DEFAULT_LOCALE_ENCODING and strings_only set to boolean True and p.returncode.
if not,
substitute error_messages for value under the ''error_messages' key of the kwargs dictionary.
if self.ignore is true and field_name is not contained in model_fields,
import module glob.
match regex date_re with value, substitute the result for match.
property decorator,
define the method attach_alternative with arguments self, content and mimetype.
want_unicode is boolean False.
try,
if GeneratorExit exception is caught,
convert app and model._meta.object_name to strings, join them with separating '.' character, substitute it for obj.
if data_set is not equal to initial_set return boolean True, otherwise return boolean False.
if self.is_reversed is true,
decorator stringfilter,
__all__ is a tuple containing strings: 'Storage', 'FileSystemStorage', 'DefaultStorage' and 'default_storage'.
return boolean True.
call the method self.validate_key with argument key.
raise an ValidationError with 3 arguments: dictionary self.error_messages value under the key 'invalid_choice', code set to string 'invalid_choice' and params as a dictionary with an entry, val for 'value'.
from django.utils import translation into default name space.
if self._wrapped is empty,
call the function iri_to_uri with an argument location, return the result.
call the function force_str with an argument quoted_url, use the result as an argument for the call to the function unquote_plus, use the result as an argument for the call to the function force_text, return the result.
call the method field._has_changed with 2 arguments: return value of the function field.to_python called with an argument initial, and data, if it evaluates to true,
return an instance of a NodeList class, created with arguments node, for every node in nodelist, and for every _, nodelist in self.conditions_nodelists.
if OSError, renamed to e, exception is caught,
call the method self._load_post_and_files.
raise a ValidationError exception with 2 arguments: return value of the function _ with an string argument 'Enter a valid integer.', and code set to string 'invalid'.
define the method _text_words with 3 arguments: self, length and truncate.
if self.verbosity is greater or equal to integer 1,
if cls is false,
substitute the '%s' in string 'views.decorators.cache.cache_header.%s.%s' with key_prefix and result of the function call, to the function url.hexdigest(), respectively, substitute it for cache_key.
call the middleware_method with request, callback, callback_args and callback_kwargs as the arguments, substitute the result for response.
d is an empty string.
remove first and last elements of s, replace every occurrence of string '\%s' formated with quote with quote, replace every occurrence of raw string '\\' in the result with string '\\', return the result.
if not,
for every taglib in bits without the first element,
substitute fcntl.LOCK_NB for LOCK_NB.
if not,
define the function split_url with an argument url.
call the method loader.get_migration with arguments node_app and node_name, extend the migration.merged_operations with the operations field of the result.
from django.core.exceptions import AppRegistryNotReady into default name space.
substitute self.source for e.django_template_source.
set self.__starttag_text to None.
define the method __init__ with 4 arguments: self, object_list, number, and paginator.
error is an instance of ValidationError created with an argument error.
if self.variable_name is true.
append name to the value of under the app key of the commands_dict.
if first element of the second row of args equals a string '2',
call the self.path with argument name, use the result as an argument for the call to the os.path.getsize function, return the result.
if exists return next entry from the database that cursor points at.
from threading import local into default name space.
import module warnings.
references_to_delete is an empty dictionary.
substitute __import__ for importer.
call the function sql_destroy_indexes with 3 arguments: app_config, self.style and connection, substitute the result for statements.
raise an CommandError with an argument string "couldn't extract file %s to %s: %s", where '%s' is replaced with filename, tempdir and e.
define the function length_is with 2 arguments value and arg.
from django.core.files import locks and File into default name space.
define the function urlunquote with an argument quoted_url.
raise an exception self.error_class with an argument string ""Unused '%s' at end of if expression", where '%s' is replaced with result of the method self.current_token.display.
call the method timezone.is_aware with an argument expires, if it evaluates to true,
if value under the 'microsecond' key of the kw dictionary is true,
substitute empty_permitted for self.empty_permitted.
call the method self.validate_key with argument key.
concatenate name and string '-clear', return it.
raise a exception of ComandError class with string "More than one migration matches '%s' in app '%s'. Please be more specific.", with all '%s' strings replaced with migration_name and app_label, respectively, as an argument.
from django.utils.deprecation import RemovedInDjango19Warning and RemovedInDjango20Warning into default name space.
substitute e and tb for v.__cause__ and v.__traceback__.
raise TemplateSyntaxError(
if opts.fields equals ALL_FIELDS,
call the function force_str with an argument self._tzname, return the result.
if extra_params is true,
for every i in self.years append tuple containing i and i elements into a list, substitute the resulting string for choices.
if literal_match is true,
output_transaction is boolean True.
return response
call the function chain with an argument unpacked list, append name to string 'render_', and use it as the name of the attribute to get from the self object, call the result and append it to a list for every name in MEDIA_TYPES, join all the results into a string with newline separator, use the result as an argument for the call to the function mark_safe, return the result.
return nothing.
join 'conf' and 'locale' into a file path, use it as an argument for the call the method os.path.abspath, put the results into a list, substitute self.locale_paths for it.
return value, if it is None return arg.
substitute self.old_timezone for _active.value.
from django.conf import settings.
if key is contained in d,
if context_instance is false,
if LookupError exception is caught,
define the method clean with 2 arguments: self and value.
raise an ValueError exception with an argument string 'Unable to configure filter %r: %s' formated with name and e.
_fields_ is a list containing 4 tuples: first tuple contains: string 'Internal' and ULONG_PTR, second contains: string 'InternalHigh and ULONG_PTR, third: '_offset_union' and _OFFSET_UNION, forth 'hEvent' and HANDLE.
join elements of paras into a string separated with '\n\n', return the result.
if value is None,
call the function get_random_string with 2 arguments: integer 50 and chars, substitute it for value under the 'secret_key' of the options dictionary.
if command is contained in parse_until,
if self.username and self.password are true,
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
derive class MovedModule from the _LazyDescr base class.
append line to bytes string ';', use it as an argument for the call to the function _parse_header_params, substitute the result for plist.
call the method cursor.execute with an argument sql.
if min_length is not None,
call the function escape with an argument lead, substitute the result for lead, call the function escape with an argument trail, substitute the result for trail.
substitute years for self.years.
return a dictionary with an entry: self.ns for "xmlns".
define the method invalid_block_tag with 4 arguments: self, token, command and parse_until as None.
return otherwise.
for every name in pattern.reverse_dict,
if data is not None or FILE_INPUT_CONTRADICTION,
call the method self.build_attrs with 3 arguments: attrs, type as self.input_type, name as name, substitute the result for final_attrs.
substitute settings.TIME_FORMAT for arg.
increment self.active_writers by integer 1,
if initial is not None,
substitute '%s' in the string '%%prog %s [options] %s' with subcommand and self.args, respectively, substitute it for usage.
define the function copystat with arguments src and dst.
use_func is boolean True.
substitute target and expression for self.target and self.expression, respectively.
if transfer_encoding equals string 'base64',
if answer equals a string 'y',
substitute regex for self._regex.
call the function dec with an argument func, return the result.
call the function dateformat.time_format with 2 arguments: value and result of the function get_format called with 2 arguments: format, if its true, otherwise string 'TIME_FORMAT' and use_l10n as use_l10n, return the result.
skip this loop iteration.
substitute field_type for field_type and new_params, respectively.
substitute save_m2m for self.save_m2m.
call the method self.build_attrs with 3 arguments: attrs, type as a string 'checkbox', name as name, substitute the result for final_attrs.
try,
if num_loopvars is not equal to len_item,
if app_name is an instance of BaseCommands.
if PY3 is true,
for every name and app in return value of the function six.iteritems calle with return argument of function get_commands as an arugment,
otherwise if _locs_ is None,
call the re.compile function with 2 arguments: raw string '\[([A-f0-9:\.]+)\]$' and re.IGNORECASE, substitute the result for literal_regex.
raise a NotImplementedError with an argument string
define the function gettext_noop with an argument message.
if e.errno does not equals to errno.ENOENT,
substitute first, second and second elements of bits for yes, no, maybe, respectively.
try,
if self.asvar is true,
from django.conf import settings object to the default name space.
split string pks by ',', substitute the result for primary_keys.
if signing.BadSignature exception is caught,
call the method parser.parse with an argument tuple with 3 elements strings 'elif', 'else' and 'endif', substitute the result for nodelist.
call the method widget_attrs with an argument widget, from the base class of the DecimalField class, substitute the result for attrs.
call the function urlunsplit with an argument tuple with 4 elements: scheme, netloc, path, query and fragment, substitute the result for url.
call the method self.model._default_manager.get_queryset with an argument qs.
if prefix is None,
return a string "%s.%s" formated with first dot package elements and name.
call the method connection.cursor, with the result as cursor,
derive the class InterBoundaryIter from the six.Iterator base class.
define the method add_fields with 3 arguments: self, form and index.
from django.core.management import call_command into default name space.
for every post_callback in self._post_render_callbacks,
define the method created_time with arguments self and name.
for every basedir in basedirs,
call the method parser.parse_args with argv, without the first 2 elements, substitute the result for options.
call the method datetime.datetime with an argument unpacked dictionary kw, return the result.
define function learn_cache_key with request, response, cache_timeout set to None, key_prefix set to None, cache set to None as arguments.
try,
call the method connection.ops.sequence_reset_sql with 2 arguments: return value of the no_style and self.models, substitute the result for sequence_sql.
call the function construct_instance with 4 arguments form, instance, fields, exclude and substitute the result for instance.
substitute instance for self.instance.
UNKNOWN_SOURCE is a string '<unknown source>'.
call the method django.get_version append new line to it, write it to sys.stdout.
return the media field of the first element of self.forms.
derive the class TypedChoiceField from the base class ChoiceField class.
define the method listdir with arguments self and path.
call the method dict with 4: self.attrs, type as self.input_type, name as self.name, value as self.choice_value, substitute the result for final_attrs.
import module warnings.
return the content field of the base class of the class SimpleTemplateResponse.
define the method tag_function with 2 argument: self and func.
increment Field.creation_counter by one.
import module binascii.
get the name of the callback, substitute it for view_name.
derive the class FixUnicode from the base class fixer_base.BaseFix.
append a tuple containing 2 elements: content and mimetype, to the self.alternatives list.
call the __init__ method from the base class of the class TemplateResponse, with 4 arguments: template, context, content_type, status.
if end is an instance of unicode,
return WRAPPER_ASSIGNMENTS.
inner_result and inner_args are empty lists.
if s is not an instance of the object six.string_types,
update object_data dictionary with initial.
if middleware has an attribute 'process_view',
return msg.
replace '%s' in string '%s: %s' with e.__class__.__name__ and e, respectively, write it to the stderr stream.
yield d.
call the function _ with an argument string 'noon', return the result.
HITS and MISSES are integer 0 and 1, respectively.
call the function hook with an argument entry, substitute the result for finder.
for every f in filters,
from __future__ import unicode_literals into default name space.
import module os.
return value.
for every character in name,
derive the class BaseFormSet from the object base class.
call the method self.execute, with 2 arguments: unpacked list args and unpacked dictionary cmd_options.
derive the class DTDForbidden from the DefusedXmlException base class.
call the add_argument method on the parser object, with string 'app_label', and help set to string 'App label of the application containing the migration.' as arguments.
increment i by integer 1,
derive the class SimpleTemplateResponse from the HttpResponse base class.
define lambda function that returns self.file.seek field, use it as an argument for property function, put the result in seek.
call the method self.g, return the result.
return value under the name key of the sys.modules dictionary.
substitute result.queryset for result.queryset.
define the method __init__ with 5 arguments: self, var, name, nodelist and extra_context set to None.
return result.
call the method handle from the base class of Command class, with 4 arguments: string 'app', app_name, target and unpacked dictionary options.
create a printable representation of self.urlconf_name object, substitute it for urlconf_repr.
self.paths_to_remove is an empty list.
call the method arg.resolve with an argument context, append the result to arg_vals.
if AttributeError exception is caught,
self.waiting_readers is integer 0.
call the method format_string.format with 2 arguments: unpacked list args_safe and unpacked dictionary kwargs_safe, use the result as an argument for the call to the function mark_safe, return the result.
__all__ a tuple containing strings: 'Field', 'CharField', 'IntegerField', 'DateField', 'TimeField', 'DateTimeField', 'RegexField', 'EmailField', 'FileField', 'ImageField', 'URLField', 'BooleanField', 'NullBooleanField', 'ChoiceField', 'MultipleChoiceField', 'ComboField', 'MultiValueField', 'FloatField', 'DecimalField', 'SplitDateTimeField', 'IPAddressField', 'GenericIPAddressField', 'FilePathField', 'SlugField', 'TypedChoiceField', 'TypedMultipleChoiceField'.
property decorator, to be called by property built-in function.
help is a tuple containing a string "Creates a Django app directory structure for the given app name in the current directory or optionally in the given directory.".
define the function escapejs with an argument value.
try,
define the __init__ method with 5 arguments: self, urlconf_name, default_kwargs set to None, app_name set to None and  namespace set to None.
try,
if line ends with a new line character substitute width incremented by integer 1 for max_width, if not substitute width for max_width.
substitute absolute seconds for seconds.
if categories is true,
from django.core.cache import caches to the default name space.
if field_type equals a string 'AutoField(',
if name is not contained in parser._namedCycleNodes,
from django.utils.functional import lazy into default name space.
substitute settings.ROOT_URLCONF for urlconf.
if self.empty_permitted is true and call to the method self.has_changed evaluates to false,
call the urljoin function with arguments: self.base_url and result of the call to the function filepath_to_uri with argument name, return the result.
try,
call the method MIMEText.__init__ with 4 arguments: self, text, subtype and None.
if html is true,
raise an exception StopFutureHandlers.
otherwise if klass is subclass of logging.handlers.SysLogHandler class, and string 'address' is contained in config,
if call to the _has_expired method with argument key evaluates to boolean False,
if tags is not None.
substitute BOOL for UnlockFileEx.restype.
define the function handle_m2m with an argument value,
call the method rlcompleter.Completer with an argument imported_objects, use the complete field of the result as an argument for the call to the method readline.set_completer.
do nothing.
call the method qs.using with an argument form.instance._state.db, substitute the result for qs.
if saved_locale is not None,
if nodelist.contains_nontext is true,
return nodelist_true_output, if true, if not call the method self.nodelist_true.render with an argument context and return the result.
call the method parser.add_argument with 4 arguments: string 'args', metavar set to string 'app_label', nargs set to character'*', and help as a string 'Specify the app label(s) to create migrations for.'.
call the method handler.addQuickElement with 2 arguments: string 'updated' and result of the function rfc3339_date, called with an argument value under the 'updateddate' key of the item dictionary.
try,
call the function getcallargs with an argument current,
get the value under the 'filename' key of the params dictionary, if the key exists substitute it for guessed_filename, if not, substitute used_name for guessed_filename.
append string ', ' to field_desc.
if not,
if not,
call the self.load_middleware method.
return hard copy of self.keyOrder elements.
return the result of the method self._html_output, called with 5 arguments: normal_row to a string, '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>', error_row set to a a string, '<tr><td colspan="2">%s</td></tr>', row_ender set to a string '</td></tr>', help_text_html set to a string, '<br /><span class="helptext">%s</span>' and errors_on_separate_row set to boolean False.
call the method self.read_limited with length of self.buffer subtracted from size as argument, add result to self.buffer, store it in result.
add self.form.required_css_class to extra_classes set.
call the method ustring_re.sub with 2 arguments: fix and s, return the result.
derive the class ChunkIter from the six.Iterator base class.
instantiate class Decimal with string '1.0' as argument, divide it by product of instance of Decimal class created with integer 10, and absolute value of p, substitute the result for exp.
return callback and a empty string.
if ImproperlyConfigured renamed to exc, exception is caught,
call the method datetime_safe.new_datetime with an argument date, substitute the result for date.
call the method settings._setup.
call the method __deepcopy__ from the base class of the class MultiWidget, with an argument memo, substitute the result for obj.
do nothing.
substitute the length of defaults for dlen.
define the method page with self class instance and number as arguments.
define the function cut with 2 arguments value and arg.
evaluate method transaction.atomic with arguments: using set to database and savepoint set to connection.features.can_rollback_ddl, with the result,
if not,
from django.apps import apps into default name space.
if _ipv6 is true,
raise an TemplateDoesNotExist exception with an argument template_name.
call the s.serialize method with arguments queryset and unpacked dictionary options.
try,
format_key is a string 'DATE_INPUT_FORMATS'.
import module itertools.
if format_module_path is None.
define the function unlock with argument f.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the method Module_six_moves_urllib_request with an argument: string ".moves.urllib.request" appended to __name__, assign the result to the value under the string ".moves.urllib_request" appended to __name__ key of the sys.modules dictionary, and to the value under the string ".moves.urllib.request" appended to __name__ key of the sys.modules dictionary.
if ImproperlyConfigured exception is caught,
otherwise if self.fixture_object_count equals self.loaded_object_count,
add model to created_models set.
define the function _get_foreign_key with 4 arguments: parent_model, model, fk_name set to None and can_fail set to boolean False.
define the method led with 3 arguments: self, left and parser.
if PY3 filed of six is boolean True,
if TypeError or VariableDoesNotExist exceptions are caught,
append a tuple with 2 arguments: filter_func and args to filters.
use global variable invalid_var_format_string.
call the method re.sub with 3 arguments: string '[^\w\s-]', empty string and value, strip the result of whitespaces from both ends, and convert it to lowercase, substitute the result for value.
for every migration in merge_migrations,
substitute silent for self.silent.
call the function ngettext with 3 arguments: singular, plural and number, use the result as an argument for the call to the force_text, return the result.
if not,
from django.core import checks into default name space.
define the method get_field_type with 4 arguments: self, connection, table_name and row.
return default.
forms_valid is True.
if support_legacy is false,
from django.template.base import ContextPopException, InvalidTemplateLibrary, TemplateDoesNotExist, TemplateEncodingError, TemplateSyntaxError and VariableDoesNotExist.
substitute doublecolon_len for best_doublecolon_len.
if self._errors is None,
do nothing.
from __future__ import unicode_literals into default name space.
define the method __str__ with an argument self.
if filename is an instance of MIMEBase,
decorator stringfilter,
close zfile stream.
try,
raise an ValueError with an argument string 'ModelForm has no model class specified.'.
call the method handler.addQuickElement with 2 arguments: string 'lastBuildDate' and result of the function rfc2822_date, called with an argument result of the method self.latest_post_date.
define the method __init__ with 2 arguments: self and s.
call the function check_programs with 3 arguments: strings 'msguniq', 'msgmerge' and 'msgattrib'.
if not,
if ValidationError renamed to e, exception is caught,
call the method self._get_context_stack_frame with an argument context, substitute the result for state_frame.
if self.locale_paths is true,
try,
if pks is true,
define the close method with 2 arguments, self and dictionary of argument pairs kwargs.
if self.silent is true,
derive the class Rss201rev2Feed from the RssFeed base class.
content_subtype is a string 'plain'.
call the function force_text with an argument output, substitute the result for output.
call the method code.interact with an argument local set to imported_objects.
define the method _post_clean with an argument self.
call the function getInnerText with argument field_node, on the result call the method strip, use the result as an argument for the call to the field.to_python method, substitute the result for value.
define the method __copy__ with an argument self.
self.id_for_label is true,
for every p in plist,
substitute self.subject for value under the 'Subject' key of msg dictionary.
derive the class Atom1Feed from the SyndicationFeed base class.
register.tag decorator,
call the method p.communicate, assign the result to output and errors, respectively.
compare_to is an list with elements generated by calling the var.resolve method with 2 arguments: context and boolean True, for every var in self._varlist.
if subcommand is contained in no_settings_commands,
format string hex_format_string with x, call the method encode on the result with an argument string 'ascii', use the result as an argument for the call to the function binascii.unhexlify, return the result.
call the method parser.delete_first_token.
derive the class SpacelessNode from Node base class.
define the method parse_file_upload with 3 arguments: self, META and post_data.
substitute tokens for self.tokens.
define the method open with arguments self, name and mode defaulting to string 'rb'.
strip path of all leading '/' and '\\' characters, substitute the result for path.
for every d in object_list,
raise an TemplateSyntaxError exception with an argument string "next-to-last argument to 'regroup' tag must be 'as'".
define the method add with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
if words is true, substitute re_words for regex, if not substitute re_chars for regex.
property decorator,
zip elements of inner_result and inner_args into a list of tuples, for every i_item and i_args in the result,
call the function is_aware with an argument o, if it evaluates to true,
from django.core.exceptions import ImproperlyConfigured into default name space.
if elt is an instance of six.string_types class,
substitute field_name for self.field_name.
substitute complain for __delitem__.
if not,
skip this loop iteration.
try,
substitute content_type_extra for self.content_type_extra.
decorator function register.filter with an argument is_safe set to boolean False.
if bf.is_hidden is true,
replace '%s' in string 'ignoring directory %s\n' with dirname, write it to self.stdout stream.
define the method __ne__ with 2 arguments: self and other.
replace '%s' in a string "Error: %s" with error_text, write it to self.stderr.
call the function style_func with an argument msg, use the result as an argument for the call to the function force_str, use the result as an argument for the call to the function self._out.write.
call the method MIMEText.__init__ with 4 arguments: self, text, subtype and charset.
define the function get_public_serializer_formats.
evaluate binary expression with 4 operands: os.O_WRONLY, binary or os.O_CREAT, binary or os.O_EXCL, binary or 'O_BINARY' attribute of the os object, or integer 0 if it doesnt exists.
if not,
substitute module for the value under the format key of the _serializers dictionary.
try,
from django.template import loader,  Context and RequestContext into default name space.
define the method resolve with 3 arguments: self, context and ignore_failures set to boolean False.
from django.utils.translation import TranslatorCommentWarning, trim_whitespace and LANGUAGE_SESSION_KEY into default name space.
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
if valu is an instance of list type,
if not,
import module sys.
call the method self.remove_potfiles.
if has_old_option is true,
call the function parser.compile_filter with an argument arg for every arg in args from the index 1 to the index -2, append the results into a list, substitute it for value.
define the function phone2numeric_filter with an argument value.
substitute serializers for _serializers.
if d is an instance of real_datetime class,
return templatetags_modules.
derive the class MultiPartParserError from the Exception base class.
return self._queryset.
substitute boolean_check for self.check_test if check_test is None, otherwise substitute check_test for self.check_test.
return self.hashvalue.
for every item in values,
if self.object is not an instance of list type,
if value has an '__iter__' attribute and value is not an instance of bytes or six.string_types class.
self._post_parse_error is boolean True.
from django.core.wsgi import get_wsgi_application into default name space.
if response.status_code is lesser than integer 200 and grater or equal than 100, or response.status_code equals to integer 204 or 304,
define the method ugettext with an argument message.
if use_natural_keys is true,
import module unicodedata.
call the method form.add_prefix with an argument self.fk.name, use the result as an key to get the value of the form.data dictionary, assign it value None.
join elements of output into a string, separated with newlines, return the result.
get the value from META dictionary, under the 'HTTP_CONTENT_TYPE' key, if the key doesnt exist, return the value under the 'CONTENT_TYPE' of the META dictionary, if it doesnt exist return an empty string, substitute the result for content_type.
call the method app.initialize with an argument argv as an empty list.
return response.
call the method token.split_contents, substitute the result.
for every app and names in result of the method conflicts.items, join names into a string, separated by ', ', join it with app into a string, separated with string '; ', substitute it for name_str.
try,
if ImportError exception is caught,
call the function validate_ipv6_address with an argument value.
call the method connection.introspection.sequence_list if reset_sequences is true, substitute the result for seqs, if not, seqs is an empty tuple.
try,
return the value under the language_code key of the self._namespace_dict dictionary.
call the method kwarg_re.match with an argument bit, substitute it for match.
from django.core.validators import EMPTY_VALUES into default name space.
get the value under the LANGUAGE_SESSION_KEY key of the request.session dictionary, substitute it for lang_code.
call the method self.unget with list containing first remaining elements of chunk as an argument.
substitute '%s' in string 'Cache key will cause errors if used with memcached: %s (longer than %s)' with key, and MEMCACHE_MAX_KEY_LENGTH, call the function warnings.warn with previous string and CacheKeyWarning as arguments.
raise an exception CommandError, with argument string "%r conflicts with the name of an existing Python module and cannot be used as a project name. Please try another name.", where '%r' is replaced with project_name.
call the method condition.eval with an argument context, substitute the result for match.
for every filenam in locale_filenames,
if errors is true,
do nothing.
call the method sql_flush with 5 arguments: self.style, connection, only_django set to boolean True, reset_sequences set to reset_sequences, allow_cascade set to allow_cascade, substitute the result for sql_list.
derive the class MediaDefiningClass from the type base class.
substitute attrs and choices for self.attrs and self.choices
strip g of '"' from both ends,
if model is contained in created_models,
call the __init__ method from the base class of the StreamingHttpResponse class, called with arguments: unpacked list args, and unpacked dictionary kwargs.
raise an ValueError exception.
append character '/' to the base_url.
if content_length is greater than settings.FILE_UPLOAD_MAX_MEMORY_SIZE,
otherwise if t.token_type equals TOKEN_VAR,
from __future__ import unicode_literals into default name space.
define the method add with 5 arguments: self, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
call the run_from_argv function from the base class of the Command class with argv as a argument,.
otherwise if i is smaller than list_length decremented by one,
call the method template_localtime with 2 arguments: value and use_tz=context.use_tz, substitute the result for value.
raise an ImproperlyConfigured exception with argument string '"%s" is not a valid regular expression: %s', where '%s' is replace by regex and return value of the function six.text_type with an argument e.
if not,
call the method self.has_header with string 'Content-Encoding' as an argument, if it evaluates to true,
call the method field_stream.read with an argument: over_bytes subtracted from integer 4, substitute the result for over_chunk.
for every filename in filenames,
if not,
substitute value under the 'verbosity' key of the options dictionary for verbosity.
derive the class Page from the collections.Sequence base class.
call the method self.configurator.convert with an argument value, substitute the result for result.
call the function write with an argument arg.
return result.
property decorator,
import module signal.
po_path is a string containing joined directory path from dirpath and f.
if ValueError, TypeError or OverflowError exceptions are caught,
define the method end_serialization with an argument self.
derive the class RendererMixin from the object base class.
if not,
return self.__offset.
get the value under the 'database' key of the options dictionary, use it as the key to get the value from the connections dictionary, substitute the result for connection.
try,
call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.
call the method __setitem__ from the base class of the class SortedDict, with 2 arguments key and value.
if the boolean return vale of the call to the function is_protected_type(s) and string_onlys are boolean True,
call the function re.compile with 2 arguments: raw string '^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$', and re.IGNORECASE, substitute the result for simple_url_re.
if first element of args is an instance of SafeData, and 'is_safe' attribute of dec._decorated_function object is true,
call the function _explode_shorthand_ip_string with an argument ip_str, substitute the result for ip_str.
from functools import lru_cache.
if form._meta.widgets is true,
define the function time with 2 arguments value and arg set to None.
return an empty string,
get the value under the 'all' key of the options dictionary, substitute it for process_all.
derive the class Deserializer from the base.Deserializer base class.
if '.' is not contained in str_number,
call the method field_node.getElementsByTagName with an argument string 'None', if it evaluates to true,
substitute first length elements of words for words.
do nothing.
call the function smart_text with an argument auto_id, format the result with self.html_name, return it.
import module django.
define the method __repr__ with an argument self.
sum year and off, substitute the result for year.
define the add_arguments with arguments self and parser.
raise an TemplateSyntaxError exception with an argument string "'%s' received multiple values for keyword argument '%s'", where '%s' are replaced with name and param.
decorator stringfilter,
from django.db import models into default name space.
call the method constant_re.match with first element of parts as an argument, substitute the result for cmatch.
define the function ifnotequal with 2 arguments: parser and token.
if not,
substitute asvar for self.asvar.
substitute __setitem__ filed of the base class of the class SortedDict for super_set.
define the method render with 4 arguments: self, name, value and attrs set to None.
return s.
call the function base64.b64decode with an argument raw_data, substitute the result for data.
if not,
derive the class NodeList form the base class list.
derive the class RWLock from the object base class.
if character '@' is contained in addr,
if ImportError exception is caught,
evaluate function has_bom with po_path as argument.
call function _checkLevel with an argument level, use the result as an argument for the method result.setLevel.
skip this loop iteration.
call the method parser.add_argument with 5 arguments: string '--exclude', string '-x', default as a empty list, dest as a string 'exclude', action as a string 'append' and help as a string 'Locales to exclude. Default is none. Can be used multiple times.'.
substitute self.to_field_name, if true, for key, or if not, substitute string 'pk' for key.
call the method parser.add_option with 2 arguments: string '--pythonpath' and help set to a string 'A directory to add to the Python  path, e.g. "/home/djangoprojects/myproject".'
import module sys.
define the method with reload with an argument self.
define the function urlize with 4 arguments: text, trim_url_limit set to None, nofollow set to boolean False,
call the function allow_lazy with 2 arguments: urlunquote and six.text_type, substitute the result for urlunquote.
delete the attribute name from the cache dictionary under the DEFAULT_CACHE_ALIAS key.
call the method self.endChannelElement with an argument handler.
return result of the f.fileno method if f has an 'fileno' attribute, otherwise return f.
if self.data.minute equals integer 0,
raise an InvalidTemplateLibrary exception with an argument string "Template library %s not found, tried %s", where '%s' is replaced with library_name and elements of tried_modules joined into a string, separated by ','.
do nothing.
m2m_data is an empty dictionary.
from django.core.management.utils import find_command and popen_wrapper into default name space.
args is a string '[fixture ...]'.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
sum trail and closing, substitute the result for lead.
if settings.configured is false,
sub_ul_renderer is an instance of ChoiceFieldRenderer class, created with 4 arguments: name as self.name, value as self.value, attrs as attrs_plus and choices as choice_label.
convert initial into boolean and substitute it for initial.
if new_conn_created is true,
call the method self.write with 2 arguments: s and encoding.
try,
call the method self.strptime with arguments value and format, return the result.
call the function _ with an argument string 'a.m.', return the result.
return name.
substitute self.field.widget for widget.
call the method self.make_key with key and version set to version as arguments, substitute it for key.
define the method validate_number with self class instance and number as arguments.
call the method self.reader_leaves.
raise an TypeError exception with an argument sting "Lazy object returned unexpected type.".
otherwise if action equals to string 'apply_success',
num is an integer 0.
substitute options.args for args.
if StandardError, renamed to e, exception is caught,
define the method i with an argument self.
import module copy.
if call to the self.is_valid method evaluates to false or self.can_order is false,
_cached_modules is an empty set.
get name attribute from the instance object, call it with an argument value and return the result.
call the salted_hmac with 3 arguments: salt, value and key, call the digest method on the result, use the result as an argument for the call to the b64_encode function, return the result.
call the method connection.introspection.table_names with an argument cursor, substitute the result for table_names.
request user input from the standard input, assign it o confirm, with the query string: "You have requested a flush of the database." "This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state." "Are you sure you want to do this?"Type 'yes' to continue, or 'no' to cancel: ", where '%s' is replaced with value under the 'NAME' key of the connection.settings_dict dictionary.
year_val and month_val and day_val are set to None.
call the function stat.S_IMODE with argument st.st_mode, substitute the result for mode.
if error_messages is true and f.name is contained in error_messages,
get field.rel.field_name attribute of the object obj, substitute it for value.
if second last element of django.VERSION is not equal to a string 'final',
from django.utils.encoding import force_text into default name space.
import module re.
return self._upload_handlers.
if can_fail is true,
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 4 entries: "enclosure" for 'rel', field url of value under the "enclosure" key of item dictionary for 'href', field length of value under the "enclosure" key of item dictionary for 'length', and field mime_type of value under the "enclosure" key of item dictionary for 'type'.
try,
define the method __init__ with 4 arguments: self, content_type set to None, status set to None, reason set to None.
replace every occurrence of old for new in msgs, substitute the result for msgs.
if fields is true and f.name is not contained in fields,
call the method self._populate.
raise an ValidationError with 2 arguments: value under the 'required' key of the self.error_messages dictionary and code set to 'required'.
call the function import_string with argument backend.
from django.utils.encoding import force_bytes into default name space.
if element of targets in first row and second column is None,
if termios is true,
if call to the method self._css.get with an argument medium evaluates to false, or path is not contained in the value under the medium key of self._css dictionary.
return data.
call the function datetime.now, on the result call the method strftime with an argument string '%B %d, %Y - %X', substitute the result for now.
define the method __enter__ with an argument self.
define the method __repr__ with an argument self.
call the method middleware.process_template_response with 2 arguments: request and response, substitute the result for response.
import module hmac.
call the method datetime.now, return the result.
from django.utils.encoding import force_text into default name space.
raise an exception.
for every app and names in key, value tuple pairs of conflicts dictionary join names into a string separated by commas, in "%s in %s" substitute '%s' with names string and app, respective, join all the previous pairs into a string separated by ';', substitute it for name_str.
from __future__ import unicode_literals into default name space.
return nothing.
for every key in self.keyOrder,
define the method __init__ with self, server and params as arguments.
return is boolean False.
call the method self._text_chars with 4 arguments: length, truncate, text and truncate_len, return the result.
self.tags is an empty dictionary.
return an property object with getter function fget, setter function fset, destructor fdel and documentation string doc.
call the method g.flatten with arguments self and unixfrom set to unixfrom.
substitute instance for self.instance.
if decorator has an attribute 'process_view',
BM_compatible is boolean True.
for every name in sorted value under the app key of the commands_dict dictionary, append string "
substitute elements of middle from length of opening index to the end, for middle.
return iterable self.keyOrder.
substitute connection.queries for value under the 'debug' key of the context_extras dictionary.
define the function get_script_prefix.
call the method self.extra_headers.get with arguments: string 'To' and joined string from self.to elements separated by ', ', substitute the result for value under the 'To' key of msg dictionary.
call the function safe_join with 2 arguments template_dir and template_name, yield the result.
set value under the 'stream' key of kwargs dictionary to None.
call the function unescape_entities with an argument file_name, use the result as an argument for the call to the self.IE_sanitize, method, substitute the result for file_name.
if self.form.is_bound is false,
if not,
derive the class Field from the base class object.
if ssl.SSLError or smtplib.SMTPServerDisconnected exception occurred,
opts.fields is None.
if self.verbosity is greater or equal to integer 1,
if not,
get attribute '_non_atomic_requests' from the view object, if the attribute doesnt exist return the empty set, substitute the result for non_atomic_requests.
derive the class CharField from the base class Field class.
call the method self.run_validators with an argument value.
return kwargs.
call the __init__ method with 3 arguments: INFO, unpacked list args and unpacked dictionary kwargs from the base class of Info.
return an empty dictionary.
is_usable is boolean False.
module_values is a set created from the elements of sys.modules.values method return value.
FILTER_ARGUMENT_SEPARATOR is a string ':'.
call the method router.allow_migrate with 2 arguments: self.using and obj.object.__class__, if it evaluates to true,
call the __init__ method from the base class of the HttpResponse class, with the arguments: unpacked list args and unpacked dictionary kwargs.
import stat.
call the __getstate__ method from the base class of the class SimpleTemplateResponse, substitute the result for obj_dict.
all_unique_checks is an empty set.
call the method apps.get_model with an argument model_identifier, return the result.
substitute compare_to for value under the state_frame dictionary under the self key.
call the method self.add_truncation_text with 2 arguments: an empty string and truncate, substitute it for truncate_text.
if fixture_name is an absolute file path,
substitute _iterkeys for __iter__.
if display_num_errors is true,
derive the class Truncator form the SimpleLazyObject class.
call the method payload.decode with 2 arguments: string 'ascii' and string 'surrogateescape', substitute the result for self._payload.
get absolute directory path of dir, substitute it for self._dir.
call the function timedelta with an argument integer 0, return the result.
return reversed list output.
call the method self.extend_nodelist with 3 arguments: nodelist, var_node and token.
substitute elements of self.template_string list from upto index to the end for last_lit.
if space equals integer 0,
for every cache in return value of the function caches.all.
try,
if tags exists and if all elements in the return value of the method checks.tag_exists called with an argument tag, for every tag in tags, are false,
missing_args_message is a tuple containing a string "No database fixture specified. Please provide the " "path of at least one fixture in the command line."
call the method setlistdefault from the base class of the class QueryDict, with arguments key and default_list, return the result.
call the function func with an argument unpacked list args, substitute the result for result.
get 'value' attribute of the _prefixes, if it exists, return it, otherwise return '/'.
substitute TemplateLoader for func.
otherwise if end is not an instance of string type,
define the method simple_tag with 4 arguments: self, func and None, takes_context and None and name set to None.
substitute length of digittuple for digits.
call the method parser.add_argument with 6 arguments: string '--symlinks', string '-s', action as a string 'store_true', dest as a string 'symlinks', default as boolean False and help as a string 'Follows symlinks to directories when examining ' 'source code and templates for translation strings.'.
return self._name.
from django.db import connections,  router,  transaction and DEFAULT_DB_ALIAS into default name space.
from __future__ import unicode_literals into default name space.
if six.PY2 is true,
substitute SplitHiddenDateTimeWidget for hidden_widget.
define the method handle with 3 arguments: self, unpacked list args and unpacked dictionary options.
evaluate the function http.parse_cookie with raw_cookie as an argument, return the result.
define the method __getattr__ with self and name as arguments.
if comment_lineno_cache equals cur_lineno.
if alias is not contained in setting.CACHES,
if f.unique is true, substitute "UNIQUE " for unique, otherwise unique is an empty string.
return errors.
if not,
define the method __init__ with 3 arguments: self, unpacked list args and unpacked dictionary kwargs.
get the id of the self object, use it as a key to obtain the value from the memo dictionary, substitute self with it.
INFO is integer 20.
call the self.style.HTTP_NOT_MODIFIED with an argument msg, substitute it for msg.
if ValueError exception is caught,
get the value under the 'id' key of the widget.attrs dictionary, if the key exists substitute it for id_, if not, substitute self.auto_id for id_.
substitute stream_or_string for stream.
l is lambda function with argument x, that calls the method self.make_key with x and version set to version as arguments.
define the method __repr__ with an argument self.
call the method self.create_table with arguments: db and tablename.
if data is not None, substitute data for initial_value, otherwise data_value is an empty string.
if option_label is an instance of list or tuple,
substitute app_name for klass.
return klass.
define the method has_leading_dir with 2 arguments self and paths.
if plan is true,
define the method inner with argument check.
label_for is an empty string.
append string '_template' to app_or_project, substitute it for base_subdir.
define the function decorating_function with an argument user_function.
try,
from django.utils.functional import total_ordering into default name space.
derive class Module_six_moves_urllib_request from the _LazyModule base class.
if StopIteration exception,
return form.
try,
get the value under the mem_args key of the cache dictionary, return it.
import module time.
 %s', where '%s' is replaced with field_desc.
do nothing
if six.text_type is contained in resultclasses, cls._delegate_text is boolean True, otherwise it is boolean False.
define the method __delitem__ with 2 arguments: self and key.
create a list out of basedir elements for which function os.path.isdir returns true, apply the os.path.abspath function on every element, and put the results in a list, basedir is set of previous list elements.
if OSError, renamed to e, exception is caught,
return self.html_name.
substitute name for self.name.
if template is None,
from django.utils.deprecation import RemovedInDjango19Warning into default name space.
call the method router.get_migratable_models with argument: app_config, connection.alias and include_auto_created set to True, substitute the result for app_models.
call the function re.compile with raw string '(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z', substitute the result for trailing_empty_content_re.
define the method content with 2 arguments: self and value.
if value under the 'ENGINE' key of the connection.settings_dict dictionary equals a string 'django.db.backends.dummy',
data is an empty list.
decorator stringfilter,
substitute used_name for guessed_filename.
substitute environ for self.environ.
call the method parser.add_argument with 5 arguments: string '--no-wrap', action as a string 'store_true', dest as a string 'no_wrap', default as boolean False and help as a string "Don't break long message lines into several lines.".
join inputs elements into a string, separated with newline character, use it as an argument for the call to the function mark_safe, return the result.
set the file pointer at the beginning of the self.file file.
wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer, for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare', value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxChildren', and value under the key 'maxrequests' of options dictionary converted to an integer, for 'maxRequests'.
define the method write_migration_files with arguments self and changes.
read data from buf, yield the result.
call the function mark_safe with an argument word, substitute the result for i-th element of words.
return boolean False.
define the function get_version with version set to None as argument.
LIGHT_PALETTE is a string 'light'.
try,
define the method __deepcopy__ with 2 arguments: self and memo.
derive the class Serializer from the object base class.
try,
define the method _construct_form with 3 arguments: self, i and unpacked dictionary kwargs.
from django.core.files.base import File into default name space.
self._js is an empty list.
if number_equal is greater than integer 40,
MONTHS_3_REV is an dictionary with 12 entries: 1 for 'jan', 2 for 'feb', 3 for 'mar', 4 for 'apr', 5 for 'may', 6 for 'jun', 7 for 'jul', 8 for 'aug', 9 for 'sep', 10 for 'oct', 11 for 'nov' and 12 for 'dec'.
substitute newline character for newline.
split ip_str by ':', if last element of the result is not equal to hextet.
define the method close with an argument self.
property decorator,
call the function getInnerText with argument k, on the result call the method strip, for every k in keys, append the results to field_value list.
import module re.
define the method __init__ with 2 arguments: self and name.
return nothing.
call the method self.create_token with 3 arguments: last_bit, tuple with 2 elements: upto and sum of upto and length of last_bit, and boolean False, append the result to result.
if cleaned_data is not None,
substitute tup for elements of self.
substitute f.name for field.
define the method accessed_time with arguments self and name.
attrs is an empty dictionary.
define the function render_to_string with 4 arguments: template_name, dictionary set to None, context_instance set to None and dirs set to None.
if filter_func has an attribute "_decorated_function",
call the connection.creation.sql_for_pending_references method with refto, no_style() and pending_references as arguments, use the result as the argument for the call to the sql.extend method.
call the method cursor.execute with string "SELECT COUNT(*) FROM %s" as argument, substitute the '%s' with table.
define the method render with 2 arguments: self and context.
for every x in self.fields call the method x.__deepcopy__ with an argument memo, put the result into a tuple, substitute it for result.fields.
substitute timeout for self.default_timeout.
define the function linenumbers with 2 arguments value and autoescape set to None.
return output.
if _locs_ is None,
if KeyError exception is raised,
call the connection.introspection.table_names with cursor as argument, store the result in tables.
if self.count equals a integer 0 and self.allow_empty_first_page is false,
self.plural is an lambda function with an argument n, which returns result of boolean expression n not equal to integer 1, converted to an integer.
substitute the last element of parts for cmp_fmt.
from django.core.exceptions import ValidationError and NON_FIELD_ERRORS into default name space.
in string '%s=%s' replace '%s' with k and return value of the function strip_prefix with an argument printable representation of v, for every k and v in return value of the extra_params.items method, join all results into a string separated by a string ', ', substitute it for field_desc.
call the function t.render with an argument context_instance, return the result.
raise an TemplateSyntaxError exception with an argument string "'%s' received too many positional arguments", where '%s' is replaced with name.
call the method nodelist.get_nodes_by_type with an argument ExtendsNode, if it evaluates to true,
define the method value_from_datadict with 4 arguments: self, data, files and name.
define the method _get_size_from_underlying_file with argument self.
derive the class BaseArchive from the object base class.
for every j in range of integers from 0 to iterations converted to an integer,
remove values under the keys 'name' and 'directory' of the options dictionary and substitute it for app_name and target, respectively.
skipped is an empty list.
call the method self.get_connection with argument fail_silently, on the result call the method send_messages with one argument: list containing self, return the result.
from django.db.migrations.state import ProjectState into default name space.
if index is not an instance of six.integer_types or tuple type,
if six.PY2 is true and value is greater than sys.maxint,
if not,
call the method parser.add_argument with 3 arguments: string 'args', metavar set to self.label and nargs set to '+'.
append current_number to a list for current_number in self._unget_history, if current_number is equal to num_bytes, substitute the length of the resulting list for number_equal.
return an instance of BoundField class, created with arguments self, field and name.
from django.utils.encoding import smart_text, force_str and force_text into default name space.
define the method __init__ with 5 arguments: self, name, value, attrs and choices.
if settings.USE_L10N is true, substitute settings.USE_THOUSAND_SEPARATOR for use_grouping, otherwise substitute settings.USE_L10N for use_grouping.
if self.fail_silently is boolean False,
substitute serialize_headers for __str__.
from django.core.servers.fastcgi import FASTCGI_OPTIONS into default namespace,
if OSError renamed to e, exception is caught,
read chunk_size bytes from file and store it in data.
divide absolute offset by module 60, use the result to format string '%02d%02d', substitute it for hhmm.
derive the class SafeData from object base class.
if not,
for every h in elements of logger.handlers list,
if other is an instance of Promise class,
define the function dec with an argument func,
define the method __len__ with argument self.
if safe is true and arg is not equal to string ';',
call the function get_template with an argument file_name, substitute the result for t.
if not,
define the function emit_pre_migrate_signal with 4 arguments: create_models, verbosity, interactive and db.
if self.no_obsolete is true,
assign the bits elements to tag, this_value_expr, max_value_expr, max_width, as_ and asvar.
for every name and value in items of props dictionary,
if css_classes is true,
call the method os.path.basename with an argument fixture_name, substitute the result for fixture_name.
if LookupError exception is caught,
call the method __getitem__ from the base class of the class MultiValueDict, with an argument key, substitute the result for list_.
call the function find_command with an argument program, if it evaluates to None,
set name attribute of self._wrapped object to value.
for every error in self.error_list,
if is_templatized is true,
if obj_list is None,
substitute opname for opfunc.__name__.
substitute name for self.name.
call the function trim_url with an argument middle, substitute the result for trimmed.
define the method __init__ with 2 arguments self and dt.
from django.utils.encoding import force_text into default name space.
call the method qs.order_by with argument self.model._meta.pk.name, substitute the result for qs.
call the method filename.encode with an argument string 'utf-8', substitute the result for filename.
call the method cls.__new__ with 2 arguments: cls and unpacked list args.
call the function is_ignored, with arguments: file_path and self.ignore_patterns, if it evaluates to true,
substitute regex for self.regex.
derive the class DeserializationError from the Exception base class.
instantiate class ModelFormOptions with argument: attribute 'Meta' of the new_class object. if it exists or None, if not, assign the result to opts and new_class._meta.
if attrs is true, call the function flatatt with an argument attrs, substitute the result for attrs, if not attrs is an empty string.
raise an ValidationError exception with an argument errors,
replace '%s' in string 'ignoring file %s in %s\n' with filename and dirpath, write it to self.stdout.
call the self.style.HTTP_INFO with an argument msg, substitute it for msg.
import module os.
instance.keyOrder is an empty list.
while RUN_RELOADER is true.
derive the class UTC from the tzinfo base class.
from django.db.models.fields.related import RelatedObject into default namespace.
call the function get_template with 2 arguments template_name and dirs, return the result.
convert tag to lowercase if it is not equal to self.cdata_tag,
if OSError or TypeError errors occurred.
skip this loop iteration.
if plen is lesser than difference of alen and dlen, or if plen is greater than alen,
field_list is an empty list.
call the function get_format_modules with an argument lang, for every module in the result,
boolean_attrs is an empty list.
try,
from django.utils.encoding import force_bytes and python_2_unicode_compatible into default name space.
call the method pickle.dumps with value and pickle.HIGHEST_PROTOCOL as arguments, substitute it for pickled.
call the method self.next_token, substitute the result for self.current_token.
call the method content.encode with an argument string 'utf-8', substitute it for content.
otherwise if disable_existing is true,
call the function do_ifequal with 3 arguments: parser, token and boolean False, return the result.
call the function super_set with 2 arguments: key and value.
call the function getInnerText with an argument node, call the strip method on the result, substitute the result for field_value.
s_len is integer 0.
join dirpath and filename into a path separated by '/', append it to new_filenames.
remove entry at the attr key of the declared_fields dictionary.
delete the value under the header converted to lowercase key of the self._headers dictionary.
if DatabaseError, renamed to e, exception is caught,
clean is a lambda function with self and x as arguments, return value is length of x.
substitute months for self.months.
if username is None substitute settings.EMAIL_HOST_USER for self.username, if not substitute username for self.username.
define function filepath_to_uri with path as the argument.
if commit is true,
for every sql in sql_list,
define the method __setitem__ with 3 arguments: self, key and value.
from django.forms.forms import DeclarativeFieldsMetaclass and BaseForm into default name space.
for every char in result of the self.add_truncation_text, called with 2 arguments: an empty string and truncate.
return attrs.
self._validate_unique is boolean True.
for every handler in handlers,
if self doesnt have '_queryset' attribute,
call strip s of the surrounding whitespaces, substitute every occurrence of the whitespace in the trim_whitespace_re with previous result, return the result.
raise an NoReverseMatch exception with an argument string "%s is not a registered namespace inside '%s'", respectively replace '%s' with key and elements of the resolved_path joined into a string, separated by ':'.
do nothing.
if script_url is true,
if initial_value is an callable object,
wsgi_opts is a dictionary with 4 initial entries: value under the key 'maxspare' of options dictionary converted to an integer, for 'maxSpare', value under the key 'minspare' of options dictionary converted to an integer for 'minSpare', and value under the key 'maxchildren' of options dictionary converted to an integer, for 'maxThreads'.
substitute value under idx key of dictionary d for d.
define the function add with 2 arguments value and arg.
call the function modelformset_factory with 2 arguments: model and unpacked dictionary kwargs, substitute the result for FormSet.
call the method var.split with an argument VARIABLE_ATTRIBUTE_SEPARATOR, convert the result to a tuple and substitute it for self.lookups.
substitute style_func for self.style_func.
s is an instance of MLStripper class.
define lambda function that returns self.file.newlines field, use it as an argument for property function, put the result in newlines.
call the function io.open with orig_file and encoding set to settings.FILE_CHARSET, with the result renamed to fp, perform the following:
from django.utils import timezone into default name space.
if self.verbosity is greater or equal to integer 1,
if migration_name equals to string 'zero',
for every node in self.nodelist,
from django.utils import six into default name space.
if not,
if fp is None,
if labels is not None,
if data has an attribute 'read',
substitute key for result.key.
pop the first element from plist, convert it to lowercase, call the method decode on it, with string 'ascii' as an argument, substitute the result for key.
for every migration in merge_migrations,
if not,
remove config dictionary element under 'level' key, if it exists substitute it for level, if not, level is None.
for every header in list of strings compiled by splitting string cc_delim_re with value under the key 'Vary' of response dictionary as a delimiter.
for every field, error_list in self.error_dict.items method return value,
call the function __import__ with an argument name.
if t.token_type equals TOKEN_BLOCK,
if KeyError exception is caught,
call the method ops.process_clob with second element of row as argument, on the object under the db key of connections dictionary, substitute the result for value.
return self._encoding.
if iri is not initialized,
call the method self._create_attachments with argument msg, return the result.
define the method add_filters with 3 arguments: self, filterer and filters.
from django.core.serializers import base into default name space.
call the method handler.startDocument.
call the method self._init_translation_catalog.
derive the class Command from the BaseCommand class.
from django.template.context import BaseContext, Context, RequestContext and ContextPopException into default namespace.
bitwise shift integer 1 to the left by 31 spaces, return the result.
substitute render_value for self.render_value.
substitute settings.TEMPLATE_STRING_IF_INVALID with obj.
import module random as random_module.
truncate first size number of elements of self.buffer.
if '.' is contained in last elements of hextets,
lines is an empty list.
call the self._lib.Client with argument self._servers, substitute the result for self._client.
return the printable representation of the self object converted to a list.
divide timezone by integer 60, substitute the quotient of the division for hour and reminder for minute.
for every handler in settings.FILE_UPLOAD_HANDLERS, add to a list result of the method uploadhandler.load_handler called with arguments handler and self, substitute resulting list for self._upload_handlers.
define the method __init__ with arguments self, flo and chunk_size set to integer 64 multiplied by integer 1024.
if fields is not None and f.name is not contained in fields,
subtract self.STDOFFSET with self.DSTOFFSET, substitute the result for self.DSTDIFF.
call the method self.paginator.validate_number with self.number decremented by 1 as argument, return the result.
define the function b64_encode with an argument s.
from django.utils.translation import trans_real into default namespace.
for every attr in self.rendering_attrs,
define the method clear with an argument self.
from django.core.management.utils import handle_extensions, find_command and popen_wrapper into default name space.
if i equals to integer 0 and
if connection exists dont modify it, if not call get_connection function with username set to auth_user, password set to auth_password, fail_silently set to fail_silently as arguments, assign it to connection.
convert root.manager.loggerDict into a list, substitute it for existing.
call the method handler.addQuickElement with 2 arguments: string 'id' and unique_id.
decorator function register.filter with an argument is_safe set to boolean True.
call the method field_node.getAttribute with an argument string 'name', substitute the result for field_name.
if value is not equal to an empty string,
if value under the 'enclosure' key of the item dictionary is not None,
from django.core.management.utils import handle_extensions into default name space.
define the function get_deserializer with an argument format.
call the method self.load_label with an argument fixture_label.
get the value under the 'no_wrap' key of the options dictionary, if it is true,
if used_name is not equal to guessed_filename,
raise CommandError exception with "More than one migration matches '%s' in app '%s'. Please be more specific.", with '%s' substituted for migration_name and app_label, respectively, as arguments.
call the method handler.addQuickElement with 2 arguments: string 'title' and value under the 'title' key of the self.feed dictionary.
return media.
evaluate the function import_string with key_func as argument, return the result.
define the function parse_bits with 8 arguments: parser, bits, params, varargs, varkw, defaults, takes_context and name.
if settings.USE_TZ is true,
return default.
find first index of whitespace occurrence in line, add integer 1 to it, substitute the result for space.
escaped is boolean True.
define the method write_items with 2 arguments: self and handler.
call the method self.make_bytes with an argument value, substitute the result for value.
call the os.path.abspath with argument self.file_path, substitute the result for self.file_path.
if message is an instance of SafeData.
define the method tag with an argument self.
dklen is None.
define the method __init__ with 2 arguments: self and name.
define the method __len__ with an argument self.
write ']' to the self.stream file stream.
from itertools import chain into default name space.
from decimal import Decimal, InvalidOperation, Context and ROUND_HALF_UP into default name space.
call the function six.iteritems with an argument dict_, for every item in the result,
python_2_unicode_compatible decorator,
append '=' to opt_label.
call the function re.compile with an argument raw string '^/([\w-]+)(/|$)', substitute the result for language_code_prefix_re.
define the method as_json with 2 arguments self and escape_html set to boolean False.
help is a string "Prints the CREATE INDEX SQL statements for the given model module name(s).".
return nothing.
break from the loop execution.
import module calendar.
if not,
call the method self.empty_variable with an argument token,
if self.match is None or call to the method self.match_re.search with an argument f, evaluated to true,
call the method lookups.appendlist with 2 arguments: pattern.callback and a tuple containing 3 elements: bits, p_pattern, and pattern.default_args.
insert mw_instance.process_template_response at the beginning of self._template_response_middleware.
c is an instance of the class SimpleCookie.
return other_dict.
return an instance of SafeText, created with an argument s.
substitute self.template_with_initial for template.
raise an MultiPartParserError with an argument string "Invalid content length: %r", where '%r' is replaced with content_length.
from django.core.management.color import color_style and no_style into default name space.
join elements of parts into a string, separated with '.', substitute it for name.
write string ' #\n' to out file.
do not perform the following only if bits.scheme and bits.netloc are both true,
if six.PY2 is true,
set value under the 'timeout' key of the connection_params to self.timeout.
import module warnings.
call the method handler.upload_complete, substitute the result for retval.
add data to seen_data set.
otherwise if autoescape is true,
if fields is not None and f.name is not contained in fields,
call the method sys.stdin.close.
from django.conf import settings into default name space.
for every lib in builtins,
call the function walk_to_end with 2 arguments: ch and pattern_iter.
comment_lineno_cache is None.
raise CommandError exception with "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)", with '%s' substituted for app_label, as arguments.
errors is an empty list.
match the rawdata from the position k, with attrfind pattern, assign the result to the m.
if print_ is None,
call the function random.randrange with argument integer 100000, substitute the result for randint.
if not,
try,
define the method __init__ with 3 arguments self and unpacked list args and unpacked dictionary kwargs.
call the method logging._releaseLock.
call the self.close method.
if callback is an callable object,
if parse_until is true,
call the method handler.addQuickElement with 3 arguments: string 'link', an empty string and a dictionary with 2 entries: value under the 'link' key of item dictionary for 'href' and "alternate" for "rel".
if not,
sites is an empty list.
if tok.next is true,
substitute first element of to_digits for res.
for every reference and receivers in return value of the call of obj.unresolved_references.items method,
try,
return nothing.
requires_system_checks is boolean False.
substitute socket.AF_INET6 for self.address_family.
yield key and value under key key of self dictionary.
token is an instance of Token class, created with 2 arguments: TOKEN_VAR, and elements of token_string from second to second last element wiht the whitespaces striped from the both sides.
if value is not contained in result,
call the method __init__ from the base class of the class NullBooleanSelect, with arguments attrs and choices.
if PY3 is true,
if value under the 'verbosity' key of the options dictionary is greater than zero,
otherwise if timezone is an instance of six.string_types and pytz is not None,
if las equals integer 3,
if not,
call the method parser.parse_args with an arguments args set to an empty list, assign the result for defaults and _, respectively.
for every attr in self.child_nodelists,
call self.clear method.
_meth_func is a string "im_func".
substitute cls.__text_cast for cls.__text_cast.
from django.utils import six into default name space.
define the function wrapper with an argument cls.
convert orphans into an integer and substitute it for self.orphans.
define the method __init__ with 2 arguments: self and language.
call the method parser.add_argument with arguments: string '--database', action set to string 'store', dest set to string 'database', default set to DEFAULT_DB_ALIAS and help set to string 'Nominates a database onto which to open a shell. Defaults to the "default" database.'.
derive the class CsrfTokenNode from Node base class.
call the method self.data.weekday, use the result as an key for obtaining WEEKDAYS_ABBR dictionary value, return it.
timeout is a integer -1.
raise an NotImplementedError exception with an argument string 'subclasses of Origin must provide a reload() method'.
if pythonrc is true,
call the method self.__cast, if the result equals other, return boolean True, otherwise return boolean False.
decorator function wraps with an argument func.
define the method _get_choices with an argument self.
from shutil import copystat into default name space.
if dirname is true and dirname directory doesnt exists,
from django.core.exceptions import ImproperlyConfigured into default name space.
return boolean True.
call the function new_method_proxy with an argument bool, substitute the result for __nonzero__.
define the method get with 5 arguments, self class instance, key, default set to None and version set to None.
try,
if domain is true,
increment self.loaded_object_count by loaded_objects_in_fixture.
define the method __new__ with 3 arguments: cls, unpacked list args and unpacked dictionary kwargs.
otherwise if param is contained in kwargs,
create a tuple out a tuple with an element integer 2037 and a list tt elements without the first element, substitute the result for tt.
substitute var for value under the name key of the self.extra_context dictionary.
substitute elements of middle from the beginning to the negative length of closing, for middle.
call the method parser.add_argument with 5 arguments: string '--noreload', action set to string 'store_false', dest set to string 'use_reloader', default set to boolean True and help is a string 'Tells Django to NOT use the auto-reloader.'.
if not,
get the value under the 'verbosity' key of the options dictionary, substitute it for self.verbosity.
return an empty string.
import module warnings.
call the cursor method on the value under the db key of connections dictionary, preform following with return value named cursor,
c is an empty list.
self.backout is an empty list.
call the method notifier.stop.
substitute the last element of args for name.
derive the class SignatureExpired from the BadSignature base class.
substitute match.lastgroup for name.
break from the smallest enclosing loop.
return the value under the self.data.month key of the MONTHS_3 dictionary.
if file_ is true,
call the function get_template with 2 arguments: template_name and dirs, substitute the result for t.
if string 'forloop' is contained in context,
call the function popen_wrapper with an argument args, assign the result to msgs, errors and status.
sum value and arg, return the result.
if not,
define the function deconstructible with 2 arguments: unpacked list args and unpacked dictionary kwargs.
if six.PY3 is true,
if key if contained in value under the DEFAULT_CACHE_ALIAS key of caches dictionary, return boolean True, otherwise return False.
return path an an empty string.
if statue is not equal to STATUS_OK.
define the method management_form with an argument self.
call the method parse from the instance of TemplateIfParser class, created with 2 arguments parser and bits, substitute the result for condition.
substitute self._pk_field.name for name.
self.blocks is a dictionary with elements: n for n.name, for every n in return value of the method nodelist.get_nodes_by_type, called with an argument BlockNode.
from django.db import connection into default name space.
if self.parent_name.filters is true or self.parent_name.var is an instance of Variable.
raise an ValidationError with 3 arguments: value under the 'invalid_choice' key of the self.error_messages dictionary, code set to an string 'invalid_choice' and dictionary params with an entry: val for 'value'.
from django.core.management.base import BaseCommand and CommandError into default name space.
return None.
call the function timedelta with an argument seconds as negative time.altzone, return the result.
define the method compile_function_error with 3 arguments: self, token and e.
call the method self.model._default_manager.get_queryset with an argument qs.
substitute old for self.mod.
call the method FASTCGI_OPTIONS.copy, substitute the result for options.
strip message_context of "'" characters from both ends, substitute the result for message_context.
raise an CommandError with an argument string "%r is not a valid %s name. Please %s.", were '%r' is replaced with name, and '%s' is replaced with app_or_project and message, respectively.
substitute app_name for self.app_name.
self._choices and self.widget.choices are assigned value converted into a list.
derive the class VerbatimNode from Node base class.
call the method copy.copy with an argument self, substitute the result for result.
finally perform,
if is_templatized is true,
extend replaces list with migration.replaces,
replace '%s' in string "CREATE %sINDEX %s ON %s (%s);" with: unique, return value of the function qn called with an argument: a string '%s_%s', where '%s' is replaced with tablename and f.name, respectively, return value of the function qn called with an argument tablename and return value of the function qn called with an argument f.name.
call the import_string with arguments path, call the return function with arguments: unpacked list args and unpacked dictionary kwargs, return the result.
for every f in return value of the return value of the method chain.from_iterable called with argument: second element of l for every l in return value of the self._files.lists
if six.PY2 is true and rawdata is an instance of the type six.text_type.
convert params into a list, substitute it for unhandled_params.
raise an CommandError with an argument string "AppCommand cannot handle app '%s' in legacy mode because it doesn't have a models module.", where '%s' is replaced by app_config.label.
from django.core.cache.backends.base import BaseCache and DEFAULT_TIMEOUT into default name space.
return obj.
call the function self.format_subject with an argument subject, substitute the result for subject.
call the function call_command with 3 arguments: string 'loaddata', string 'initial_data' and unpacked dictionary options.
return self.
if not,
from django.utils import termcolors into default name space.
define the method tokenize with an argument self.
if p is greater or equal to integer 0,
import module time.
define the method __init__ with 4 arguments: self, result of the function streaming_content=(), unpacked list args, and unpacked dictionary kwargs.
define the method handle_app_config with 3 arguments: self, app_config and unpacked dictionary options.
ctx is an hashlib object, for calculating hash function with md5 algorithm.
import module sys.
replace '%s' in string '%s.management.commands.%s' with app_name and name, respectively, use it as an result for the call to the import_module function, substitute the result for module.
call the method __deepcopy__ with an argument memo, from the base class of the class MultiValueField, substitute the result for result.
remove slots_var key from the orig_vars dictionary.
substitute fk for FormSet.fk.
substitute value under the NEXT key of the oldroot dictionary for root and first element of nonlocal_root.
call the method response.add_post_render_callback with _set_response_etag as argument.
substitute return value of the method obj._get_pk_val for obj_pk.
define the method handle with 3 arguments: self, unpacked list test_labels and unpacked dictionary options.
get the element with maximal value between initial_forms and self.min_num, add self.extra to it, substitute the result for total_forms.
call the function warnings.warn with string "'get_cache' is deprecated in favor of 'caches'.", RemovedInDjango19Warning, and stacklevel set to 2 as arguments.
return an instance of a BlockNode class, created with 2 arguments: block_name and nodelist.
return attrs.
if hashlib had an instance "pbkdf2_hmac",
convert self.forms into an iterable, return it.
if processors is None,
 - %s\n" with return value of the operation.describe method, write the result to self.stdout.
if value is false,
define the method prepare_value with 2 arguments: self and value.
for every i in sequence of integers, from 0 to the result of the method self.total_form_count,
if cleaned_line ends with ';' character,
call the method formats.get_format_lazy with an argument string 'TIME_INPUT_FORMATS', substitute the result for input_formats.
compile regex from a string '\\(.)', substitute it for re_escaped.
num_args is an integer 0.
quant is an empty list.
call the method self._post_clean.
call the method self._clean_form.
call the method self._read_limited, store the return value into chunk.
current_fields is an empty list.
if attrs is true,
define the function reset_cache with an argument unpacked dictionary kwargs.
try,
try,
call the function signals.request_finished.connect with argument cache.close.
exclude is an empty list.
call the method render from the base class of the class FileInput, called with 3 arguments: name, None and attrs as attrs.
call the _caches.setdefault method with name and empty dictionary as arguments, substitute the result for self_cache.
substitute self.DEFAULT_CHUNK_SIZE for chunk_size.
call the function node_class with 3 arguments: takes_context, args and kwargs.
return key and pdict.
if ImportError, renamed to e, exception is caught,
call the method validate with an argument value from the base class of the class TypedMultipleChoiceField.
return tempdir.
if AttributeError exception is caught,
get the integer representation of the i-th element of buf, return it.
if self.instance.pk is not None,
call the method self.parse_name with an argument fixture_label, substitute the result for fixture_name, ser_fmt, cmp_fmt, respective.
if current is an instance of BaseContext and bit attribute of type of current is true,
define the function lazy with 2 arguments: func and unpacked list resultclasses.
if ImportError, renamed to e, is caught,
call the method closable.close.
BASE56_ALPHABET is a string '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'.
append string ".moves.urllib_request" to __name__, use it as an key to get the value from the sys.modules dictionary, substitute it for request.
int_part_gd is an empty string.
msg is a string "[%s] %s\n", where '%s' are replaced with return value of the method self.log_date_time_string and formated args.
if not,
append list containing string '--no-wrap' to self.msguniq_options.
derive the class DateField from the base class BaseTemporalField class.
for every i in successive list of integers from 1 to 30, append tuple containing i and i elements into a list, substitute the resulting string for choices.
define the function get_templatetags_modules.
call the method connection.cursor, with the result as cursor,
define the function get_major_version with an argument version defaulting to None.
call the method wrap with 2 arguments, value and arg converted into a integer, return the result.
define the function luhn with an argument candidate.
call the self.compare method with arguments cleaned and self.limit_value, if it evaluates to true,
if opname is not contained in roots,
if other_dict doesnt have an '__getitem__' attribute,
call the method parser.next_token, substitute the result for token.
if OSError exception is caught,
define the method __getstate__ with an argument self.
call the method template.render with an argument context, return the result.
set new_method_name attribute of the base object to old_method.
syear is a string "%04d" formated with dt.year.
serialize data to JSON format with cls set to encoder, substitute it for data.
try,
format string "%s%s%s" with 3 elements: result of the function random.getstate, result of the call the the function time.time, and settings.SECRET_KEY, call on it method encode with an argument string 'utf-8', use the result as an argument for the call to the method hashlib.sha256, call the method digest on the result, use the result as an argument for the call to the function random.seed.
substitute field_name for self.field_name.
if _default is None
skip this loop iteration.
import module logging.
call the method handler.addQuickElement with 2 arguments: string 'pubDate' and result of the function rfc2822_date, called with value under the 'pubdate' key of the item dictionary.
define the method __getitem__ with 2 arguments: self and key.
remove first element from self.tokens, return removed element.
if name is not contained in logging._handlers,
substitute FIELD for TYPE,
return e.
raise an ValueError exception wit an argument string "Not a string literal: %r", where "%r" is replaced with s.
close the file stream.
substitute abspath for abspathu.
substitute '%s' is "%s.process_response didn't return an HttpResponse object. It returned None instead.", with the name of the type of the self class instance of the middleware_method, raise the ValueError with the previous as the argument.
if value is an instance of datetime.time,
if base_lang is contained in settings.LANGUAGES_BIDI, return boolean True, if not, return boolean False.
call the function MigrationExecutor with connection and self.migration_progress_callback as arguments, substitute the result fro executor.
if not,
substitute field.queryset for self.queryset.
substitute sup_cls.media for base.
define the method handle_field with arguments self, obj and field.
admin is a string 'admin'
call the safe_join function with arguments self.location and name, substitute it for path.
call the function wraps with an argument func, call the result with an argument _dec, return the result.
try,
import module re.
find the ending position of the regular expression match of the object match, substitute the result for k.
derive the AppCommand class from the BaseCommand base class.
import module logging.handlers.
format_key is a string 'DATETIME_INPUT_FORMATS'.
if KeyError exception is caught,
if self.data.minute equals integer 0 and self.data.hour equals integer 12,
position file self.file pointer at the pos position.
derive the class HttpResponseBase from the six.Iterator base class.
compile a regular expression pattern string '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' into a regular expression object and assign it to tagfind.
from . import Error, Tags and register into default name space.
call the method t.to_language, return the result.
call the method self.stdout.write with string "  No migrations to apply." as an argument.
return self.name.
decorator function register.filter with an argument is_safe set to boolean True.
call the method sys.exc_info, substitute the result without the first element for e and tb.
call the method serializers.deserialize with 4 arguments: ser_fmt, fixture, using set to self.using, and ignorenonexistent set to self.ignore, substitute the result for objects.
return list containing 2 elements: None and None.
return new_value.
import module sys.
i is integer 365.
split string name into two parts from the right side by the separator '.', substitute parts for path and module, respectively.
derive class InvalidCacheBackendError from the ImproperlyConfigured base class.
try,
if self.choices is true,
do nothing.
return an empty list.
for every formset in formsets,
decorator stringfilter,
join return value of the function six.text_type called with an argument self.management_form and forms into a string, separated by newline, use it as an argument for the call to the function mark_safe, return the result.
convert second item to an iterable,
for every header in headerlist,
if not,
try,
raise an ImproperlyConfigured exception with argument string 'Could not create directory for saving email messages: %s (%s)', replace '%s' with self.file_path and err, respectively.
derive class BaseHandler, derive from the base class object, making this a new style class.
substitute value for value under name key of msg dictionary.
from django.dispatch import receiver into default name space.
choice_input_class is None.
return d.
call the method handler.addQuickElement with 2 arguments: string 'description' and value under the 'description' key of item dictionary.
if not,
for every potfile in potfiles,
return a tuple with 3 elements: self.__newobj__, tuple with an element self.__class__ and result of the method self.__getstate__.
decorator total_ordering,
define the method set with 5 arguments, self class instance, key, value, timeout set to DEFAULT_TIMEOUT and version set to None.
call the method __init__ with 2 arguments: unpacked list args and unpacked dictionary kwargs, from the base class of the class ComboField.
from django.utils import six into default name space.
call the method self.add_prefix with an argument name, substitute the result for prefixed_name.
if not,
derive the class DeserializedObject from the object base class.
child_nodelists is a tuple with 2 elements strings 'nodelist_true' and 'nodelist_false'.
from django.utils.six.moves.urllib.parse import urlparse into default name space.
substitute value under the cache_key key of the _format_cache dictionary for cached.
method lru_cache.lru_cache with an argument maxsize set to None, as a decorator,
if not,
define the method _clean_fields with an argument self.
append value under the 'protocol' key of the options dictionary to the string 'server.', substitute it for flup_module.
output is an empty string.
raise an ValueError with an argument string 'empty_label list/tuple must have 3 elements.'.
define the function make_origin with 4 arguments: display_name, loader, name and dirs.
call the mw_class function, store the result in the mw_instance.
try,
return value.
if tag is contained in self.CDATA_CONTENT_ELEMENTS,
define the function is_aware with an argument value.
define the method render with 2 arguments: self and context.
call the method self.indent with argument integer 1.
otherwise, length of options.args is lesser than integer 1,
define the method __init__ with arguments self, name, sysid and pubid.
call the method six.moves.input with an argument string "Do you wish to proceed? [yN] ", substitute the result for answer.
self._post_parse_error is boolean False.
__slots__ is a string 'hashvalue'.
if not,
set class fields _request_middleware, _view_middleware, _template_response_middleware, _response_middleware and _exception_middleware to None.
if not,
call the method self._close_files.
define the method add_truncation_text with 3 arguments: self, text and truncate set to None.
try,
append string ')' to field_desc.
substitute self.fk.rel.field_name for value under the 'to_field' key of the kwargs dictionary.
if not,
convert elements of choices into a list, substitute it for self.choices.
call the function allow_lazy with 2 arguments: escapejs, six.text_type, substitute the result for escapejs.
if settings.TIME_ZONE is an instance of six.string_types and pytz is not None,
otherwise if name starts with a string 'string',
define the function b with an argument s.
define the method upload_complete with argument self.
raise an TemplateSyntaxError exception with an argument "Searching for value. Expected another value but found end of string: %s", where '%s' is replaced with subject.
if os.path.exists function with argument name, evaluates to boolean True,
try,
changeset is None.
call the method pyinotify.Notifier with wm and EventHandler() as arguments, assign the result to notifier.
call the method self.setlistdefault with an argument key, extend the result with value_list.
strip g of "'" from both ends,
return self._callback.
self.translate is boolean True.
multiply 10 to the power of 200, with 10 to the power of 200, negative, substitute the result for neg_inf.
if self.regex is not an instance of a six.string_types type,
raise an exception DjingoUnicodeDecodeError, with s and list of arguments *args from object e, as the arguments.
join m and n into a string, separated by '.', substitute the result for lookup_view_s.
from django.utils.text import unescape_entities into default name space.
inverse_match is boolean False.
return boolean False.
call the function os.environ.get with 2 arguments: string 'PATH' and an empty string, split the result at the os.pathsep, substitute the result for path.
if cls is false,
return EndToken.
if conflicts is true,
if pop_context is true,
from django.db import connections and DEFAULT_DB_ALIAS into default name space.
remove the entry under the 'fields' key of the self.json_kwargs dictionary.
call the function digest with an argument password, call the method digest on the result, substitute the result or password.
skip this loop iteration.
if six.PY3 is true,
call the method self.fetch_command with an argument command, call the method run_from_argv on the result with an argument self.argv.
call the method self.read, substitute the result or self._body.
call the method render from the base class of the class PasswordInput, called with 3 arguments: name, value and attrs, return the result.
call the method operator.attrgetter with an argument _func_globals, substitute the result for get_method_globals.
raise the exception.
substitute self._upload_handlers for handlers.
define the method size with arguments self and name.
return an instance of a class ResolverMatch created with 6 arguments: sub_match.func, sub_match.args, sub_match_dict, sub_match.url_name, self.app_name if it exists or if not sub_match.app_name and sub_match.namespaces list appended to self.name.
substitute value for value under the options key of options dictionary.
raise CommandError with an argument string 'Unknown application: %s', where '%s' is replaced with app_label.
token is an instance of Token class, created with 2 arguments: TOKEN_BLOCK and block_content.
split arg by ',', substitute the result for bits.s
if not,
call the function token.split_contents, substitute the result without the first element for bits.
import module os.
define the method render_js with an argument self.
ALLOWED_VARIABLE_CHARS is a string 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.'.
if formfield_callback is None,
for every name in loggers,
define the method get_unique_error_message with 2 arguments: self and unique_check.
from django.core.exceptions import ImproperlyConfigured into default name space.
if not,
return FILE_INPUT_CONTRADICTION.
if token.token_type equals integer 0,
kwargs is a dictionary with an entry: attribute 'label' of the object under the name key of the form.fields dictionary for 'label', if it doesnt exists return value of the function capfirst with an argument self.fk.verbose_name for 'label'.
get 'clean_%s', where '%s' is replaced with name' attribute of the self object, call the result as an function, substitute the result for value.
for every app_config in return value of the call to the function apps.get_app_configs,
create a directory self.default_locale_path.
call the method match.span, substitute the result for start an end, respectively.
raise an NoReverseMatch exception with an argument string "%s is not a registered namespace", with '%s' replaced with key.
append self._regex_validator to self.validators.
if not,
get 'value' attribute of the _active object, if it exists substitute it for t, if not t is None.
return None.
call the method self._resolve, substitute the result for result.
split ip_str by '::', substitute it for hextet.
call the function remove_tags with 2 arguments value and tags, return the result.
for f in file_list,
try,
if result is not None,
ns_pattern is an empty string.
define the method filter_function with 3 arguments: self, func and unpacked dictionary flags.
define the method execute with an argument self,
from django.core.files.utils import FileProxyMixin into default name space.
substitute self._regex for regex.
if f.db_index is true,
return value.
if sys.version_info is greater than or equal to a tuple with 3 elements: integers 2, 7 and 2, respectively,
get the value under the 'table_name_filter' key of the options dictionary, substitute it for table_name_filter.
derive the class Command from the BaseCommand base class.
remove kwargs dictionary element under the 'method' key, substitute it for method.
if value under the 'pidfile' of options dictionary exists,
if not,
if changed is false,
if self.verbosity is greater than integer 0 or self.interactive is true,
otherwise if length of app_labels is greater than integer 1,
define the method all with argument self.
define the method __wrapper__ with 3 arguments: self, unpacked list args and unpacked dictionary kw.
if url is true,
try,
import module functools.
raise an exception of class NotImplementedError, with string 'subclasses of BaseCache must provide a set() method' as argument.
raise a ValidationError exception with arguments self.message and code set to self.code.
from django.utils import six into default name space.
if not,
from django.apps import apps into default name space.
call the method self.check,
try,
if value under the 'umask' key of options dictionary is true,
return an empty string.
try,
import module mimetypes.
cal the method self.startElement with 2 arguments: name and attrs.
substitute token.source for node.source.
substitute variables for self.vars.
return string '(NOT (%s: %s))', formated with self.connector and string created by joining c into a string, separated by ', ', for every c in self.children.
get the next element of the iterable pattern_iter, assign the result for ch and escaped, respectively.
call the method self.expression, substitute the result for retval.
skip this loop iteration,
import module sys.
self.POST is an instance of QueryDict class created with an argument mutable set to boolean True.
get the value under the self.using key of the connections dictionary, call the method close on it.
yield node.
return string "(%s %r)", replace '%s' with self.if and '%r' with self.value.
call the method self.make_key with key and version set to version as arguments, substitute the result for key.
define the method list with an argument self.
if inplural is true,
if not,
raise an Exception exception with an argument string "This %s instance is not writable", where '%s' is replaced with self.__class__.__name__.
substitute value under the f.name key of the widgets dictionary for value under the 'widget' key of kwargs dictionary.
define the method strptime with arguments self, value and format.
substitute _iteritems for items.
if _BASE64_DECODE_ERROR exception is caught,
if not,
decorator stringfilter,
if errors is true,
define the connection with an argument self.
if self.verbosity is integer 1,
call the method timezone.normalize with an argument value, substitute the result for value.
for every item in self.items,
from django.core.exceptions import ValidationError into default name space.
call the method self.add_root_elements with an argument handler.
derive class BaseDatabaseCache from BaseCache base class.
call the self.make_bytes method with an argument chunk, for every chunk in value join the result to a bytes string, substitute the result for value.
if self.verbosity is greater than integer 0,
if fh has an attribute a, for every a in WRAPPER_ASSIGNMENTS, put a into a tuple, return the resulting tuple.
return url.
return.
self._errors is None.
if result is true,
derive the class TemporaryFileUploadHandler from the FileUploadHandler base class.
define the function lock with arguments f and flags.
chunks is an empty list.
if ending is None substitute self.ending for ending.
call the method __init__ from the base class of the class ManagementForm, called with 2 arguments: unpacked list args, and unpacked dictionary kwargs.
define the method chunks with arguments self and chunk_size defaulting to None.
streaming_content.setter decorator,
call the method __new__ from the base class of the class SortedDict, with 3 arguments: cls, unpacked list args, and unpacked dictionary kwargs.
if not,
call the method logging.getLogger with an argument name, substitute the result for logger.
import module types.
if self.regex is not an instance of six.string_types,
substitute token for self.token.
derive the class SubWidget from the object base class.
call the function formatdate with an argument epoch_seconds, substitute the result for rfcdate.
field_notes is an empty list.
call the function format_html with 3 arguments string '<label{0}>{1}</label>', attrs and contents, substitute the result for contents.
return flat.
call the method value.astimezone with an argument timezone, substitute the result for value.
if KeyError exception is caught,
derive the class SimpleLazyObject from the LazyObject base class.
return func.
call the function format_html with 2 arguments: string '<ul class="errorlist">{0}</ul>', and return value of the function, format_html_join, called with 3 arguments: empty string, string '<li>{0}{1}</li>', tuple containing tuples with 2 elements: k and result of the function force_text with an argument v, for every k and v in items of the dictionary self, return the result.
return boolean False.
define the method __init__ with 4 arguments: self, query_string is None, mutable is boolean False and encoding set to None.
if f has an attribute 'seek' and if f.seek is an callable object,
raise CommandError with an argument string 'Unknown model: %s', where '%s' is replaced with app_label and model_label, respectively.
return string 'th'.
if not,
define the method prepare_value with arguments: self and value.
call the __init__ method from the base class of the class ValidationError with arguments message, code and params.
from django.core.urlresolvers import set_script_prefix into default name space.
from django.utils.encoding import force_str into default name space.
if not,
value under the MIN_NUM_FORM_COUNT of the self.base_fields dictionary is an instance of IntegerField class, created with 2 arguments: required as boolean False and widget set to HiddenInput.
mapping is an dictionary with 8 initial entries: BLOCK_TAG_START for 'openblock', BLOCK_TAG_END for 'closeblock', VARIABLE_TAG_START for 'openvariable', VARIABLE_TAG_END for 'closevariable', SINGLE_BRACE_START for 'openbrace', SINGLE_BRACE_END 'closebrace', COMMENT_TAG_START 'opencomment' and COMMENT_TAG_END for 'closecomment'.
call the function calculate_app_template_dirs, substitute the result for app_template_dirs.
for every w in widgets, call the function w and append the result to a list, if w is an instance of type class, if not append w to the list, substitute the resulting list for self.widgets.
from collections import OrderedDict into default name space.
call the self.handle_noargs method with with unpacked dictionary options as argument, return the result.
define the method render with an argument self.
define the method set_many with arguments, self, data, timeout defaulting to DEFAULT_TIMEOUT and version set to None.
from django.forms.formsets import BaseFormSet and formset_factory into default name space.
if not,
evaluate function force_bytes with path as the argument, replace all of the occurancies of the "\\" with "/" in the resulting string, call the function quote with the result and with the safe set to bytes string "/~!*()'", return the function result.
import re module.
except if AttributeError is caught,
define the method find_fixtures with arguments: self and fixture_label.
try,
substitute tuple containing 2 elements: header and value for the value under the header converted to lowercase key of the self._headers dictionary.
call the function re.compile with an argument raw string '^\w{3}, %s %s %s %s GMT$' formated with __D, __M, __Y and __T, substitute the result for RFC1123_DATE.
define the method send_messages with arguments self and messages.
append self.pointer to self.backout.
substitute os.unlink for unlink.
otherwise if token.token_type equals integer 1,
open pythonrc, with the file handle renamed to handle perform the following,
tried is an empty list.
substitute complain for pop.
substitute number_value for kwargs dictionary value under the 'number' key.
if settings.DEBUG is true, return boolean False, otherwise return boolean True.
call the method strftime with an argument fmt, from the base class of the type of dt class.
if cache_timeout is lesser than integer 0,
if filename ends with string '.mo' return I18N_MODIFIED, otherwise return FILE_MODIFIED.
convert fourth element of row to an integer, substitute it for value under the 'max_digits' key of the field_params.
doublecolon_len is an integer 0.
from django.conf import settings into default name space.
if 'needs_autoescape' attribute of func object exists and is true,
substitute result for value under the id of self key of memo dictionary.
substitute fg for value under the 'fg' key of definition dictionary.
get the absolute path of the __file__, repo_dir is name of the directory two leveles above it.
derive the class ContextDict from the dict base class.
substitute path, match and recursive for self.path, self.match and self.recursive.
_urllib_robotparser_moved_attributes is a list containing an instance of MovedAttribute class, created with 3 argument: strings, "RobotFileParser", "robotparser", "urllib.robotparser".
final_output is an empty list.
if field is an instance of FileField,
derive class Command from the BaseCommand base class.
define the function add_metaclass with an argument metaclass.
_meth_self is a string "im_self".
call the function force_text with an argument field.help_text, format help_text_html with it, substitute the result for help_text.
call the function context.get with 2 argument 'csrf_token' and None, substitute the result for csrf_token.
if character '=' is contained in x,
call the function user_function with 2 arguments unpacked list args and unpacked dictionary kwds, substitute the result for result.
call the function data with 3 arguments: self.year, self.month and self.day, return the result.
define the method _has_changed with arguments self, initial and data.
call the method __init__ from the base class of the class BaseModelForm, with 8 arguments: data, files, auto_id, prefix, object_data, error_class, label_suffix and empty_permitted.
return wrapper.
call the OVERLAPPED function, substitute the result for overlapped.
substitute fcntl.LOCK_EX for LOCK_EX.
call the method msgs.decode with an argument string 'utf-8', substitute the result for msgs.
define the function get_language_from_path with an argument path.
self.years is list containing 10 successive integers from this_year.
call the method self.validate_name with 2 arguments name and app_or_project.
call the method commands.update, with an argument dictionary containing entries: app_config_name for name, for every name in return value of the function find_commands, called with an argument path.
substitute force_text for force_str.
substitute logging.root for root.
define the method add_arguments with 2 arguments self and parser.
if unhandled_params is true,
if not,
define the method setdefault with 3 arguments: self, key and default.
call the function base64_hmac with 3 arguments: string 'signer' appended to self.salt, value and self.key, substitute the result for signature.
call the function activate with an argument self.language.
_get_request is getter function for REQUEST attribute of this class.
substitute exc for exc_value.__cause__.
define the method dict with an argument self.
return nothing.
result is an empty list.
from django.utils.timezone import is_aware into default name space.
call the method clean with an argument value from the base class of the class ComboField.
read file fp and substitute the result for msgs.
call the function render_value_in_context with 2 arguments output and context, return the result.
call the function settings.is_overridden with argument string 'TEMPLATE_LOADERS', if it evaluates to boolean True,
derive the class ChoiceFieldRenderer from the object base class.
remover 'file' key from the kwargs dictionary, if it exists substitute it for fp, if not substitute sys.stdout for fp.
substitute DEFAULT_MIN_NUM for min_num,
substitute first element of self.locale_paths for self.default_locale_path.
self.command_stack is an empty list.
subclass is a instance of a class named Migration, derived from the base class Migration, with 1 field: dependencies set to a list of tuples with 2 elements: app_label and migration.name for every migration in merge_migrations.
for every k and v in result of the call to the method type_.__dict__.items,
if not,
define the method __getitem__ with 2 arguments: self and header.
call the method extracted.close.
ret_ip is an empty list.
define the function modelform_factory with 10 arguments: model, form set to ModelForm, fields set to None, exclude set to None,
if changes is false and self.verbosity is greater than, or equal to iteger 1,
pathext is an list containing an empty string.
cookiedict is an empty dictionary.
if CONTEXT_SEPARATOR is contained in result,
if not,
define the method __copy__ with an argument self.
raise CommandError exception with string "This script should be run from the Django Git checkout or your project or app tree, or with the settings module specified.", as argument.
from django.utils.dateformat import format and time_format into default name space.
join return value of the function six.text_type called with an argument self.management_form and forms into a string, separated by newline, use it as an argument for the call to the function mark_safe, return the result.
define the method write with 2 arguments: self and value.
if self.render_value is false,
define the method handle with 2 arguments: self and unpacked dictionary options.
define the method reader_leaves with an argument self.
if IOError, renamed to e, exception is caught,
write new line to the self.stream file stream.
call the method tag_re.finditer with an argument self.template_string, for every match in result,
call the function get_language, split the result by '-', substitute the first element of the result for base_lang.
call the function re.compile with raw string '&(?!(\w+|#\d+);)', substitute the result for simple_email_re.
derive class Command from the TemplateCommand base class.
define the method m with an argument self.
write string "No conflicts detected to merge." to self.stdout stream.
if not,
remove element from kwargs dictionary under the key 'to_field', substitute it for self.to_field if it exists, if not self.to_field is None.
raise an exception.
substitute link for value under the NEXT key of the last dictionary, for value under the PREV key of the root dictionary, for value under the key key of the cache dictionary.
if file path absolute_path exists,
if self.verbosity is greater or equal than integer 1 and sql is true, call the self.stdout.write method with string "
match is boolean True.
call the method self.next_token, substitute the result for token.
if f.rel and f.rel.to are not contained in to_delete,
otherwise if value is not an instance of list ot tuple type,
call the method re.compile with 2 arguments: raw string """^(?: (?P<addr> (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |""" """(?P<ipv6>\[[a-fA-F0-9:]+\]) | (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) ):)?(?P<port>\d+)$""", re.X
substitute '%s' in the string " (%s squashed migrations)" with length of replaces filed of graph.nodes element at the plan_node index, append the string to the title.
if call to the function response.has_header with argument 'Vary' returns boolean True,
Meta is an instance of class with name 'Meta', parent base class and fields attrs.
call the method logger.removeHandler with an argument handler.
call the method self.make_key with key and version set to version as arguments, substitute it for key.
call the method handler.new_file with 6 arguments: field_name, file_name, content_type, content_length, charset and  content_type_extra.
return _decorator.
call the get method with an argument string 'tried' on the first element of the e.args, substitute the result for sub_tried.
if response is None,
define the method _delete with self and fname as arguments.
call the method signals.got_request_exception.send with the sender set to the type of this class, and request set to request as the arguments.
msg is a string "Invalid HTTP_HOST header: %r.", replace '%r' with host.
from django.core.management.color import no_style into default name space.
from django.forms.widgets import SelectMultiple, HiddenInput, MultipleHiddenInput into default namespace.
define the method add_arguments with self class instance and parser as the arguments.
return ZERO.
if match is true,
if not,
call to the resolver.resolve method with request.path_info as an argument.
define the method is_multipart with an argument self.
from django.core.exceptions import SuspiciousFileOperation into default name space.
g is an instance of a class generator.Generator called with fp and mangle_from_ set to False.
try,
return response.
open new_path file in 'wb' mode, with file descriptor renamed to new_file,
if i is greater than, or equal to the result of the call to the method self.initial_form_count, and i is greater than or equal to self.min_num,
substitute value for the value under the name key of the self.cleaned_data dictionary.
headerlist is an empty list.
