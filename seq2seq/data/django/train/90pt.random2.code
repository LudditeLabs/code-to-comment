 from django . utils import timezone , six
  from django . utils . encoding import force_str
   try :
                      self . invalid_block_tag ( token , command , parse_until )
  continue
              raise StopIteration ( )
 stats [ : ] = [ 0 , 0 ]
                  d [ k ] = val
  from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
          new_class = ( super ( MediaDefiningClass , mcs )  . __new__ ( mcs , name , bases , attrs ) )
 from django . utils import six
  if exclude and f . name in exclude :
 if endblock . contents not in acceptable_endblocks :
                      raise
 raise NotImplementedError ( 'subclasses of BaseLoader must provide a load_template_source() method' )
      from UserList import UserList
  except MultiPartParserError :
  else :
                  dig1 , dig2 = inner . copy ( ) , outer . copy ( )
   header = chunk [ : header_end ]
 if s [ 0 ] not in "\"'" or s [ - 1 ] != s [ 0 ] :
   elif len ( key ) == 1 and type ( key [ 0 ] ) in fasttypes :
    if item [ "author_name" ] and item [ "author_email" ] :
 del options [ 'liveserver' ]
  elif template_tuple is None :
          daemon_kwargs [ 'umask' ] = int ( options [ 'umask' ] , 8 )
                      current = current [ bit ]
                          locale_dir = self . default_locale_path
   def new ( self , values = None ) :
     def _clean_form ( self ) :
          return ''
   FILTER_SEPARATOR = '|'
   def __deepcopy__ ( self , memo = None ) :
              value = { True : '2' , False : '3' , '2' : '2' , '3' : '3' } [ value ]
   def _create_attachment ( self , filename , content , mimetype = None ) :
 def loaders ( self ) :
 s = s . replace ( '</' , '<\\/' )
              data = bool ( data )
              now = datetime . now ( )
          value = datetime_safe . new_datetime ( value )
 return data
              compare_to = None
          try :
 from django . core . cache . backends . base import (  InvalidCacheBackendError , CacheKeyWarning , BaseCache )
  msgmerge_options = [ '-q' , '--previous' ]
 self . connection . ehlo ( )
   def smart_split ( text ) :
  self . feed . update ( kwargs )
                raise RuntimeError (  "The method to extend accepted command-line arguments by the "  "test management command has changed in Django 1.8. Please "  "create an add_arguments class method to achieve this." )
 try :
 def __init__ ( self , data , func , prefix ) :
          return mark_safe ( value )
      _meth_func = "__func__"
     class LocaleRegexURLResolver ( RegexURLResolver ) :
  if ( getattr ( meta , 'fields' , fields ) is None and  getattr ( meta , 'exclude' , exclude ) is None ) :
              if action == "apply_start" :
 if bits [ in_index ] != 'in' :
          if limit is None or len ( x ) <= limit :
  self . path = ''
              pass
              top = self . count
          try :
 from django . utils import six
 self . META = environ
 msgs , errors , status = popen_wrapper ( args )
 import io
              args . append ( self . choices )
  else :
  elif item [ "author_email" ] :
                          cursor . execute ( "INSERT INTO %s (cache_key, value, expires) "  "VALUES (%%s, %%s, %%s)" % table ,  [ key , b64encoded , exp ] )
          raise ValueError ( "'package' not set to a string" )
      errors = [ ]
      return settings . LANGUAGE_CODE
           raise parser . error_class (  "Not expecting '%s' as infix operator in if tag." % self . id  )
  else :
 __setitem__ = complain
 with self . _lock . writer ( ) :
 if not hextets [ index ] :
   raise
          pass
              base , ext = os . path . splitext ( base )
 return ''
 norm_patterns = [ p [ : - len ( dir_suffix ) ] if p . endswith ( dir_suffix ) else p for p in self . ignore_patterns ]
          return { }
    def get_mod_func ( callback ) :
  def led ( self , left , parser ) :
 return smart_text ( obj )
 if reverse :
 converter = getattr ( self , converter )
 if current_len == truncate_len :
              token = tokens [ i ]
    @ register . filter ( is_safe = True )
    def add_never_cache_headers ( response ) :
   signals . request_finished . connect ( close_caches )
      rendering_attrs = [ 'template_name' , 'context_data' , '_post_render_callbacks' ]
 raise NotImplementedError ( 'subclasses of BaseEmailBackend must override send_messages() method' )
    encode = curry ( _proxy_method , method = six . text_type . encode )
              app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
  elif bytes < MB :
              self . locale_paths . extend ( list ( settings . LOCALE_PATHS ) )
    return False
 yield 'from %s import models' % self . db_module
              if isinstance ( v , ( list , tuple ) ) :
 from django . utils . six import StringIO
 self . __name = "%s%02d%02d" % ( sign , abs ( offset ) / 60. , abs ( offset ) % 60 )
 return from_current_timezone ( result )
 from django . utils . functional import lazy
      if self . verbosity > 0 :
 errors = [ ]
              while new_name . find ( '__' ) >= 0 :
 from django . utils . encoding import force_text
 flush = property ( lambda self : self . file . flush )
           return avoid_wrapping ( ugettext ( '0 minutes' ) )
  strip_spaces_between_tags = allow_lazy ( strip_spaces_between_tags , six . text_type )
              return int ( cc [ 'max-age' ] )
  super ( Command , self ) . handle ( 'project' , project_name , target , ** options )
  __all__ = ( 'SelectDateWidget' , )
 from django . conf import settings
 if not attr_list [ 3 ] & termios . ECHO :
  sign , digittuple , exponent = value . as_tuple ( )
    class HttpResponseNotFound ( HttpResponse ) :
   def getvalue ( self ) :
     def npgettext ( context , singular , plural , number ) :
                  lineno , offset = self . getpos ( )
   response = self . get_exception_response ( request , resolver , 400 )
                  groupid = "t%d" % tok . id
          return apps . get_model ( model_identifier )
              continue
  def __init__ ( self , max_value = None , min_value = None , max_digits = None , decimal_places = None , * args , ** kwargs ) :
              lines [ i ] = ( "%0" + width + "d. %s" ) % ( i + 1 , line )
   from django . conf import settings
              self . file_path = kwargs . pop ( 'file_path' )
   def as_table ( self ) :
 msgs , errors , status = popen_wrapper ( args )
 def ifequal ( parser , token ) :
  except IOError as e :
 self . empty_value = kwargs . pop ( 'empty_value' , '' )
 autoescape = autoescape and not isinstance ( value , SafeData )
    def _generate_cache_key ( request , method , headerlist , key_prefix ) :
 if not autoescape or isinstance ( value , SafeData ) :
                      indexes = connection . introspection . get_indexes ( cursor , table_name )
              now = datetime . utcnow ( )
   data = { }
 if item [ 'description' ] is not None :
      def render ( self , context ) :
  write_pot_file ( potfile , msgs )
              fp . write ( "%d\n" % os . getpid ( ) )
                      config [ 'target' ] = self . config [ 'handlers' ] [ config [ 'target' ] ]
          if self . domain_regex . match ( domain_part ) :
                          len_item = 1
    def tzname ( self , dt ) :
 args , varargs , varkw , defaults = getargspec ( func )
 import sys
                      for f in files :
 if settings . USE_TZ and value is not None and timezone . is_naive ( value ) :
              raise InvalidCacheBackendError (  "Could not find config for '%s' in settings.CACHES" % alias  )
  except ImportError :
from __future__ import absolute_import
          self . name , self . nodelist , self . parent = name , nodelist , parent
          kw = match . groupdict ( )
 super ( PyLibMCCache , self ) . __init__ ( server , params ,  library = pylibmc ,  value_not_found_exception = pylibmc . NotFound )
                                  raise ValueError ( 'Unable to configure handler '  '%r: %s' % ( name , e ) )
    for f in fields :
 for app_name in app_names :
          if self . callback ( record ) :
   class Command ( BaseCommand ) :
                              e . args = ( "Could not load %(app_label)s.%(object_name)s(pk=%(pk)s): %(error_msg)s" % {  'app_label' : obj . object . _meta . app_label ,  'object_name' : obj . object . _meta . object_name ,  'pk' : obj . object . pk ,  'error_msg' : force_text ( e )  } , )
              start = match . start ( )
    @ register . filter ( is_safe = False )
  except ValueError :
   if hasattr ( mw_instance , 'process_request' ) :
 args . append ( work_file )
 message = message % ( ', ' . join ( missing_fields ) ,  opts . model . __name__ )
 cache_get = cache . get
 def safe ( value ) :
     subclass = type ( "Migration" , ( migrations . Migration , ) , {  "dependencies" : [ ] ,  "operations" : new_operations ,  "replaces" : replaces ,  } )
      def jython_reloader ( main_func , args , kwargs ) :
          ch , escaped = next ( pattern_iter )
 import re
 statements = sql_create ( app_config , self . style , connection )
 from io import StringIO
    def validate_domain_part ( self , domain_part ) :
       def pk_is_not_editable ( pk ) :
              os . remove ( fname )
 if construct :
  return _dec
          fn = inotify_code_changed
   def is_multipart ( self ) :
     class CallbackFilter ( logging . Filter ) :
              self . _callback = None
   def create_select ( self , name , field , value , val , choices , none_value ) :
 if not self . use_natural_primary_keys or not hasattr ( obj , 'natural_key' ) :
     class RenderContext ( BaseContext ) :
               break
 opt_dict = { 'bold' : '1' , 'underscore' : '4' , 'blink' : '5' , 'reverse' : '7' , 'conceal' : '8' }
  elif msg :
 return self . data . isocalendar ( ) [ 0 ]
      msgs_with_ctxt = ( "%s%s%s" % ( context , CONTEXT_SEPARATOR , singular ) ,  "%s%s%s" % ( context , CONTEXT_SEPARATOR , plural ) ,  number )
   def setlistdefault ( self , key , default_list = None ) :
          render_context = self . context . render_context
            cache . set ( cache_key , [ ] , cache_timeout )
              assert content is None
          out = [ str ( x ) for x in [ self . id , self . first , self . second ] if x is not None ]
                  with io . open ( fname , 'rb' ) as f :
 from django . core import serializers
          logging . Handler . __init__ ( self )
          if value in self . empty_values :
 return __wrapper__
              test_runner_class . add_arguments ( parser )
  else :
      year_days = [ None , 0 , 31 , 59 , 90 , 120 , 151 , 181 , 212 , 243 , 273 , 304 , 334 ]
 app . start ( )
   else :
 return filter_func
              self . stdout . write ( '\n' . join ( sorted ( registry . tags_available ( ) ) ) )
  filename = os . path . join ( to_path , name )
          self . stream . write ( message . message ( ) . as_bytes ( ) + b'\n' )
              self . delete ( key , version = version )
   else :
          self . _assert_mutable ( )
   offset = self . timezone . utcoffset ( self . data )
 if num_repl > 0 :
                      visible_issue_count += len ( issues )
  elif isinstance ( o , datetime . time ) :
   class Loader ( BaseLoader ) :
                  return False
 self . interactive = options . get ( 'interactive' )
 response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
 errors . extend ( _check_test_runner ( ** kwargs ) )
   @ property
   def forbid_multi_line_headers ( name , val , encoding ) :
      if not sys . warnoptions :
     def main ( main_func , args = None , kwargs = None ) :
 pass
 return self
  except KeyboardInterrupt :
   def render ( self , context ) :
 return iter ( getattr ( d , _iteritems ) ( ** kw ) )
              if arg . startswith ( option ) :
  else :
      must_be_first = True
 if not dklen :
                      lineno = lineno + self . __starttag_text . count ( "\n" )
 parser . add_argument ( '--domain' , '-d' , default = 'django' , dest = 'domain' ,  help = 'The domain of the message files (default: "django").' )
  handler . endElement ( "author" )
              self . keyOrder . append ( key )
                  self . literal = int ( self . literal )
          i = p . find ( b'=' )
 __delslice__ = complain
                  try :
          def dec ( func ) :
                      super ( AssignmentNode , self ) . __init__ ( takes_context , args , kwargs )
  if bmatch . group ( 1 ) :
   def utcoffset ( self , dt ) :
              if settings . STATIC_URL is None :
    form . fields [ name ] = InlineForeignKeyField ( self . instance , ** kwargs )
          compiled_parent = self . get_parent ( context )
 parts = fixture_name . rsplit ( '.' , 2 )
              m = re . match ( naiveip_re , options [ 'addrport' ] )
 fk = _get_foreign_key ( parent_model , model , fk_name = fk_name )
                              filemsg = ''
 if charset == 'utf-8' :
          attrs = super ( IntegerField , self ) . widget_attrs ( widget )
                      if t in self . __dispatch :
   def recipients ( self ) :
    if ip_str . count ( '::' ) > 1 :
              return ''
 handler . endElement ( "feed" )
  else :
              msg = self . style . HTTP_BAD_REQUEST ( msg )
              raise TypeError ( 'Level not an integer or a '  'valid string: %r' % level )
  def __init__ ( self , max_value = None , min_value = None , * args , ** kwargs ) :
                  form = self . forms [ i ]
   def handle ( self , ** options ) :
  else :
 def capfirst ( value ) :
              try :
 trans_bit . append ( bit )
 if message_context [ 0 ] == '"' :
 return errors
 _iterlists = "iterlists"
          if value :
  else :
                          try :
  else :
              for root , dirs , files in sorted ( os . walk ( self . path ) ) :
                  self . locale_paths . append ( os . path . abspath ( 'locale' ) )
              raise AttributeError ( "You cannot set the upload handlers after the upload has been processed." )
    @ lru_cache . lru_cache ( maxsize = None )
          warnings . warn (  "SortedDict is deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2  )
  self . dicts . append ( other_dict )
      if sys . version_info [ : 2 ] >= ( 3 , 4 ) :
       def get_standard_processors ( ) :
     if response is None :
   def _create_alternatives ( self , msg ) :
                              if field in form . cleaned_data :
    QuerySetPaginator = Paginator
      class CycleNode ( Node ) :
   def date_format ( value , format = None , use_l10n = None ) :
  self . _boundary = boundary
 del bits [ : 1 ]
  else :
    finally :
 import sys
          self . _size = size
        def __str__ ( self ) :
      else :
                  r = r [ : 23 ] + r [ 26 : ]
          del cc [ 'public' ]
    elif name is not None and filter_func is not None :
  from datetime import datetime , timedelta , tzinfo
  for p in parts [ 1 : ] :
    if six . PY3 :
               try :
              f . error_messages . setdefault ( 'incomplete' ,  self . error_messages [ 'incomplete' ] )
   def is_silenced ( self ) :
 s1 = time . strftime ( fmt , ( year , ) + timetuple [ 1 : ] )
                              out . write ( blankout ( part , 'S' ) )
              x = x * len ( from_digits ) + from_digits . index ( digit )
   try :
   def clear ( self ) :
                  error_msg += " Got this from the '%s' variable." % self . parent_name . token
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
 obj . children = copy . deepcopy ( self . children , memodict )
  if self . localize :
                       value . encode ( charset )
  def __init__ ( self , stream_or_string , ** options ) :
  attrname , rest , attrvalue = m . group ( 1 , 2 , 3 )
  strip_entities = allow_lazy ( strip_entities , six . text_type )
 extra_params = OrderedDict ( )
 if status :
 try :
    def __setitem__ ( self , name , val ) :
 self . func = func
 from django . utils . encoding import force_text
   def bpython ( self ) :
  except ValueError :
   def handle ( self , ** options ) :
  from django . apps import apps
 _func_globals = "func_globals"
                              obj . save ( using = self . using )
  attachment . add_header ( 'Content-Disposition' , 'attachment' ,  filename = filename )
          def parts ( ) :
                  self . stdout . write ( "Installed %d object(s) from %d fixture(s)" %  ( self . loaded_object_count , self . fixture_count ) )
              raise CommandError ( 'Your Python does not support IPv6.' )
 for processor in get_standard_processors ( ) + processors :
 errors . append ( {  'message' : escape ( message ) if escape_html else message ,  'code' : error . code or '' ,  } )
    return LoadNode ( )
 import sys
   def filter ( self , name = None , filter_func = None , ** flags ) :
 stats [ MISSES ] += 1
    def pgettext ( context , message ) :
 f . write ( zlib . compress ( pickle . dumps ( value ) , - 1 ) )
 server_port = str ( self . META [ 'SERVER_PORT' ] )
          result = super ( SortedDict , self ) . popitem ( )
 if not isinstance ( stream_or_string , ( bytes , six . string_types ) ) :
                                  val = list ( val )
  class InclusionNode ( TagHelperNode ) :
          choices = ( ( '1' , ugettext_lazy ( 'Unknown' ) ) ,  ( '2' , ugettext_lazy ( 'Yes' ) ) ,  ( '3' , ugettext_lazy ( 'No' ) ) )
  int_part_gd += digit
      def __init__ ( self , dict_ = None ) :
                  for middleware_method in self . _template_response_middleware :
              raise ValueError (  "'%s.%s' has more than one ForeignKey to '%s.%s'."  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
 cword = int ( os . environ [ 'COMP_CWORD' ] )
  else :
              context . render_context . pop ( )
    def format_html_join ( sep , format_string , args_generator ) :
          meta = ( pformat ( META_override )  if META_override is not None  else pformat ( request . META ) )
  except OSError :
from django . utils . six . moves import html_parser as _html_parser
                  field_output . append ( "UNIQUE" )
    class PermissionDenied ( Exception ) :
  for index in range ( len ( hextets ) ) :
                          shutil . copyfileobj ( extracted , outfile )
   def __lt__ ( self , other ) :
 def emit_post_migrate ( verbosity , interactive , database ) :
 if arg is None :
                  yield safe_join ( template_dir , template_name )
    wrapper . __wrapped__ = user_function
   class Command ( BaseCommand ) :
       DefaultFeed = Rss201rev2Feed
          for widget in self . get_renderer ( name , value , attrs , choices ) :
 template = '%(input)s'
  if ( self . validate_min and  self . total_form_count ( ) - len ( self . deleted_forms ) < self . min_num ) :
 constant_string = constant_string . replace ( "\n" , "" )
              handler . addQuickElement ( 'published' , rfc3339_date ( item [ 'pubdate' ] ) )
   UserModel = get_user_model ( )
 import warnings
 def writer ( self ) :
     def resolve ( path , urlconf = None ) :
                  exp = datetime . max
  attrs . append ( ( attrname . lower ( ) , attrvalue ) )
 now = now . replace ( microsecond = 0 )
          super ( Command , self ) . add_arguments ( parser )
              attr_list = termios . tcgetattr ( fd )
              attrs . setdefault ( 'step' , 'any' )
 if related :
                  if pattern . namespace :
 self . file . size = file_size
 break
              value = self . coerce ( value )
          ULONG_PTR = c_ulong
              return bytes ( func ( * self . __args , ** self . __kw ) )
 from __future__ import unicode_literals
              return 0
    class MultiWidget ( Widget ) :
              HTMLParser . __init__ ( self )
   def __repr__ ( self ) :
  return six . text_type ( s ) . encode ( encoding , errors )
              if self . app_label and app_config . label != self . app_label :
   def setlist ( self , key , list_ ) :
                  raise ValidationError ( ungettext (  "Please submit %d or fewer forms." ,  "Please submit %d or fewer forms." , self . max_num ) % self . max_num ,  code = 'too_many_forms' ,  )
  return self . _cached_loaders
 if pieces [ - 1 ] :
 import os
  else :
   except IOError :
   def _close_files ( self ) :
          cleaned = self . clean ( value )
                  item_date = item . get ( date_key )
  else :
    @ register . tag ( 'for' )
              filename = filename [ : - 1 ]
  def __init__ ( self , attrs = None , render_value = False ) :
          tables = connection . introspection . django_table_names ( only_existing = True )
 return str ( '%s%s%s' ) % ( value , self . sep , self . signature ( value ) )
     db = options . get ( 'database' )
 hour = int ( m . group ( 'hour' ) )
 app_path = getattr ( settings , 'WSGI_APPLICATION' )
                  self . stdout . write ( "  Installing custom SQL...\n" )
 return '\n' . join ( statements )
   def setdefault ( self , key , default = None ) :
 break
 class MinValueValidator ( BaseValidator ) :
  except TemplateDoesNotExist :
    if hasattr ( data , 'temporary_file_path' ) :
       if only_new :
 self . args = args
  def __call__ ( self , environ , start_response ) :
  self . mod = new
   def validate ( self , value ) :
     def parse_time ( value ) :
  from django . utils . deprecation import RemovedInDjango19Warning
   def remove_potfiles ( self ) :
 criticals = [ e for e in all_issues if checks . CRITICAL <= e . level ]
                  if reduce ( operator . eq , level ) :
 raise NotImplementedError ( 'subclasses of FileUploadHandler must provide a receive_data_chunk() method' )
  return func ( self . _wrapped , * args )
                              self . handle_fk_field ( obj , field )
          return bool ( self . name )
  except ValueError :
   incomment = False
 return _generate_cache_key ( request , request . method , [ ] , key_prefix )
 if unpack :
 month_field = '%s_month'
          return zipfile . ZipFile . read ( self , self . namelist ( ) [ 0 ] )
              return self . DSTDIFF
      def __str__ ( self ) :
  slug_re = re . compile ( r'^[-a-zA-Z0-9_]+$' )
      if isinstance ( addr , six . string_types ) :
              continue
              raise EmptyPage ( 'That page number is less than 1' )
  raise ValidationError ( self . message , code = self . code )
   def has_key ( self , key ) :
   def handle_field ( self , obj , field ) :
          return six . text_type ( s , encoding , 'replace' )
      for program in programs :
            if cursor and close_connection :
   def get ( self , header , alternate = None ) :
    def deactivate_all ( ) :
   def start_object ( self , obj ) :
    def sanitize_address ( addr , encoding ) :
          return False
 fp = six . BytesIO ( )
              return self . file . close ( )
 new_ip = hextet [ 0 ] . split ( ':' )
  return parser . _namedCycleNodes [ name ]
 return { 'MEDIA_URL' : settings . MEDIA_URL }
  def add_arguments ( self , parser ) :
     class override ( object ) :
    for app_name in app_names :
    DEBUG = 10
              filename = file
  return True
              mw_class = import_string ( middleware_path )
     def strip_tags ( value ) :
 if base64d [ : 1 ] == b'.' :
          self . _current = None
 self . content_length = None
  existing . remove ( name )
                     return False
  else :
  else :
   def values ( self ) :
          archive . extract ( to_path )
 raise
 for k in doomed :
              template , origin = self . find_template ( template_name , template_dirs )
          return self . __offset ,
  if self . verbosity >= 2 :
   while '<' in value and '>' in value :
   def open ( self , mode = None ) :
               six . reraise ( ValidationError , ValidationError (  self . error_messages [ 'invalid_image' ] ,  code = 'invalid_image' ,  ) , sys . exc_info ( ) [ 2 ] )
  if 'media' not in attrs :
     class MultipleChoiceField ( ChoiceField ) :
    def set_script_prefix ( prefix ) :
   def get_version ( self ) :
                      try :
  return ''
                   doublecolon_start = index
          if regex is not None :
 @ stringfilter
                   result . append ( ch )
  return value
  except OSError :
          daemon_kwargs [ 'err_log' ] = options [ 'errlog' ]
  else :
           instance . save ( )
    else :
  return value
 compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = SimpleNode )
 field_params = OrderedDict ( )
 from io import BytesIO
          if k == 'fg' :
 self . extra_headers = headers or { }
   def y ( self ) :
    class Origin ( object ) :
 cls = extension_map . get ( tail_ext )
   for f in self . instance . _meta . fields :
  import importlib
 try :
  except Exception :
   def __copy__ ( self ) :
              return ipv4_unpacked
   class Options ( object ) :
                      blocks = dict ( ( n . name , n ) for n in  compiled_parent . nodelist . get_nodes_by_type ( BlockNode ) )
  self . replace_header ( 'Content-Type' , 'text/%s; charset="%s"' % ( subtype , charset ) )
          return super ( Warning , self ) . __init__ ( WARNING , * args , ** kwargs )
 self . validate ( out )
 return dict ( ( key , self [ key ] ) for key in self )
   user_part , domain_part = value . rsplit ( '@' , 1 )
              @ decorator
              result = factory ( ** kwargs )
    if sizeof ( c_ulong ) != sizeof ( c_void_p ) :
 from django . utils . deprecation import RemovedInDjango20Warning
          for item in self . items :
 self . prefix = prefix
 pass
  if isinstance ( value , list ) :
                          raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
          _supported = OrderedDict ( settings . LANGUAGES )
                        pass
 _expire_info = { }
   def __setstate__ ( self , obj_dict ) :
   def to_language ( self ) :
              if getattr ( e , 'silent_variable_failure' , False ) :
  __all__ = [  'CachedDnsName' , 'DNS_NAME' , 'EmailMessage' , 'EmailMultiAlternatives' ,  'SafeMIMEText' , 'SafeMIMEMultipart' , 'DEFAULT_ATTACHMENT_MIME_TYPE' ,  'make_msgid' , 'BadHeaderError' , 'forbid_multi_line_headers' ,  'get_connection' , 'send_mail' , 'send_mass_mail' , 'mail_admins' ,  'mail_managers' ,  ]
 body_msg = msg
  try :
              return from_current_timezone ( value )
          return self . nodelist . render ( context )
 self . parsed = parsed
                  value = None
 filter_expr = parser . compile_filter ( "var|%s" % ( rest ) )
    return default
   for middleware_method in self . _view_middleware :
                      if hasattr ( middleware , 'process_template_response' ) :
              raise ValidationError (  self . error_messages [ 'max_digits' ] ,  code = 'max_digits' ,  params = { 'max' : self . max_digits } ,  )
  if sep is None :
  except LookupError :
      renamed_methods = (  ( '_get_memcache_timeout' , 'get_backend_timeout' , RemovedInDjango19Warning ) ,  )
          if memo is None :
          lbp = bp
  return dec
              self . activated = False
 i = 0
   from django . conf import settings
              yield self [ key ]
                  answer = None
              model , deps = model_dependencies . pop ( )
  return self . __cast ( ) < other
              id_ += '_0'
  else :
     self . _validate_unique = False
  values = [ parser . compile_filter ( bit ) for bit in bits [ 1 : ] ]
              if finder . find_module ( name , package_path ) :
  s = subject [ p : i ]
          raise
 return dot_re . sub ( char , src )
  self . buffer += chunk
  return super ( BaseInlineFormSet , self ) . initial_form_count ( )
               raise
  headerlist . append ( 'HTTP_' + header )
          self . require_all_fields = kwargs . pop ( 'require_all_fields' , True )
 sys . exit ( 1 )
         for log in existing :
              if parts [ - 1 ] in self . serialization_formats :
 val = force_text ( val )
                  if isinstance ( rhs , dict ) and number :
       finally :
                      if not self . _is_expired ( f ) :
  return FirstOfNode ( [ parser . compile_filter ( bit ) for bit in bits ] )
          secret = settings . SECRET_KEY
 parser . ExternalEntityRefHandler = self . external_entity_ref_handler
 from django . core . management . base import BaseCommand , CommandError
  else :
              message . message ( )
 if fg in color_names :
 self . position = 0
                      model = apps . get_model ( exclude )
 file_pos = file . tell ( )
  context_extras = { }
              return 'rd'
                  raise
              raise ImproperlyConfigured (  'Command %s defines both "requires_model_validation" '  'and "requires_system_checks", which is illegal. Use only '  '"requires_system_checks".' % self . __class__ . __name__ )
      help = "Prints the DROP INDEX SQL statements for the given model module name(s)."
 input_text = ugettext_lazy ( 'Change' )
   def as_widget ( self , widget = None , attrs = None , only_initial = False ) :
              value = None
  def update_watch ( sender = None , ** kwargs ) :
          self . callback = callback
    def activate ( language ) :
 from django . utils import six
              return new_class
 changed = False
   class UploadedFile ( File ) :
    class Signer ( object ) :
 return self . as_widget ( Textarea ( ) , attrs , ** kwargs )
    return ''
  if options [ 'method' ] in ( 'prefork' , 'fork' ) :
          command , source = self . command_stack . pop ( )
  else :
 warnings . warn ( "resolve_variable() is deprecated. Use django.template."  "Variable(path).resolve(context) instead" ,  RemovedInDjango20Warning , stacklevel = 2 )
                   if ( form . cleaned_data and form . cleaned_data [ field ] is not None  and form . cleaned_data [ unique_for ] is not None ) :
              return ZERO
    class JSONSerializer ( object ) :
          modified_code = None
 import datetime
          self . _cache . clear ( )
  from django . core . mail . backends . base import BaseEmailBackend
   view_path = url_name or self . _func_path
          return { "version" : self . _version ,  "xmlns:atom" : "http://www.w3.org/2005/Atom" }
                  if "'format'" not in str ( te ) :
 integer_types = int ,
 from itertools import chain
 for match in matches :
 with self . _lock . writer ( ) :
          self . _archive = zipfile . ZipFile ( file )
  else :
  else :
 if isinstance ( timezone , tzinfo ) :
                      m2m_convert = lambda v : smart_text ( field . rel . to . _meta . pk . to_python ( v ) )
   def E ( self ) :
  elif self . argv [ 1 : ] in ( [ '--help' ] , [ '-h' ] ) :
          self . content = content
  return '' . join ( base36 )
  except UnicodeDecodeError :
    def ngettext ( singular , plural , number ) :
 parser . add_argument ( '--app' , action = 'store' , dest = 'app_label' ,  default = None , help = 'Only look for fixtures in the specified app.' )
    for attr , value in base . __dict__ . items ( ) :
   def render ( self , context ) :
  hex_format_string = "%%0%ix" % ( hlen * 2 )
     return URLNode ( viewname , args , kwargs , asvar )
 MIN_NUM_FORM_COUNT = 'MIN_NUM_FORMS'
                  return True
  self . content = content
   except Exception :
  warn_msg = ( "The translator-targeted comment '%s' "  "(%sline %d) was ignored, because it wasn't the last item "  "on the line." ) % ( c , filemsg , comment_lineno_cache )
 __D2 = r'(?P<day>[ \d]\d)'
  kwargs . setdefault ( 'content_type' , 'application/json' )
                  used += '.' + frag
                     self . _count = len ( self . object_list )
          return DebugNodeList ( )
              self . keyOrder . append ( key )
  final_attrs = self . build_attrs ( attrs , name = name )
              self . stdout . write ( "Extracting %s\n" % filename )
  output = [ ]
          encoding = self . encoding or settings . DEFAULT_CHARSET
 return token
    if self . verbosity >= 1 :
                      fh . write ( writer . as_string ( ) )
 return { }
   return data
   try :
 name = self . _save ( name , content )
          strerror = force_text ( e . strerror , DEFAULT_LOCALE_ENCODING ,  strings_only = True )
  else :
    def activate ( language ) :
   url = unquote ( force_str ( url ) )
   if not hasattr ( content , 'chunks' ) :
          for key in self . keyOrder :
 WEEKDAYS_REV = {  'monday' : 0 , 'tuesday' : 1 , 'wednesday' : 2 , 'thursday' : 3 , 'friday' : 4 ,  'saturday' : 5 , 'sunday' : 6  }
 field_params = { }
   def render ( self , context ) :
 return len ( value . split ( ) )
 root [ KEY ] = root [ RESULT ] = None
  models . signals . pre_migrate . send (  sender = app_config ,  app_config = app_config ,  verbosity = verbosity ,  interactive = interactive ,  using = db )
      class CacheClass ( DatabaseCache ) :
 cursor . execute (  connections [ db ] . ops . cache_key_culling_sql ( ) % table ,  [ cull_num ] )
   self . can_write . acquire ( )
 self . per_page = int ( per_page )
  except ImportError :
   def make_view_atomic ( self , view ) :
   def I ( self ) :
                  continue
 if value in ( True , 'True' , '1' ) :
          for dict_ in self . dicts :
                  common_prefix = prefix
  from django . conf import settings
 message = email_message . message ( )
          return isinstance ( other , EmailValidator ) and ( self . domain_whitelist == other . domain_whitelist ) and ( self . message == other . message ) and ( self . code == other . code )
              self . active_readers -= 1
    def __call__ ( self , value ) :
  import os
    def do_ntranslate ( singular , plural , number , translation_function ) :
  elif isinstance ( self . obj , models . base . ModelBase ) :
              fk = fks_to_parent [ 0 ]
 clear_checkbox_label = ugettext_lazy ( 'Clear' )
 self . buffer = b''
                  result |= x ^ y
   def popitem ( self ) :
          raise parser . error_class ( "Unexpected end of expression in if tag." )
                                  extra_params [ 'null' ] = True
 import re
 if self . _errors is None :
              code_list . append ( background [ v ] )
                  old_method_name = renamed_method [ 0 ]
      return hmac . new ( key , msg = force_bytes ( value ) , digestmod = hashlib . sha1 )
          return False
    class CacheHandler ( object ) :
  return context_extras
   def chars ( self , num , truncate = None , html = False ) :
   class Module_six_moves_urllib ( types . ModuleType ) :
 capfirst = allow_lazy ( capfirst , six . text_type )
 from django . core . management . base import BaseCommand , CommandError
          return self . path == other . path
               definition = { }
          try :
          return getattr ( module , class_name )
  httpd . set_app ( wsgi_handler )
              return self . _stream . readline ( * args , ** kwargs )
              if level not in logging . _levelNames :
              return 12
          if escaped :
                      plural . append ( '%%(%s)s' % t . contents )
              end = newline
   return value
                  raise TypeError ( "end must be None or a string" )
  return normpath ( path )
          return self . dicts [ - 1 ] . get ( key , otherwise )
 language_code = get_language ( )
   def handle ( self , * args , ** options ) :
   def _setup ( self ) :
 for label in app_labels :
 factor = 0
 obj = Model ( ** data )
 from django . utils import six
  self . setlist ( key , default_list )
from django . core . management . base import BaseCommand , CommandError
              error = { field or NON_FIELD_ERRORS : error . error_list }
     class TextInput ( Input ) :
   def reset ( self ) :
   width = six . text_type ( len ( six . text_type ( len ( lines ) ) ) )
  if self . required :
 self . validate_key ( key )
 self . load_initial_data = options . get ( 'load_initial_data' )
 if not settings . MANAGERS :
 self . length , self . mime_type = length , mime_type
      def compile_string ( template_string , origin ) :
  key = ':' . join ( urlquote ( var ) for var in vary_on )
  def close ( self ) :
 if six . PY3 and isinstance ( val1 , bytes ) and isinstance ( val2 , bytes ) :
  try :
  except ( ValueError , KeyError ) :
  except HTMLParseError :
   def get_form_error ( self ) :
     class HttpResponse ( HttpResponseBase ) :
  else :
  import hashlib
                  if supported_code . startswith ( generic_lang_code + '-' ) :
 from django . core . exceptions import DisallowedHost , ImproperlyConfigured
 if self . parent_instance is not None :
                  return self . extract ( absolute_path )
  with connections [ db ] . cursor ( ) as cursor :
                  pass
  form . fields [ self . _pk_field . name ] = ModelChoiceField ( qs , initial = pk_value , required = False , widget = widget )
 encoding = encoding or settings . DEFAULT_CHARSET
  if last == 2 :
   except IOError :
  del attr
 nodelist = parser . parse ( )
  return format_html ( '<option value="{0}"{1}>{2}</option>' ,  option_value ,  selected_html ,  force_text ( option_label ) )
  new_class = ( super ( DeclarativeFieldsMetaclass , mcs )  . __new__ ( mcs , name , bases , attrs ) )
   return False
                  fields = list ( six . iteritems ( base . declared_fields ) ) + fields
  else :
 parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  action = 'append' , default = [ 'py' ] ,  help = 'The file extension(s) to render (default: "py"). '  'Separate multiple extensions with commas, or use '  '-e multiple times.' )
  self . _stream = BytesIO ( self . _body )
              return escape ( output )
   if fdel is not None :
   def ngettext ( singular , plural , number ) :
                               oldroot = root
    def __delattr__ ( self , name ) :
   return number
 from django . utils . six . moves . urllib . parse import parse_qsl , urlencode , quote , urljoin , urlsplit
                  self . stderr . write ( "App '%s' could not be found. Is it in INSTALLED_APPS?" % app_label )
 if not router . allow_migrate ( database , cache . cache_model_class ) :
 loop_dict [ 'counter' ] = i + 1
 escaped = False
  if len ( bits ) == 3 :
 dig2 . update ( dig1 . digest ( ) )
  if secure :
 return _i18n_cache_key_suffix ( request , cache_key )
   return self . _client
 self . path_info = path_info
   except OSError as e :
               return False
          neg , value = self . convert ( i , self . decimal_digits , self . digits , '-' )
 for t in type ( res ) . mro ( ) :
    def __deepcopy__ ( self , memo ) :
 value = self . get ( key , version = version )
            stream . unget ( chunk )
  check_for_migrations ( app_config , connection )
  except AttributeError :
 self . name = name or func . __name__
    class RequestContext ( Context ) :
  common_ancestor = None
   def to_python ( self , value ) :
                               val , encoded = super ( SimpleCookie , self ) . value_encode ( val )
  return attachment
              self . _deleted_form_indexes = [ ]
    def _check_middleware_classes ( app_configs = None , ** kwargs ) :
      return lazy_number ( ngettext , str , singular = singular , plural = plural , number = number )
   def rss_attributes ( self ) :
   if not isinstance ( viewname , six . string_types ) :
    if ip_str . count ( ':' ) > 7 :
 current_len = 0
 if os . path . isfile ( f ) :
   try :
              value = var . resolve ( context , True )
              fk = fks_to_parent [ 0 ]
  from django . utils . deprecation import RemovedInDjango19Warning
      pass
 if new_name != col_name :
  from django . utils . encoding import force_text
 return t . render ( context )
   else :
          alter_sql = [ ]
   def update ( self , * args , ** kwargs ) :
                  new_obj = func ( obj , * arg_vals )
  models . signals . post_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  created_models = created_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
                  if inplural :
    widget . is_required = self . required
          return strftime ( self , fmt )
                      return supported_code
              end = s . find ( b';' , end + 1 )
 if self . cdata_tag is not None :
 if exit_code != 3 :
 from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
              return { }
              self . _close_files ( )
     class SingleZipReader ( zipfile . ZipFile ) :
 if lang is None :
          if initial is None :
   def wrap ( text , width ) :
   def send_messages ( self , email_messages ) :
              output . insert ( 0 , error_row % force_text ( top_errors ) )
                      resource = resource . decode ( settings . FILE_CHARSET )
   try :
  else :
          mail . attach_alternative ( html_message , 'text/html' )
                      signal . signal ( signal . SIGTTOU , old_handler )
              assert content is not None
  else :
  elif hasattr ( query , 'items' ) :
   def delete ( self , name ) :
                      if extracted :
  _error_files = [ ]
              formfield = self . fields [ field_name ]
              val = self . _cache . incr ( key , delta )
 from __future__ import unicode_literals
 value = localize ( value , use_l10n = context . use_l10n )
                  handler . file . close ( )
                      obj . delete ( )
                          raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
   def __getitem__ ( self , index ) :
   for __ in iterator :
                  warnings . warn ( "A {% csrf_token %} was used in a template, but the context did not provide the value.  This is usually caused by not using RequestContext." )
     @ register . filter ( "timeuntil" , is_safe = False )
               return context . render_context
  return value
 self . default_locale_path = None
                  raise
 return MONTHS_3 [ self . data . month ] . title ( )
                            errors . append ( self . get_unique_error_message ( unique_check ) )
                      if field . rel is None :
              weight += 1
 def __init__ ( self , request , dict_ = None , processors = None , current_app = None ,  use_l10n = None , use_tz = None ) :
  else :
          self . registered_checks = [ ]
   except TypeError :
 last [ NEXT ] = root [ PREV ] = link
   CONTEXT_SEPARATOR = "\x04"
               now = now . replace ( tzinfo = None )
      if current_version >= ( 3 , 4 ) :
 for app_config in apps . get_app_configs ( ) :
   from django . template . base import ( Library , add_to_builtins , builtins ,  get_library , get_templatetags_modules , get_text_list , import_library ,  libraries )
   if 'noreset' not in opts :
    def symlinks_supported ( ) :
   def unescape_entities ( text ) :
   year = year + ( ( 2000 - year ) // 28 ) * 28
              return [ self [ k ] for k in self . keyOrder ]
          from django . template . debug import DebugLexer , DebugParser
 if isinstance ( widget , type ) :
 self . use_tz = use_tz
 result . key = key
  if hasattr ( model , 'natural_key' ) :
          raise ValueError ( "Base36 input too large" )
          key = self . make_key ( key , version = version )
   def discard ( self , item ) :
   import django . core . checks . compatibility . django_1_6_0
     def build_instance ( Model , data , db ) :
 fname = "%s-%s.log" % ( timestamp , abs ( id ( self ) ) )
 if result :
   def _create_mime_attachment ( self , content , mimetype ) :
   class BaseMemcachedCacheMethods ( RenameMethodsBase ) :
 from __future__ import unicode_literals
 if not chunk_size :
 import time
  func = getattr ( func , '_decorated_function' , func )
   def to_python ( self , value ) :
  output . append ( '</optgroup>' )
              self . characters ( contents )
                      new_attr = old_attr
  def __init__ ( self , exception ) :
          if app_config . models_module is None :
 utility = ManagementUtility ( argv )
 parse = sys . modules [ __name__ + ".moves.urllib_parse" ]
              return list_ , False
  msgs = '\n' . join ( lines )
  else :
   def get_resolved_arguments ( self , context ) :
  raise ValueError ( "The view %s.%s didn't return an HttpResponse object. It returned None instead."  % ( callback . __module__ , view_name ) )
     def validate ( self , app_config = None , display_num_errors = False ) :
 if ch == '(' :
 break
 while model_dependencies :
                  self . cookies [ key ] [ 'expires' ] = expires
              output = self . filter_expression . resolve ( context )
  self . errors
  vary_headers = cc_delim_re . split ( response [ 'Vary' ] )
 if self . _num_pages is None :
 cmd_options = vars ( options )
   try :
          p = Popen ( args , shell = False , stdout = PIPE , stderr = PIPE ,  close_fds = os . name != 'nt' , universal_newlines = True )
 def __init__ ( self , setting , nodelist ) :
 sys . exit ( 1 )
              file . close ( )
           daemonize = ( wsgi_opts [ 'bindAddress' ] is not None )
   self . check ( app_configs = app_configs , tags = tags , display_num_errors = True )
 return fp . getvalue ( )
              pass
 for app_config in apps . get_app_configs ( ) :
      lbp = 0
 self . _charset = settings . DEFAULT_CHARSET
              if escaped :
          from django . utils . html import strip_spaces_between_tags
                      if hasattr ( middleware , 'process_exception' ) :
  if not callable ( getattr ( template , 'render' , None ) ) :
  def add_arguments ( self , parser ) :
 try :
 return mark_safe ( re . sub ( '[-\s]+' , '-' , value ) )
              sys . exit ( bool ( failures ) )
  return self . _errors
           self . verbosity = options . get ( 'verbosity' )
  return six . unichr ( c )
  if item [ 'pubdate' ] is not None :
  else :
          cursor = connection . cursor ( )
 self . META = { }
 for fname in filelist :
   else :
          idstring = ''
  match = kwarg_re . match ( bits [ 0 ] )
              val = None
    if options . get ( 'load_initial_data' ) :
 self . dicts [ - 1 ] [ key ] = value
          return list ( self ) == other
     elif ch in "*?+{" :
              if unicodedata . combining ( char ) :
  finally :
 self . validate ( display_num_errors = True )
 if self . use_natural_keys :
 words = word_split_re . split ( force_text ( text ) )
   def _parse_date_fmt ( ) :
 def removetags ( value , tags ) :
                  return getattr ( self , shell ) ( )
 from threading import local
                          input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]
 from django . utils . datastructures import MultiValueDict
          module = importlib . import_module ( serializer_module )
 base_directory = '%s_directory' % app_or_project
  self . extensions = handle_extensions ( exts )
 sys . stderr . write ( "  http://www.saddi.com/software/flup/   If you've already\n" )
          mod = import_module ( mod_name )
 val2 = parser . compile_filter ( bits [ 2 ] )
  else :
   def _assert_mutable ( self ) :
 def app_dict ( self ) :
 parser . add_argument ( '--template' ,  help = 'The path or URL to load the template from.' )
          return ( self . field . prepare_value ( obj ) , self . field . label_from_instance ( obj ) )
                          obj_pk = obj_pk . pk
 last = root [ PREV ]
 self . negated = negated
 result = self . configurator . convert ( value )
 known_models = set ( model for model in connection . introspection . installed_models ( tables ) if model not in app_models )
              len ( X ( ) )
     class ExternalReferenceForbidden ( DefusedXmlException ) :
          return value
 def __add__ ( self , rhs ) :
                          model = app_config . get_model ( model_label )
   raise TemplateDoesNotExist ( template_name )
      if not _serializers :
              pass
 class ChoiceInput ( SubWidget ) :
               if var . startswith ( '_(' ) and var . endswith ( ')' ) :
 while escaped or ch != ']' :
 return zbuf . getvalue ( )
    with self . _lock . writer ( ) :
   def reload ( self ) :
      return not ( v is False or v is None or v == '' )
 PREV , NEXT , KEY , RESULT = 0 , 1 , 2 , 3
 from django . db import models , router
 return '\n' . join ( statements )
 handler . startElement ( "rss" , self . rss_attributes ( ) )
 from django . template . loader import get_template
    return self . _changed_data
   def handle_app_config ( self , app_config , ** options ) :
 self . waiting_writers -= 1
 return j
   class BaseConverter ( object ) :
              if primary_keys :
              return f
     parent = ( object , )
  except AttributeError :
               warnings . warn ( "OptionParser usage for Django management commands "  "is deprecated, use ArgumentParser instead" ,  RemovedInDjango20Warning )
              self . _update_errors ( e )
 import datetime
   def empty_variable ( self , token ) :
  ISO_INPUT_FORMATS = {  'DATE_INPUT_FORMATS' : ( '%Y-%m-%d' , ) ,  'TIME_INPUT_FORMATS' : ( '%H:%M:%S' , '%H:%M:%S.%f' , '%H:%M' ) ,  'DATETIME_INPUT_FORMATS' : (  '%Y-%m-%d %H:%M:%S' ,  '%Y-%m-%d %H:%M:%S.%f' ,  '%Y-%m-%d %H:%M' ,  '%Y-%m-%d'  ) ,  }
  resolved_kwargs = dict ( ( k , v . resolve ( context ) ) for k , v in self . kwargs . items ( ) )
                  p . feed ( data )
  return result
          cleaned_line = comment_re . sub ( r"\1" , line ) . strip ( )
  else :
          objects = json . loads ( stream_or_string )
 self . pos += 1
 table = connections [ db ] . ops . quote_name ( self . _table )
   elif t . token_type == TOKEN_TEXT :
 self . size = len ( content )
              curr = ''
 return sys . modules [ name ]
 import io
  def __getattr__ ( self , real_name ) :
  in_tag = not in_tag
  for name , value in self . extra_headers . items ( ) :
              final_attrs [ 'checked' ] = 'checked'
 if ( obj . pk is None and hasattr ( Model , 'natural_key' ) and  hasattr ( Model . _default_manager , 'get_by_natural_key' ) ) :
              raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % ( migration_name , app_label ) )
 def safeseq ( value ) :
          six . reraise ( ValueError , ValueError ( "%r is not a valid date" % date ) , sys . exc_info ( ) [ 2 ] )
 found = True
 collect = [ ]
                      out . write ( blankout ( t . contents , 'B' ) )
              if self . active_writers == 0 and self . waiting_writers == 0 :
          super ( CheckboxChoiceInput , self ) . __init__ ( * args , ** kwargs )
   def add_root_elements ( self , handler ) :
                  token = "not in"
                  error_text = str ( e )
 validate_ipv4_address = RegexValidator ( ipv4_re , _ ( 'Enter a valid IPv4 address.' ) , 'invalid' )
     _illegal_formatting = re . compile ( r"((^|[^%])(%%)*%[sy])" )
 from django . core . mail . backends . base import BaseEmailBackend
 super ( IPAddressField , self ) . __init__ ( * args , ** kwargs )
 self . extra_context = kwargs . pop ( 'extra_context' , { } )
  except UnicodeDecodeError :
                  return language [ : p ] . lower ( ) + '_' + language [ p + 1 ] . upper ( ) + language [ p + 2 : ] . lower ( )
   return found
          if 'id' in self . attrs :
     def delete ( self , key , version = None ) :
              raise TypeError ( 'formfield_callback must be a function or callable' )
      pass
   elif cls . _delegate_bytes :
                      if sub_match :
  middle = '<a href="%s"%s>%s</a>' % ( url , nofollow_attr , trimmed )
  except ( ValueError , TypeError ) :
  try :
 base_path = abspathu ( base )
 from django . utils import six
              raise TemplateSyntaxError ( "'for' tag received an invalid argument:"  " %s" % token . contents )
 from django . utils . safestring import mark_safe
              self . file . __exit__ ( exc , value , tb )
              return [ ( k , self [ k ] ) for k in self . keyOrder ]
  else :
 db = router . db_for_write ( self . cache_model_class )
  else :
     loggers = config . get ( 'loggers' , EMPTY_DICT )
               for middleware_method in self . _response_middleware :
 from django . template . defaultfilters import date
 default_error_messages = {  'list' : _ ( 'Enter a list of values.' ) ,  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the'  ' available choices.' ) ,  'invalid_pk_value' : _ ( '"%(pk)s" is not a valid value for a primary key.' )  }
  style = dummy ( )
          if instance is None :
              self . attrs = { }
              return self . empty_value
 output , hidden_fields = [ ] , [ ]
 return range ( 1 , self . num_pages + 1 )
               attrs . update ( { 'maxlength' : str ( self . max_length ) } )
 self . remaining -= len ( result )
 requires_system_checks = False
              et , ev , tb = sys . exc_info ( )
 self . translate = False
    @ register . tag
          if site in sites2 :
              try :
 if doublecolon_start == - 1 :
      setattr ( Module_six_moves_urllib_error , attr . name , attr )
              deactivate ( )
          return { }
 return value . ljust ( int ( arg ) )
    if six . PY3 :
               self . __dict__ [ "_wrapped" ] = value
   @ register ( Tags . compatibility )
    def _has_expired ( self , key ) :
 from django . utils import formats
      kwargs [ 'strm' ] = kwargs . pop ( 'stream' )
 try :
   return fk
 from django . utils import six
  return super ( FileField , self ) . clean ( data )
 if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
 data = { }
 assert iterations > 0
 bf = self [ name ]
  except smtplib . SMTPException :
  del form . cleaned_data [ field ]
 self . _producer = [ ]
  output . append ( widget . render ( name + '_%s' % i , widget_value , final_attrs ) )
  else :
                      try :
 all_date_checks = all_date_checks . union ( set ( date_checks ) )
   logger . error ( 'Internal Server Error: %s' , request . path ,  exc_info = exc_info ,  extra = {  'status_code' : 500 ,  'request' : request  }  )
    def __call__ ( self , value ) :
 parser . add_argument ( '--addrport' , default = '' ,  help = 'Port number or ipaddr:port to run the server on.' )
 return self . file
 return str ( dict ( self . items ( ) ) )
                   self . _files . appendlist (  force_text ( old_field_name , self . _encoding , errors = 'replace' ) ,  file_obj )
          self . _archive = tarfile . open ( file )
  from django . core . management . base import BaseCommand , CommandError
 output . append ( format_html ( self . inner_html , choice_value = choice_value ,  sub_widgets = sub_ul_renderer . render ( ) ) )
 if isinstance ( file , six . string_types ) :
 self . kwargs = kwargs
                  display_url = url
   __all__ = ( 'BaseFormSet' , 'formset_factory' , 'all_valid' )
 return value and value [ 0 ] . upper ( ) + value [ 1 : ]
 code = 'invalid'
 exp = pickle . load ( f )
 yield buf . read ( )
  requires_system_checks = False
   else :
  else :
 if value in self . empty_values :
  try :
      m = IDENTIFIER . match ( s )
  elif ':' not in middle and simple_email_re . match ( middle ) :
   def get ( self , key , default = None ) :
 parser . delete_first_token ( )
              if field . widget . needs_multipart_form :
     class RadioChoiceInput ( ChoiceInput ) :
 counters [ i ] += chunk_length
 if sys . version_info [ 1 ] <= 1 :
 def content ( self ) :
                                      chunk = base64 . b64decode ( chunk )
  from django . forms . widgets import Widget , Select
 with io . open ( pofile , 'w' , encoding = 'utf-8' ) as fp :
  if getattr ( ev , 'filename' , None ) is None :
    def gettext ( message ) :
            obj = form . save ( commit = False )
  def __init__ ( self , limit_value ) :
  self . cdata_tag = tag . lower ( )
   accept = request . META . get ( 'HTTP_ACCEPT_LANGUAGE' , '' )
 for v in self . validators :
                   current_len += 1
  else :
 return
 from django . utils . deconstruct import deconstructible
              return list ( self . itervalues ( ) )
 found = False
 if 'id' in self . attrs :
  for template_dir in template_dirs :
              cls . __dispatch = { }
 value = converter ( suffix )
              return
   directory_created [ app_label ] = True
              return path . split ( '\\' , 1 )
from __future__ import unicode_literals
    __class__ = property ( new_method_proxy ( operator . attrgetter ( "__class__" ) ) )
  with context . push ( var = output ) :
   def _html_output ( self , normal_row , error_row , row_ender , help_text_html , errors_on_separate_row ) :
     def get_language_from_request ( request , check_path = False ) :
  connection = connections [ options [ 'database' ] ]
 def streaming_content ( self ) :
   @ python_2_unicode_compatible
  return '%s %s' % ( self . f ( ) , self . a ( ) )
  return False
              try :
      renderer = CheckboxFieldRenderer
 binary_type = str
  return [ source [ 0 ] ] , [ params ]
          return ''
           name , val = forbid_multi_line_headers ( name , val , 'ascii' )
                  field_params [ 'db_column' ] = col_name
          return repr ( list ( self ) )
   def merge ( self , other ) :
              return Context ( context )
              from django . conf import settings
           args = token . split_contents ( )
                      curs . execute ( statement )
 day_of_year = self . z ( )
 self . field = field
                          raise
   def __str__ ( self ) :
 from django . utils . ipv6 import is_valid_ipv6_address
    class SyndicationFeed ( object ) :
          self . context . pop ( )
   if timeout > 2592000 :
  else :
       class LazyStream ( six . Iterator ) :
 del cmd_options [ 'args' ]
  def __init__ ( self , * args , ** kwargs ) :
              return ( t [ 0 ] . lower ( ) , True )
          encoding = locale . getdefaultlocale ( ) [ 1 ] or 'ascii'
 raise
      @ register . filter ( "timesince" , is_safe = False )
                  last_row = output [ - 1 ]
   os . rename ( old_file_name , new_file_name )
   def __iter__ ( self ) :
 return '%02d' % self . data . day
                  six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
  def add_arguments ( self , parser ) :
                  handler . addQuickElement ( "email" , self . feed [ 'author_email' ] )
              data [ f . name ] = f . value_from_object ( instance )
              if e . args [ 0 ] not in not_found :
              if not app_labels :
 if nodelist_empty is None :
     super ( SimpleTemplateResponse , self ) . __init__ ( '' , content_type , status )
  return lazy ( func , * resultclasses ) ( * args , ** kwargs )
 try :
 if language_code not in self . _namespace_dict :
                  output . append ( app_output )
 obj_pk = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value ) . pk
 for refto , refs in references . items ( ) :
  if template_tuple is TemplateDoesNotExist :
                          idx = m . groups ( ) [ 0 ]
                              if not hasattr ( e , 'django_template_source' ) :
  return _wrapped_view
          from django . conf import settings
          provided = list ( provided )
                  raise ValidationError (  _ ( 'ManagementForm data is missing or has been tampered with' ) ,  code = 'missing_management_form' ,  )
 while rbp < self . current_token . lbp :
 _format_modules_cache = { }
 start_ipython ( argv = [ ] )
      status_code = 304
 all_locales = map ( os . path . basename , locale_dirs )
  file_move_safe ( tmp_path , fname , allow_overwrite = True )
                  self . waiting_readers += 1
          as_bytes = as_string
                          loaded_objects_in_fixture += 1
          paras = [ '<p>%s</p>' % p . replace ( '\n' , '<br />' ) for p in paras ]
              self . _caches . caches = { }
                  return dict_ . getlist ( key )
     class OrderedSet ( object ) :
  _serializers = { }
                  if not token . contents :
 attrs = dict ( self . attrs , ** kwargs )
              frame = sys . _getframe ( 1 )
      try :
 from django . utils . functional import curry , Promise
  pofile = os . path . join ( basedir , '%s.po' % str ( self . domain ) )
              subcommand = 'help'
   def extract ( self , to_path ) :
                      self . stdout . write ( errors )
    def __iter__ ( self ) :
              handler . addQuickElement ( "summary" , item [ 'description' ] , { "type" : "html" } )
          if name not in data :
 if file_ :
 if lang_code not in _supported and replacement in _supported :
              words [ i ] = mark_safe ( word )
 dictConfigClass ( config ) . configure ( )
  register = Library ( )
 from django . utils . dates import MONTHS
               if id_ :
 for template_name in template_name_list :
 if custom_sql :
 register = registry . register
 DEFAULT_PALETTE = DARK_PALETTE
      compare = lambda self , a , b : a > b
    def _is_expired ( self , f ) :
 file . seek ( 0 )
 self . old_timezone = getattr ( _active , 'value' , None )
 kwargs_safe = dict ( ( k , conditional_escape ( v ) ) for ( k , v ) in six . iteritems ( kwargs ) )
  except ValidationError :
  fixture_files_in_dir = [ ]
                  pass
      _dec . _decorated_function = getattr ( func , '_decorated_function' , func )
  return val
   def P ( self ) :
              fixture_dirs = [ os . path . dirname ( fixture_name ) ]
 if not buf :
          if value is None :
     if not url_info . netloc and url_info . scheme :
  continue
  else :
                   try :
                  scheme , netloc , path , query , fragment = urlsplit ( value )
  if errors :
 for f in opts . local_fields :
 apps = { }
 import cgi
            self . token_type , self . contents = token_type , contents
 subject = self . subject
 renamed = False
  import os
  return attr
           return timezone . zone
  tzinfo = kw . pop ( 'tzinfo' )
          _load_serializers ( )
  def __init__ ( self , required = True , widget = None , label = None , initial = None ,  help_text = '' , error_messages = None , show_hidden_initial = False ,  validators = [ ] , localize = False , label_suffix = None ) :
  if self . verbosity >= 2 :
 if in_tag and token_string . startswith ( BLOCK_TAG_START ) :
 return chunk [ : end ]
      help = "Deprecated - use 'migrate' instead."
   if self . verbosity >= 1 :
 if is_compressed :
   def handle_field ( self , obj , field ) :
              targets = executor . loader . graph . leaf_nodes ( )
  import warnings
  except ( TypeError , VariableDoesNotExist ) :
   def value_from_datadict ( self , data , files , name ) :
   def _isdst ( self , dt ) :
 self . isolated_context = kwargs . pop ( 'isolated_context' , False )
        @ register . filter ( "escape" , is_safe = True )
 if re . search ( '^%s%s' % ( prefix_norm , pattern ) , candidate_pat % candidate_subs , re . UNICODE ) :
              if not hasattr ( e , 'django_template_source' ) :
 self . keep_pot = options . get ( 'keep_pot' )
 from django . utils . module_loading import import_string
 _len = len
   raise KeyError ( key )
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " OK" ) )
   mod_name , func_name = get_mod_func ( lookup_view )
              msg = ( "\nYou have installed Django's auth system, and "  "don't have any superusers defined.\nWould you like to create one "  "now? (yes/no): " )
     def parse_datetime ( value ) :
              newline = unicode ( "\n" )
 if filename :
          try :
          import flup
 timetuple = dt . timetuple ( )
 if num > self . _max_entries :
   def unclosed_block_tag ( self , parse_until ) :
 self . variable_name = variable_name
  if id_ :
 d = self . config [ m . groups ( ) [ 0 ] ]
   return mail . send ( )
 if app_label not in executor . loader . migrated_apps :
          module = _import_module ( self . mod )
     def _to_tuple ( s ) :
 if value and not self . valid_value ( value ) :
 def byte2int ( bs ) :
 def linebreaks_filter ( value , autoescape = None ) :
          self . _assert_mutable ( )
                  logger . removeHandler ( h )
     if line [ - 1 : ] in ( b'\n' , b'\r' ) :
   def __exit__ ( self , exc_type , exc_value , traceback ) :
    for app_config in apps . get_app_configs ( ) :
 for node in self :
              value = field . clean ( value )
    def patch_vary_headers ( response , newheaders ) :
      initLock = Lock ( )
              confirm = 'yes'
 try :
              return { }
           if ip_str . count ( '.' ) != 3 :
          if not self . _is_rendered :
  use_workaround = (  ( current_version < ( 2 , 7 , 3 ) ) or  ( current_version >= ( 3 , 0 ) and current_version < ( 3 , 2 , 3 ) )  )
              os . environ [ 'DJANGO_LIVE_TEST_SERVER_ADDRESS' ] = options [ 'liveserver' ]
   if TYPE == RAW :
 from django . utils . html import format_html
  except TemplateDoesNotExist :
 sys . stdout . close ( )
   def __repr__ ( self ) :
   dir_suffix = '%s*' % os . sep
   subcommands = list ( get_commands ( ) ) + [ 'help' ]
          return True
                  if hasattr ( middleware , 'process_request' ) :
 hard_coded_bullets_re = re . compile ( r'((?:<p>(?:%s).*?[a-zA-Z].*?</p>\s*)+)' % '|' . join ( re . escape ( x ) for x in DOTS ) , re . DOTALL )
 if retval :
 import logging
   if self . can_import_settings :
 default_error_messages = {  'invalid' : _ ( 'Enter a valid date.' ) ,  }
              return lambda x : x
   def __bool__ ( self ) :
  else :
 try :
from __future__ import unicode_literals
          result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
 unifunc . replace ( strfunc )
          self . template_cache = { }
       _version = "2.0"
      def __init__ ( self , media = None , ** kwargs ) :
              fixture_dirs = self . fixture_dirs
                              extra_params [ 'blank' ] = True
          return self
 cache [ mem_args ] = result
   def __str__ ( self ) :
          value = datetime_safe . new_date ( value )
              pass
 @ stringfilter
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
  l = - ( - dklen // hlen )
              res = ''
                          deps . append ( rel_model )
          TemplateLoader = import_string ( loader )
                         self . handle_file_complete ( old_field_name , counters )
 def cleaned_data ( self ) :
                       if transfer_encoding == 'base64' :
  if line :
                  self . registered_checks . append ( check )
          try :
  return self . _client
      class _MovedItems ( _LazyModule ) :
          self . limit_value = limit_value
          cookiedict [ key ] = c . get ( key ) . value
     class ConvertingList ( list ) :
                                       msg = "Could not decode base64 data: %r" % e
 state = self . state
  self . _post_render_callbacks = [ ]
                      dirs . remove ( dirname )
  def __init__ ( self , file = None , name = None , content_type = None , size = None , charset = None , content_type_extra = None ) :
  else :
    class UnrecognizedArchiveFormat ( ArchiveException ) :
 if end is not None :
    def render ( self , name , value , attrs = None ) :
          if hasattr ( self . file , 'size' ) :
 stream . unget ( chunk [ next : ] )
 return result
      ugettext = gettext
  var_name = bits [ 5 ]
  else :
 for field , messages in message . items ( ) :
from __future__ import absolute_import
 self . use_l10n = use_l10n
   for ( field_name , field_value ) in six . iteritems ( d [ "fields" ] ) :
                      for fmatch in constant_re . findall ( t . contents ) :
          return sorted ( value , key = Variable ( arg ) . resolve )
              return value . date ( )
 option = '--testrunner='
          return datetime . datetime . strptime ( force_str ( value ) , format ) . time ( )
  if os . path . exists ( pofile ) :
    filter_func . _filter_name = name
                  return func ( * self . __args , ** self . __kw )
    def __reduce__ ( self ) :
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
                          raise TemplateSyntaxError ( "Searching for value. "  "Unexpected end of string in column %d: %s" %  ( i , subject ) )
   def _has_changed ( self , initial , data ) :
 remaining_bits = bits [ 1 : ]
 offset = 60 * int ( tzinfo [ 1 : 3 ] ) + offset_mins
  import contextlib
   self . key_prefix = params . get ( 'KEY_PREFIX' , '' )
 @ stringfilter
   if item [ 'pubdate' ] is not None :
  return [ m2m_convert ( c ) for c in node . getElementsByTagName ( "object" ) ]
 default_error_messages = {  'invalid' : _ ( 'Enter a valid URL.' ) ,  }
 trans_real . _translations = { }
 response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
 def _get_width ( self ) :
 from django . core . exceptions import ImproperlyConfigured
                  attrs [ 'id' ] = self . html_initial_id
   def get_available_name ( self , name ) :
 _cached_filenames = [ ]
  elif hasattr ( pattern , '_callback' ) :
  else :
  elif message_context [ 0 ] == "'" :
  def to_python ( self , value ) :
                  if e . errno == errno . EEXIST :
   loopvars = re . split ( r' *, *' , ' ' . join ( bits [ 1 : in_index ] ) )
 from django . utils . module_loading import import_string
              result = self . configure_custom ( config )
      widget = NumberInput
                  values = [ ]
    def find_command ( cmd , path = None , pathext = None ) :
 if headerlist is not None :
 with self . _lock . writer ( ) :
          t = self . current_token
 if self . is_bound :
          text = '%s\x1b[%sm' % ( text or '' , RESET )
  return True
  self . run ( ** options )
  return [  Warning (  "BooleanField does not have a default value." ,  hint = ( "Django 1.6 changed the default value of BooleanField from False to None. "  "See https://docs.djangoproject.com/en/1.6/ref/models/fields/#booleanfield "  "for more information." ) ,  obj = field ,  id = '1_6.W002' ,  )  for field in problem_fields  ]
 import warnings
   def __repr__ ( self ) :
   except ValidationError :
  return '%s %s %s' % (   _ ( ', ' ) . join ( force_text ( i ) for i in list_ [ : - 1 ] ) ,  force_text ( last_word ) , force_text ( list_ [ - 1 ] ) )
 return b'\r\n' . join ( headers )
 import types
  self . _current [ field . name ] = [ m2m_value ( related )  for related in getattr ( obj , field . name ) . iterator ( ) ]
      import termios
   def create_variable_node ( self , contents ) :
              f . save_form_data ( instance , cleaned_data [ f . name ] )
 if len ( bits ) != 2 :
  except ( ValueError , TypeError ) :
                          if hasattr ( value , '__iter__' ) and not isinstance ( value , six . text_type ) :
 @ stringfilter
              new_conn_created = self . open ( )
      help = ( "Creates a Django project directory structure for the given "  "project name in the current directory or optionally in the "  "given directory." )
   class BadSerializer ( object ) :
              data = self . field . bound_data (  self . data , self . form . initial . get ( self . name , self . field . initial )  )
          return ModelChoiceIterator ( self )
 if isinstance ( item . get ( 'unique_id_is_permalink' ) , bool ) :
 __version__ = "1.6.1"
 self . allow_empty_file = kwargs . pop ( 'allow_empty_file' , False )
    @ property
  else :
              media = media + field . widget . media
          while self . tokens :
      try :
     ZERO = timedelta ( 0 )
  from django . utils import six
 from django . template . base import TemplateDoesNotExist
          raise TemplateSyntaxError ( "widthratio takes at least three arguments" )
    def __getitem__ ( self , name ) :
  except ( ValueError , TypeError , ValidationError ) :
 return data . get ( name , None )
              options , args = parser . parse_known_args ( self . argv [ 2 : ] )
  try :
  except OverflowError :
 if isinstance ( callback , functools . partial ) :
  except ValueError :
                          date_data = ( getattr ( form . cleaned_data [ unique_for ] , lookup ) , )
   class EmailBackend ( ConsoleEmailBackend ) :
    def __eq__ ( self , other ) :
 data_set = set ( force_text ( value ) for value in data )
   for lineno , line in enumerate ( content . splitlines ( True ) ) :
    def pop ( self , name ) :
    class TemplateLiteral ( Literal ) :
  else :
  from django . conf import settings
                  return ugettext_lazy ( value )
 import sys
   parts . append ( value )
 def __init__ ( self , text ) :
 self . verbosity = options . get ( 'verbosity' )
 from django . forms . fields import *
                  raise ValueError ( 'Unable to set formatter '  '%r: %s' % ( formatter , e ) )
              raise TypeError ( "update expected at most 1 arguments, got %d" % len ( args ) )
   if not new_method and old_method :
     def emit_post_migrate_signal ( created_models , verbosity , interactive , db ) :
   def render ( self ) :
              d = Decimal ( force_text ( float ( text ) ) )
          return ZERO
              ctx . update ( force_bytes ( value ) )
   @ cached_property
          key = self . make_key ( key , version = version )
                      netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' )
                  attrs [ 'id' ] = auto_id
 filename , display_url = cleanup_url ( url )
                  m2m_data [ field . name ] = self . _handle_m2m_field_node ( field_node , field )
    self . enter_command ( command , token )
          language_code = get_language ( )
   def convert ( self , number , from_digits , to_digits , sign ) :
          if str ( number ) [ 0 ] == sign :
              self . error_list = [ ]
                  if self . allow_files :
  old_path = path . join ( root , filename )
         def fix_location_header ( request , response ) :
     def resolve ( self , context ) :
 raise NotImplementedError ( 'subclasses of NoArgsCommand must provide a handle_noargs() method' )
              self . status_code = status
 from django . utils import six
   RUN_RELOADER = True
              initial_forms = self . initial_form_count ( )
 @ wraps ( func )
                  loaders . append ( loader )
 f = super ( ImageField , self ) . to_python ( data )
           unicode_value = force_text ( value , strings_only = True )
 if len ( args ) > 1 :
                                  with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :
 def data ( self ) :
              return self . filters [ filter_name ]
                  declared_fields . update ( base . declared_fields )
  from collections import OrderedDict
   copystat ( old_file_name , new_file_name )
    def inner_run ( self , * args , ** options ) :
              for obj in self . queryset . all ( ) :
  def __init__ ( self , stream , boundary ) :
   def __repr__ ( self ) :
 s = s . replace ( '\r' , '\\r' )
   elif bmatch :
  try :
  except InvalidTemplateLibrary as e :
 if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :
 for i , row in enumerate ( connection . introspection . get_table_description ( cursor , table_name ) ) :
          self . _encoding = value
 TOKEN_VAR = 1
 self . fixture_object_count = 0
              try :
     class SplitHiddenDateTimeWidget ( SplitDateTimeWidget ) :
 if self . _fname is None :
          if options [ 'verbosity' ] > 0 :
 return out
   except VariableDoesNotExist :
          path_info = get_bytes_from_wsgi ( environ , 'PATH_INFO' , '' )
   def unlock ( f ) :
 for key in self . bad_cookies :
  self . compression_formats = {  None : ( open , 'rb' ) ,  'gz' : ( gzip . GzipFile , 'rb' ) ,  'zip' : ( SingleZipReader , 'r' ) ,  }
  def to_python ( self , value ) :
          super ( MovedAttribute , self ) . __init__ ( name )
   class EmailBackend ( BaseEmailBackend ) :
  else :
  else :
                  self . first = False
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
                  c = self . resolve ( c )
          self . _read_started = True
          value = field . _get_val_from_obj ( obj )
                  final_output . extend ( connection . creation . sql_for_pending_references ( refto , style , pending_references ) )
   counters = [ 0 ] * len ( handlers )
  if interactive :
  else :
          self . _queryset = queryset
  if not url_fields [ 1 ] :
   templatetags_modules = _templatetags_modules
 if not file_name :
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
 subject = self . subject
 self . add_fields ( form , i )
                        open_tags = open_tags [ i + 1 : ]
                  with open ( filepath , 'rb' ) as fp :
                   return False
  elif simple_url_2_re . match ( middle ) :
      def __init__ ( self ) :
 from __future__ import unicode_literals
  if not hasattr ( values , '__len__' ) :
          self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false
 for message in messages :
  except ValueError :
 try :
              ret = fcntl . flock ( _fd ( f ) , fcntl . LOCK_UN )
              self . _cache [ key ] = pickled
   sign = '-' if offset < 0 else '+'
 valid_forms = [ form for form in self . forms if form . is_valid ( ) and form not in forms_to_delete ]
                  if not lookup :
   if cword == 1 :
 break
                      self . stdout . write ( "Installing %s fixture '%s' from %s." %  ( ser_fmt , fixture_name , humanize ( fixture_dir ) ) )
   def __enter__ ( self ) :
  output = [ ]
              return self . as_widget ( ) + self . as_hidden ( only_initial = True )
  except ImportError :
              warnings . warn ( "``--natural`` is deprecated; use ``--natural-foreign`` instead." ,  RemovedInDjango19Warning )
 if ch not in ( '<' , '=' ) :
 emit_pre_migrate_signal ( create_models , self . verbosity , self . interactive , connection . alias )
     @ deconstructible
          return not bool ( self . option_list )
 def firstof ( parser , token ) :
 if template_source_loaders is None :
    if six . PY3 :
   gettempdir = tempfile . gettempdir
 if os . path . exists ( django_po ) :
          ipv4_unpacked = _unpack_ipv4 ( ip_str )
  def __deepcopy__ ( self , memo ) :
          return self . position
 for bit in tag_re . split ( self . template_string ) :
                  error_messages = opts . error_messages [ NON_FIELD_ERRORS ]
          return self . __name
              return [ first_item ] , True
    def parse ( self ) :
   def s ( self ) :
 background = dict ( ( color_names [ x ] , '4%s' % x ) for x in range ( 8 ) )
   else :
 quit_command = 'CTRL-BREAK' if sys . platform == 'win32' else 'CONTROL-C'
 from django . http . utils import fix_location_header , conditional_content_removal
 for name , tok in lexer . lex ( js ) :
 PATTERN = """     classdef< 'class' any+ ':'               suite< any*                      funcdef< 'def' unifunc='__unicode__'                               parameters< '(' NAME ')' > any+ >                      any* > >     """
 self . stdout . write ( "Rendering %s template files with "  "filenames: %s\n" %  ( app_or_project , ', ' . join ( extra_files ) ) )
    class FileUploadHandler ( object ) :
   def run ( self , ** options ) :
   else :
    lexer = JsLexer ( )
   except GeneratorExit :
   return cls
   def __eq__ ( self , other ) :
                      line = buffer_ + line
          raise ValueError ( "Invalid timezone: %r" % timezone )
          self . new_objects = [ ]
 if getattr ( self , '_client' , None ) is None :
 from django . utils . deprecation import RemovedInDjango19Warning
          output = [ ]
    sign , digits , exponent = d . quantize ( exp , ROUND_HALF_UP ,  Context ( prec = prec ) ) . as_tuple ( )
           indent = self . options . get ( "indent" )
   return func ( * args , ** kwargs )
              i += 1
  else :
              super ( CommandParser , self ) . error ( message )
  elif total_forms > self . max_num >= 0 :
  arg = args [ 1 ]
      help = ( "Runs over the entire source tree of the current directory and "  "pulls out all strings marked for translation. It creates (or updates) a message "  "file in the conf/locale (in the django tree) or locale (for projects and "  "applications) directory.\n\nYou must run this command with one of either the "  "--locale, --exclude or --all options." )
   return out
                          pop_context = True
                          out . write ( blankout ( p , 'F' ) )
          return '\n' . join ( '* %s' % e for e in self )
  return self . field . prepare_value ( data )
 return getattr ( _urlconfs , "value" , default )
 six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
          return value
  if filename . endswith ( extensions ) or filename in extra_files :
 param = elt [ 1 ]
              raise TemplateSyntaxError ( "back called without some previous "  "parsing" )
  else :
  self . serialization_formats = serializers . get_public_serializer_formats ( )
  import re
                 Image . open ( file ) . verify ( )
          parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
                      setattr ( base , old_method_name , wrapper ( new_method ) )
 if kwarg :
  return self . nodelist . render ( new_context )
  def handle ( self , ** options ) :
 from django . core . exceptions import DisallowedRedirect
   def __repr__ ( self ) :
   domain , port = split_domain_port ( host )
 if inplural :
  translation = self . _new_gnu_trans ( localedir , use_null_fallback )
 from django . utils . translation import get_language
                      i = open_tags . index ( tagname )
  else :
    if ns_pattern :
                  clean_data . append ( field . clean ( field_value ) )
 migration . merged_operations = [ ]
   def handle_data ( self , d ) :
                  new_mod = name
   def __iter__ ( self ) :
              return data
   @ property
 if html_message :
    class DefaultStorage ( LazyObject ) :
 from django . utils . functional import allow_lazy , SimpleLazyObject
   return str ( major + sub )
     def to_locale ( language , to_lower = False ) :
   def _iteritems ( self ) :
 if hasattr ( os , 'utime' ) :
                  return None
                if isinstance ( content , EmailMessage ) :
              if callable ( name ) :
  if len ( initial ) != len ( data ) :
 stamp = time . mktime ( tt )
import warnings
 if refto in seen_models :
    else :
  except UnicodeDecodeError :
   POST = property ( _get_post , _set_post )
              encoding = self . encoding or settings . DEFAULT_CHARSET
 def errors ( self ) :
   delta = ( d - now ) if reversed else ( now - d )
  week_number = None
 try :
                              child_loggers . append ( existing [ i ] )
              handler = self . get_handler ( * args , ** options )
              handler . addQuickElement ( "category" , "" , { "term" : cat } )
 str_number = six . text_type ( number )
  if not dictionary :
    ext = self . splitext ( guessed_filename ) [ 1 ]
  def render ( self , context ) :
  if all_issues :
   def strip_spaces_between_tags ( value ) :
              widget = self . field . widget
              self . connection . sendmail ( from_email , recipients , message . as_bytes ( ) )
 args = [  'xgettext' ,  '-d' , domain ,  '--language=Python' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=ugettext_noop' ,  '--keyword=ugettext_lazy' ,  '--keyword=ungettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--keyword=pgettext_lazy:1c,2' ,  '--keyword=npgettext_lazy:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
              self . stdout . write ( msg )
      compare = lambda self , a , b : a > b
              try :
              year_val , month_val , day_val = value . year , value . month , value . day
  for base in inspect . getmro ( new_class ) :
          format = options . get ( 'format' )
  except ValueError :
    for p in path :
 use_null_fallback = True
                      if plan_node not in shown and plan_node [ 0 ] == app_name :
 __dispatch = None
   self . _post . appendlist ( field_name ,  force_text ( data , encoding , errors = 'replace' ) )
      replaces = [ ]
      choice_input_class = CheckboxChoiceInput
 try :
   if six . PY3 :
  except OSError as e :
 return j
  else :
 conditions_nodelists = [ ( condition , nodelist ) ]
              return self
              return None
 from django . core . management . sql import sql_destroy_indexes
 return base64 . urlsafe_b64encode ( s ) . rstrip ( b'\n=' )
    def __iter__ ( self ) :
                          initial_value = initial_value ( )
  for path in format_module_path :
   used_name = the_path . split ( '/' ) [ - 1 ]
 if opts :
  return forms_valid and not self . non_form_errors ( )
           try :
 if quote_double_quotes :
                      content = token_string [ 2 : - 2 ] . strip ( )
 from django . apps import apps
                  if isinstance ( value , str ) :
  def _get_page_range ( self ) :
 from gzip import GzipFile
              taglib = bits [ - 1 ]
   else :
 self . files = files or { }
    class SuspiciousMultipartForm ( SuspiciousOperation ) :
          nm = Header ( nm , encoding ) . encode ( )
 field_output . append ( "%sNULL" % ( "NOT " if not f . null else "" ) )
          Context . __init__ ( self , dict_ , current_app = current_app ,  use_l10n = use_l10n , use_tz = use_tz )
    class BaseCache ( object ) :
              nesting += 1
  except Exception :
                       value = value . decode ( charset )
 self . _add_local_translations ( )
    add_move ( MovedModule ( "_dummy_thread" , "dummy_thread" ) )
      allow_multiple_selected = True
              return smart_text ( token )
   if field not in self . fields :
              memo = { }
      import pickle
   if self . can_delete :
                  digit = x % len ( to_digits )
          if hasattr ( value , '_meta' ) :
          self . format_string = format_string
 from django . conf import settings
  template_source_loaders = None
          try :
          best_doublecolon_end = ( best_doublecolon_start +  best_doublecolon_len )
   def rfc2822_date ( date ) :
 value = super ( IntegerField , self ) . to_python ( value )
   def __getstate__ ( self ) :
          super ( MultiValueDict , self ) . __setitem__ ( key , list_ )
 for attr in _moved_attributes :
   if fset is not None :
      def get_urlconf ( default = None ) :
               urlconf_repr = '<%s list>' % self . urlconf_name [ 0 ] . __class__ . __name__
 context_extras [ 'LANGUAGE_BIDI' ] = translation . get_language_bidi ( )
  return False
          data = obj_dict . pop ( '_data' , { } )
 match = _html_parser . endendtag . search ( rawdata , i + 1 )
  app_list [ app_config ] = None
  handlers = config . get ( 'handlers' , None )
 try :
          evens = sum ( int ( c ) for c in candidate [ - 1 : : - 2 ] )
 final_output . extend ( alter_sql )
    class MultiValueDict ( dict ) :
              title = list_ [ i ]
                  try :
  else :
           if initial is not None :
          return self . value
                  exclude . append ( f . name )
 from django . core . exceptions import SuspiciousMultipartForm
   class ContextPopException ( Exception ) :
      status_code = 404
 self . stdout . flush ( )
 max_width = int ( self . max_width . resolve ( context ) )
  return IfNode ( conditions_nodelists )
 def get_callable ( lookup_view , can_fail = False ) :
 from django . core . handlers . wsgi import WSGIHandler
   def get_wsgi_application ( ) :
          return import_string ( app_path )
  try :
  requires_system_checks = False
   if hasattr ( error , 'error_dict' ) :
 from django . conf import settings
  if not settings . DEBUG and not settings . ALLOWED_HOSTS :
 pluralmatch = plural_re . match ( t . contents )
  try :
 for opname , opfunc in convert [ root ] :
 extensions = options . get ( 'extensions' )
 import gettext as gettext_module
                      new_result . append ( item + i_item )
          raise TemplateSyntaxError ( "'regroup' tag takes five arguments" )
          return ''
    def get_language ( ) :
  except IndexError :
   yield '%s\n' % line [ : space - 1 ]
   all_models = [  ( app_config . label ,  router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config . label in app_labels  ]
              self . error_class = 'errorlist {}' . format ( error_class )
          output . extend ( custom_sql_for_model ( model , style , connection ) )
   def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :
  try :
          self . tags . update ( lib . tags )
  return ' ' . join ( extra_classes )
          if self . language is not None :
  def add_arguments ( self , parser ) :
  def add_arguments ( self , parser ) :
              if module_has_submodule ( app_config . module , "management" ) :
   except KeyError :
          if not _cookie_encodes_correctly :
  return self . _files
              self . _max_entries = int ( max_entries )
                          raise KeyError ( 'Your dictionary lacks key \'%s\'. '  'Please provide it, because it is required to '  'determine whether string is singular or plural.'  % number )
 if not path_info :
 try :
          for loc in locales :
 length = int ( num )
 index = data . find ( self . _boundary )
              value = values . get ( value . lower ( ) , value )
     class RssFeed ( SyndicationFeed ) :
                      locale_dir = None
 self . _errors = [ ]
              return self . data . hour - 12
 DEFAULT_PORT = "8000"
  data_value = data if data is not None else ''
                  request_middleware . append ( mw_instance . process_request )
      def __init__ ( self , content ) :
 parser . delete_first_token ( )
              contents = format_html ( '{0}{1}' , contents , label_suffix )
          if not self . _mutable :
  migration_string = writer . as_string ( )
          return fastcgi_help ( "Invalid combination of host, port, socket." )
  return default
 msgattrib_options = [ '--no-obsolete' ]
 memo [ id ( self ) ] = result
          return self . number < self . paginator . num_pages
                              raise VariableDoesNotExist ( "Failed lookup for key "  "[%s] in %r" ,  ( bit , current ) )
              table_names = [ ]
 for name in MEDIA_TYPES :
          if params [ 0 ] == 'context' :
  import socket
 return datetime . time ( ** kw )
              self . instance . validate_unique ( exclude = exclude )
  try :
 if self . takes_context :
  except ImportError :
          output = [ ]
                      attrvalue = None
          arg = int ( arg )
      if defaults is not None :
      try :
 for w in self . widgets :
 def is_hidden ( self ) :
   @ property
  use_natural_foreign_keys = options . get ( 'use_natural_foreign_keys' ) or use_natural_keys
      def inner ( self , * args ) :
  _mtimes = { }
   def __dir__ ( self ) :
 _active . value = gettext_module . NullTranslations ( )
          if proto >= 2 :
 def __init__ ( self , regex ) :
                          description = "The '%s' function" % receiver . __name__
 __init__ = type . __init__
                      biggest_number = 1
   def __str__ ( self ) :
                          filemsg = 'file %s, ' % origin
          key_prefix = settings . CACHE_MIDDLEWARE_KEY_PREFIX
   def path ( self , name ) :
 try :
                  if settings . USE_L10N :
  return force_text ( url )
 default_error_messages = {  'invalid' : _ ( 'Enter a whole number.' ) ,  }
             cache_key += '.%s' % getattr ( request , 'LANGUAGE_CODE' , get_language ( ) )
      def __init__ ( self , * args , ** kwargs ) :
   def dictConfig ( config ) :
  from django . conf import settings
  url = quote ( url , safe = b'!*\'();:@&=+$,/?#[]~' )
 parser . delete_first_token ( )
      _prefixes = local ( )
  except StopFutureHandlers :
 return response
   @ property
                if comment_lineno_cache is not None :
 return re . sub ( r'(?u)[^-\w.]' , '' , s )
   if ( domain_part not in self . domain_whitelist and  not self . validate_domain_part ( domain_part ) ) :
   def __repr__ ( self ) :
 if not self . activated :
          self . id = Tok . num
              return '%s=%s' % ( t [ 0 ] , t [ 1 ] )
 if len ( bits ) >= 2 and bits [ - 2 ] == 'as' :
              yield key
 def fset ( instance , value , name = fset . __name__ ) :
   def utcoffset ( self , dt ) :
          _ExpatParser . reset ( self )
     def Deserializer ( stream_or_string , ** options ) :
 return '{%s}' % ', ' . join ( '%r: %r' % ( k , v ) for k , v in six . iteritems ( self ) )
 result = factory ( ** kwargs )
   def slugify ( value ) :
 remaining_bits = bits [ 2 : ]
  return cls
  else :
     if self . __language == settings . LANGUAGE_CODE or self . __language == "en-us" :
   return value [ slice ( * bits ) ]
              raise self . warning
 return super ( TimestampSigner , self ) . sign ( value )
 self . month_none_value = self . none_value
 def callback ( self ) :
          if name . lower ( ) in ADDRESS_HEADERS :
 end_text_pos = 0
  elif not isinstance ( file_name , six . string_types ) and is_iterable ( file_name ) :
 expires = row [ 2 ]
 month = months [ date . month - 1 ]
 from django . utils . encoding import force_text
                handle_app = self . handle_app
 if hasattr ( timezone , 'localize' ) :
 use_threading = connection . features . test_db_allows_multiple_connections
              error_msg = "Your TEMPLATE_DIRS setting is empty. Change it to point to at least one template directory."
              return ''
 if isinstance ( s , Promise ) :
             return self . copy ( )
 if simple_url_re . match ( middle ) :
      has_old_option = hasattr ( self , 'requires_model_validation' )
              mtime -= stat . st_ctime
          _active . value = pytz . timezone ( timezone )
         while True :
   class Serializer ( base . Serializer ) :
  safe_input = isinstance ( text , SafeData )
 shutil . move ( the_path , guessed_path )
 return force_text ( unquote ( force_str ( quoted_url ) ) )
  return copy . deepcopy ( self . _wrapped , memo )
  if isinstance ( path , six . string_types ) :
    def delete_many ( self , keys , version = None ) :
 import keyword
 if not self . is_bound :
          key = self . make_key ( key , version = version )
              pass
                  args = ( )
          args = ( )
   self . extra_context = extra_context or { }
      def callable ( obj ) :
                  i = 366
    elif version [ 3 ] != 'final' :
  CONVERT_PATTERN = re . compile ( r'^(?P<prefix>[a-z]+)://(?P<suffix>.*)$' )
          pieces = [ ]
 self . deactivate = deactivate
   def css_classes ( self , extra_classes = None ) :
 html = endtag_re . sub ( '' , html )
   def _format_value ( self , value ) :
 import os
 mail . mail_admins ( subject , message , fail_silently = True ,  html_message = html_message ,  connection = self . connection ( ) )
 domain = domain . encode ( 'idna' ) . decode ( 'ascii' )
          class HTMLParser ( _html_parser . HTMLParser ) :
  def get_template_sources ( self , template_name , template_dirs = None ) :
                      migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
   if indent :
              raise ImproperlyConfigured ( 'Could not write to directory: %s' % self . file_path )
    for handler in handlers :
   def handle_label ( self , label , ** options ) :
  while start < end :
   def filter ( self , record ) :
 return mark_safe ( linebreaks ( value , autoescape ) )
          try :
    @ python_2_unicode_compatible
 for dirpath , dirnames , filenames in os . walk ( root , topdown = True , followlinks = self . symlinks ) :
  WEEKDAYS_ABBR = {  0 : _ ( 'Mon' ) , 1 : _ ( 'Tue' ) , 2 : _ ( 'Wed' ) , 3 : _ ( 'Thu' ) , 4 : _ ( 'Fri' ) ,  5 : _ ( 'Sat' ) , 6 : _ ( 'Sun' )  }
  else :
  if is_aware ( date ) :
                   if key not in self :
     def infix ( bp , func ) :
  urlunquote_plus = allow_lazy ( urlunquote_plus , six . text_type )
 return cls ( file_dict [ 'filename' ] ,  file_dict [ 'content' ] ,  file_dict . get ( 'content-type' , 'text/plain' ) )
 if autoescape :
 decompress = True
 self . size = size
       for app_config in apps . get_app_configs ( ) :
  full_statement . append ( ');' )
          return is_library_missing ( path )
   else :
          return self . mapping . get ( self . tagtype , '' )
   def __getitem__ ( self , key ) :
  with connection . cursor ( ) as cursor :
                  pickled = self . _cache [ key ]
           return [ etag_str ]
   except ValueError :
 tried_modules . append ( taglib_module )
              return super ( LocalTimezone , self ) . _isdst ( dt )
          kw . extend ( [ d . hour , d . minute , d . second , d . microsecond , d . tzinfo ] )
 if not self . connection :
 if language_code not in self . _regex_dict :
 propagate = config . get ( 'propagate' , None )
                  lookup_view = get_callable ( lookup_view , True )
  return value
 f . write ( pickle . dumps ( expiry , - 1 ) )
    @ register . filter
                              raise ValueError ( 'No handler found with '  'name %r' % name )
                  if not isinstance ( e , CommandError ) :
  output = self . handle ( * args , ** options )
  raise
  elif tzinfo is not None :
     class RadioFieldRenderer ( ChoiceFieldRenderer ) :
    def handle_inspection ( self , options ) :
 from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
  return ret
  from django . apps import apps
                  error_messages = self . fields [ field ] . error_messages
 for obj in queryset :
      if urlconf is None :
 id_ = final_attrs . get ( 'id' , None )
     def to_language ( locale ) :
 if top + self . orphans >= self . count :
                      date_value = datetime_safe . new_date ( date_value )
              getattr ( self , 'add_' + name ) ( media_attrs . get ( name , None ) )
     capfirst = lambda x : x and force_text ( x ) [ 0 ] . upper ( ) + force_text ( x ) [ 1 : ]
 MIMEMultipart . __init__ ( self , _subtype , boundary , _subparts , ** _params )
     if errors :
 if _time . daylight :
  else :
 from django . utils . six . moves import copyreg
 for app_label , app_migrations in changes . items ( ) :
          try :
    def contains ( source , inst ) :
          if value in self . empty_values :
 inhibit_post_migrate = options . get ( 'inhibit_post_migrate' , False )
 from django . utils . translation import templatize
   def full_clean ( self ) :
 is_required = False
 if len ( t ) == 2 :
   def _init_translation_catalog ( self ) :
  linebreaks = allow_lazy ( linebreaks , six . text_type )
 value = map ( force_text , value )
          parser . add_argument ( 'app_label' ,  help = 'App label of the application to squash migrations for.' )
 sys . stderr . close ( )
  else :
   def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :
  else :
      from django . conf . locale import LANG_INFO
   def as_text ( self ) :
    raise CommandError ( "couldn't handle %s template %s." %  ( self . app_or_project , template ) )
   self . _mutable = mutable
      setattr ( Module_six_moves_urllib_robotparser , attr . name , attr )
                      return ( 1 , 0 )
      rendering_attrs = SimpleTemplateResponse . rendering_attrs + [ '_request' , '_current_app' ]
              raise TemplateSyntaxError ( 'Unknown argument for %r tag: %r.' %  ( bits [ 0 ] , option ) )
 self . active_readers += t
  try :
 from django . utils . _os import npath , upath
   class DjangoRuntimeWarning ( RuntimeWarning ) :
 raise CommandError ( "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" % name_str )
 text = force_text ( text )
 mixed_subtype = 'mixed'
                  raise ImproperlyConfigured ( "Error importing template source loader %s - can't pass arguments to function-based loader." % loader )
 from django . contrib . auth import get_user_model
  sql , references = connection . creation . sql_create_model ( model , no_style ( ) , seen_models )
               yield parse_boundary_stream ( sub_stream , 1024 )
   end = kwargs . pop ( "end" , None )
  errors . extend ( e . error_list )
          path = str ( path )
 TOKEN_MAPPING = {  TOKEN_TEXT : 'Text' ,  TOKEN_VAR : 'Var' ,  TOKEN_BLOCK : 'Block' ,  TOKEN_COMMENT : 'Comment' ,  }
  if app_names :
   return str ( name ) , val
 from django . core . servers . basehttp import run , get_internal_wsgi_application
  else :
      input_type = 'text'
 for arg in argv [ 2 : ] :
          if child . nodeType == child . TEXT_NODE or child . nodeType == child . CDATA_SECTION_NODE :
    else :
 from django . utils import six
  except http_cookies . CookieError :
            basedirs = [ os . path . join ( os . path . dirname ( os . path . dirname ( __file__ ) ) ,  'conf' , 'locale' ) ,  'locale' ]
                       name = "_%d" % num_args
 return self . data . month
              yield ch , False
              usage = [  "" ,  "Type '%s help <subcommand>' for help on a specific subcommand." % self . prog_name ,  "" ,  "Available subcommands:" ,  ]
  except ImportError :
              self . _delete ( fname )
    def as_data ( self ) :
  else :
                  return True
 _add_doc ( u , """Text literal""" )
 with lock :
  else :
 self . view_name = ':' . join ( self . namespaces + [ view_path ] )
          for node in self . nodelist_loop :
          s = s [ : site ] + syear + s [ site + 4 : ]
  def __init__ ( self ) :
              value = [ ]
  else :
    else :
   def render ( self , context ) :
                  offset = - offset
 from django . core . checks . registry import registry
  if i >= self . initial_form_count ( ) and self . initial_extra :
  p = i
                   qs = f . value_from_object ( instance )
   def _mark_post_parse_error ( self ) :
       handlers = config . get ( 'handlers' , EMPTY_DICT )
     def new_date ( d ) :
 parser . skip_past ( 'endcomment' )
          wsgi_opts [ 'bindAddress' ] = None
    potfiles = [ ]
 text = force_text ( text )
     return Operator
  return True
              ret = fcntl . flock ( _fd ( f ) , flags )
     def make_bytes ( self , value ) :
              self . addr = ''
  filenames = [ ]
    except IOError as e :
  if settings . USE_TZ :
              guid_attrs = { }
      buf = StreamingBuffer ( )
              name , ( value , params ) = _parse_header ( line )
                      app_configs = apps . get_app_configs ( )
 return '\n' . join ( statements )
 readlines = property ( lambda self : self . file . readlines )
    else :
  setattr ( cls , k , meth )
    def has_key ( self , key ) :
      pad = b'=' * ( - len ( s ) % 4 )
  if inverse_match is not None :
              self . _ordering = [ ]
   self . filters = filters
           l = len ( tokens )
 self . remove_potfiles ( )
 values = _itervalues
 raise NotImplementedError ( 'subclasses of Storage must provide an exists() method' )
          raise
 del bits [ : 3 ]
                  raise ValueError ( 'Unknown level: %r' % level )
  if self . field . cache_choices :
 for lineno , line in enumerate ( content . splitlines ( True ) ) :
   _js_escapes . update ( ( ord ( '%c' % z ) , '\\u%04X' % z ) for z in range ( 32 ) )
    def get_language_from_path ( request ) :
   if not args :
  else :
     html = { }
   @ content . setter
 defaults = {  'auto_id' : self . auto_id ,  'prefix' : self . add_prefix ( i ) ,  'error_class' : self . error_class ,  }
          self . loopvars , self . sequence = loopvars , sequence
  location = kwargs . pop ( 'LOCATION' , '' )
   while token . contents . startswith ( 'elif' ) :
                      self . stdout . write ( "\nCreated new merge migration %s" % writer . path )
                          return middleware . process_response ( request , response )
 super ( Command , self ) . handle ( ** options )
          if escaped :
     class SafeMIMEMultipart ( MIMEMixin , MIMEMultipart ) :
                  self . _closable_objects . append ( value )
         model_list = [ ]
          def dec ( func ) :
   def __str__ ( self ) :
              raise KeyError ( "Unknown language code %s." % lang_code )
          pass
   class ImageFile ( File ) :
  except ( ValueError , TypeError ) :
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
              value = ''
   def add_fields ( self , form , index ) :
 pflen = len ( prefixed )
   else :
 from django . apps import apps
              stream_class = StringIO if isinstance ( content , six . text_type ) else BytesIO
          ch = None
 if index < 0 :
 from django . utils import six
          return types . MethodType ( func , obj , obj . __class__ )
   is_reversed = bits [ - 1 ] == 'reversed'
 self . kwargs = kwargs
   def u ( self ) :
  kwargs = {  'form' : form ,  'formfield_callback' : formfield_callback ,  'formset' : formset ,  'extra' : extra ,  'can_delete' : can_delete ,  'can_order' : can_order ,  'fields' : fields ,  'exclude' : exclude ,  'min_num' : min_num ,  'max_num' : max_num ,  'widgets' : widgets ,  'validate_min' : validate_min ,  'validate_max' : validate_max ,  'localized_fields' : localized_fields ,  'labels' : labels ,  'help_texts' : help_texts ,  'error_messages' : error_messages ,  }
    _moved_attributes = [  MovedAttribute ( "cStringIO" , "cStringIO" , "io" , "StringIO" ) ,  MovedAttribute ( "filter" , "itertools" , "builtins" , "ifilter" , "filter" ) ,  MovedAttribute ( "filterfalse" , "itertools" , "itertools" , "ifilterfalse" , "filterfalse" ) ,  MovedAttribute ( "input" , "__builtin__" , "builtins" , "raw_input" , "input" ) ,  MovedAttribute ( "map" , "itertools" , "builtins" , "imap" , "map" ) ,  MovedAttribute ( "range" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "reload_module" , "__builtin__" , "imp" , "reload" ) ,  MovedAttribute ( "reduce" , "__builtin__" , "functools" ) ,  MovedAttribute ( "StringIO" , "StringIO" , "io" ) ,  MovedAttribute ( "UserString" , "UserString" , "collections" ) ,  MovedAttribute ( "xrange" , "__builtin__" , "builtins" , "xrange" , "range" ) ,  MovedAttribute ( "zip" , "itertools" , "builtins" , "izip" , "zip" ) ,  MovedAttribute ( "zip_longest" , "itertools" , "itertools" , "izip_longest" , "zip_longest" ) ,   MovedModule ( "builtins" , "__builtin__" ) ,  MovedModule ( "configparser" , "ConfigParser" ) ,  MovedModule ( "copyreg" , "copy_reg" ) ,  MovedModule ( "dbm_gnu" , "gdbm" , "dbm.gnu" ) ,  MovedModule ( "http_cookiejar" , "cookielib" , "http.cookiejar" ) ,  MovedModule ( "http_cookies" , "Cookie" , "http.cookies" ) ,  MovedModule ( "html_entities" , "htmlentitydefs" , "html.entities" ) ,  MovedModule ( "html_parser" , "HTMLParser" , "html.parser" ) ,  MovedModule ( "http_client" , "httplib" , "http.client" ) ,  MovedModule ( "email_mime_multipart" , "email.MIMEMultipart" , "email.mime.multipart" ) ,  MovedModule ( "email_mime_text" , "email.MIMEText" , "email.mime.text" ) ,  MovedModule ( "email_mime_base" , "email.MIMEBase" , "email.mime.base" ) ,  MovedModule ( "BaseHTTPServer" , "BaseHTTPServer" , "http.server" ) ,  MovedModule ( "CGIHTTPServer" , "CGIHTTPServer" , "http.server" ) ,  MovedModule ( "SimpleHTTPServer" , "SimpleHTTPServer" , "http.server" ) ,  MovedModule ( "cPickle" , "cPickle" , "pickle" ) ,  MovedModule ( "queue" , "Queue" ) ,  MovedModule ( "reprlib" , "repr" ) ,  MovedModule ( "socketserver" , "SocketServer" ) ,  MovedModule ( "_thread" , "thread" , "_thread" ) ,  MovedModule ( "tkinter" , "Tkinter" ) ,  MovedModule ( "tkinter_dialog" , "Dialog" , "tkinter.dialog" ) ,  MovedModule ( "tkinter_filedialog" , "FileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_scrolledtext" , "ScrolledText" , "tkinter.scrolledtext" ) ,  MovedModule ( "tkinter_simpledialog" , "SimpleDialog" , "tkinter.simpledialog" ) ,  MovedModule ( "tkinter_tix" , "Tix" , "tkinter.tix" ) ,  MovedModule ( "tkinter_ttk" , "ttk" , "tkinter.ttk" ) ,  MovedModule ( "tkinter_constants" , "Tkconstants" , "tkinter.constants" ) ,  MovedModule ( "tkinter_dnd" , "Tkdnd" , "tkinter.dnd" ) ,  MovedModule ( "tkinter_colorchooser" , "tkColorChooser" ,  "tkinter.colorchooser" ) ,  MovedModule ( "tkinter_commondialog" , "tkCommonDialog" ,  "tkinter.commondialog" ) ,  MovedModule ( "tkinter_tkfiledialog" , "tkFileDialog" , "tkinter.filedialog" ) ,  MovedModule ( "tkinter_font" , "tkFont" , "tkinter.font" ) ,  MovedModule ( "tkinter_messagebox" , "tkMessageBox" , "tkinter.messagebox" ) ,  MovedModule ( "tkinter_tksimpledialog" , "tkSimpleDialog" ,  "tkinter.simpledialog" ) ,  MovedModule ( "urllib_parse" , __name__ + ".moves.urllib_parse" , "urllib.parse" ) ,  MovedModule ( "urllib_error" , __name__ + ".moves.urllib_error" , "urllib.error" ) ,  MovedModule ( "urllib" , __name__ + ".moves.urllib" , __name__ + ".moves.urllib" ) ,  MovedModule ( "urllib_robotparser" , "robotparser" , "urllib.robotparser" ) ,  MovedModule ( "xmlrpc_client" , "xmlrpclib" , "xmlrpc.client" ) ,  MovedModule ( "xmlrpc_server" , "xmlrpclib" , "xmlrpc.server" ) ,  MovedModule ( "winreg" , "_winreg" ) ,  ]
                  pieces . append ( re_escaped . sub ( r'\1' , piece ) )
  headerlist . sort ( )
   exp = connections [ db ] . ops . value_to_db_datetime ( exp )
       if sys . version_info [ : 2 ] >= ( 3 , 3 ) :
 import traceback
 for func in self . response_fixes :
 if size :
  import base64
    def _createdir ( self ) :
   def handle_charref ( self , name ) :
 _func_code = "func_code"
 weight += 2
          self . file = file
                          self . configure_root ( root )
 connection = connections [ options . get ( 'database' , DEFAULT_DB_ALIAS ) ]
 if html_message :
 field_notes . append ( 'Field renamed because it was a Python reserved word.' )
 from django . db . backends . utils import typecast_timestamp
     def _has_changed ( self , initial , data ) :
 self . _read_started = False
               return
                  msg = "System check identified some issues:\n%s" % msg
 self . _pk_field = pk = self . model . _meta . pk
    @ register . filter ( "phone2numeric" , is_safe = True )
          if 'forloop' in context :
  elif ns not in app_list :
  from django . utils . deprecation import RemovedInDjango19Warning
  except Exception :
 statements = sql_destroy_indexes ( app_config , self . style , connection )
 help = ''
 BASE16_ALPHABET = '0123456789ABCDEF'
 self . tags = { }
  if i >= self . initial_form_count ( ) and not form . has_changed ( ) :
    return settings . LANGUAGE_CODE
  else :
   def _reset_dicts ( self , value = None ) :
                  raise CommandError (  "Multiple fixtures named '%s' in %s. Aborting." %  ( fixture_name , humanize ( fixture_dir ) ) )
 self . number = number
   @ property
              return True
     class TimestampSigner ( Signer ) :
          if self . _encoding is None :
import sys
          raise TypeError ( s )
    return out . getvalue ( )
              value = to_current_timezone ( value )
          try :
          try :
  if self . _should_delete_form ( form ) :
 key += kwd_mark
          if part in PALETTES :
 in_tag = False
          self . cmd = cmd
                  if isinstance ( arg , unicode ) :
 incomment = False
 self . msguniq_options = self . msguniq_options [ : ] + [ '--no-location' ]
 substitutions [ 'clear_template' ] = self . template_with_clear % substitutions
  def __init__ ( self , tokens ) :
 if hasattr ( _active , "value" ) :
 if output :
          self . cyclevars = cyclevars
          if attrs is not None :
    def file_move_safe ( old_file_name , new_file_name , chunk_size = 1024 * 64 , allow_overwrite = False ) :
               if hasattr ( base , 'declared_fields' ) :
 if opts . model is None :
  if record . exc_info :
 obj_dict [ '_data' ] = dict ( ( k , self . getlist ( k ) ) for k in self )
 def templatetag ( parser , token ) :
              kwargs [ 'help_text' ] = help_texts [ f . name ]
   return default_key_func
                              pass
   raise CommandError ( "Unknown serialization format: %s" % format )
 if len ( bits ) < 2 or bits [ - 2 ] != 'as' :
  except ( LookupError , ImportError ) as e :
  except LookupError :
  import datetime
                              return result
                  yield choice
   def validate_unique ( self ) :
 self . cleaned_data [ name ] = value
 def check_for_language ( lang_code ) :
          return not ( self == other )
              now = now . decode ( 'utf-8' )
  except ValueError :
 template , origin = find_template ( template_name , dirs )
 from django . utils import six
     def method_decorator ( decorator ) :
          try :
  try :
    except http . Http404 as e :
  return smart_text ( value )
 memo [ id ( self ) ] = obj
 self . help_text = help_text
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
 for medium in extend :
   if bf . label :
 import threading
  if max_value is not None :
          self . style = color_style ( )
              sys . stdout . write ( self . main_help_text ( ) + '\n' )
 MONTHS_3 = {  1 : _ ( 'jan' ) , 2 : _ ( 'feb' ) , 3 : _ ( 'mar' ) , 4 : _ ( 'apr' ) , 5 : _ ( 'may' ) , 6 : _ ( 'jun' ) ,  7 : _ ( 'jul' ) , 8 : _ ( 'aug' ) , 9 : _ ( 'sep' ) , 10 : _ ( 'oct' ) , 11 : _ ( 'nov' ) , 12 : _ ( 'dec' )  }
                      disposition = meta_data [ 'content-disposition' ] [ 1 ]
              content_length = 0
                  return kwargs
 from django . utils . text import get_valid_filename
              base = Media ( )
 for node in graph . leaf_nodes ( app_name ) :
          bad_serializer = BadSerializer ( exc )
 _file = os . fdopen ( fd , mode )
  super ( SimpleCookie , self ) . load ( rawdata )
 link_prev , link_next , key , result = link
 if not e . connection_reset :
  except OSError :
 if not hasattr ( mail , 'outbox' ) :
  return sample [ : 3 ] == b'\xef\xbb\xbf' or sample . startswith ( codecs . BOM_UTF16_LE ) or sample . startswith ( codecs . BOM_UTF16_BE )
 if o . microsecond :
    migrations_to_squash = [  executor . loader . get_migration ( al , mn )  for al , mn in executor . loader . graph . forwards_plan ( ( migration . app_label , migration . name ) )  if al == migration . app_label  ]
                  if isinstance ( attachment , MIMEBase ) :
   def __contains__ ( self , key ) :
  else :
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
              raise AttributeError ( "'%s' object has no attribute 'cleaned_data'" % self . __class__ . __name__ )
 from django . utils import six
              number = int ( number )
  self . pointer = self . backout . pop ( )
 nodelist_loop = parser . parse ( ( 'else' , end_tag ) )
  for field_node in node . getElementsByTagName ( "field" ) :
  else :
          raise DTDForbidden ( name , sysid , pubid )
  import os
    base2 = BaseConverter ( BASE2_ALPHABET )
    def localize ( value , use_l10n = None ) :
   self . _handler_class = None
  def add_arguments ( self , parser ) :
   try :
              f . required = False
 context_extras [ 'LANGUAGE_CODE' ] = translation . get_language ( )
                                  mode = 'wb' if isinstance ( chunk , bytes ) else 'wt'
 self . _empty = False
 if isinstance ( template_name , ( list , tuple ) ) :
                  widget = HiddenInput
 self . _closable_objects = [ ]
    def push ( self , name , block ) :
              bytes_read += len ( bytes )
  from django import http
 import os
 objects_in_fixture = 0
 from django . core . management . base import ( BaseCommand , CommandError ,  CommandParser , handle_default_options )
               for tablename in tablenames :
          self . nodelist = nodelist
              self . _client = self . _lib . Client ( self . _servers , pickleProtocol = pickle . HIGHEST_PROTOCOL )
 self . validate_name ( project_name , "project" )
 if relative_dir :
 id_ = final_attrs . get ( 'id' , None )
  self . error ( "bad end tag: %r" % ( rawdata [ i : j ] , ) )
   result = new_result
                      singular . append ( '%%(%s)s' % t . contents )
  for finder in sys . meta_path :
   if self . match is not None :
  else :
          if json . __version__ . split ( '.' ) >= [ '2' , '1' , '3' ] :
  sys . modules [ __name__ + ".moves.urllib_error" ] = sys . modules [ __name__ + ".moves.urllib.error" ] = Module_six_moves_urllib_error ( __name__ + ".moves.urllib.error" )
              inner_text . append ( child . data )
          filter_name = getattr ( func , '_filter_name' , None )
                              continue
          if value is None :
   def __bytes_cast ( self ) :
 self . value = set ( force_text ( v ) for v in self . value )
  elif common_prefix is None :
   def render_option ( self , selected_choices , option_value , option_label ) :
    elif safe_input :
      if self . verbosity >= 1 :
 result_args = [ [ ] ]
 s = s . replace ( '\n' , '\\n' )
          attrs [ 'localized_fields' ] = localized_fields
              django_po = os . path . join ( django_dir , 'conf' , 'locale' , locale , 'LC_MESSAGES' , '%s.po' % domain )
 LockFileEx . restype = BOOL
                  try :
 self . options = options
 self . settings_exception = None
 from django . utils import timezone
          self . sign = sign
                  result . append ( self . create_token ( bit , in_tag ) )
                return 0
              return ""
              yield obj
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to flush. Defaults to the "default" database.' )
   def path ( self , name ) :
          return yes
 self . can_write . release ( )
  def __init__ ( self , * args , ** kwargs ) :
              self . _request = datastructures . MergeDict ( self . POST , self . GET )
 if tag not in TemplateTagNode . mapping :
      class SafeMIMEMessage ( MIMEMixin , MIMEMessage ) :
      pass
  from collections import OrderedDict
  __all__ = [ 'SelectDateWidget' ]
   errors = [ ]
          file = open ( file_or_path , 'rb' )
      if response is None :
              return None
  def add_arguments ( self , parser ) :
 shutdown_message = options . get ( 'shutdown_message' , '' )
 return other in self . children
  def process_default ( self , event ) :
              raise OverflowError ( 'dklen too big' )
              created_models = [ ]
         ns_resolver = RegexURLResolver ( ns_pattern , resolver . url_patterns )
              for app_label in app_labels :
  except KeyError :
 from xml . dom import pulldom
 __Y2 = r'(?P<year>\d{2})'
 request = None
  return '%s%s' % ( ( '\x1b[%sm' % ';' . join ( code_list ) ) , text or '' )
          super ( Select , self ) . __init__ ( attrs )
 from django . utils . encoding import force_text , python_2_unicode_compatible
 self . error_class = error_class
 self . _leftover = b''
                   value = str ( Header ( value , 'utf-8' , maxlinelen = sys . maxsize ) . encode ( ) )
  result = self . stream . read ( size )
 paras = re . split ( '\n{2,}' , value )
                  pass
   self . _container = [ value ]
   _wrapped = None
  else :
 self . sysid = sysid
  from __future__ import unicode_literals
  else :
              self . __offset = offset
  except ImportError :
 return any ( ignore ( pattern ) for pattern in ignore_patterns )
           return datetime . utcnow ( ) . replace ( tzinfo = utc )
  thefile = '%s.py' % self . file
          return caches [ DEFAULT_CACHE_ALIAS ] != other
     def get_tag_uri ( url , date ) :
                          if self . match is None or self . match_re . search ( f ) :
 from django . utils . encoding import force_text , iri_to_uri
              daemonize = False
 link [ PREV ] = last
 os . dup2 ( si . fileno ( ) , sys . stdin . fileno ( ) )
   def start_object ( self , obj ) :
                          i += 1
  except ( ValueError , TypeError ) :
 from django . core . management . sql import sql_delete
           return timezone . tzname ( None )
      if not hasattr ( self , '_ordering' ) :
 if not squash :
              return force_text ( value )
  self . use_natural_foreign_keys = options . pop ( 'use_natural_foreign_keys' , False ) or self . use_natural_keys
    @ property
              return exit_code
  filter_raw_string = r""" ^(?P<constant>%(constant)s)| ^(?P<var>[%(var_chars)s]+|%(num)s)|  (?:\s*%(filter_sep)s\s*      (?P<filter_name>\w+)          (?:%(arg_sep)s              (?:               (?P<constant_arg>%(constant)s)|               (?P<var_arg>[%(var_chars)s]+|%(num)s)              )          )?  )""" % {  'constant' : constant_string ,  'num' : r'[-+\.]?\d[\d\.e]*' ,  'var_chars' : "\w\." ,  'filter_sep' : re . escape ( FILTER_SEPARATOR ) ,  'arg_sep' : re . escape ( FILTER_ARGUMENT_SEPARATOR ) ,  }
  words = allow_lazy ( words )
    return '' . join ( _generator ( ) )
              return 'StopUpload: Consume request data, then halt.'
   def add_blocks ( self , blocks ) :
 context . render_context . push ( )
              label_output = self . handle_label ( label , ** options )
 child_nodelists = ( 'nodelist' , )
          for i , line in enumerate ( lines ) :
   nodelist = parser . parse ( ( 'endfilter' , ) )
 value = self . _convert_to_charset ( value , 'latin-1' , mime_encode = True )
 UnlockFileEx = windll . kernel32 . UnlockFileEx
              if cnt and not cnt % grouping :
 self . var_name = var_name
   if not re . search ( r'^[_a-zA-Z]\w*$' , name ) :
 try :
      return getattr ( self , _assertRegex ) ( * args , ** kwargs )
 from django . utils . safestring import mark_safe , SafeData
 if not directory_created . get ( app_label , False ) :
 if "\n" in self . __starttag_text :
   def make_template_fragment_key ( fragment_name , vary_on = None ) :
              raise InputStreamExhausted ( )
                  return render_value_in_context ( value , context )
          return text . __html__ ( )
  output = [ ]
              raise value . with_traceback ( tb )
 response = callback ( request , ** param_dict )
 root = [ ]
 if error . params :
          value = data . get ( name , None )
 def message_dict ( self ) :
              self . months = MONTHS
 from django . core . serializers . python import Serializer as PythonSerializer
import os
  format_string = bits [ 1 ] [ 1 : - 1 ]
   optimizer = MigrationOptimizer ( )
 from functools import partial
 return self . pointer < len ( self . subject )
 _supported = None
  if self . field . required and hasattr ( self . form , 'required_css_class' ) :
 clean_data = [ ]
    class RawPostDataException ( Exception ) :
 message = ungettext_lazy (  'Ensure this value has at least %(limit_value)d character (it has %(show_value)d).' ,  'Ensure this value has at least %(limit_value)d characters (it has %(show_value)d).' ,  'limit_value' )
 class __proxy__ ( Promise ) :
 from django . core . management . color import color_style
 return timezone . make_naive ( value , current_timezone )
          if data :
 using_sysrandom = False
          tag , this_value_expr , max_value_expr , max_width = bits
 model_fields = Model . _meta . get_all_field_names ( )
 from __future__ import unicode_literals
                              field_type = 'ForeignKey(%s' % rel_to
 from django . forms . widgets import HiddenInput
  elif self . name and os . path . exists ( self . name ) :
 errors = [ e for e in all_issues if checks . ERROR <= e . level < checks . CRITICAL ]
   def __delattr__ ( self , name ) :
         if six . PY3 or os . name == 'nt' :
                  self . stdout . write ( "  Unapplying %s..." % migration , ending = "" )
 output = localize ( output , use_l10n = context . use_l10n )
 ns = "http://www.w3.org/2005/Atom"
 return '%s-%s' % ( self . prefix , field_name ) if self . prefix else field_name
 for key in self :
  else :
                      if latest_date is None or item_date > latest_date :
                  raise CommandError ( "You must supply at least one app label when using --empty." )
  else :
 MONTHS = {  1 : _ ( 'January' ) , 2 : _ ( 'February' ) , 3 : _ ( 'March' ) , 4 : _ ( 'April' ) , 5 : _ ( 'May' ) , 6 : _ ( 'June' ) ,  7 : _ ( 'July' ) , 8 : _ ( 'August' ) , 9 : _ ( 'September' ) , 10 : _ ( 'October' ) , 11 : _ ( 'November' ) ,  12 : _ ( 'December' )  }
                  obj = mark_safe ( new_obj )
 if app_config . label in loader . migrated_apps :
 def ssi ( parser , token ) :
  for alternative in self . alternatives :
  if not isinstance ( value , ( list , tuple ) ) :
  self . label_suffix = label_suffix if label_suffix is not None else _ ( ':' )
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Will squash the following migrations:" ) )
   return True
 with context . push ( ** values ) :
              raise KeyError ( "Unknown language code %s and %s." % ( lang_code , generic_lang_code ) )
         from datetime import date as real_date , datetime as real_datetime
   def __cast ( self ) :
                  raise
 if not name :
 value = '.' . join ( reversed ( parts ) )
 raise NotImplementedError ( 'subclasses of Serializer must provide a start_serialization() method' )
 self . _regex_dict = { }
   def clear ( self ) :
   class Command ( BaseCommand ) :
                   def render ( self , context ) :
                       value = value . encode ( charset )
              obj = force_str ( self . obj )
                  return d [ key ]
    def get_cache_key ( request , key_prefix = None , method = 'GET' , cache = None ) :
     class URLNode ( Node ) :
 if callable ( getattr ( self . stream , 'getvalue' , None ) ) :
  except ( KeyError , TypeError ) :
              label_suffix = ( self . field . label_suffix if self . field . label_suffix is not None  else self . form . label_suffix )
     finally :
  except http_cookies . CookieError :
  except ( HTMLParseError , UnboundLocalError ) :
  if any ( len ( x ) < 4 for x in ip_str . split ( ':' ) ) :
      input_type = 'checkbox'
   def c ( self ) :
          self . _assert_mutable ( )
 for key in keys :
 fixture = open_method ( fixture_file , mode )
  target_app_labels_only = False
              result . setlist ( copy . deepcopy ( key , memo ) , copy . deepcopy ( value , memo ) )
          self . _cache . flush_all ( )
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Running migrations:" ) )
 try :
     class CachedDnsName ( object ) :
 BLOCK_TAG_END = '%}'
     def _strip_once ( value ) :
 ext_list = [ ]
 assert match , 'unexpected call to parse_starttag()'
  mail . send ( fail_silently = fail_silently )
   def render ( self , name , value , attrs = None ) :
      help = "Prints the SQL statements for the named migration."
  def __init__ ( self , schemes = None , ** kwargs ) :
              self . check_migrations ( )
    while True :
 ch , escaped = next ( pattern_iter )
  except ValidationError as e :
                  widget = form . _meta . widgets . get ( self . _pk_field . name , HiddenInput )
   def compile_filter ( self , token ) :
   class InvalidPage ( Exception ) :
  except IndexError :
      import threading
   def write ( self , content ) :
          return
  initial_set = set ( force_text ( value ) for value in initial )
          parser . __loaded_blocks = [ block_name ]
 from django . utils import six
                 expires = typecast_timestamp ( str ( expires ) )
  if field == NON_FIELD_ERRORS :
   def extract ( self , to_path ) :
   def unparsed_entity_decl ( self , name , base , sysid , pubid , notation_name ) :
   ustring_re = re . compile ( "([\u0080-\uffff])" )
                  if issues :
          return "UTC"
           default_attrs = { 'cols' : '40' , 'rows' : '10' }
      def python_reloader ( main_func , args , kwargs ) :
   def __delitem__ ( self , key ) :
  except ImportError :
    def send_mass_mail ( datatuple , fail_silently = False , auth_user = None ,  auth_password = None , connection = None ) :
   def _setup ( self ) :
 if num > self . _max_entries :
   self . fields = fields
  if self . feed [ 'language' ] is not None :
 link = [ last , root , key , result ]
   def close_caches ( ** kwargs ) :
  kwargs [ key ] = parser . compile_filter ( value )
  elif value is False :
  since = delta . days * 24 * 60 * 60 + delta . seconds
          query = query . lists ( )
 warnings = [ e for e in all_issues if checks . WARNING <= e . level < checks . ERROR and not e . is_silenced ( ) ]
    def get_max_age ( response ) :
  else :
                  message = message . error_dict
 self . new_method_name = new_method_name
    @ register . filter ( is_safe = True )
   def pretty_name ( name ) :
 handler . addQuickElement ( "name" , item [ 'author_name' ] )
 if not isinstance ( error , ValidationError ) :
  except ( ValueError , TypeError ) :
          return self . represent_scalar ( 'tag:yaml.org,2002:str' , str ( data ) )
              return '0'
 if not hasattr ( self , '_request' ) :
          self . stream = stream
 if second_item == [ ] :
                      continue
              value = unicode_value . strip ( )
 parser . add_argument ( '--testrunner' ,  action = 'store' , dest = 'testrunner' ,  help = 'Tells Django to use specified test runner class instead of '  'the one specified by the TEST_RUNNER setting.' ) ,
 import hashlib
 from django . conf import settings
                  return ( copyreg . _reconstructor , ( self . __class__ , object , None ) , self . __getstate__ ( ) )
 import os
  if ( self . max_digits is not None and self . decimal_places is not None  and whole_digits > ( self . max_digits - self . decimal_places ) ) :
     class StreamingHttpResponse ( HttpResponseBase ) :
          if size is None or size > self . remaining :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
  else :
      if palette == PALETTES [ NOCOLOR_PALETTE ] :
   @ property
 self . xml . endElement ( "object" )
   def unescape_string_literal ( s ) :
 from django . utils . html import escape
                  self . stdout . write ( "No changes detected" )
  else :
          if ( hasattr ( value , '__iter__' ) and  not isinstance ( value , six . text_type ) and  not hasattr ( value , '_meta' ) ) :
 prefix = self . add_prefix ( fieldname )
      return _trans . ugettext ( message )
                  if subject [ i ] in ( '"' , "'" ) :
  else :
    def generic_tag_compiler ( parser , token , params , varargs , varkw , defaults ,  name , takes_context , node_class ) :
 chunk_size = 64 * 2 ** 10
                  c = int ( text [ 1 : ] , 16 )
  from django . conf import settings
 def truncatewords ( value , arg ) :
               age = time . time ( ) - timestamp
           def next ( self ) :
 def ljust ( value , arg ) :
 try :
  __all__ = ( 'NamedTemporaryFile' , 'gettempdir' , )
    class CacheKeyWarning ( DjangoRuntimeWarning ) :
 from django . utils . functional import cached_property
          _default = translation ( settings . LANGUAGE_CODE )
    if hasattr ( middleware , 'process_response' ) :
    def ugettext ( message ) :
 msg = SafeMIMEMultipart ( _subtype = self . mixed_subtype , encoding = encoding )
 if urlconf_name :
 offset = self . __offset . seconds // 60
              for path in data :
                          nodelist . append ( node . render ( context ) )
                     raise
  threading = options . get ( 'use_threading' )
              return self . DSTOFFSET
 if ':' not in template :
    @ register . filter ( is_safe = False )
     elif field in self . _errors . keys ( ) :
 from django . template . base import TemplateSyntaxError , Library , Node , TextNode , token_kwargs , Variable
   def flatten ( self ) :
          val1 = self . var1 . resolve ( context , True )
                      pass
                      with transaction . atomic ( using = db ) :
 if not tag or current_len >= truncate_len :
   def __str__ ( self ) :
  return urlquote ( value , ** kwargs )
  raise BadSignature ( 'Signature "%s" does not match' % sig )
 from django . utils import six
                              obj = field . rel . to . _default_manager . db_manager ( db ) . get_by_natural_key ( * field_value )
 from django . utils . six . moves import xrange
 autoescape = autoescape and not isinstance ( value , SafeData )
  import re
 parsed = False
 quant . append ( ch )
   def __str__ ( self ) :
              c = config . pop ( '()' )
              weight += 2
 import sys
 class MaxLengthValidator ( BaseValidator ) :
                  msg += '\n'
 s = s . encode ( 'utf-8' )
   if new_name [ 0 ] . isdigit ( ) :
     class Promise ( object ) :
 base = base [ : - 4 ]
 from django . core . management . base import CommandError
 if loader is not None :
  for slots_var in slots :
  from django . conf import settings
   except UnicodeDecodeError as e :
  except ( ValueError , TypeError ) :
 return df . format ( format_string )
   def is_valid ( self ) :
 pgettext_lazy = lazy ( pgettext , six . text_type )
              continue
    @ register . tag
                  output . append ( self . render_option ( selected_choices , option_value , option_label ) )
              self . code = code
      from _systemrestart import SystemRestart
              raise TemplateDoesNotExist
     class EmailMultiAlternatives ( EmailMessage ) :
 if match :
  else :
          _urlconfs . value = urlconf_name
 signals = 'signals'
              handler . startElement ( 'item' , self . item_attributes ( item ) )
     def _handle_m2m_field_node ( self , node , field ) :
 with open ( path , 'rb' ) as f :
          for name in self . fields :
 if value in self . empty_values :
 return result
   if match :
 for error in self . as_data ( ) :
   def initial_form_count ( self ) :
              return initial
           return ip_str
              if not only_initial :
          if not var or ' ' in var :
  else :
   if value != value or value in ( Decimal ( 'Inf' ) , Decimal ( '-Inf' ) ) :
 with lock :
      server_address = ( addr , port )
          parser . add_argument ( 'name' , help = 'Name of the application or project.' )
  else :
  else :
 collect . extend ( _builtin_context_processors )
          self . file = file_name
  except ImportError :
 if self . feed [ 'feed_url' ] is not None :
 import os
 return True
                if tok . startswith ( "'" ) :
                  self . stdout . write ( "  Optimized from %s operations to %s operations." % ( len ( operations ) , len ( new_operations ) ) )
 for pattern in self . url_patterns :
  return new_value
 if self . output_transaction :
   kwargs = { }
          return int ( str ( value ) [ - arg ] )
  import datetime
 if not bytes :
                      raise
      status_code = 410
 class StopUpload ( UploadFileException ) :
 for hextet in new_ip :
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
                  truncate_len -= 1
    colors = styles . pop ( ) . split ( '/' )
          if encoding == 'utf-8' :
                  setattr ( result , name , value )
              form . save_m2m ( )
                    import rlcompleter
  except ValueError :
  else :
                  EventHandler . modified_code = FILE_MODIFIED
      def __new__ ( mcs , name , bases , attrs ) :
 if autoescape :
  LOCK_SH = 0
 from django . utils . encoding import python_2_unicode_compatible
              continue
  text_args = [ force_text ( v ) for v in args ]
  bits = host . rsplit ( ':' , 1 )
   final_output . extend ( connection . creation . sql_for_pending_references ( model , style , pending_references ) )
 from threading import RLock
   @ property
 parser . add_argument ( '--keep-pot' , action = 'store_true' , dest = 'keep_pot' ,  default = False , help = "Keep .pot file after making messages. Useful when debugging." )
  elif token_string . startswith ( BLOCK_TAG_START ) :
 if leading :
  content_type , content_type_extra = meta_data . get ( 'content-type' , ( '' , { } ) )
   def __bool__ ( self ) :
              raise TemplateSyntaxError ( '"filter %s" is not permitted.  Use the "autoescape" tag instead.' % filter_name )
 _fields_ = [  ( '_offset' , _OFFSET ) ,  ( 'Pointer' , PVOID ) ]
  try :
 def do_if ( parser , token ) :
   def run_shell ( self , shell = None ) :
  default_translation = translation ( settings . LANGUAGE_CODE )
          for path in self . locale_paths :
  app_models = router . get_migratable_models ( app_config , connection . alias )
          return len ( value )
  except TemplateSyntaxError as e :
                           title = plan_node [ 1 ]
          return value [ - 1 ]
          pass
              value = float ( value )
                location = '//%s' % self . get_full_path ( )
  except ValueError :
              return ""
                       try :
              try :
              return ''
 from importlib import import_module
   def n ( self ) :
 if dirname and not os . path . exists ( dirname ) :
 internal_use_only = False
                          raise
  output_transaction = True
   class Command ( BaseCommand ) :
              piece += elt [ 0 ]
     seen_data . add ( row_data )
              self . mode = file . mode
 re_chars = re . compile ( r'<.*?>|(.)' , re . U | re . S )
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
   def tags_available ( self ) :
    if self . _validate_unique :
 for d in reversed ( self . dicts ) :
          duplicate = copy ( super ( BaseContext , self ) )
 db = router . db_for_read ( self . cache_model_class )
          return date_format ( value , 'DATETIME_FORMAT' , use_l10n = use_l10n )
 for child in node . childNodes :
          if path . startswith ( ( 'http://' , 'https://' , '/' ) ) :
                  self . timezone = get_default_timezone ( )
  return value
 super ( ChoiceField , self ) . validate ( value )
     for field in model . _meta . fields :
              end , next = boundary
  try :
              app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
 if self . verbosity > 1 :
  from django . conf import settings
 code = 'max_length'
                          answer = "n"
 if use_l10n or ( use_l10n is None and settings . USE_L10N ) :
 return re_newlines . sub ( '\n' , text )
              digits . append ( '-' )
 unpack = num_loopvars > 1
 self . name = name
 import os
      from unittest import *
     def get_storage_class ( import_path = None ) :
   @ property
          return self . render ( )
 from django . core . files . move import file_move_safe
          choice = self . choices [ idx ]
                      biggest_number = max ( [ x for x in numbers if x is not None ] )
  self . _callback_str = prefix + '.' + self . _callback_str
              raise UnrecognizedArchiveFormat (  "Path not a recognized archive format: %s" % filename )
  except ImportError :
                      expires = timezone . make_naive ( expires , timezone . utc )
                              extra_params [ 'unique' ] = True
    def has_key ( self , key ) :
              return base
  BLOCK_CONTEXT_KEY = 'block_context'
 self . validate_key ( key )
                  for pythonrc in ( os . environ . get ( "PYTHONSTARTUP" ) , '~/.pythonrc.py' ) :
                          return result
 from threading import local
 utility . execute ( )
          return smart_text ( self . name or '' )
                      command = token . contents . split ( ) [ 0 ]
 def center ( value , arg ) :
   def save_new ( self , form , commit = True ) :
 try :
   return self . check ( app_configs = app_configs , display_num_errors = display_num_errors )
   self . set ( key , value , version = version + delta )
                  year += 1900
  import re
  except KeyboardInterrupt :
              return path . split ( '/' , 1 )
              field = field . rel . get_related_field ( )
              return self . filter_expr . resolve ( context )
                  if hasattr ( e , 'code' ) and e . code in self . error_messages :
 request_finished = Signal ( )
          raise ValueError ( "Base36 input too large" )
          return language . lower ( )
  def __init__ ( self ) :
 return dateformat . format ( value , get_format ( format or 'DATE_FORMAT' , use_l10n = use_l10n ) )
 del self [ 'content-type' ]
   def clean ( self , value ) :
  except IndexError :
    def mail_managers ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :
                  continue
 yield "# You'll have to do the following manually to clean this up:"
 value = bytes_to_text ( value , self . encoding )
              six . reraise ( UnreadablePostError , UnreadablePostError ( * e . args ) , sys . exc_info ( ) [ 2 ] )
  except Exception :
   def _iteritems ( self ) :
 args = ''
   __getattr__ = new_method_proxy ( getattr )
              handler . addQuickElement ( "author" , item [ "author_email" ] )
 try :
                      return self . filter ( name , func , ** flags )
   def to_python ( self , data ) :
                  sent = self . _send ( message )
    definition = getattr ( cls , 'Media' , None )
 def write ( self , s ) :
   self . _errors [ field ] . extend ( error_list )
                       name = self . get_available_name ( name )
  if isinstance ( s , ( six . text_type , Promise ) ) :
 from django . utils . six . moves import reduce
 raise NotImplementedError ( 'Subclasses must implement this method.' )
   def _proxy_method ( self , * args , ** kwargs ) :
 walk_to_end ( ch , pattern_iter )
   if host [ - 1 ] == ']' :
  if fields and f . name not in fields :
   try :
              debugs = [ e for e in all_issues if e . level < checks . INFO and not e . is_silenced ( ) ]
  import mimetypes
  return attrs
  write ( end )
 object_data = model_to_dict ( instance , opts . fields , opts . exclude )
              self . _closable_objects . append ( value )
 if deps :
              if isinstance ( form . _meta . fields , tuple ) :
  except StandardError as e :
          max_num = DEFAULT_MAX_NUM
 from django . core import signals
 simple_url_re = re . compile ( r'^https?://\[?\w' , re . IGNORECASE )
 obj_pk = getattr ( obj , field . rel . field_name )
          values = [ parser . compile_filter ( arg ) for arg in args [ 1 : ] ]
 import os
 self . validate_key ( key )
               if ( isinstance ( data , Node ) and not data . negated  and ( data . connector == conn_type or len ( data ) == 1 ) ) :
   def __getitem__ ( self , key ) :
 plural = [ ]
 def _cache ( self ) :
      return getattr ( self , _assertRaisesRegex ) ( * args , ** kwargs )
  program = 'msgfmt'
  def __init__ ( self , tup , hash = hash ) :
 DOT_PATTERN = re . compile ( r'^\.\s*(\w+)\s*' )
          raise InvalidTemplateLibrary ( "Template library %s does not have "  "a variable named 'register'" %  taglib_module )
   def clear_checkbox_id ( self , name ) :
 for filepath in self . get_template_sources ( template_name , template_dirs ) :
                  m2m_value = lambda value : value . natural_key ( )
 super ( CharField , self ) . __init__ ( * args , ** kwargs )
 os . chdir ( our_home_dir )
              raise TemplateSyntaxError ( "Could not parse the remainder: '%s' "  "from '%s'" % ( token [ upto : ] , token ) )
              domains = ( 'django' , )
          db = router . db_for_write ( self . cache_model_class )
  else :
                  e . reason += ', HTTP response headers must be in %s format' % charset
  except ValueError :
     class LoadNode ( Node ) :
 num_args += 1
 import operator
 dirs = [ upath ( os . path . abspath ( os . path . realpath ( d ) ) ) for d in dirs ]
   context = Context ( dict ( options , ** {  base_name : name ,  base_directory : top_dir ,  'docs_version' : docs_version ,  } ) , autoescape = False )
  def __init__ ( self , request , template , context = None , content_type = None ,  status = None , current_app = None ) :
          parts = [ ]
 def make_list ( value ) :
  if labels and f . name in labels :
 new_context = copy ( self )
 for x in arg . split ( ':' ) :
  if lang_code :
 def wordcount ( value ) :
        @ register . filter ( is_safe = True )
      pass
  else :
    class Parser ( object ) :
              if this_bases is None :
  if ch == '+' :
  return retval
 try :
 if ending and not msg . endswith ( ending ) :
 model = None
 nofollow_attr = ''
 statements = sql_all ( app_config , self . style , connection )
   class EscapeData ( object ) :
 bits = bits [ 2 : ]
          tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
   def close ( self ) :
                  self . _num_pages = 0
  return mark_safe ( '' . join ( bits ) )
   except IOError :
      class CommentNode ( Node ) :
 for migration_name in migration_names :
 from django . utils . six . moves . urllib . parse import (  quote , quote_plus , unquote , unquote_plus , urlparse ,  urlencode as original_urlencode )
  return False
                              out . write ( blankout ( part , 'P' ) )
   call_command ( 'loaddata' , * fixture_labels , ** { 'verbosity' : verbosity } )
   def z ( self ) :
 if len ( bits ) != 2 :
    class Token ( object ) :
              st = os . stat ( filename )
 for migration in migrations_to_squash :
     class ZipArchive ( BaseArchive ) :
   def get_many ( self , keys , version = None ) :
   if new_name . endswith ( '_' ) :
 return tpl . format ( self . name , self . sysid , self . pubid )
 src = force_text ( src , settings . FILE_CHARSET )
  except KeyError :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
  loop_dict [ 'revcounter' ] = len_values - i
   def end_object ( self , obj ) :
   _get_val = lazy ( _get_val , six . text_type )
 for key , value in list ( attrs . items ( ) ) :
  p_pattern = pattern . regex . pattern
   sys . exit ( 1 )
          addr . encode ( 'ascii' )
   def exit_command ( self ) :
            raise CommandError ( "Django doesn't know which syntax to use for your SQL statements,\n" +  "because you haven't properly specified the ENGINE setting for the database.\n" +  "see: https://docs.djangoproject.com/en/dev/ref/settings/#databases" )
   def ipython ( self ) :
  else :
 if len ( value ) >= 2 and value [ : 1 ] == value [ - 1 : ] == b'"' :
 return self . incr ( key , - delta , version = version )
   def to_python ( self , value ) :
 Tok . num += 1
 _iteritems = "iteritems"
      def __init__ ( self , token_type , contents ) :
                   return self . tag_function ( name )
 return iter ( getattr ( d , _itervalues ) ( ** kw ) )
          if hasattr ( self , 'error_dict' ) :
      choice_input_class = RadioChoiceInput
 extend = complain
                      try :
              raise TemplateSyntaxError ( "'%s' is not a valid tag library: %s" %  ( taglib , e ) )
              return True
   attrs = attrs or { }
 self . default_kwargs = default_kwargs or { }
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
 if len ( bits ) != 3 :
          split = [ ]
          self . STDOFFSET = timedelta ( seconds = - _time . timezone )
    __iter__ = xreadlines
 if lang_code in _supported and lang_code is not None and check_for_language ( lang_code ) :
    @ register . tag
   def module_has_submodule ( package , module_name ) :
   try :
  else :
 iterkeys = _iterkeys
          raise ValueError ( "The %s could not be %s because the data didn't"  " validate." % ( opts . object_name , fail_message ) )
   self . no_obsolete = options . get ( 'no_obsolete' )
                      warnings . warn (  "`%s.%s` method should be renamed `%s`." %  ( class_name , old_method_name , new_method_name ) ,  deprecation_warning , 2 )
   def log_message ( self , format , * args ) :
 if mimetype is None :
 self . run_validators ( out )
   def strptime ( self , value , format ) :
 return widget . id_for_label ( id_ )
              return
  return self . nodelist_false . render ( context )
  yield force_text ( message )
 self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-wrap' ]
   def render ( self , name , value , attrs = None , choices = ( ) ) :
    elif finder . find_module ( name ) :
          for condition , nodelist in self . conditions_nodelists :
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
  for i in range ( 0 , len ( pieces ) - 1 , 3 ) :
   def handle ( self , * app_labels , ** options ) :
 self . tagname = self . tag ( )
          return it . next ( )
   excluded_apps = set ( )
     header_end = chunk . find ( b'\r\n\r\n' )
 self . __starttag_text = rawdata [ i : endpos ]
    def all_valid ( formsets ) :
                              try :
      def handle_default_options ( options ) :
              if self . _delegate_bytes :
       self . LibraryValueNotFoundException = value_not_found_exception
          self . close ( )
              end = index
                      g = imatch . group ( 1 )
 from django . utils . encoding import force_text
 while not answer or answer not in "yn" :
 for key , value in data :
  def __init__ ( self , nodelist , parent_name , template_dirs = None ) :
    def download ( self , url ) :
                              self . stdout . write ( " [ ] %s" % title )
 buffer_ = None
  return self . __cast ( ) % rhs
          return ''
 sec = int ( m . group ( 'sec' ) )
 self . stdout . write ( "  all instances of the codebase have applied the migrations you squashed," )
  except AttributeError :
 version = get_complete_version ( version )
 class VariableDoesNotExist ( Exception ) :
   else :
 u = dig2 . digest ( )
              return self [ key ]
 if key in cache :
  def nud ( self , parser ) :
 UnicodeDecodeError . __init__ ( self , * args )
                      lookup_str = callback . __module__ + "." + callback . __class__ . __name__
              field_output = [ qn ( f . name ) , f . db_type ( connection = connection ) ]
              return lookup_view
              return default
 pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
   else :
  if len ( args ) < 2 :
      def _key_to_file ( self , key , version = None ) :
  def __init__ ( self , data , encoder = DjangoJSONEncoder , safe = True , ** kwargs ) :
          return
    def do_translate ( message , translation_function ) :
  except TypeError :
                  s = six . text_type ( bytes ( s ) , encoding , errors )
   class Command ( BaseCommand ) :
              cursor . execute ( 'DELETE FROM %s' % table )
                  pass
                  return format_html ( "<input type='hidden' name='csrfmiddlewaretoken' value='{0}' />" , csrf_token )
              ip_address = literal_match . group ( 1 )
 __import__ ( name )
          return False
 if imatch . group ( 2 ) :
    @ register . tag
     if hasattr ( response , 'render' ) and callable ( response . render ) :
              return SafeText ( data )
 def __init__ ( self , name , value , base , sysid , pubid , notation_name ) :
    for role in termcolors . PALETTES [ termcolors . NOCOLOR_PALETTE ] :
  return Truncator ( value ) . chars ( length )
          raise TemplateSyntaxError ( "'%s' cannot appear more than once in the same template" % bits [ 0 ] )
 from django . utils . deprecation import RemovedInDjango19Warning
          int ( value )
 if param not in params and varkw is None :
                              f = os . path . join ( root , f )
 class File ( FileProxyMixin ) :
              self . file = open ( self . name , mode or self . mode )
      pass
          candidate = str ( candidate )
    class CommandParser ( ArgumentParser ) :
 return obj
              return input_val
  except ImportError as e :
  super ( Command , self ) . execute ( * args , ** options )
  for statement in sql :
  else :
          length = int ( arg )
from django . core . management import call_command
 self . validate_key ( key )
   try :
 def __init__ ( self , dict_ = None , autoescape = True , current_app = None ,  use_l10n = None , use_tz = None ) :
  try :
     else :
                      cursor . execute ( "SELECT cache_key, expires FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
              size = self . remaining
  nodelist = parser . parse ( ( 'endautoescape' , ) )
   raise
 if self . require_all_fields :
      class CacheClass ( FileBasedCache ) :
 DIGIT_PATTERN = re . compile ( r'^\d+$' )
                  codecs . lookup ( content_params [ 'charset' ] )
              self . __offset = timedelta ( minutes = offset )
  def write ( self , outfile , encoding ) :
              return self . empty_form . is_multipart ( )
   def handle_m2m_field ( self , obj , field ) :
                      os . remove ( path_to_remove )
  except AttributeError :
                      match = None
 from django . utils . module_loading import import_string
 return self . __to_language
  tag = bits [ 1 ]
          header = self . _convert_to_charset ( header , 'ascii' )
  WORD_PATTERN = re . compile ( r'^\s*(\w+)\s*' )
 from django . utils import six
              self . stream = None
 return mark_safe ( force_text ( value ) . translate ( _js_escapes ) )
    elif cwords [ 0 ] in subcommands and cwords [ 0 ] != 'help' :
  del attr
     class ModelChoiceField ( ChoiceField ) :
              if register_to :
                  validate_ipv4_address ( hextet )
                   pass
   def run_from_argv ( self , argv ) :
  else :
 write = property ( lambda self : self . file . write )
      string_types = basestring ,
   if self . META . get ( 'CONTENT_TYPE' , '' ) . startswith ( 'multipart/form-data' ) :
 if p >= 0 :
 truncate = property ( lambda self : self . file . truncate )
  except ValueError :
 output_transaction = False
 import posixpath
     def parse_etags ( etag_str ) :
 self . _boundary = boundary
   def as_text ( self , attrs = None , ** kwargs ) :
              widget . is_localized = True
  localize = kwargs . get ( 'localize' , False )
     if opts . managed :
 def __init__ ( self , * args , ** kwargs ) :
 from django . utils import six
   to_delete = set ( )
          if self . feed [ 'language' ] is not None :
 if token == "not" and i + 1 < l and tokens [ i + 1 ] == "in" :
 import sys
    if as_form :
  def add_arguments ( self , parser ) :
  return copy . deepcopy ( self . _wrapped , memo )
 parser . add_argument ( 'directory' , nargs = '?' , help = 'Optional destination directory' )
 return self . getvalue ( )
      if urlconf is None :
                  response = debug . technical_404_response ( request , e )
          try :
    def get_current_timezone_name ( ) :
                  return endpos
  if options [ "host" ] and options [ "port" ] and not options [ "socket" ] :
 for path in paths :
   def clear ( self ) :
          raise TemplateSyntaxError ( "'ssi' tag takes one argument: the path to"  " the file to be included" )
 self . children = [ obj , data ]
   def extend_nodelist ( self , nodelist , node , token ) :
    context [ self . var_name ] = [  { 'grouper' : key , 'list' : list ( val ) }  for key , val in  groupby ( obj_list , lambda obj : self . resolve_expression ( obj , context ) )  ]
   def print_help ( self , prog_name , subcommand ) :
 os . makedirs ( original_path )
   def has_key ( self , key , version = None ) :
 for option in option_label :
     if options . get ( "test_flush" , False ) :
          return build_request_repr ( self )
 if key_prefix is None :
 msg_data = msg . as_bytes ( )
 parser . add_argument ( '--settings' )
 def _cache ( self ) :
 for db in connections . all ( ) :
   def F ( self ) :
  def is_ignored ( path , ignore_patterns ) :
                  continue
 recipients = [ sanitize_address ( addr , email_message . encoding )  for addr in email_message . recipients ( ) ]
 parser . StartDoctypeDeclHandler = self . start_doctype_decl
   def render ( self , context ) :
                  self . _setup ( )
              seen_data = set ( )
  bits = token . contents . split ( )
 self . body = body
 from django . utils . functional import cached_property
 self . _set_regex ( regex )
 self . cc = list ( cc )
    def pgettext ( context , message ) :
  output . append ( '</select>' )
  RESET = '0'
    @ register . filter ( is_safe = True )
  return combined
   def label_tag ( self , contents = None , attrs = None , label_suffix = None ) :
   def to_locale ( language ) :
  except ValueError :
    class ModelForm ( six . with_metaclass ( ModelFormMetaclass , BaseModelForm ) ) :
  else :
  except TypeError :
              num = 0
  super ( TextInput , self ) . __init__ ( attrs )
  elif args [ - 2 ] == "as" :
 if safe is not None :
   if __name__ == '__main__' :
  def items ( self ) :
                          m = m + base [ medium ]
 from django . utils . html import escape
    else :
 pk = to_python ( pk )
    chunk = stream . read ( max_header_size )
   raise ImportError
 return self
  if not chunk :
  for cat in self . feed [ 'categories' ] :
              continue
   def __iter__ ( self ) :
 return tf . format ( format_string )
  else :
   if isinstance ( app_name , BaseCommand ) :
 import threading
 if options :
  return message
          value = ungettext ( "%(size)d byte" , "%(size)d bytes" , bytes ) % { 'size' : bytes }
              result = handler . handle_raw_input ( self . _input_data ,  self . _meta ,  self . _content_length ,  self . _boundary ,  encoding )
  if not file_name :
                  i += 1
  check_for_migrations ( app_config , connection )
  try :
          for d in self . dicts :
   def resolve_error_handler ( self , view_type ) :
 import os
   if ( isinstance ( fp , file ) and  isinstance ( data , unicode ) and  fp . encoding is not None ) :
 match = self . regex . search ( path )
 def reverse_dict ( self ) :
  def __init__ ( self , location = None , base_url = None , file_permissions_mode = None ,  directory_permissions_mode = None ) :
 output = [ ]
 def default ( value , arg ) :
              self . _setup ( )
   def handle ( self , ** options ) :
              value = ConvertingList ( value )
          parser . add_argument ( 'app_label' , nargs = '?' ,  help = 'App label of an application to synchronize the state.' )
                     errors . extend ( m for m in e . error_list if m not in errors )
                return self . flatten ( ) == other . flatten ( )
                  for app_name , model_list in manifest . items ( ) :
 intrans = False
    def _parse_header_params ( s ) :
      help = "Updates database schema. Manages both apps with migrations and those without."
 if os . path . isdir ( os . path . join ( 'conf' , 'locale' ) ) :
 with self . _lock :
    _builtin_context_processors = ( 'django.core.context_processors.csrf' , )
           return super ( PythonSerializer , self ) . getvalue ( )
   def _convert_to_charset ( self , value , charset , mime_encode = False ) :
          warnings . warn (  "FastCGI support has been deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning )
  from django . core . exceptions import ImproperlyConfigured
  elif isinstance ( rhs , SafeBytes ) :
  except OSError :
  else :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
  else :
  try :
  if result is not None :
 return list ( chain ( * errors ) )
 from django . core . management . sql import check_for_migrations
                  initial = self . widget . decompress ( initial )
       def __init__ ( self , object_list , per_page , orphans = 0 ,  allow_empty_first_page = True ) :
 excludes = options . get ( 'exclude' )
   if found :
    invalid_var_format_string = None
 result = result [ : start ] + [ inner ]
  if not self . _populated :
          return self . __dt ,
   def new_file ( self , file_name , * args , ** kwargs ) :
  return '%s%s' % ( text , truncate )
          warnings . warn ( "The syncdb command will be removed in Django 1.9" , RemovedInDjango19Warning )
 plural = [ ]
                  raise UnrecognizedArchiveFormat (  "File object not a recognized archive format." )
   del attr
 class Operator ( TokenBase ) :
 import random
 if 'pk' in d :
  else :
 if data [ last : last + 1 ] == b'\n' :
 for entry in os . listdir ( path ) :
 templatetags_modules_candidates += [ '%s.templatetags' % app_config . name  for app_config in apps . get_app_configs ( ) ]
          raise TemplateSyntaxError ( "second argument to 'regroup' tag must be 'by'" )
                      raise CommandError ( "Cannot find a migration matching '%s' from app '%s'." % (  migration_name , app_label ) )
      pass
  from io import BytesIO
from django . forms . extras . widgets import SelectDateWidget
      from unittest2 import *
     class ModelFormMetaclass ( DeclarativeFieldsMetaclass ) :
 message_context = None
                  with open ( filepath , 'rb' ) as fp :
                  hits = max ( 1 , self . count - self . orphans )
 x = int ( x // len ( to_digits ) )
              id_ += '_0'
 yield "#"
                  if self . cdata_tag is not None :
   def with_metaclass ( meta , * bases ) :
 return
 raise NotImplementedError ( 'Subclasses must implement this method.' )
               return dec
              klass = load_command_class ( app_name , subcommand )
          return "<Variable Node: %s>" % self . filter_expression
                  next_item = list_ [ i + 1 ]
     header_names = [ key . lower ( ) for key in self . extra_headers ]
          fn = code_changed
 return formatted_subject [ : 989 ]
   def cfg_convert ( self , value ) :
              return ''
   if content_length < 0 :
    def fields_for_model ( model , fields = None , exclude = None , widgets = None ,  formfield_callback = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :
 if level is not None :
    return '\n' . join ( usage )
  return dict ( self )
      if os . environ . get ( "RUN_MAIN" ) == "true" :
  _add_doc ( get_unbound_function ,  """Get the function out of a possibly unbound function""" )
  mask = (  pyinotify . IN_MODIFY |  pyinotify . IN_DELETE |  pyinotify . IN_ATTRIB |  pyinotify . IN_MOVED_FROM |  pyinotify . IN_MOVED_TO |  pyinotify . IN_CREATE  )
   def __setstate__ ( self , state ) :
   def parse_name ( self , fixture_name ) :
  new_value = [ ]
              format_locations . append ( path + '.%s' )
              return value
              yield node
  return False
 result ^= _bin_to_long ( u )
          processors = [ ]
   self . _callback_strs = set ( )
 warnings . warn ( 'A secure pseudo-random number generator is not available '  'on your system. Falling back to Mersenne Twister.' )
          return self . _regex
     class RequireDebugFalse ( logging . Filter ) :
   def handle_uncaught_exception ( self , request , resolver , exc_info ) :
  return ( self . paginator . per_page * ( self . number - 1 ) ) + 1
 try :
     raise LookupError ( lang_code )
  urlquote_plus = allow_lazy ( urlquote_plus , six . text_type )
          return self . _is_rendered
   return endpos
  if self . feed [ 'author_link' ] is not None :
 def COOKIES ( self ) :
                  return dict_ [ key ]
    def label_from_instance ( self , obj ) :
 pass
 digits = [ six . text_type ( digit ) for digit in reversed ( digits ) ]
                  self . stdout . write ( "Installed %d object(s) (of %d) from %d fixture(s)" %  ( self . loaded_object_count , self . fixture_object_count , self . fixture_count ) )
           self . blocks = defaultdict ( list )
  import datetime
 if tzinfo == 'Z' :
   template_dir = self . handle_template ( options [ 'template' ] ,  base_subdir )
          pass
                     pass
 for operation in migration . merged_operations :
          key = self . cache_key ( template_name , template_dirs )
 try :
     def compile_messages ( self , locations ) :
                                      handler . setLevel ( _checkLevel ( level ) )
              match = kwarg_re . match ( bits [ 0 ] )
        from django . utils . encoding import force_unicode
              value = '1'
  except ImportError :
  return True
              break
 from django . forms . utils import ErrorList
   def prepend_token ( self , token ) :
 if self . field . label is None :
    elif isinstance ( message , list ) :
   def __getstate__ ( self ) :
   from django . template . base import ( compile_string , resolve_variable ,  unescape_string_literal , generic_tag_compiler )
  streaming = True
              logging_config_func ( logging_settings )
    class Command ( BaseCommand ) :
 if settings . USE_I18N :
 try :
 _iterlists = "lists"
 return msgid
 if not settings . configured :
 sql_statements = executor . collect_sql ( plan )
 forms_to_delete = self . deleted_forms
   def _ipython_pre_011 ( self ) :
   if not hasattr ( callback , '__name__' ) :
    else :
 MONTHS_AP = {  1 : pgettext_lazy ( 'abbrev. month' , 'Jan.' ) ,  2 : pgettext_lazy ( 'abbrev. month' , 'Feb.' ) ,  3 : pgettext_lazy ( 'abbrev. month' , 'March' ) ,  4 : pgettext_lazy ( 'abbrev. month' , 'April' ) ,  5 : pgettext_lazy ( 'abbrev. month' , 'May' ) ,  6 : pgettext_lazy ( 'abbrev. month' , 'June' ) ,  7 : pgettext_lazy ( 'abbrev. month' , 'July' ) ,  8 : pgettext_lazy ( 'abbrev. month' , 'Aug.' ) ,  9 : pgettext_lazy ( 'abbrev. month' , 'Sept.' ) ,  10 : pgettext_lazy ( 'abbrev. month' , 'Oct.' ) ,  11 : pgettext_lazy ( 'abbrev. month' , 'Nov.' ) ,  12 : pgettext_lazy ( 'abbrev. month' , 'Dec.' )  }
   truncate_len = length
 output . append ( last_row )
    @ register ( Tags . models , Tags . signals )
  except AttributeError :
              data = [ ]
 _win = ( sys . platform == "win32" )
              msg = (  "The included urlconf '{name}' does not appear to have any "  "patterns in it. If you see valid patterns in the file then "  "the issue is probably caused by a circular import."  )
              raise CommandError ( "couldn't download URL %s to %s: %s" %  ( url , filename , e ) )
      def wrapper ( * args , ** kwargs ) :
  except ValueError :
   get_git_changeset . cache = changeset
              return self . create_var ( token )
  elif options [ 'app_label' ] :
              obj . save ( )
 if self . check_test ( value ) :
      def handle_template ( self , template , subdir ) :
                  if self . asvar is None :
 duplicate . dicts = self . dicts [ : ]
          value = signing . get_cookie_signer ( salt = key + salt ) . sign ( value )
  class AssignmentNode ( TagHelperNode ) :
 absolute_http_url_re = re . compile ( r"^https?://" , re . I )
          if hasattr ( self , '_size' ) :
           tupl = d . as_tuple ( )
  if isinstance ( stream_or_string , bytes ) :
          from django . apps import apps
          for key in self . keyOrder :
   def is_checked ( self ) :
 from django . utils . datastructures import MultiValueDict
          raise Exception ( "This %s instance cannot tell its position" % self . __class__ . __name__ )
 return self . resolve ( value )
              translation = self . _new_gnu_trans ( localedir )
              return data . getlist ( name )
                  week_number = 53
                      raise TemplateSyntaxError (  "'%s' tag takes at least 2 arguments and the "  "second last argument must be 'as'" % function_name )
   class Command ( BaseCommand ) :
 from django . core import signals
  else :
   if cwords [ 0 ] == 'runfcgi' :
   else :
              return x
 from django . utils . translation import ugettext_lazy , pgettext_lazy
 if self . isolated_context :
   def resolve_context ( self , context ) :
  if options [ 'errlog' ] :
          import pylibmc
                      raise CommandError (  "errors happened while running msgattrib\n%s" % errors )
    def next_char ( input_iter ) :
    def _resolve ( self ) :
              ext = base [ - 4 : ] + ext
          if not value :
      def __init__ ( self , func , args , kwargs , url_name = None , app_name = None , namespaces = None ) :
 from django . db import connections , DEFAULT_DB_ALIAS
   class Loader ( BaseLoader ) :
                          out . write ( ' # %s' % line )
 int2byte = chr
 nodelist_loop = parser . parse ( ( 'empty' , 'endfor' , ) )
                  raise CommandError ( 'You appear not to have the %r program installed or on your path.' %  connection . client . executable_name )
   parser . add_library ( temp_lib )
          DJANGO_COLORS = os . environ . get ( 'DJANGO_COLORS' , '' )
                    css_classes = bf . css_classes ( )
   class AutoEscapeControlNode ( Node ) :
  except NoReverseMatch :
                      temp_lib . filters [ name ] = lib . filters [ name ]
               palette . update ( PALETTES [ part ] )
 inplural = False
      SafeString = SafeText
                  os . unlink ( pot_path )
  import datetime
          value = self . get ( key , version = version )
    model_dependencies . append ( ( model , deps ) )
               attachment = MIMEBase ( basetype , subtype )
 s = subject [ p : i ]
   def build_absolute_uri ( self , location = None ) :
  def clean ( self ) :
                  cached_loaders . append ( find_template_loader ( loader ) )
 try :
     class GenericIPAddressField ( CharField ) :
      return _trans . npgettext ( context , singular , plural , number )
  except StandardError as e :
        def __getstate__ ( self ) :
 if len ( bits ) != 2 :
  else :
 for name in formatters :
  except UnicodeDecodeError :
 from django . utils . encoding import smart_text , force_text , python_2_unicode_compatible
   def save_new_objects ( self , commit = True ) :
 if kwargs . get ( 'localize' ) and self . widget == NumberInput :
   def validate ( self , value ) :
   app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
   for t in Lexer ( src , origin ) . tokenize ( ) :
      help = ( "Runs the command-line client for specified database, or the "  "default database if none is provided." )
 content = templatize ( src_data , orig_file [ 2 : ] )
      attrs = { 'model' : model }
  with context . push ( ** values ) :
 if lib :
  except ValidationError :
           self . verbosity = options . get ( 'verbosity' )
  elif len ( bits ) == 6 :
   if item [ 'updateddate' ] is not None :
 return CommentNode ( )
  if isinstance ( s , six . text_type ) :
   if kwargs :
                      msg = "Execution of %s failed: %s" % ( self . program , errors )
  if options . pythonpath :
 return isinstance ( obj , _PROTECTED_TYPES )
              self . error_dict = { }
               if args :
          raise MultiPartParserError ( 'multipartparser.exhaust() was passed a non-iterable or stream parameter' )
  return False
 if m is None :
      SafeString = SafeBytes
  with context . push ( ) :
 converter = connection . introspection . table_name_converter
   def __nonzero__ ( self ) :
   def delete_many ( self , keys , version = None ) :
 import django . core . checks . compatibility . django_1_7_0
     class ReferenceLocalTimezone ( tzinfo ) :
 try :
 self . xml . endElement ( "django-objects" )
  else :
      def __init__ ( self ) :
 six . reraise ( ImportError , ImportError ( msg ) , sys . exc_info ( ) [ 2 ] )
              continue
          raise TypeError ( "strftime of dates before 1900 does not handle" + illegal_formatting . group ( 0 ) )
  if options . get ( 'liveserver' ) is not None :
     class SelectMultiple ( Select ) :
 if self . use_ssl and self . use_tls :
                  file = BytesIO ( data . read ( ) )
          print ( "Can't import flup." + flup_module )
      ensure_echo_on ( )
 def auto_id ( self ) :
     not_installed_models = set ( pending_references . keys ( ) )
 default_error_messages = {  'invalid_choice' : _ ( 'The inline foreign key did not match the parent instance primary key.' ) ,  }
 if not isinstance ( value , ConvertingDict ) and isinstance ( value , dict ) :
  return t
      def exists ( self , name ) :
      locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % self . default_locale_path ) )
                  raise ImproperlyConfigured ( 'The SECURE_PROXY_SSL_HEADER setting must be a tuple containing two values.' )
  if mtime != _mtimes [ filename ] :
   def find_filter ( self , filter_name ) :
    def available_attrs ( fn ) :
              return True
          kwargs [ 'safe' ] = safe
  value_converters = {  'ext' : 'ext_convert' ,  'cfg' : 'cfg_convert' ,  }
 self . keyOrder = [ ]
  targets = [ ( app_label , migration . name ) ]
  self . cache_choices = cache_choices
                   self . _done = True
                              try :
 try :
  def _get_image_dimensions ( self ) :
                          out . write ( ' _(%s) ' % cmatch )
       def __add__ ( self , other ) :
                      want_unicode = True
      widget = EmailInput
  r = o . isoformat ( )
   seconds = self . Z ( )
  if ttl is not None :
                      try :
 from django . utils . translation import ugettext_lazy as _
          value = dict . __getitem__ ( self , key )
              raise CommandError ( "Type '%s help %s' for usage information." % (  os . path . basename ( sys . argv [ 0 ] ) , sys . argv [ 1 ] ) )
 parser . add_argument ( '--no-startup' , action = 'store_true' , dest = 'no_startup' ,  help = 'When using plain Python, ignore the PYTHONSTARTUP environment variable and ~/.pythonrc.py script.' )
 from django . core . handlers import base
 parser . add_argument ( '-e' , '--exclude' , dest = 'exclude' , action = 'append' , default = [ ] ,  help = 'An app_label or app_label.ModelName to exclude '  '(use multiple --exclude to exclude multiple apps/models).' )
 if len ( bits ) != 6 :
 from django . utils . encoding import force_str , force_text
class FileProxyMixin ( object ) :
          language_code = get_language ( )
                timeout = - 1
              raise ValueError ( "Key '%s' not found" % key )
              raise ValueError ( "Don't mix *args and **kwargs in call to reverse()!" )
    _urllib_error_moved_attributes = [  MovedAttribute ( "URLError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "HTTPError" , "urllib2" , "urllib.error" ) ,  MovedAttribute ( "ContentTooShortError" , "urllib" , "urllib.error" ) ,  ]
 if token . contents == 'else' :
  try :
 if errors is None :
 klass . deconstruct = deconstruct
 if hasattr ( self , 'clean_%s' % name ) :
           return host , ''
 for app_dir in app_dirs :
      return _trans . deactivate_all ( )
 if m . group ( 1 ) :
  if code is not None :
  except UnicodeEncodeError :
      callable = callable
 if result is not None :
    def decorator_from_middleware ( middleware_class ) :
          new_value = _strip_once ( value )
     class DictConfigurator ( BaseConfigurator ) :
                  ser_fmt = parts [ - 1 ]
 import re
     class BaseCommand ( object ) :
 try :
 if source is None :
 is_localized = False
          return
 s = StringIO ( )
   def super ( self ) :
              app_configs = [ app_config ]
          self . obj = obj
          lang = get_language ( )
 return filenames
 for item , args in zip ( result , result_args ) :
 def fixture_dirs ( self ) :
 self . cookies [ key ] = value
 app_dirs . append ( os . path . normpath ( os . path . join ( app_dir , 'sql' ) ) )
   return WidthRatioNode ( parser . compile_filter ( this_value_expr ) ,  parser . compile_filter ( max_value_expr ) ,  parser . compile_filter ( max_width ) ,  asvar = asvar )
  else :
  if values is None :
          nodelist_false = NodeList ( )
 match = datetime_re . match ( value )
 try :
  from django . utils . html import avoid_wrapping
  def nud ( self , parser ) :
              post = '<could not parse>'
 from django . utils . translation import ugettext_lazy , ugettext as _ , pgettext
              if field is not None :
  import django
          self . max_length , self . min_length = max_length , min_length
                  import readline
   class IfParser ( object ) :
 if response :
 def upper ( value ) :
              weight += 2
   si = open ( '/dev/null' , 'r' )
 self . id = id
                          last_row = ( normal_row % { 'errors' : '' , 'label' : '' ,  'field' : '' , 'help_text' : '' ,  'html_class_attr' : html_class_attr } )
          self . filters = { }
          raise ImproperlyConfigured (  "Calling modelformset_factory without defining 'fields' or "  "'exclude' explicitly is prohibited."  )
           self . verbosity = options . get ( 'verbosity' )
                      initial_prefixed_name = self . add_initial_prefix ( name )
          __bytes__ = new_method_proxy ( bytes )
   def urlquote_plus ( url , safe = '' ) :
                  message = 'use only numbers, letters and underscores'
                  data = self . _coerce ( data )
  for app_name , namespace_list in pattern . app_dict . items ( ) :
  except AttributeError :
          fname = self . _key_to_file ( key , version )
 upto = end
    def templatize ( src , origin = None ) :
 _func_globals = "__globals__"
 def __init__ ( self ) :
     @ register . filter ( is_safe = False )
  def indent ( self , level ) :
          self . func = func
                     if obj . pk is None :
              callback , param_dict = resolver . resolve_error_handler ( status_code )
  result = [ '' ]
                  os . remove ( name )
  def __init__ ( self , attrs = None ) :
              value , decimals = value . split ( decimal_separator , 1 )
          if options . get ( 'list_tags' ) :
   def list ( self ) :
                      response = view_func ( request , * args , ** kwargs )
   def absolute_path ( self , path , prefix = None ) :
  string_concat = lazy ( _string_concat , six . text_type )
      if row [ 6 ] :
 if not content_type . startswith ( 'multipart/' ) :
              if event . path . endswith ( '.mo' ) :
   if self . max_length is not None and len ( file_name ) > self . max_length :
              return str ( o )
   def to_python ( self , value ) :
 return field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
                      if set ( kwargs . keys ( ) ) | set ( defaults . keys ( ) ) != set ( params ) | set ( defaults . keys ( ) ) | set ( prefix_args ) :
 tzinfo . __init__ ( self )
              return
              output = self . filter_expression . resolve ( context )
              try :
              raise ValueError (  "EMAIL_USE_TLS/EMAIL_USE_SSL are mutually exclusive, so only set "  "one of those settings to True." )
          return force_text ( settings . FORCE_SCRIPT_NAME )
 call_command ( "migrate" , ** options )
                  raise
       def __init__ ( self , obj ) :
    return current
          try :
  def __init__ ( self , message = None , code = None , whitelist = None ) :
          del self . dict [ item ]
 args [ 0 ] = force_text ( args [ 0 ] )
 self . META [ 'SCRIPT_NAME' ] = script_name
 return select_html
 if not isabs ( path ) :
  register = Library ( )
 best_doublecolon_start = - 1
  tt = time . localtime ( stamp )
 i += 1
              valid = False
   callback , param_dict = resolver . resolve_error_handler ( 500 )
   except ImportError :
   @ HttpResponse . content . setter
              pass
 __contains__ = new_method_proxy ( operator . contains )
  return True
                  if table_name_filter is not None and callable ( table_name_filter ) :
 from django . utils . functional import LazyObject
   elif option == 'only' :
   def get_fqdn ( self ) :
                  attrs = attrs or { }
  return value
              return self . file . size
 raise NotImplementedError ( 'may be implemented in a future release' )
 def __init__ ( self , mode = 'w+b' , bufsize = - 1 , suffix = '' , prefix = '' ,  dir = None ) :
          return key in self . dicts [ - 1 ]
 self . label_suffix = label_suffix
     class RegroupNode ( Node ) :
   def setdefault ( self , key , default = None ) :
   if pathext is None :
  def __init__ ( self , attrs = None , date_format = None , time_format = None ) :
   def decode ( self , s ) :
  if not include_is_allowed ( filepath ) :
              continue
  from __future__ import unicode_literals
    _mutable = True
 if queryset is None :
          super ( MultiValueDict , self ) . __setitem__ ( key , [ value ] )
          m = regex . match ( date )
              return s . decode ( 'utf-8' , errors ) . encode ( encoding , errors )
          return unbound
  else :
                          raise ValueError ( 'Unable to configure root '  'logger: %s' % e )
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " FAKED" ) )
 if ( ( context . autoescape and not isinstance ( value , SafeData ) ) or  isinstance ( value , EscapeData ) ) :
 if m is not None :
      def _BaseCookie__set ( self , key , real_value , coded_value ) :
  from django . core . management . base import BaseCommand
 return value
   except ValueError :
      def __init__ ( self , language , deactivate = False ) :
              return
    _PROTECTED_TYPES = six . integer_types + ( type ( None ) , float , Decimal ,  datetime . datetime , datetime . date , datetime . time )
            result = force_text ( message )
  from django . apps import apps
 if self . feed [ 'feed_url' ] is not None :
 t = super ( SafeText , self ) . __add__ ( rhs )
                  model_list . append ( model )
  if bcc :
                  exp = datetime . utcfromtimestamp ( timeout )
          value = force_text ( value )
      pass
 if not match :
 return do_ifequal ( parser , token , True )
 output . extend ( [ encode ( k , force_bytes ( v , self . encoding ) )  for v in list_ ] )
  rawdata = self . rawdata
                                  self . stdout . write ( "    No custom SQL for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
   if filename not in _error_files :
   class BadSignature ( Exception ) :
              raise ValidationError ( self . error_messages [ 'invalid_choice' ] , code = 'invalid_choice' )
              return default
 can_import_settings = True
 saved_locale = translation . get_language ( )
 def last ( value ) :
          return 'https' if os . environ . get ( "HTTPS" ) == "on" else 'http'
      help = 'Runs a development server with data from the given fixture(s).'
              file . seek ( file_pos )
 pass
      help = "Prints the CREATE TABLE, custom SQL and CREATE INDEX SQL statements for the given model module name(s)."
                      m = base
 basedir = os . path . join ( os . path . dirname ( potfile ) , locale , 'LC_MESSAGES' )
   def __str__ ( self ) :
    if self . _content_length == 0 :
 self . using = options . get ( 'database' )
          super ( Command , self ) . add_arguments ( parser )
   if field . rel . to . _meta . pk . rel :
 locales = set ( locales ) - set ( exclude )
 digits = "0123456789abcdefghijklmnopqrstuvwxyz"
              self . label = self . field . label
              raise StopIteration ( )
                  bits = token . split_contents ( ) [ 1 : ]
          warnings . warn ( '`request.REQUEST` is deprecated, use `request.GET` or '  '`request.POST` instead.' , RemovedInDjango19Warning , 2 )
 result = self . configurator . convert ( value )
    def new_file ( self , * args , ** kwargs ) :
 pass
  return value
 os . chmod ( filename , new_permissions )
    if current_len <= length :
      class SkipFile ( UploadFileException ) :
  else :
   return fixture_files
          raise TemplateSyntaxError ( "%r takes two arguments" % bits [ 0 ] )
              params = [ ]
          return ''
   return avoid_wrapping ( value )
              neg = 0
              return bytes ( ( i , ) )
  elif args [ 1 ] [ 0 ] == '1' :
   def as_ul ( self ) :
            if initial == 'False' :
 if isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :
  except StandardError as e :
   def __ne__ ( self , other ) :
          m = int ( d ) - d
      widget = CheckboxInput
                   return self . add_truncation_text ( text [ : end_index or 0 ] ,  truncate )
              if kwargs :
              return repr ( dict ( self ) )
      def create_table ( self , database , tablename ) :
 for renamed_method in cls . renamed_methods :
 new_method = base . __dict__ . get ( new_method_name )
           seconds2 , name2 = chunks [ i + 1 ]
 encoding = None
 if pattern . name is not None :
   return value
 def __init__ ( self , * args , ** kwargs ) :
 if app_config . models_module is None :
 value = next ( cycle_iter ) . resolve ( context )
 self . file_name = file_name
   _format_cache [ cache_key ] = val
                  yield self . choice ( obj )
 work_file = os . path . join ( self . dirpath , thefile )
   class MergeDict ( object ) :
 def content ( self ) :
 raise NotImplementedError ( 'subclasses of Storage must provide a listdir() method' )
   def __del__ ( self ) :
 if self . is_bound :
 from django . utils . deprecation import RemovedInDjango19Warning
              value = [ ]
 return _time . tzname [ is_dst ]
  self . _current [ field . name ] = value
  raise ValueError (  "'%s.%s' has no ForeignKey to '%s.%s'."  % ( model . _meta . app_label , model . _meta . object_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
    def _long_to_bin ( x , hex_format_string ) :
 for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
    def to_python ( self , value ) :
  for field in unique_check :
    def cache_clear ( ) :
 setattr ( style , role , termcolors . make_style ( ** format ) )
                          rel_to = "self" if relations [ i ] [ 1 ] == table_name else table2model ( relations [ i ] [ 1 ] )
 if resource_string is not None :
       if hasattr ( os . path , 'samefile' ) :
  __all__ = [  'utc' , 'get_fixed_timezone' ,  'get_default_timezone' , 'get_default_timezone_name' ,  'get_current_timezone' , 'get_current_timezone_name' ,  'activate' , 'deactivate' , 'override' ,  'localtime' , 'now' ,  'is_aware' , 'is_naive' , 'make_aware' , 'make_naive' ,  ]
          return False
  if isinstance ( value , datetime . datetime ) :
  resolver = get_resolver ( urlconf )
  except ( IndexError ,  ValueError ,  KeyError ,  TypeError ) :
                  for dirpath , dirnames , filenames in os . walk ( ldir ) :
  output . append ( '%s<li>%s%s</li>' % ( indent ,  escaper ( force_text ( title ) ) , sublist ) )
 if version is None :
  for choice in self . field . choice_cache :
              p = i
              extend = getattr ( definition , 'extend' , True )
 if m :
              signals . got_request_exception . send ( sender = self . __class__ , request = request )
          self . data = obj
  else :
                  with io . open ( django_po , 'r' , encoding = 'utf-8' ) as fp :
          self . conditions_nodelists = conditions_nodelists
   def convert_old_style_list ( list_ ) :
 additional_headers = [ newheader for newheader in newheaders  if newheader . lower ( ) not in existing_headers ]
 def slugify ( value ) :
  except ImportError as e :
  end_tag = 'end' + bits [ 0 ]
                              t = file_name
              try :
       class InMemoryUploadedFile ( UploadedFile ) :
      def __init__ ( self ) :
              continue
  output = [ ]
    def new_datetime ( d ) :
     class Debug ( CheckMessage ) :
          self . encoding = encoding
   return False
  def __init__ ( self , * args , ** kwargs ) :
          return len ( self . items )
   return format_html ( self . outer_html ,  id_attr = format_html ( ' id="{0}"' , id_ ) if id_ else '' ,  content = mark_safe ( '\n' . join ( output ) ) )
              handler . addQuickElement ( "author" , "%s (%s)" %  ( item [ 'author_email' ] , item [ 'author_name' ] ) )
 from django . utils . six . moves import map
 try :
                  yield import_module ( '%s.formats' % ( location % loc ) )
 if val is not None :
  else :
 for i in range ( 0 , self . total_form_count ( ) ) :
 from django . core . exceptions import ImproperlyConfigured , ViewDoesNotExist
 return value . tzinfo is not None and value . tzinfo . utcoffset ( value ) is not None
  from django . conf import settings
 left = t . led ( left , self )
 os . write ( fd , current_chunk )
 new_args . append ( args [ : ] + i_args )
              selected_html = mark_safe ( ' selected="selected"' )
   def _load_post_and_files ( self ) :
          if t [ 1 ] is True :
  except ( ValueError , TypeError ) :
 neg = 1
          return ''
  class Module_six_moves_urllib_response ( _LazyModule ) :
   __contains__ = has_header
          now = datetime . datetime ( now . year , now . month , now . day )
   data = { }
 if isinstance ( query , MultiValueDict ) :
 iterator = None
  elif self . use_ipv6 and not _fqdn :
    class StopFutureHandlers ( UploadFileException ) :
    construct_instance_exclude = list ( exclude )
 def yesno ( value , arg = None ) :
 output = [ format_html ( '<select multiple="multiple"{0}>' , flatatt ( final_attrs ) ) ]
              form = ManagementForm ( auto_id = self . auto_id , prefix = self . prefix , initial = {  TOTAL_FORM_COUNT : self . total_form_count ( ) ,  INITIAL_FORM_COUNT : self . initial_form_count ( ) ,  MIN_NUM_FORM_COUNT : self . min_num ,  MAX_NUM_FORM_COUNT : self . max_num  } )
 return filename and filename [ filename . rfind ( "\\" ) + 1 : ] . strip ( )
                      self . xml . addQuickElement ( "object" , attrs = {  'pk' : smart_text ( value . _get_pk_val ( ) )  } )
                      transfer_encoding = transfer_encoding [ 0 ] . strip ( )
          cookies = '<could not parse>'
          value = ugettext ( "%s MB" ) % filesize_number_format ( bytes / MB )
 used = name . pop ( 0 )
   def compress ( self , data_list ) :
                  self . _delete ( k )
  else :
                 return 'NOTPROVIDED'
 prefixed = name + "."
  ETAG_MATCH = re . compile ( r'(?:W/)?"((?:\\.|[^"])*)"' )
  from django . utils . functional import Promise
 proxy = lazy ( func , resultclass ) ( ** kwargs )
          cookies = ( pformat ( COOKIES_override )  if COOKIES_override is not None  else pformat ( request . COOKIES ) )
          msg = (  "WSGI application '%(app_path)s' could not be loaded; "  "Error importing module: '%(exception)s'" % ( {  'app_path' : app_path ,  'exception' : e ,  } )  )
          value = tuple . __getitem__ ( self , key )
           if only_new :
      def __init__ ( self , val_expr , max_expr , max_width , asvar = None ) :
 return '%02d' % self . data . month
                      top_errors . extend (  [ _ ( '(Hidden field %(name)s) %(error)s' ) % { 'name' : name , 'error' : force_text ( e ) }  for e in bf_errors ] )
   def __next__ ( self ) :
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
  return self . size > chunk_size
   wrapped_main_func = check_errors ( main_func )
          return self . _headers . values ( )
 df = DateFormat ( value )
 if isinstance ( other_dict , MultiValueDict ) :
   def conditional_escape ( text ) :
              yield buffer_
   def source_error ( self , source , msg ) :
 st = os . stat ( src )
 options = self . render_options ( choices , value )
    def _add_local_translations ( self ) :
 os . umask ( umask )
          if name is None and compile_function is None :
 parser . add_argument ( '--list' , '-l' , action = 'store_true' , dest = 'list' , default = False ,  help = 'Show a list of all known migrations and which are applied' )
 if invalid_var_format_string is None :
          return "<%s: %r>" % ( self . __class__ . __name__ , self . var )
                          continue
 if settings . TEMPLATE_DEBUG :
              raise ValueError ( "This file is not accessible via a URL." )
              self . cc = [ ]
 if response :
              url = value
              for dirpath , dirnames , locale_filenames in os . walk ( basedir ) :
              line = sio . readline ( )
       if format not in serializers . get_public_serializer_formats ( ) :
                  widget_value = value [ i ]
 def GET ( self ) :
           compressed = zlib . compress ( data )
     class TemplateTagNode ( Node ) :
 def __init__ ( self , * args , ** kwargs ) :
   self . xml . endElement ( "field" )
          if isinstance ( value , datetime . datetime ) :
              package_path = package . __path__
 return f ( * args , ** kwargs )
  return patterns
              self . choices = [ ]
  return
  streaming = False
              try :
 tok = toks [ name ]
                  import_module ( '.management' , app_config . name )
              k = force_bytes ( k , self . encoding )
  else :
 from django . utils import translation
 line = line [ space : ]
 validate_slug = RegexValidator ( slug_re , _ ( "Enter a valid 'slug' consisting of letters, numbers, underscores or hyphens." ) , 'invalid' )
 def __init__ ( self ) :
 lib = import_library ( taglib_module )
   module = import_module ( module_path )
            context [ self . var_name ] = obj
 sublist = '\n%s<ul>\n%s\n%s</ul>\n%s' % ( indent , sublist ,  indent , indent )
              return SafeBytes ( data )
  return mark_safe ( contents )
    internal_use_only = False
   sql . extend ( connection . creation . sql_for_pending_references ( model , no_style ( ) , pending_references ) )
 return self . field . widget . value_from_datadict ( self . form . data , self . form . files , self . html_name )
 from django . core . management . sql import sql_create
                  app_list = resolver . app_dict [ ns ]
                      block_context . push ( self . name , push )
              top_dir = os . path . abspath ( path . expanduser ( target ) )
 line = ''
 import warnings
 from django . core . management . base import BaseCommand
                  raise ValueError ( "Could not find common ancestor of %s" % migration_names )
  return mark_safe ( value . replace ( '\n' , '<br />' ) )
      DEFAULT_TIMEOUT = object ( )
    @ register . tag
              if hasattr ( base , 'base_fields' ) :
 is_templatized = file_ext in command . extensions
 setattr ( self , attr , value )
   connection_class = smtplib . SMTP_SSL if self . use_ssl else smtplib . SMTP
      EscapeString = EscapeBytes
              self . validate_unique ( )
    if PY3 :
 if not os . path . exists ( self . _dir ) :
          language_code = get_language ( )
      regex = ''
                  error_dict . setdefault ( field , [ ] ) . extend ( error_list )
          return 'ValidationError(%s)' % self
 from django . middleware . csrf import get_token
  else :
    def get_unique_error_message ( self , unique_check ) :
 return super ( BaseInlineFormSet , self ) . get_unique_error_message ( unique_check )
      help = "Creates new migration(s) for apps."
 i = 0
          super ( DateTimeBaseInput , self ) . __init__ ( attrs )
  elif ch == ')' :
 self . json_kwargs . pop ( 'stream' , None )
  if self . _read_started and not hasattr ( self , '_body' ) :
          return self
   DEFAULT_MIN_NUM = 0
      from django . utils . six . moves import cPickle as pickle
 if not digest :
 return RegroupNode ( target , expression , var_name )
  if error_messages is not None :
              self . regex = regex
                  self . stdout . write ( "  Applying %s..." % migration , ending = "" )
    @ register . filter ( is_safe = True )
    def get ( self , key , default = None , version = None ) :
              class_name = base . __name__
 import os
  return ForNode ( loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty )
     def upath ( path ) :
          attrs = [ "__doc__" , "__name__" ]
 if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) :
              if template . startswith ( 'file://' ) :
  time . sleep ( 1 )
     def localize_input ( value , default = None ) :
 if fd . isatty ( ) :
    def code_changed ( ) :
 if hasattr ( self , '_regex_validator' ) and self . _regex_validator in self . validators :
          arg = settings . DATE_FORMAT
                      msg . attach ( self . _create_attachment ( * attachment ) )
          del _active . value
   if column_name in indexes :
 path_info = get_bytes_from_wsgi ( environ , 'PATH_INFO' , '/' )
              try :
   else :
     role , instructions = part . split ( '=' )
              if event == "START_ELEMENT" and node . nodeName == "object" :
 handler . addQuickElement ( "link" , item [ 'link' ] )
                  p_pattern = p_pattern [ 1 : ]
  del X
                  url = smart_urlquote ( 'http://%s' % middle )
 if scheme not in self . schemes :
                           non_capturing_groups . append ( len ( result ) )
 break
  finally :
                   compare_to = nodelist_true_output = self . nodelist_true . render ( context )
          if value in self . empty_values and self . required :
 from django . core . management . base import BaseCommand , CommandError
 self . hashvalue = hash ( tup )
    self . localize = localize
 from django . http . request import ( HttpRequest , QueryDict ,  RawPostDataException , UnreadablePostError , build_request_repr )
          delattr ( _MovedItems , name )
                  self . cookies [ key ] [ 'expires' ] = cookie_date ( time . time ( ) +  max_age )
 return re . sub ( r'&(?:\w+|#\d+);' , '' , force_text ( value ) )
 import tarfile
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 self . url = iri_to_uri ( url )
  return result
                      content = template_file . read ( )
     _translations = { }
   def trim_whitespace ( s ) :
          self . tags [ getattr ( func , "_decorated_function" , func ) . __name__ ] = func
  else :
 host = host [ : - 1 ] if host . endswith ( '.' ) else host
  except KeyError :
    REASON_PHRASES = {  100 : 'CONTINUE' ,  101 : 'SWITCHING PROTOCOLS' ,  102 : 'PROCESSING' ,  200 : 'OK' ,  201 : 'CREATED' ,  202 : 'ACCEPTED' ,  203 : 'NON-AUTHORITATIVE INFORMATION' ,  204 : 'NO CONTENT' ,  205 : 'RESET CONTENT' ,  206 : 'PARTIAL CONTENT' ,  207 : 'MULTI-STATUS' ,  208 : 'ALREADY REPORTED' ,  226 : 'IM USED' ,  300 : 'MULTIPLE CHOICES' ,  301 : 'MOVED PERMANENTLY' ,  302 : 'FOUND' ,  303 : 'SEE OTHER' ,  304 : 'NOT MODIFIED' ,  305 : 'USE PROXY' ,  306 : 'RESERVED' ,  307 : 'TEMPORARY REDIRECT' ,  308 : 'PERMANENT REDIRECT' ,  400 : 'BAD REQUEST' ,  401 : 'UNAUTHORIZED' ,  402 : 'PAYMENT REQUIRED' ,  403 : 'FORBIDDEN' ,  404 : 'NOT FOUND' ,  405 : 'METHOD NOT ALLOWED' ,  406 : 'NOT ACCEPTABLE' ,  407 : 'PROXY AUTHENTICATION REQUIRED' ,  408 : 'REQUEST TIMEOUT' ,  409 : 'CONFLICT' ,  410 : 'GONE' ,  411 : 'LENGTH REQUIRED' ,  412 : 'PRECONDITION FAILED' ,  413 : 'REQUEST ENTITY TOO LARGE' ,  414 : 'REQUEST-URI TOO LONG' ,  415 : 'UNSUPPORTED MEDIA TYPE' ,  416 : 'REQUESTED RANGE NOT SATISFIABLE' ,  417 : 'EXPECTATION FAILED' ,  418 : "I'M A TEAPOT" ,  422 : 'UNPROCESSABLE ENTITY' ,  423 : 'LOCKED' ,  424 : 'FAILED DEPENDENCY' ,  426 : 'UPGRADE REQUIRED' ,  428 : 'PRECONDITION REQUIRED' ,  429 : 'TOO MANY REQUESTS' ,  431 : 'REQUEST HEADER FIELDS TOO LARGE' ,  500 : 'INTERNAL SERVER ERROR' ,  501 : 'NOT IMPLEMENTED' ,  502 : 'BAD GATEWAY' ,  503 : 'SERVICE UNAVAILABLE' ,  504 : 'GATEWAY TIMEOUT' ,  505 : 'HTTP VERSION NOT SUPPORTED' ,  506 : 'VARIANT ALSO NEGOTIATES' ,  507 : 'INSUFFICIENT STORAGE' ,  508 : 'LOOP DETECTED' ,  510 : 'NOT EXTENDED' ,  511 : 'NETWORK AUTHENTICATION REQUIRED' ,  }
  if hasattr ( get_git_changeset , 'cache' ) :
  with transaction . atomic ( using = connection . alias , savepoint = connection . features . can_rollback_ddl ) :
  except AttributeError :
                  return d [ key ]
              self . compression_formats [ 'bz2' ] = ( bz2 . BZ2File , 'r' )
          cc = cc_delim_re . split ( response [ 'Cache-Control' ] )
 field_params [ 'max_digits' ] = row [ 4 ] if row [ 4 ] is not None else 10
   def _set_choices ( self , value ) :
          self . seek ( 0 )
              yield 'year'
  def add_arguments ( self , parser ) :
 if settings . USE_I18N or settings . USE_L10N :
 if message_context [ 0 ] == '"' :
     found = True
 class TranslatableFile ( object ) :
 current = context
 all_date_checks = set ( )
 stats = [ 0 , 0 ]
 try :
 if value in self . empty_values :
       date = datetime_safe . new_datetime ( date )
 __bool__ = new_method_proxy ( bool )
  if delta < 0 :
        class FixedOffset ( tzinfo ) :
 for form in self . initial_forms :
 from django . core . mail . message import (  EmailMessage , EmailMultiAlternatives ,  SafeMIMEText , SafeMIMEMultipart ,  DEFAULT_ATTACHMENT_MIME_TYPE , make_msgid ,  BadHeaderError , forbid_multi_line_headers )
 self . position -= len ( bytes )
              raise PageNotAnInteger ( 'That page number is not an integer' )
  self . deleted_objects . append ( obj )
          if isinstance ( regex , six . string_types ) :
  except AttributeError :
  return os . path . normpath ( path )
    def inclusion_tag ( self , file_name , context_class = Context , takes_context = False , name = None ) :
          if model_list is None :
   def make_key ( self , key , version = None ) :
  if ( i - day_of_year ) < ( 4 - weekday ) :
          namelist = self . _archive . namelist ( )
   def handle ( self , ** options ) :
  def add_arguments ( self , parser ) :
 @ stringfilter
  TYPE = RAW
  else :
 self . run_validators ( value )
 from django . template . base import TemplateDoesNotExist
          if source [ 1 ] is None :
 def lower ( value ) :
                  self . stdout . write ( "%s\n" % line )
                  if six . PY3 :
  else :
   def format ( number , decimal_sep , decimal_pos = None , grouping = 0 , thousand_sep = '' ,  force_grouping = False ) :
          return unbound . im_func
  from django . apps import apps
    def autodiscover_modules ( * args , ** kwargs ) :
          return False
              obj = "?"
  else :
              qs = queryset . filter ( ** { self . fk . name : self . instance } )
          return force_str ( '<%s %s %s>' % ( self . __class__ . __name__ , self . name , self . regex . pattern ) )
   return obj
 results = ( [ ] , [ ] )
  except AttributeError :
   def list ( self ) :
 is_relation = i in relations
  from django . core . exceptions import ValidationError
 if settings . USE_L10N and isinstance ( value , six . string_types ) :
              params = { 'max' : self . max_length , 'length' : len ( file_name ) }
  upto = match . end ( )
      def _checkLevel ( level ) :
    else :
 lock = RLock ( )
  return wrapped
              return int ( calendar . timegm ( self . data . utctimetuple ( ) ) )
                  return False
     class CheckboxChoiceInput ( ChoiceInput ) :
          current_timezone = timezone . get_current_timezone ( )
 for level in zip ( * [ m . ancestry for m in merge_migrations ] ) :
 alen = len ( args )
 self . var = var_obj
 if 'version' not in config :
 self . _add_installed_apps_translations ( )
 params = kwargs
 widget = NullBooleanSelect
  except IndexError :
                  domain_part = domain_part . encode ( 'idna' ) . decode ( 'ascii' )
              _ , params = cgi . parse_header ( content_disposition )
          self . _container . append ( self . make_bytes ( content ) )
                  slots = [ slots ]
 handler . startElement ( 'feed' , self . root_attributes ( ) )
              self . empty_label = None
              sys . stderr . write ( "fork #2 failed: (%d) %s\n" % ( e . errno , e . strerror ) )
  except TemplateDoesNotExist :
          arg = ',' + arg
          for name , field in self . fields . items ( ) :
                          data [ field . attname ] = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
     def literals ( choices , prefix = "" , suffix = "" ) :
 return self
      return lazy_number ( ungettext , six . text_type , singular = singular , plural = plural , number = number )
 import sys
  return get_resolver ( urlconf ) . resolve ( path )
 from django . utils . functional import allow_lazy
              factory = config [ '()' ]
                  if buffer_ :
      return CsrfTokenNode ( )
 return etags
 if six . PY3 :
                  if middle . endswith ( punctuation ) :
                        old_umask = os . umask ( 0 )
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
              name = getattr ( file , 'name' , None )
  value = data . get ( name )
  except StandardError as e :
    if ( ( ip_str . startswith ( ':' ) and not ip_str . startswith ( '::' ) ) or  ( ip_str . endswith ( ':' ) and not ip_str . endswith ( '::' ) ) ) :
 DARK_PALETTE = 'dark'
                       unhandled_params . pop ( 0 )
   def l ( self ) :
   def __deepcopy__ ( self , memo ) :
 self . choice_label = force_text ( choice [ 1 ] )
      NamedTemporaryFile = tempfile . NamedTemporaryFile
   def getvalue ( self ) :
          return t . render ( Context ( dictionary ) )
 return default
 self . context_data = context
 for resultclass in resultclasses :
   def total_form_count ( self ) :
   def new_file ( self , field_name , file_name , content_type , content_length , charset = None , content_type_extra = None ) :
 from django . utils import six
 keys = _iterkeys
  del attr
           if isinstance ( o , datetime . datetime ) :
 args . append ( work_file )
 self . buffer = b''
      def __init__ ( self , field ) :
   @ cached_property
 import datetime
                  fp . write ( msgs )
  from django . utils import six
     class TemplateIfParser ( IfParser ) :
    def w ( self ) :
              if not nesting :
          raise TemplateSyntaxError ( "'autoescape' argument should be 'on' or 'off'" )
  else :
  except LookupError :
   return result
              return
   warnings . warn ( "django.utils.importlib will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
 return self . _cache . add ( key , value , self . get_backend_timeout ( timeout ) )
from __future__ import unicode_literals
 final_attrs = self . build_attrs ( attrs )
   @ classmethod
 from django . utils . six . moves import socketserver
 if len ( bits ) < 4 :
                  values = list ( values )
   elif self . verbosity == 3 :
  else :
                  return '%s-%s-%s' % ( y , m , d )
 if ( ( ( self . allow_files and os . path . isfile ( full_file ) ) or  ( self . allow_folders and os . path . isdir ( full_file ) ) ) and  ( self . match is None or self . match_re . search ( f ) ) ) :
 import re
  options = { }
          return self . __name
      return _trans . gettext ( message )
              raise TemplateSyntaxError ( "'%s' tag with name '%s' appears more than once" % ( bits [ 0 ] , block_name ) )
 return 'initial-%s' % self . add_prefix ( field_name )
                      candidate_subs = dict ( ( k , urlquote ( v ) ) for ( k , v ) in candidate_subs . items ( ) )
      errors = [ ]
    def next_token ( self ) :
                                  chunk_length = len ( chunk )
          return getattr ( self . _out , name )
   class ArchiveException ( Exception ) :
 if app_label not in executor . loader . migrated_apps :
          form = super ( BaseInlineFormSet , self ) . _construct_form ( i , ** kwargs )
 return self
   if app_labels :
 return self . data . year
                  current = settings . TEMPLATE_STRING_IF_INVALID
  else :
 if len ( val1 ) != len ( val2 ) :
   if getattr ( func , 'expects_localtime' , False ) :
    else :
          return ( p1 . scheme , p1 . hostname , p1 . port ) == ( p2 . scheme , p2 . hostname , p2 . port )
    def now ( ) :
    def as_table ( self ) :
                 kwargs = match . groupdict ( )
                  self . connection . ehlo ( )
   root = config . get ( 'root' , None )
 args = [ ]
   def _update_errors ( self , errors ) :
          filelist = new_filenames
  if m :
   self . state = first
 import time as _time
              template_string = force_text ( template_string )
  _file . write ( chunk )
     try :
          if not filename :
 from django . core . serializers . base import DeserializationError
  except KeyError :
 from django . utils . encoding import force_str , force_text , DEFAULT_LOCALE_ENCODING
                  if app == 'django.core' :
   for key , op in OPERATORS . items ( ) :
              repr_attr = self . _setupfunc
  if format not in _serializers :
                  self . literal = mark_safe ( unescape_string_literal ( var ) )
              raise CommandError ( "App '%s' does not have migrations" % app_label )
           if ( hasattr ( self . cmd , 'missing_args_message' ) and  not ( args or any ( [ not arg . startswith ( '-' ) for arg in args ] ) ) ) :
                  other = other . __cast ( )
 if app_label not in executor . loader . migrated_apps :
          resolve ( path , urlconf )
 for opt in self . option_list :
              _mtimes [ filename ] = mtime
 assert not ( cls . _delegate_bytes and cls . _delegate_text ) , "Cannot call lazy() with both bytes and text return types."
 return True
 self . _fname = os . path . join ( self . file_path , fname )
  f = s [ : end ]
              value = ''
 super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
 app = TerminalIPythonApp . instance ( )
 styles . reverse ( )
 from django . utils . timezone import get_default_timezone , is_aware , is_naive
   try :
  from django . conf import settings
 parser . add_argument ( '--all' , '-a' , action = 'store_true' , dest = 'all' ,  default = False , help = 'Updates the message files for all existing locales.' )
 open_tags = [ ]
              self . _urlconf_module = self . urlconf_name
              return output
  from django . http import QueryDict
  except ValidationError as e :
  def _parse_header ( line ) :
 if push is not None :
              return list ( error ) [ 0 ]
 if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
              raise NoReverseMatch ( "Error importing '%s': %s." % ( lookup_view , e ) )
                  raise
  return { 'csrf_token' : _get_val ( ) }
 if next_item and isinstance ( next_item , ( list , tuple ) ) :
from collections import defaultdict
 def verbatim ( parser , token ) :
    def smart_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
          self . _delete ( self . _key_to_file ( key , version ) )
 self . xml . startElement ( "django-objects" , { "version" : "1.0" } )
   def __hash__ ( self ) :
                  return True
 attrs = { 'form' : form , 'extra' : extra ,  'can_order' : can_order , 'can_delete' : can_delete ,  'min_num' : min_num , 'max_num' : max_num ,  'absolute_max' : absolute_max , 'validate_min' : validate_min ,  'validate_max' : validate_max }
                  key += item
 start = 0
  if verbosity >= 2 :
 parser . add_library ( lib )
   __all__ = [  'activate' , 'deactivate' , 'override' , 'deactivate_all' ,  'get_language' , 'get_language_from_request' ,  'get_language_info' , 'get_language_bidi' ,  'check_for_language' , 'to_locale' , 'templatize' , 'string_concat' ,  'gettext' , 'gettext_lazy' , 'gettext_noop' ,  'ugettext' , 'ugettext_lazy' , 'ugettext_noop' ,  'ngettext' , 'ngettext_lazy' ,  'ungettext' , 'ungettext_lazy' ,  'pgettext' , 'pgettext_lazy' ,  'npgettext' , 'npgettext_lazy' ,  'LANGUAGE_SESSION_KEY' ,  ]
    def _get_timezone_name ( timezone ) :
              if self . verbosity >= 2 :
 from django . db import connections , DEFAULT_DB_ALIAS
              return False
   def _set_name ( self , name ) :
          if self . is_localized :
 self . locale_paths . insert ( 0 , os . path . join ( os . path . abspath ( dirpath ) , dirname ) )
  self . mod = new_mod
                      block = self
  extra_classes = set ( extra_classes or [ ] )
              kwargs [ 'instance' ] = self . get_queryset ( ) [ i ]
  if settings . USE_THOUSAND_SEPARATOR :
              for dirname in dirnames [ : ] :
  self . attr = old_attr
          key = self . make_key ( key , version = version )
 if isinstance ( rhs , SafeData ) :
   if not language_code_re . search ( accept_lang ) :
                  raise ValidationError ( ungettext (  "Please submit %d or more forms." ,  "Please submit %d or more forms." , self . min_num ) % self . min_num ,  code = 'too_few_forms' )
          pass
  _DJANGO_DEPRECATED_LOCALES = _BROWSERS_DEPRECATED_LOCALES
 new_operations = optimizer . optimize ( operations , migration . app_label )
              return ''
 return s
      if isinstance ( number , int ) :
 self . upload_handlers = ImmutableList (  self . upload_handlers ,  warning = "You cannot alter upload handlers after the upload has been processed."  )
              raise ValueError ( "Key '%s' not found" % key )
 return value . replace ( " " , "\xa0" )
   def __deepcopy__ ( self , memo ) :
  return split
 if self . instance . pk is None :
from __future__ import unicode_literals
 parser . add_argument ( 'migration_name' ,  help = 'Migrations will be squashed until and including this migration.' )
                  output . append ( label_output )
 return tpl . format ( self . name , self . sysid , self . pubid )
 def __init__ ( self , cmd , ** kwargs ) :
  unichr = unichr
              yield 'month'
   elif t . contents == 'comment' :
  key , value = match . groups ( )
                  self . default_locale_path = self . locale_paths [ 0 ]
 StringIO = io . StringIO
 new_migration = subclass ( "%04i_merge" % ( biggest_number + 1 ) , app_label )
   @ property
                      break
                  formatter = self . config [ 'formatters' ] [ formatter ]
  import importlib
              assert not isinstance ( to , six . string_types ) , '"to" argument must be a list or tuple'
    def time_format ( value , format_string ) :
 for i , ( dirpath , f ) in enumerate ( locations ) :
  except Resolver404 :
  LUHN_ODD_LOOKUP = ( 0 , 2 , 4 , 6 , 8 , 1 , 3 , 5 , 7 , 9 )
  if os . path . exists ( self . file_path ) and not os . path . isdir ( self . file_path ) :
          return node . render ( context )
 inner_result . extend ( res )
  factory = klass
     def _iterkeys ( self ) :
          return getattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )
                  translation . activate ( saved_locale )
   def as_textarea ( self , attrs = None , ** kwargs ) :
              raise TemplateSyntaxError ( "Invalid syntax in widthratio tag. Expecting 'as' keyword" )
              if os . path . isdir ( os . path . join ( path , entry ) ) :
   def get ( self , key , default = None , version = None ) :
 sites1 = _findall ( s1 , str ( year ) )
      def filter ( self , record ) :
  except ValueError :
   def _open ( self , name , mode = 'rb' ) :
 raise NotImplementedError ( 'subclasses of Tokenparser must provide a top() method' )
 for path in self . locale_paths :
 try :
  except ImportError :
              deactivate_all ( )
              if block_context is None :
    def iter_format_modules ( lang , format_module_path = None ) :
               ERRORS = {  errno . EACCES : "You don't have permission to access that port." ,  errno . EADDRINUSE : "That port is already in use." ,  errno . EADDRNOTAVAIL : "That IP address can't be assigned-to." ,  }
   def add_js ( self , data ) :
              raise base . DeserializationError (  "<%s> node is missing the required '%s' attribute"  % ( node . nodeName , attr ) )
              return list_ [ - 1 ]
                              current_expires = typecast_timestamp ( str ( current_expires ) )
  from collections import OrderedDict
               initial_forms = len ( self . initial ) if self . initial else 0
 if label_output :
              return type ( self ) . __next__ ( self )
 return IfEqualNode ( val1 , val2 , nodelist_true , nodelist_false , negate )
 def regex ( self ) :
          BaseCache . __init__ ( self , params )
   def _ipython_pre_100 ( self ) :
                      continue
    return self . has_key ( key )
 if isinstance ( server , six . string_types ) :
 for attr in _urllib_response_moved_attributes :
   def __enter__ ( self ) :
   @ property
 for possibility , pattern , defaults in possibilities :
 for i , word in enumerate ( words ) :
 from django . template . loader import BaseLoader
  for part in singular :
 supports_microseconds = False
   if options . get ( "list" , False ) :
 super ( TypedChoiceField , self ) . __init__ ( * args , ** kwargs )
                              d = d [ idx ]
   return format_html (  '<ul class="{0}">{1}</ul>' ,  self . error_class ,  format_html_join ( '' , '<li>{0}</li>' , ( ( force_text ( e ) , ) for e in self ) )  )
              assert not isinstance ( cc , six . string_types ) , '"cc" argument must be a list or tuple'
 if hasattr ( out , 'isatty' ) and out . isatty ( ) :
  else :
                  field_params [ 'max_digits' ] = row [ 4 ]
      def b ( s ) :
 codecs . lookup ( encoding )
 pass
              self . stderr = OutputWrapper ( options . get ( 'stderr' , sys . stderr ) , self . style . ERROR )
    location = urljoin ( current_uri , location )
              result . setlist ( key , value )
    try :
              raise CommandError ( "currently makemessages only supports domains "  "'django' and 'djangojs'" )
            opts = self . _meta
      directory = os . path . dirname ( full_path )
 if path . isdir ( expanded_template ) :
 link [ NEXT ] = root
                               self . required , self . label , self . initial = required , label , initial
 from django . utils . datastructures import MultiValueDict , ImmutableList
          iteritems = _iteritems
                  self . active_writers += 1
 from django . core import signing
          return 0
  Module_six_moves_urllib_error . _moved_attributes = _urllib_error_moved_attributes
              return None
              warnings . warn (  "AppCommand.handle_app() is superseded by "  "AppCommand.handle_app_config()." ,  RemovedInDjango19Warning , stacklevel = 2 )
    if not os . access ( self . file_path , os . W_OK ) :
 from django . utils . _os import upath
 for migration in migrations_to_squash :
           pid = 1
              new_name = '%sfield' % new_name
  return obj
                  ip ( )
                  _error_files . append ( filename )
                  contents = one_percent_re . sub ( '%%' , t . contents )
                      for name in handlers :
              self . _post , self . _files = QueryDict ( self . body , encoding = self . _encoding ) , MultiValueDict ( )
  return int ( timeout )
 break
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
  Module_six_moves_urllib_robotparser . _moved_attributes = _urllib_robotparser_moved_attributes
 from django . utils . encoding import force_text
              return ''
    if new_name . startswith ( '_' ) :
          return json . dumps ( { f : e . get_json_data ( escape_html ) for f , e in self . items ( ) } )
 return qs
                      fp . write ( content )
 if not os . path . exists ( self . _dir ) :
 self . _response_middleware = [ ]
 obj . widgets = copy . deepcopy ( self . widgets )
              self . full_clean ( )
                  self . connection . quit ( )
              if callable ( name ) :
      def parse_header ( line ) :
 wrapper . cache_clear = cache_clear
 import time
   else :
              result = None
                  if block_content [ : 9 ] in ( 'verbatim' , 'verbatim ' ) :
          if data :
          cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
          hfile = msvcrt . get_osfhandle ( _fd ( f ) )
                  raise TemplateSyntaxError ( "%r must be the first tag "  "in the template." % node )
 return mark_for_escaping ( value )
 oldroot [ RESULT ] = result
      if isinstance ( value , bytes ) :
 nan = ( 1e200 * 1e200 ) // ( 1e200 * 1e200 )
              raise AppRegistryNotReady (  "The translation infrastructure cannot be initialized before the "  "apps registry is ready. Check that you don't make non-lazy "  "gettext calls at import time." )
                  errors = getattr ( fp , "errors" , None )
 self . widget . choices = self . choices
 INDEX_PATTERN = re . compile ( r'^\[\s*(\w+)\s*\]\s*' )
 from django . core . management . sql import custom_sql_for_model , emit_post_migrate_signal , emit_pre_migrate_signal
          return os . path . join ( self . dirpath , self . file )
  else :
   formatters = config . get ( 'formatters' , EMPTY_DICT )
          obj = copy . copy ( self )
      def render ( self , context ) :
  except IndexError :
 cursor = connection . cursor ( )
 from __future__ import unicode_literals
              warning = 'ImmutableList object is immutable.'
   if not m and p < 0 :
   if parse_until :
   @ deconstructible
 self . loaded_object_count = 0
  return val
 if level :
              return self . _choices
 if not path . exists ( target_dir ) :
  split . append ( bit )
          key = self . make_key ( key , version = version )
 from django . core . exceptions import ImproperlyConfigured
              content_length = int ( environ . get ( 'CONTENT_LENGTH' ) )
  import decimal
 from __future__ import unicode_literals
 from django . utils . encoding import force_bytes
  if error_message is not None :
   def __delitem__ ( self , header ) :
                  value = value . replace ( replacement , '' )
 url , trimmed = escape ( url ) , escape ( trimmed )
          super ( EntitiesForbidden , self ) . __init__ ( )
   if new_name . find ( '__' ) >= 0 :
       comment_re = re . compile ( r"^((?:'[^']*'|[^'])*?)--.*$" )
              media_attrs = kwargs
          value = [ conditional_escape ( v ) for v in value ]
              handler . addQuickElement ( "comments" , item [ 'comments' ] )
                  payload = text . encode ( utf8_charset . output_charset )
  template_with_clear = '%(clear)s <label for="%(clear_checkbox_id)s">%(clear_checkbox_label)s</label>'
   def handle ( self , * tablenames , ** options ) :
      def __init__ ( self , protocol = 'both' , unpack_ipv4 = False , * args , ** kwargs ) :
  raise DisallowedHost ( msg )
import inspect
  stats [ MISSES ] += 1
    changes = autodetector . changes (  graph = loader . graph ,  trim_to_apps = app_labels or None ,  convert_apps = app_labels or None ,  )
          return s
  if os . path . exists ( filename ) :
     class MemoryFileUploadHandler ( FileUploadHandler ) :
          try :
              response . streaming_content = [ ]
          msg = '%sError importing module %s: "%s"' % (  error_prefix , dotted_path , e )
              raise CommandError ( "Cannot find a migration matching '%s' from app '%s'." % ( migration_name , app_label ) )
      return _trans . ungettext ( singular , plural , number )
              raise AttributeError ( "no such move, %r" % ( name , ) )
   return mark_safe ( '\n' . join ( lines ) )
          raise SerializerDoesNotExist ( format )
              if isinstance ( other , Promise ) :
  p = PillowImageFile . Parser ( )
  new_value = value + delta
 code = 'invalid'
 self . _cached_loaders = [ ]
   if not last_row . endswith ( row_ender ) :
                   raise NotImplementedError ( 'Awaiting Implementation' )
          for k , v in self . _iteritems ( ) :
 FIELD = "field"
 self . _called_from_command_line = True
 loop_dict [ 'last' ] = ( i == len_values - 1 )
 raise TypeError ( msg )
   except ValueError :
 html_gunk_re = re . compile ( r'(?:<br clear="all">|<i><\/i>|<b><\/b>|<em><\/em>|<strong><\/strong>|<\/?smallcaps>|<\/?uppercase>)' , re . IGNORECASE )
  local_attrs = self . build_attrs ( id = field % id_ )
              data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python (  node . getAttribute ( 'pk' ) )
 new_context . _reset_dicts ( values )
              return self . _stream . read ( * args , ** kwargs )
 @ stringfilter
 if hasattr ( timezone , 'normalize' ) :
 def __init__ ( self , connection_reset = False ) :
  from __future__ import unicode_literals
  else :
                  new_name = new_name . replace ( '__' , '_' )
              if self . verbosity >= 1 :
 if field . rel . through . _meta . auto_created :
                              break
 max_entries = params . get ( 'max_entries' , options . get ( 'MAX_ENTRIES' , 300 ) )
  termios . tcsetattr ( fd , termios . TCSANOW , attr_list )
   def module_to_dict ( module , omittable = lambda k : k . startswith ( '_' ) ) :
          return six . text_type ( s ) . encode ( encoding , errors )
 location = params . pop ( 'LOCATION' , '' )
                          self . configure_logger ( name , loggers [ name ] , True )
                      words [ i ] = escape ( word )
          os . environ [ 'DJANGO_SETTINGS_MODULE' ] = options . settings
  mail = EmailMultiAlternatives ( '%s%s' % ( settings . EMAIL_SUBJECT_PREFIX , subject ) ,  message , settings . SERVER_EMAIL , [ a [ 1 ] for a in settings . ADMINS ] ,  connection = connection )
          self . dict [ item ] = None
      def exec_ ( _code_ , _globs_ = None , _locs_ = None ) :
  else :
  from functools import wraps , update_wrapper , WRAPPER_ASSIGNMENTS
 self . keyOrder . remove ( key )
       def __init__ ( self , conditions_nodelists ) :
  if not value or '@' not in value :
 return [ mark_safe ( force_text ( obj ) ) for obj in value ]
  else :
 raise NotImplementedError ( 'subclasses of SyndicationFeed must provide a write() method' )
  from collections import OrderedDict
 from django . utils . safestring import mark_safe
    if not old_method and new_method :
   try :
  self . stream . write ( '%s\n' % msg_data )
 try :
  new_environ = os . environ . copy ( )
 has_new_option = hasattr ( self , 'requires_system_checks' )
   def __setattr__ ( self , name , value ) :
 self . pointer = i
 out = StringIO ( '' )
                  raise
    def http_date ( epoch_seconds = None ) :
   elif name is not None and compile_function is not None :
          raise ValueError ( "Negative base36 conversion input." )
          is_dst = False if dt is None else self . _isdst ( dt )
    except PermissionDenied :
              return _cached_filenames
 from django . utils . formats import get_format
          super ( Command , self ) . add_arguments ( parser )
 yield item
   self . write_migration_files ( changes )
                  msg += " The domain name provided is not valid according to RFC 1034/1035."
 db = options . pop ( 'using' , DEFAULT_DB_ALIAS )
 self . tag ( function_name , compile_func )
   def g ( self ) :
          assert isinstance ( level , int ) , "The first argument should be level."
  output_transaction = True
  elif isinstance ( value , datetime . time ) :
 substitutions [ 'clear_checkbox_id' ] = conditional_escape ( checkbox_id )
              state_frame [ self ] = None
  return instance
 self . sysid = sysid
 self [ 'Location' ] = iri_to_uri ( redirect_to )
          key = self . make_key ( key , version = version )
          return value
      needs_multipart_form = False
     class SafeBytes ( bytes , SafeData ) :
     class URLField ( CharField ) :
          mapping = { 'alpha' : 'a' , 'beta' : 'b' , 'rc' : 'c' }
   if klass not in cls . __dispatch :
              choice_value , choice_label = choice
   def delete ( self , key , version = None ) :
 super ( Command , self ) . __init__ ( )
  else :
 from __future__ import unicode_literals
 errors . extend ( _check_boolean_field_default_value ( ** kwargs ) )
  import django
   def _cull ( self ) :
      while True :
   response . _handler_class = self . __class__
              handler . addQuickElement ( "copyright" , self . feed [ 'feed_copyright' ] )
   def __nonzero__ ( self ) :
   def next_token ( self ) :
 if imatch :
   else :
   return m + Media ( definition )
              request = self . request_class ( environ )
          msg = 'Module "%s" does not define a "%s" attribute/class' % (  dotted_path , class_name )
 non_capturing_groups = [ ]
 auto_id = self . auto_id
      def ungettext ( singular , plural , number ) :
 from django . utils . _os import safe_join , abspathu
          if location is None :
  except KeyError :
 class CheckMessage ( object ) :
          try :
 if not response . has_header ( 'Vary' ) :
 get_function_defaults = operator . attrgetter ( _func_defaults )
                  pass
          time_str = time_str . decode ( 'utf-8' )
   if use_grouping :
   class Command ( BaseCommand ) :
                      import operator
   def split_contents ( self ) :
  slugify = allow_lazy ( slugify , six . text_type )
   def _itervalues ( self ) :
    return field_type , field_params , field_notes
    def negate ( self ) :
 def forms ( self ) :
  return output
                  raise ValueError (  "fk_name '%s' is not a ForeignKey to '%s.%'."  % ( fk_name , parent_model . _meta . app_label , parent_model . _meta . object_name ) )
 def encoding ( self ) :
 if version is None :
  self . from_email = from_email or settings . DEFAULT_FROM_EMAIL
   compile_func . __doc__ = func . __doc__
              return None
                  raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
      default_validators = [ validators . validate_slug ]
 if options [ 'outlog' ] :
  return 0
 upto = 0
   def more ( self ) :
              error_messages = kwargs . get ( 'error_messages' ) or { }
              return True
  except ImportError :
 if not self . _is_rendered :
 for model in not_installed_models :
   __contains__ = has_key
 if hasattr ( test_runner_class , 'option_list' ) :
 while 1 :
  except UnicodeEncodeError :
 patch_response_headers ( response , cache_timeout = - 1 )
 self . dicts = dicts
 from django . utils import six
  digits . insert ( - exponent , '.' )
 for k , v in ret . items ( ) :
   def _get_choices ( self ) :
   self . clean ( )
 try :
          return number_format ( value )
              sorted_items = sorted ( kwds . items ( ) )
  return r
 return self . _urlconf_module
          nm = Header ( nm , 'utf-8' ) . encode ( )
 flags = 0
 import sys
      def __html__ ( self ) :
  elif isinstance ( value , datetime . datetime ) :
  num_loopvars = len ( self . loopvars )
  else :
              pass
 if self . __dispatch is None :
  return super ( NullBooleanSelect , self ) . render ( name , value , attrs , choices )
  else :
 if value in ( None , '' ) :
                   def wrapper ( * args , ** kwds ) :
    class DjangoSafeDumper ( SafeDumper ) :
   if isinstance ( nodelist , NodeList ) and not isinstance ( node , TextNode ) :
   attrs = [ ]
              return SafeText ( data )
          if value :
   generic_lang_code = lang_code . split ( '-' ) [ 0 ]
 def errors ( self ) :
  except ( ValueError , InvalidOperation , TypeError , UnicodeEncodeError ) :
 return super ( QueryDict , self ) . pop ( key , * args )
   work_file = os . path . join ( self . dirpath , thefile )
 self . _files = MultiValueDict ( )
 from django . utils . module_loading import import_string
 return AssignmentNode ( takes_context , args , kwargs , target_var )
     _entity_re = re . compile ( r"&(#?[xX]?(?:[0-9a-fA-F]+|\w{1,8}));" )
            getattr ( self , 'error_dict' )
 if os . path . isfile ( fext ) :
 return iter ( getattr ( d , _iterkeys ) ( ** kw ) )
 dict . __setitem__ ( self , key , M )
   def __str__ ( self ) :
  def __init__ ( self , * args , ** kwargs ) :
 return compile_function
   def usage ( self , subcommand ) :
 parser . add_option ( '--settings' ,  help = 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )
 self . model_name = 'cacheentry'
              warnings . warn (  "`%s.%s` is deprecated, use `%s` instead." %  ( self . class_name , self . old_method_name , self . new_method_name ) ,  self . deprecation_warning , 2 )
                  self . stream . close ( )
  requires_system_checks = False
   if fixture_name != 'initial_data' and not fixture_files :
              self . stream . write ( "\n" )
  elif ch == '$' :
            media = sorted ( self . _css . keys ( ) )
 if match :
   RAW = "raw"
              invalid_apps = [ ]
 from django . utils . translation import ungettext , ugettext as _
 if not indent :
                  key = force_str ( key )
                  bit = self . render_node ( node , context )
 self . toks [ groupid ] = tok
              seen_data = set ( )
 if settings . SETTINGS_MODULE :
   return metaclass ( 'temporary_class' , None , { } )
 if app_label not in executor . loader . migrated_apps :
  Module_six_moves_urllib_request . _moved_attributes = _urllib_request_moved_attributes
 self . _caches . caches [ alias ] = cache
               signals . got_request_exception . send ( sender = self . __class__ , request = request )
    autodetector = MigrationAutodetector (  loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  InteractiveMigrationQuestioner ( specified_apps = app_labels , dry_run = self . dry_run ) ,  )
 return connection . send_messages ( messages )
 from django . utils . encoding import force_str , force_text
    if not settings . is_overridden ( 'MIDDLEWARE_CLASSES' ) :
       self . _is_rendered = False
  def to_python ( self , value ) :
 import re
              form = self . forms [ i ]
          return type ( self ) . __bool__ ( self )
 url_fields [ 2 ] = ''
   def validate ( self , value ) :
 self . validate_key ( key )
 raise CommandError ( 'There is no system check with the "%s" tag.' % invalid_tag )
              for result , params in possibility :
   if process_all :
   self . _rollback = len ( boundary ) + 6
   def __hash__ ( self ) :
  token = Token ( TOKEN_COMMENT , content )
                  for model in model_list :
          return self
          path = self . path ( path )
              raise base . SerializationError ( "Non-model object (%s) encountered during serialization" % type ( obj ) )
                  if self . directory_permissions_mode is not None :
   def as_text ( self ) :
 program_options = [ '--check-format' ]
          if not self :
   def __deepcopy__ ( self , memo ) :
          if isinstance ( data , ( MultiValueDict , MergeDict ) ) :
 if options . get ( 'use_default_ignore_patterns' ) :
                      self . stdout . write ( errors )
              if hasattr ( pattern , '_callback_str' ) :
 from __future__ import unicode_literals
   def root_attributes ( self ) :
 url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
 from django . utils . translation import ugettext_lazy
 from datetime import datetime
 return data
    def ungettext_lazy ( singular , plural , number = None ) :
  if getattr ( func , 'is_safe' , False ) and isinstance ( obj , SafeData ) :
         if run_syncdb and executor . loader . unmigrated_apps :
 pass
   return instance
   DEFAULT_MAX_NUM = 1000
 if expires is not None :
   def _cull ( self ) :
 if self . is_bound :
 new = '#: ' + orig_file [ 2 : ]
  if len ( parts ) > 1 and parts [ - 1 ] in self . compression_formats :
 self . connector = connector or self . default
 if isinstance ( offset , timedelta ) :
              import code
    def to_current_timezone ( value ) :
 super ( JsonResponse , self ) . __init__ ( content = data , ** kwargs )
   def incr ( self , key , delta = 1 , version = None ) :
    class PageNotAnInteger ( InvalidPage ) :
 handler . addQuickElement ( "link" , "" , { "rel" : "alternate" , "href" : self . feed [ 'link' ] } )
 exclude = options . get ( 'exclude' )
   except OSError as e :
  if self . verbosity > 0 :
          if kwarg_format :
              check . tags = tags
          return False
  except AttributeError :
  return None
   def h ( self ) :
               if len ( language [ p + 1 : ] ) > 2 :
  def _get_height ( self ) :
  from __future__ import unicode_literals
      hidden_widget = MultipleHiddenInput
 self . use_tls = settings . EMAIL_USE_TLS if use_tls is None else use_tls
  result . append ( ( lang , priority ) )
                      cache . clear ( )
  return nodes
       check_for_migrations ( app_config , connection )
          return ZERO
   def handle ( self , * args , ** options ) :
  else :
 if not check_for_language ( lang ) :
  if not response . has_header ( 'Expires' ) :
          if not isinstance ( i , six . integer_types ) :
   args = [ ]
              parser . _namedCycleNodes = { }
 special_floats = [ str ( pos_inf ) , str ( neg_inf ) , str ( nan ) ]
 return ret
    if ch == '<' :
 bits = token . split_contents ( )
 self . dirpath = dirpath
     @ register . filter ( is_safe = True )
                  try :
 FILE = "file"
 if len ( bits ) == 2 :
                      resource = resource_string ( app_config . name , pkg_name )
              url_fields = split_url ( value )
  except StandardError as e :
  expires = None
          try :
 return self . add_truncation_text ( ' ' . join ( words ) , truncate )
   try :
          _load_serializers ( )
  return message
 if self . args :
   class Command ( AppCommand ) :
 if not self . is_required :
              file = tempfile . NamedTemporaryFile ( suffix = '.upload' ,  dir = settings . FILE_UPLOAD_TEMP_DIR )
                      self . empty_block_tag ( token )
                              os . close ( fd )
   def close ( self , ** kwargs ) :
 if 'max-age' in cc :
                  import_module ( '.management' , app_config . name )
                  definition [ 'opts' ] = opts
    def is_url ( self , template ) :
    def safe_join ( base , * paths ) :
 if not bits :
  return klass
          for k , v in self . _iteritems ( ) :
          return self . environ . get ( 'wsgi.url_scheme' )
 return bool ( ret )
           MAXSIZE = int ( ( 1 << 31 ) - 1 )
              self . stream = stream_or_string
   def delete ( self , key , version = None ) :
   base64d = force_bytes ( TimestampSigner ( key , salt = salt ) . unsign ( s , max_age = max_age ) )
     def configure_logger ( self , name , config , incremental = False ) :
      filepath = os . path . abspath ( filepath )
 self . _createdir ( )
                      raise CommandError (  "errors happened while running msguniq\n%s" % errors )
  time_re = re . compile (  r'(?P<hour>\d{1,2}):(?P<minute>\d{1,2})'  r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?'  )
 self . context = context
 six . reraise ( CommandError , CommandError ( new_msg ) , sys . exc_info ( ) [ 2 ] )
                              if isinstance ( val , tuple ) :
 length = int ( num )
          os . rmdir ( original_path )
  closed = property ( _get_closed )
   else :
    def save_m2m ( ) :
  result = self . __class__ ( )
                  break
 global _default
 strfunc = Name ( "__str__" , prefix = unifunc . prefix )
    @ register . tag ( 'extends' )
     class NowNode ( Node ) :
                          yield line
  else :
                      raise TemplateSyntaxError ( "Variables and attributes may "  "not begin with underscores: '%s'" %  var )
 decimals = abs ( exponent )
   return set ( x for x in ext_list if x . strip ( '.' ) not in ignored )
          super ( LocaleRegexURLResolver , self ) . __init__ (  None , urlconf_name , default_kwargs , app_name , namespace )
          result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
              app_names = sorted ( loader . migrated_apps )
 self . _encoding = val
                  return type . __new__ ( cls , name , ( ) , d )
          self . name = name
   except SystemExit :
    from django . core . servers . basehttp import get_internal_wsgi_application
                  warnings . warn ( 'Cache key contains characters that will cause '  'errors if used with memcached: %r' % key ,  CacheKeyWarning )
  def __init__ ( self , dir , params ) :
  try :
              return func
from __future__ import unicode_literals
      @ register . tag ( 'block' )
 def scheme ( self ) :
  from django . apps import apps
 try :
     backend_name = connection . settings_dict [ 'ENGINE' ] . split ( '.' ) [ - 1 ]
    def get_script_name ( environ ) :
                      if filename . endswith ( '.mo' ) :
  import fnmatch
    else :
          return value
              if isinstance ( arg , Promise ) :
 if six . PY2 and not isinstance ( path , bytes ) :
                  continue
          if block_name in parser . __loaded_blocks :
 import codecs
                  exclude . append ( f . name )
 self . port = port or settings . EMAIL_PORT
          for d in self . dicts [ - 1 ] :
    elif t . token_type == TOKEN_COMMENT :
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
 from email . mime . text import MIMEText
 COMMENT_TAG_END = '#}'
                  return fext
              try :
 import struct
           logging . captureWarnings ( True )
 import re
 from email . message import Message
   def close ( self ) :
  messages = { }
 raise ValidationError ( self . error_messages [ 'max_length' ] , code = 'max_length' , params = params )
    try :
 rollback = self . _rollback
   def display ( self ) :
  tagname = tagname . lower ( )
   def __bool__ ( self ) :
              orig = getattr ( self . parent_instance , self . to_field )
 bits = bits [ : - 2 ]
                      if contains ( result [ - 1 ] , Group ) :
      default_validators = [ validators . validate_ipv4_address ]
   from django . apps import apps
  loggers = config . get ( 'loggers' , EMPTY_DICT )
              self . stdout . write ( "Downloading %s\n" % display_url )
      renderer = None
                  cursor . execute ( "DELETE FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
  from django . utils import six
 for refto , refs in references . items ( ) :
          self . subject = subject
 _super ( SimpleLazyObject , self ) . __init__ ( )
          return self . as_ul ( )
    return (  format_html_join ( '' , ' {0}="{1}"' , sorted ( attrs . items ( ) ) ) +  format_html_join ( '' , ' {0}' , sorted ( boolean_attrs ) )  )
  def load_template_source ( self , template_name , template_dirs = None ) :
 field = self . fields [ fieldname ]
   finally :
              Model = _get_model ( d [ "model" ] )
          return do_translate ( message , 'ugettext' )
           if cursor :
 if not rest :
                  if isinstance ( value , str ) :
 os . _exit ( 1 )
    outdict [ name ] = value , params
   else :
    def utcoffset ( self , dt ) :
                  keys = node . getElementsByTagName ( 'natural' )
              return self . queryset . none ( )
              return super ( MultiValueDict , self ) . __getitem__ ( key )
                  if old_field_name :
              value = ConvertingTuple ( value )
              pk_key = "%s-%s" % ( self . add_prefix ( i ) , self . model . _meta . pk . name )
          return setattr ( caches [ DEFAULT_CACHE_ALIAS ] , name , value )
  except ( OSError , IOError ) :
 from django . core . files import temp as tempfile
      def __init__ ( self , stream , boundary ) :
  _standard_context_processors = tuple ( processors )
  last = self . data . day % 10
                  if self . required :
  inner_text = [ ]
 orig_file = os . path . join ( self . dirpath , self . file )
  except :
    def check_migrations ( self ) :
          validate_ipv4_address ( value )
              raise CommandError ( "Cannot find a migration matching '%s' from app '%s'. Is it in INSTALLED_APPS?" % (  migration_name , app_label ) )
          self . timezone = timezone
 self . chunk_size = chunk_size
 if mimetype is None :
              return SafeText ( t )
  else :
          if self . deactivate :
          encoding = self . encoding or settings . DEFAULT_CHARSET
 from django . utils . encoding import force_bytes , force_text , force_str , iri_to_uri
 duplicate . render_context = copy ( self . render_context )
 name = self . path ( name )
 resolver = urlresolvers . RegexURLResolver ( r'^/' , urlconf )
         for name , field in self . fields . items ( ) :
      status_code = 500
              invalid_tag = next ( tag for tag in tags if not checks . tag_exists ( tag ) )
  else :
           if name is not None :
 def urlize ( value , autoescape = None ) :
    class CheckRegistry ( object ) :
 from os . path import join , normcase , normpath , abspath , isabs , sep , dirname
     class DecimalField ( IntegerField ) :
                  try :
          p = int ( arg )
 end_index = None
  if isinstance ( s , six . memoryview ) :
  except ( OverflowError , ValueError ) as exc :
          offset = offset . seconds // 60
 from collections import OrderedDict
   def create_token ( self , token_string , source , in_tag ) :
   if max_age is not None :
                  fields = list ( six . iteritems ( base . base_fields ) ) + fields
 if widgets and f . name in widgets :
  out = text [ : end_text_pos ]
 request . resolver_match = resolver_match
 return self . forms [ : self . initial_form_count ( ) ]
  if hasattr ( settings , "SERIALIZATION_MODULES" ) :
                  t = Template ( output , name = filepath )
 for file in options [ 'files' ] :
  return dec
                  self . bad_cookies = set ( )
 tok = '"' + guts + '"'
              result = datetime . datetime ( value . year , value . month , value . day )
                cached_loaders = [ ]
   def __exit__ ( self , exc , value , tb ) :
   raise Resolver404 ( { 'tried' : tried , 'path' : new_path } )
  else :
          self . _post = QueryDict ( '' )
              return key_func
   def get ( self , key , default = None , version = None ) :
  from django . core . management . base import BaseCommand , CommandError
   else :
  def transform ( self , node , results ) :
   def format_output ( self , rendered_widgets ) :
 field_value = self . cleaned_data . get ( field , None )
  if field in self . errors :
                  EventHandler . modified_code = I18N_MODIFIED
   cwords = os . environ [ 'COMP_WORDS' ] . split ( ) [ 1 : ]
  return bool ( initial ) != bool ( data )
 if self . forms :
 from django . forms . forms import *
    class CheckboxSelectMultiple ( RendererMixin , SelectMultiple ) :
 from django . utils . translation import ugettext , ungettext
 num = cursor . fetchone ( ) [ 0 ]
   def size ( self , name ) :
 import json
   update_wrapper ( _dec , decorator , assigned = available_attrs ( decorator ) )
                  args = ( )
 template = Template ( content )
    def getvalue ( self ) :
          HTMLParser = _html_parser . HTMLParser
   def __iter__ ( self ) :
 def escape_quotes ( m ) :
   def translate_token ( self , token ) :
 if max_age is not None :
 from django . db import connections , DEFAULT_DB_ALIAS
 def join ( value , arg , autoescape = None ) :
                  checkbox_name = self . clear_checkbox_name ( name )
                  deps = getattr ( model . natural_key , 'dependencies' , [ ] )
              response . content = b''
 if content_disposition :
   def splitext ( self , the_path ) :
  path = path_override if path_override is not None else request . path
 msg_count += 1
 from django . conf import settings
   def _set_size ( self , size ) :
 name = sign + hhmm
          t = select_template ( template_name , dirs )
 self . xml = SimplerXMLGenerator ( self . stream , self . options . get ( "encoding" , settings . DEFAULT_CHARSET ) )
    self . end_object ( obj )
 __delitem__ = new_method_proxy ( operator . delitem )
              selected_html = ''
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
 def __init__ ( self , file ) :
 def do_include ( parser , token ) :
    def add_item_elements ( self , handler , item ) :
          if self . _isdst ( dt ) :
   def __eq__ ( self , other ) :
   self . file . seek ( 0 )
  current_version = sys . version_info
                      try :
   def handle ( self , * app_labels , ** options ) :
      def __init__ ( self , filter_expression ) :
 return result
          return force_str ( "<Text Node: '%s'>" % self . s [ : 25 ] , 'ascii' ,  errors = 'replace' )
  for template_dir in template_dirs :
 params = { 'datetime' : value , 'current_timezone' : current_timezone }
 path = parts [ 1 : ]
  func ( path )
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : choice } ,  )
 oldroot [ KEY ] = key
   return force_text ( name . replace ( '\\' , '/' ) )
  output_transaction = True
 parser . add_argument ( '--natural-foreign' , action = 'store_true' , dest = 'use_natural_foreign_keys' , default = False ,  help = 'Use natural foreign keys if they are available.' )
 self . connector = conn_type
                  response = middleware_method ( request )
 return parser . parse ( )
 try :
 if os . path . exists ( potfile ) :
          is_dst = False if dt is None else self . _isdst ( dt )
              self . _start_relational_field ( field )
   if sublist_item :
   def attach ( self , filename = None , content = None , mimetype = None ) :
  elif ( attrvalue [ : 1 ] == '\'' == attrvalue [ - 1 : ] or  attrvalue [ : 1 ] == '"' == attrvalue [ - 1 : ] ) :
 directory_created = { }
   else :
          self . _archive . list ( * args , ** kwargs )
                  self . stdout . write ( "  Creating tables...\n" )
 from django . core . management . base import BaseCommand , CommandError
              yield ( "" , self . field . empty_label )
   size = property ( _get_size , _set_size )
 if sys . platform . startswith ( 'java' ) :
    def handle_fk_field ( self , obj , field ) :
          return s
 parser = MultiPartParser ( META , post_data , self . upload_handlers , self . encoding )
 from django . utils . six . moves . urllib . parse import urljoin
                      natural = value . natural_key ( )
              return list ( self . itervalues ( ) )
   def non_field_errors ( self ) :
 max_age = max ( 0 , delta . days * 86400 + delta . seconds )
 kwargs = kwargs or { }
 return obj_dict
      fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
          parser . add_argument ( 'addrport' , nargs = '?' ,  help = 'Optional port number, or ipaddr:port' )
 from django . utils . six . moves import http_cookies
          return json . loads ( data . decode ( 'latin-1' ) )
   def empty_block_tag ( self , token ) :
              self . _mark_post_parse_error ( )
 def url ( parser , token ) :
 if six . PY2 and not isinstance ( path , six . text_type ) :
                  _html_parser . HTMLParser . __init__ ( self , convert_charrefs = convert_charrefs , ** kwargs )
 def nodelist ( self ) :
  try :
 intrans = False
              self . stream . write ( "," )
                      data [ field . attname ] = None
 import warnings
                  w = self . choice_input_class ( self . name , self . value ,  self . attrs . copy ( ) , choice , i )
    def remove_move ( name ) :
  else :
           raise parser . error_class (  "Not expecting '%s' in this position in if tag." % self . id  )
 m = self . WORD_PATTERN . match ( rest )
 table = connections [ db ] . ops . quote_name ( self . _table )
    return exclude
          value = request . META . get ( header , None )
  nm , addr = addr
              extra_classes = extra_classes . split ( )
          return locale [ : p ] . lower ( ) + '-' + locale [ p + 1 : ] . lower ( )
 iterlists = _iterlists
              ignore_patterns += [ 'CVS' , '.*' , '*~' , '*.pyc' ]
     __all__ = [ 'file_move_safe' ]
   def gen_filenames ( only_new = False ) :
 EMPTY_DICT = { }
           from django . conf import settings , global_settings
              return 1
               return False
   class _OFFSET ( Structure ) :
 if value is None :
   parser = subcommand_cls . create_parser ( '' , cwords [ 0 ] )
 return version + delta
               if not re . search ( r'^[_a-zA-Z]' , name ) :
 clean = lambda self , x : len ( x )
 from django . utils import formats , six
    def is_writable ( path ) :
              params = [ source [ 1 ] ]
      help = "Prints the custom table modifying SQL statements for the given app name(s)."
 self . charset = None
  else :
          self . tokens . insert ( 0 , token )
 if len ( bits ) not in ( 2 , 3 ) :
          raise TemplateSyntaxError ( "'%s' tag takes only one argument" % bits [ 0 ] )
              raise TemplateSyntaxError ( "Invalid filter: '%s'" % filter_name )
    def number_format ( value , decimal_pos = None , use_l10n = None , force_grouping = False ) :
    def _isdst ( self , dt ) :
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
   class BaseLoader ( object ) :
     def modelformset_factory ( model , form = ModelForm , formfield_callback = None ,  formset = BaseModelFormSet , extra = 1 , can_delete = False ,  can_order = False , max_num = None , fields = None , exclude = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :
   else :
 raise NotImplementedError ( "This backend doesn't support absolute paths." )
                  self . stream . write ( " " )
 bits = token . split_contents ( )
          del _active . value
    dot_re = re . compile ( r'\S' )
              self . stdout . ending = None
  except NotImplementedError :
  if i < self . initial_form_count ( ) and 'instance' not in kwargs :
          if response . streaming :
                  if is_templatized :
 if not response . has_header ( 'Cache-Control' ) :
  else :
 content = template . render ( context )
     if isinstance ( obj , datetime . datetime ) :
   url_fields = split_url ( urlunsplit ( url_fields ) )
from django . dispatch import Signal
          kwargs [ 'max_age' ] = min ( int ( cc [ 'max-age' ] ) , kwargs [ 'max_age' ] )
      def normalize_col_name ( self , col_name , used_column_names , is_relation ) :
 from django . test . utils import get_runner
 value . configurator = self
          if hextet . count ( '.' ) == 3 :
   def render ( self , context ) :
 self . file_permissions_mode = (  file_permissions_mode if file_permissions_mode is not None  else settings . FILE_UPLOAD_PERMISSIONS  )
 from django . core . management import call_command
              key = self . make_key ( key , version = version )
 self . locale_dir = locale_dir
  else :
 link_prev [ NEXT ] = link_next
     if not options [ 'no_startup' ] :
 attrs [ 'declared_fields' ] = OrderedDict ( current_fields )
                      number_value = rhs
                  bad_app_labels . add ( app_label )
  elif self . waiting_readers != 0 :
  else :
  return _ ( 'AM' )
                      rel_model = field . rel . to
 try :
                   break
   def patch_cache_control ( response , ** kwargs ) :
              value = self . _empty_value
    return value if six . PY2 else value . encode ( ISO_8859_1 )
                  if status != STATUS_OK :
  filename = ( 'utf-8' , '' , filename )
   def temporary_file_path ( self ) :
  if command . verbosity > 1 :
   def __repr__ ( self ) :
 from django . db import connections , DEFAULT_DB_ALIAS
 try :
          if not hasattr ( self , '_files' ) :
 if hasattr ( extra_classes , 'split' ) :
    def check_for_language ( lang_code ) :
          self . filter_expression = filter_expression
          """Close the cache connection"""
    def inotify_code_changed ( ) :
 if output :
   try :
          try :
          return path . encode ( fs_encoding )
   def error ( self , token , msg ) :
  else :
 result = logging . Formatter ( fmt , dfmt )
                   args . append ( parser . compile_filter ( bit ) )
  connection = connections [ options [ 'database' ] ]
 if not templatetags_modules :
   def __getitem__ ( self , alias ) :
   signals . request_finished . send ( sender = self . _handler_class )
          if app_config . models_module is None :
 collect . extend ( settings . TEMPLATE_CONTEXT_PROCESSORS )
                      raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
 if len ( bits ) < 2 :
 logging . _acquireLock ( )
          encoding = 'ascii'
              for format in self . input_formats :
                      self . stderr . write (  "Notice: Couldn't set permission bits on %s. You're "  "probably using an uncommon filesystem setup. No "  "problem." % new_path , self . style . NOTICE )
  return palette
 for f in fields :
  import hashlib
  except ValueError :
   def end_object ( self , obj ) :
  def decorator ( klass ) :
  logging . _handlers . clear ( )
    for key , value in six . iteritems ( kwargs ) :
    def time_format ( value , format = None , use_l10n = None ) :
 if not os . path . isfile ( pythonrc ) :
 self . stdout . write ( self . style . NOTICE ( "Run 'python manage.py migrate' to apply them.\n" ) )
          _load_serializers ( )
              if bit :
 if errors :
 try :
 cls = extension_map . get ( ext )
              if self . queryset is not None :
                  raise InvalidCacheBackendError ( "Could not find backend '%s': %s" % (  backend , e ) )
  if help_texts and f . name in help_texts :
          LocaleRegexProvider . __init__ ( self , regex )
  if isinstance ( value , six . text_type ) :
   def __str__ ( self ) :
  elif char == '\\' :
 parts . append ( decimals )
      raise ImproperlyConfigured ( "You must define a '%s' cache" % DEFAULT_CACHE_ALIAS )
   def get_json_data ( self , escape_html = False ) :
              @ wraps ( fset )
 table_output = [ ]
 from functools import update_wrapper
 import warnings
              return match . group ( 0 )
  else :
  return super ( SimpleTemplateResponse , self ) . __iter__ ( )
    class EscapeBytes ( bytes , EscapeData ) :
  else :
   return statements
 return fp . getvalue ( )
              return None
 with connections [ db ] . cursor ( ) as cursor :
 interactive = options . get ( 'interactive' )
  if widgets is not None :
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_m2m_field() method' )
 self . deprecation_warning = deprecation_warning
          response [ 'Last-Modified' ] = http_date ( )
 _iteritems = "items"
              if key in dict_ :
 new_second_item = [ ]
  else :
          return ''
      print ( FASTCGI_HELP )
  else :
     request_finished . connect ( update_watch )
  fd = os . open ( full_path , flags , 0o666 )
  delattr ( self . _wrapped , name )
 if filters :
          return mod . register
 __iadd__ = complain
  import copy
              try :
 self . pubid = pubid
   def eval ( self , context ) :
              if "'stream'" not in str ( te ) :
                  attrs_plus = self . attrs . copy ( )
  with transaction . atomic ( using = self . using ) :
 root = nonlocal_root [ 0 ]
 get_function_code = operator . attrgetter ( _func_code )
                  input_format = get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ]
                  nodes . extend ( nodelist . get_nodes_by_type ( nodetype ) )
 try :
   return EventHandler . modified_code
  return ''
  return new_class
 if handlers :
                  response = middleware_method ( request , response )
          if can_fail :
     def get_default_timezone_name ( ) :
 globalpath = os . path . join (  os . path . dirname ( upath ( sys . modules [ settings . __module__ ] . __file__ ) ) , 'locale' )
          f = os . path . join ( p , cmd )
   def is_checked ( self ) :
              self . inner_run ( None , ** options )
 self . keyOrder = list ( data ) if data else [ ]
 opfunc . __doc__ = getattr ( int , opname ) . __doc__
 field_notes . append ( 'Field renamed because of name conflict.' )
    except Exception as e :
  etags = [ e . encode ( 'ascii' ) . decode ( 'unicode_escape' ) for e in etags ]
                      e . args = ( "Problem installing fixture '%s': %s" % ( fixture_file , e ) , )
              if six . PY3 :
  return True
 filter = get_exception_reporter_filter ( request )
              m = regex . search ( text , pos )
              for line in self . handle_inspection ( options ) :
 try :
          raise TemplateSyntaxError ( "%r tag takes at least one argument: the name of the template to be included." % bits [ 0 ] )
     class WSGIRequest ( http . HttpRequest ) :
          callback = getattr ( self . urlconf_module , 'handler%s' % view_type , None )
          locale = options . get ( 'locale' )
  except ( OSError , NotImplementedError , AttributeError ) :
          offset = date . tzinfo . utcoffset ( date )
                      continue
                  total_forms = initial_forms
 from django . utils import six , timezone
     class datetime ( real_datetime ) :
  except TypeError as te :
 return _get_timezone_name ( get_default_timezone ( ) )
                      translated = translated % rhs
                  k = item [ 0 ]
 return cache
 self . _lock = threading . RLock ( )
              self . first = parser . expression ( bp )
  TestRunner = get_runner ( settings , options . get ( 'testrunner' ) )
 tempdir = tempfile . mkdtemp ( prefix = prefix , suffix = '_extract' )
                  format = color_settings . get ( role , { } )
  final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )
 self . _populated = True
  def items ( self ) :
              val = Header ( val ) . encode ( )
   return False
 if self . domain == 'djangojs' :
 def content ( self , value ) :
           return s
 from django . core . management . base import BaseCommand , CommandError
              return ''
  else :
 if not os . path . exists ( top_dir ) :
              ext_list [ i ] = '.%s' % ext_list [ i ]
 import smtplib
  if hasattr ( parent , 'render' ) :
                          deps . append ( rel_model )
               param , value = list ( six . iteritems ( kwarg ) ) [ 0 ]
 if not self . use_natural_primary_keys or not hasattr ( obj , 'natural_key' ) :
              is_templatized = True
                  return self . __bytes_cast ( )
   if field . rel . to . _meta . pk . rel :
 self . _content_length = content_length
  else :
              self . _servers = server
   class Serializer ( PythonSerializer ) :
   self . autocomplete ( )
                if settings . DEBUG :
  mail . outbox . extend ( messages )
              raise ValueError ( "The file cannot be reopened." )
  if len ( bits ) < 3 or bits [ 1 ] != 'as' :
              end = len ( s )
                  raise TemplateSyntaxError ( "'%s' is not a valid tag library: %s" %  ( taglib , e ) )
 charset = content_type_extra . get ( 'charset' )
 if self . _non_form_errors is None :
   return False
 if match :
                  num += 1
  return '\n' . join ( output )
 if hasattr ( self , '_coerce' ) :
  formfield . queryset = formfield . queryset . complex_filter ( limit_choices_to )
  def __init__ ( self ) :
  if ch == '?' :
                      retval = newretval
              factor -= 1
     class Textarea ( Widget ) :
  new_value = value + delta
              from django . utils . translation import trans_real as trans
 MIMEMultipart . __setitem__ ( self , name , val )
  else :
                      if getattr ( current , 'do_not_call_in_templates' , False ) :
                          locks . unlock ( fd )
                          if iso_input not in val :
   def __repr__ ( self ) :
   def _construct_form ( self , i , ** kwargs ) :
  else :
  unencoded_ampersands_re = re . compile ( r'&(?!(\w+|#\d+);)' )
 related_att = getattr ( obj , field . get_attname ( ) )
   return view_func
   def __iter__ ( self ) :
          input_val = force_text ( text )
   def __getitem__ ( self , idx ) :
                  msg = ( "%(model)s.Meta.%(opt)s cannot be a string. "  "Did you mean to type: ('%(value)s',)?" % {  'model' : new_class . __name__ ,  'opt' : opt ,  'value' : value ,  } )
 return len ( self . non_form_errors ( ) ) + sum ( len ( form_errors ) for form_errors in self . errors )
  return force_text ( s , encoding , strings_only , errors )
          self . reader_enters ( )
 from django . utils . module_loading import import_string
   if getattr ( obj , field . name ) is not None :
  else :
    return msgs
  except KeyError :
    def __len__ ( self ) :
 if hasattr ( signal , 'SIGTTOU' ) :
  return list ( _serializers )
                  return kwargs
 if decimal_separator in value :
 self . setFeature ( handler . feature_external_ges , False )
   def pop ( self , idx = - 1 ) :
 if isinstance ( s , bytes ) :
              raise AttributeError ( "'%s' object has no attribute 'ordered_forms'" % self . __class__ . __name__ )
              with io . open ( potfile , 'r' , encoding = 'utf-8' ) as fp :
                      for line in sequence_sql :
 self . _num_pages = int ( ceil ( hits / float ( self . per_page ) ) )
              value = formats . sanitize_separators ( value )
  elif basetype == 'message' and subtype == 'rfc822' :
   def __str__ ( self ) :
 import time
                  pass
   def _get_to_python ( self , field ) :
    if item [ 'enclosure' ] is not None :
  if isinstance ( s , bytes ) :
    if isinstance ( f , models . FileField ) :
 plural_re = re . compile ( r"""^\s*plural$""" )
  def __init__ ( self , file , name = None ) :
  from django . apps import apps
                      obj = None
      @ register . filter ( expects_localtime = True , is_safe = False )
   def javascript_quote ( s , quote_double_quotes = False ) :
   def _has_changed ( self , initial , data ) :
 return { }
                  want_unicode = True
              self . mod = old_mod
   class Loader ( BaseLoader ) :
          self . file . write ( raw_data )
   def __iter__ ( self ) :
          return False
  return _long_to_bin ( result , hex_format_string )
              return None
  else :
                  warnings . warn (  "No fixture data found for '%s'. (File format may be "  "invalid.)" % fixture_name ,  RuntimeWarning  )
             self . _headers = { }
 i += 1
  except DecimalException :
          if not hasattr ( self , '_post' ) :
 if mem_args in cache :
                  new_obj = func ( obj , autoescape = context . autoescape , * arg_vals )
 return scheme in self . url_schemes
  def indexbytes ( buf , i ) :
                 value = field . widget . value_from_datadict ( self . data , self . files , self . add_prefix ( name ) )
 remaining -= len ( emitting )
          memoryview = memoryview
 for ldir in dirs :
              return [ ]
          if len ( self . _cache ) >= self . _max_entries :
  def add_arguments ( self , parser ) :
           LOCK_EX = LOCK_SH = LOCK_NB = 0
  else :
                  self . __prepare_class__ ( )
  if self . localize :
      format_key = ''
          return iri
 raise NotImplementedError ( 'subclasses of BaseCache must provide a clear() method' )
      class LabelCommand ( BaseCommand ) :
 self . _leftover = b''
              processors = ( )
 attachment = SafeMIMEText ( content , subtype , encoding )
          data = conditional_escape ( arg ) . join ( value )
 t = super ( SafeBytes , self ) . __add__ ( rhs )
 @ stringfilter
                  raise TypeError ( "relative imports require the 'package' argument" )
          return self . as_table ( )
 p1 , p2 = urlparse ( url1 ) , urlparse ( url2 )
  exp = exp . replace ( microsecond = 0 )
                  total_forms = self . max_num
   def delete_cookie ( self , key , path = '/' , domain = None ) :
                   def wrapper ( * args , ** kwds ) :
 if six . PY3 :
 from django . utils . deprecation import RemovedInDjango19Warning
                      for f in dirs :
 if self . connection :
          items = _iteritems
 from itertools import dropwhile
 self . _producer = producer
   except StandardError as e :
 if isinstance ( title , ( list , tuple ) ) :
    class BlockContext ( object ) :
               exhaust ( self . _input_data )
 if hasattr ( timezone , 'normalize' ) :
 from email . utils import formatdate
 format = force_str ( default or get_format ( 'DATE_INPUT_FORMATS' ) [ 0 ] )
              handler . addQuickElement ( "rights" , item [ 'item_copyright' ] )
                  kwargs [ "initial" ] = self . parent_instance . pk
 while '%s_%d' % ( new_name , num ) in used_column_names :
 if words and length <= 0 :
   def _raw_value ( self , fieldname ) :
   elif name in lib . filters :
          return tuple ( bits )
 import sys
  def save_m2m ( ) :
 return data_set != initial_set
  except ( ValueError , TypeError ) :
 sys . stderr . write ( "  Unable to load the flup package.  In order to run django\n" )
 pks = options . get ( 'primary_keys' )
  except ValueError :
 html [ 'month' ] = self . create_select ( name , self . month_field , value , month_val , choices , self . month_none_value )
 if cache_timeout is None :
  patch_cache_control ( response , max_age = cache_timeout )
  else :
  nodelist = self . create_nodelist ( )
 return token
 django . setup ( )
                      url = reverse ( project_name + '.' + view_name ,  args = args , kwargs = kwargs ,  current_app = context . current_app )
 from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
      zbuf = BytesIO ( )
 defaults = dict ( defaults . __dict__ , ** options )
  else :
 if count2 != 0 :
  for i , ext in enumerate ( ext_list ) :
   creation_counter = 0
          memoryview = buffer
   return False
   @ classmethod
   if timeout is None :
                  pass
          self . argv = argv or sys . argv [ : ]
                  raise ImproperlyConfigured (  "Creating a ModelForm without either the 'fields' attribute "  "or the 'exclude' attribute is prohibited; form %s "  "needs updating." % name  )
  if isinstance ( value , datetime . date ) :
  except InvalidTemplateLibrary as e :
          raise TemplateSyntaxError ( "Invalid templatetag argument: '%s'."  " Must be one of: %s" %  ( tag , list ( TemplateTagNode . mapping ) ) )
  if not locale_dir :
          for dict_ in self . dicts :
  fp . write ( data )
          return value
              if settings . DEBUG :
   def __str__ ( self ) :
          self . coerce = kwargs . pop ( 'coerce' , lambda val : val )
   def root_attributes ( self ) :
                          year_val , month_val , day_val = [ int ( v ) for v in match . groups ( ) ]
              if key in dict_ :
 if name :
              self . _cull_frequency = int ( cull_frequency )
  lines . append ( line )
                       value . decode ( charset )
                  related = getattr ( obj , field . name )
   def appendlist ( self , key , value ) :
          sys . stderr . write ( "ERROR: %s\n" % e )
                  del self . _cache [ key ]
          if value . __traceback__ is not tb :
   def parse_args ( self , args = None , namespace = None ) :
              return False
          return [  Warning (  "MIDDLEWARE_CLASSES is not set." ,  hint = ( "Django 1.7 changed the global defaults for the MIDDLEWARE_CLASSES. "  "django.contrib.sessions.middleware.SessionMiddleware, "  "django.contrib.auth.middleware.AuthenticationMiddleware, and "  "django.contrib.messages.middleware.MessageMiddleware were removed from the defaults. "  "If your project needs these middleware then you should configure this setting." ) ,  obj = None ,  id = '1_7.W001' ,  )  ]
                          self . xml . startElement ( "natural" , { } )
 template = self . resolve_template ( self . template_name )
 yield "#   * Rearrange models' order"
from __future__ import unicode_literals
    def call_command ( name , * args , ** options ) :
    def inlineformset_factory ( parent_model , model , form = ModelForm ,  formset = BaseInlineFormSet , fk_name = None ,  fields = None , exclude = None , extra = 3 , can_order = False ,  can_delete = True , max_num = None , formfield_callback = None ,  widgets = None , validate_max = False , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ,  min_num = None , validate_min = False ) :
          tzinfo = timezone . get_current_timezone ( ) if settings . USE_TZ else None
  import datetime
 if self . help :
 if not commit :
          file = file_or_path
          pass
     def media_property ( cls ) :
 exclude = self . _get_validation_exclusions ( )
          try :
                  pass
     def prepare_js_for_gettext ( js ) :
       for app_config in apps . get_app_configs ( ) :
 for var in loopvars :
    try :
          if size is None :
              try :
              wm . add_watch ( path , mask )
 itervalues = _itervalues
              self . instance . full_clean ( exclude = exclude , validate_unique = False )
 from django . conf import settings
   def total_error_count ( self ) :
  else :
 confirm = input ( msg )
  final_attrs = self . build_attrs ( attrs )
 first = second = None
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be accessed.' )
   def handle ( self , * args , ** options ) :
          option = remaining_bits . pop ( 0 )
          self . fed . append ( '&#%s;' % name )
 attrs += [ attr . name for attr in self . _moved_attributes ]
  else :
  return value
      if module_has_submodule ( app_config . module , module_to_search ) :
 if hasattr ( text , '__html__' ) :
                                    over_bytes = len ( chunk ) % 4
    def _unpack_ipv4 ( ip_str ) :
          kwargs [ 'number' ] = number
      widget = URLInput
 if not self . timezone :
  fields = [ ( field_name , attrs . pop ( field_name ) ) for field_name , obj in list ( six . iteritems ( attrs ) ) if isinstance ( obj , Field ) ]
          self . is_bound = data is not None or files is not None
          self . open ( )
              kwargs [ 'localize' ] = True
 return FilterExpression ( token , self )
                  attrs [ 'pk' ] = smart_text ( obj_pk )
   def get_many ( self , keys , version = None ) :
              break
 script_name = script_url [ : - len ( path_info ) ]
              pass
   class Command ( BaseCommand ) :
   base36 = [ ]
                return False
          return commands
 if value is None :
  else :
 if callable ( lookup_view ) :
 id = None
              params = params [ 1 : ]
               settings . INSTALLED_APPS
                  self . none_value = ( 0 , empty_label )
              self . _done = True
              inner_text . extend ( getInnerText ( child ) )
 if id_ :
  elif self . _meta . exclude and field in self . _meta . exclude :
          return _curried_func ( * ( args + moreargs ) , ** dict ( kwargs , ** morekwargs ) )
              resolved_args = [ context ] + resolved_args
                      self . stdout . write ( "processing locale %s\n" % locale )
                          if not field_desc . endswith ( '(' ) :
 return len ( self . children )
  if self . feed [ 'subtitle' ] is not None :
 def __init__ ( self , name , content_type , size , charset , content_type_extra = None ) :
 top_errors = self . non_field_errors ( )
      termios = None
    with open ( old_file_name , 'rb' ) as old_file :
 class FileSystemStorage ( Storage ) :
   def modified_time ( self , name ) :
   def render ( self , context ) :
       def close ( self ) :
    def validate ( self , value ) :
   def dst ( self , dt ) :
          for first_select in _parse_date_fmt ( ) :
 self . name = name
 from django . utils . module_loading import import_string
  except ValueError :
 return re . sub ( "\d([A-Z])" , lambda m : m . group ( 0 ) . lower ( ) , t )
                      message . message = error_messages [ message . code ]
 def _wrapped_view ( request , * args , ** kwargs ) :
          __call__ = type . __call__
  check_for_migrations ( app_config , connection )
         class TokenBase ( object ) :
 @ stringfilter
  requires_system_checks = False
 from django . utils . safestring import mark_safe
 value = self . to_python ( value )
 for field , errors in self . items ( ) :
  inputs . append ( format_html ( '<input{0} />' , flatatt ( input_attrs ) ) )
  def iterbytes ( buf ) :
 super ( GenericIPAddressField , self ) . __init__ ( * args , ** kwargs )
 if format_module_path :
 from django . utils . encoding import force_str
  return Truncator ( value ) . words ( length , html = True , truncate = ' ...' )
      def become_daemon ( our_home_dir = '.' , out_log = None , err_log = None , umask = 0o022 ) :
  def __init__ ( self , * args , ** kwargs ) :
                  name = self . split_leading_dir ( name ) [ 1 ]
 result . key = key
  i += 1
          return bool ( self . dict )
              new_path = path [ match . end ( ) : ]
                  end -= 1
          if parse_until is None :
          unique_check = [ field for field in unique_check if field != self . fk . name ]
    def b64_decode ( s ) :
    @ register . filter ( is_safe = False )
 return AutoEscapeControlNode ( ( arg == 'on' ) , nodelist )
 self . xml . startDocument ( )
    def _start_relational_field ( self , field ) :
              if not self . valid_value ( val ) :
      child_nodelists = ( 'nodelist_loop' , 'nodelist_empty' )
                  try :
                      cls . __str__ = cls . __text_cast
 import os
 if f . primary_key :
 warnings . warn (  'import_by_path() has been deprecated. Use import_string() instead.' ,  RemovedInDjango19Warning , stacklevel = 2 )
          return ''
              exit_code = restart_with_reloader ( )
 readline . parse_and_bind ( "tab:complete" )
   _called_from_command_line = False
  else :
     class MultiValueField ( Field ) :
              self . _update_errors ( e )
 output = [ ]
 databases = [ self . using , None ]
              value = formats . sanitize_separators ( value )
   cull_frequency = params . get ( 'cull_frequency' , options . get ( 'CULL_FREQUENCY' , 3 ) )
 if not self . allow_multiple_selected :
import copy
                  self . stdout . write ( "Cache table '%s' already exists." % tablename )
                           self . _changed_data . append ( name )
 def upload_handlers ( self ) :
              raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : value } ,  )
          connection = connections [ options . get ( 'database' ) ]
 for loader_name in settings . TEMPLATE_LOADERS :
 if date is not None :
    ctypes , opts = parse_header ( content_type . encode ( 'ascii' ) )
                          raise CommandError (  "Unable to find a locale path to store translations for file %s" % file_path )
       def __init__ ( self , name , old , new = None ) :
 if origin :
              ignored . append ( f . name )
 statement = [ ]
  except Exception as e :
     def make_naive ( value , timezone ) :
                  if confirm not in ( 'yes' , 'no' ) :
              return timedelta ( seconds = - time . altzone ) - timedelta ( seconds = - time . timezone )
   return s
              raise CommandError ( "Error: %s" % message )
              as_form = True
  ret = _
   def construct_instance ( form , instance , fields = None , exclude = None ) :
 class_types = ( type , types . ClassType )
              sys . stderr = NullDevice ( )
  if max_length is not None :
 return ( self . data . weekday ( ) + 1 ) % 7
       m = getattr ( lookup_view , '__module__' , None )
   class MultiPartParser ( object ) :
          if hasattr ( _urlconfs , "value" ) :
          return None
              unique_id = item [ 'unique_id' ]
              raise TypeError (  "Variable must be a string or number, got %s" % type ( var ) )
 if not answer :
 for label in labels :
          git_changeset = get_git_changeset ( )
 if not self . is_bound :
  if exclude is not None :
          for closable in self . _closable_objects :
          return '' . join ( self . fed )
  except ValidationError as e :
 translated = func ( ** kwargs )
  from django . core . exceptions import ImproperlyConfigured , DjangoRuntimeWarning
 def __init__ ( self , key_to_list_mapping = ( ) ) :
   @ property
          asvar = bits [ - 1 ]
 nodelist = parser . parse ( ( 'endspaceless' , ) )
   if isinstance ( pk , OneToOneField ) or isinstance ( pk , ForeignKey ) :
  else :
 yield "#   * Make sure each model has one field with primary_key=True"
 import datetime
   else :
              if attr in obj_dict :
  if instance is None :
 try :
              try :
          raise TemplateSyntaxError ( "'firstof' statement requires at least one argument" )
  if self . flags and not isinstance ( self . regex , six . string_types ) :
              if isinstance ( query_string , bytes ) :
  except ( ValueError , TypeError ) :
    def same_origin ( url1 , url2 ) :
   def tzname ( self , dt ) :
      try :
                  msgs = msgs . decode ( 'utf-8' )
 msg_count = 0
 def __init__ ( self , name , content , content_type = 'text/plain' ) :
 asvar = None
  return value
 re_camel_case = re . compile ( r'(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))' )
 with Archive ( path ) as archive :
 self . add_item_elements ( handler , item )
    for hextet in ip_str . split ( ':' ) :
   declared_fields = OrderedDict ( )
          signed_value = force_str ( signed_value )
          _supported = OrderedDict ( settings . LANGUAGES )
 for table_name in connection . introspection . table_names ( cursor ) :
 infos = [ e for e in all_issues if checks . INFO <= e . level < checks . WARNING and not e . is_silenced ( ) ]
              val = self . get ( k , version = version )
              new_name = 'number_%s' % new_name
     @ classmethod
          for arg in list ( args ) + list ( six . itervalues ( kwargs ) ) :
 base56 = BaseConverter ( BASE56_ALPHABET )
 return self . __deepcopy__ ( { } )
 try :
   else :
    class override ( object ) :
          locale = options . get ( 'locale' )
          if instance is None :
 return get_valid_filename ( name )
  if data is None :
    def loaddata ( self , fixture_labels ) :
 def debug ( parser , token ) :
 output . append ( '\n\n' )
 self . html_initial_name = form . add_initial_prefix ( name )
 if form . errors :
 response = http . HttpResponseBadRequest ( )
                      self . _errors [ field ] = self . error_class ( error_class = 'nonfield' )
    if settings . configured :
   for val in value :
 self . config . configurator = self
 self . origin = origin
   def bound_data ( self , data , initial ) :
 if threading :
          value = dict . get ( self , key , default )
  warnings . warn ( "django.utils.dictconfig will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
  from . . import Warning , register , Tags
  elif args [ 1 ] [ 0 ] == '4' :
 if value :
  kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
 from django . utils . deprecation import RemovedInDjango19Warning
 pass
  from django . utils import six
  def __init__ ( self ) :
              return None
  m2m_data [ field . name ] = [ m2m_convert ( pk ) for pk in field_value ]
  return SafeString ( str ( s ) )
 created_models = set ( )
  else :
              return mark_safe ( self . render ( self . context ) )
   if hasattr ( self . file , 'tell' ) and hasattr ( self . file , 'seek' ) :
 return force_text ( quote_plus ( force_str ( url ) , force_str ( safe ) ) )
   tag = match . group ( 1 ) . strip ( )
 FILES = property ( _get_files )
     class Error ( CheckMessage ) :
 if index_sql :
                      filemsg = ''
                  if extend is True :
 if self . can_order :
 self . old_method_name = old_method_name
  def _decorator ( view_func ) :
 for d in self . dicts :
      def __init__ ( self , regex , callback , default_args = None , name = None ) :
   class classonlymethod ( classmethod ) :
  def add_arguments ( self , parser ) :
                       key = make_key ( args , kwds , typed ) if kwds or typed else args
 fd , tmp_path = tempfile . mkstemp ( dir = self . _dir )
   def render ( self , context ) :
              raise ValueError (  "'%s.%s' has no field named '%s'."  % ( model . _meta . app_label , model . _meta . object_name , fk_name ) )
    def validate_host ( host , allowed_hosts ) :
 if endbmatch :
   def delete ( self , key , version = None ) :
              value = ''
 parts = 2 if version [ 2 ] == 0 else 3
  elif args [ 1 ] == '304' :
    @ register . filter ( is_safe = True , needs_autoescape = True )
   def render ( self , context ) :
  try :
    def get_serializer_formats ( ) :
  from . base import CommandError
                  return True
  def tzname ( self , dt ) :
          prefix += '/'
          return self . size
    return the_path
 i = 0
 if not self . DIGIT_PATTERN . match ( idx ) :
 return field . widget . value_from_datadict ( self . data , self . files , prefix )
          return False
      help = 'Prints the SQL statements for resetting sequences for the given app name(s).'
                    step = str ( Decimal ( '1' ) / 10 ** self . decimal_places ) . lower ( )
      def get_unbound_function ( unbound ) :
              try :
   field = Model . _meta . get_field ( field_name )
          defaults = parser . parse_args ( args = args )
 return self . _base_set ( 'add' , key , value , timeout )
  from django . core . management . commands . check import Command as CheckCommand
              django . setup ( )
     self . instance = construct_instance ( self , self . instance , opts . fields , construct_instance_exclude )
  else :
  res = instance . __dict__ [ self . name ] = self . func ( instance )
   new_ip = [ ]
                              file_ . close ( )
 import pickle
 get_language_bidi = lambda : settings . LANGUAGE_CODE in settings . LANGUAGES_BIDI
                          errors . append ( field . error_messages [ 'incomplete' ] )
 append = complain
   class ResolverMatch ( object ) :
              callback ( self )
   return result == 0
                  self . _cull ( db , cursor , now )
 for key , value in data . items ( ) :
  return self . _post
 return VerbatimNode ( nodelist . render ( Context ( ) ) )
          if self . _isdst ( dt ) :
 seen_models . add ( model )
   return data
      def __init__ ( self , template_string , origin ) :
 if name :
              del moves . __dict__ [ name ]
              content_type = "%s; charset=%s" % ( settings . DEFAULT_CONTENT_TYPE ,  self . _charset )
  expanded_template = path . expanduser ( template )
 if name is None :
 self . stdout . write ( self . style . NOTICE ( "  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them." ) )
              location = settings . MEDIA_ROOT
              try :
 self . current_app = current_app
  except IndexError :
 self . file = os . fdopen ( fd , mode , bufsize )
      EscapeString = EscapeText
 global _standard_context_processors
              yield self [ name ]
   def __deepcopy__ ( self , memodict ) :
              ext = mimetypes . guess_extension ( content_type )
   def _has_changed ( self , initial , data ) :
 pickled = pickle . dumps ( new_value , pickle . HIGHEST_PROTOCOL )
 from django . utils . translation import ugettext , ungettext_lazy
 return result
 from django . utils . translation import get_language , to_locale , check_for_language
   def add_prefix ( self , field_name ) :
          self . tagtype = tagtype
  else :
 template_tuple = self . template_cache . get ( key )
 def dummy ( * args , ** kwargs ) :
   _standard_context_processors = None
           return __proxy__ ( args , kw )
 p = language . find ( '-' )
      input_type = 'number'
 if truncate_text :
 return calendar . timegm ( result . utctimetuple ( ) )
      def _get_validation_exclusions ( self ) :
  try :
 return WEEKDAYS [ self . data . weekday ( ) ]
              args = [ 'msgmerge' ] + self . msgmerge_options + [ pofile , potfile ]
 while True :
   transfer_encoding = meta_data . get ( 'content-transfer-encoding' )
  self . base_location = location
 parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False ,  help = 'Tells Django to use an IPv6 address.' )
   def has_key ( self , key , version = None ) :
                  self . _view_middleware . append ( mw_instance . process_view )
                      try :
 self . is_reversed = is_reversed
                  self . _callback_strs . add ( pattern . _callback_str )
          return self . __class__ ( * self . dicts )
                  msgs = self . copy_plural_forms ( msgs , locale )
  warnings . warn (  "get_declared_fields is deprecated and will be removed in Django 1.9." ,  RemovedInDjango19Warning ,  stacklevel = 2 ,  )
          self . _assert_mutable ( )
                      html_class_attr = ' class="%s"' % css_classes
          if value in self . empty_values :
                  not_found . append ( e . args [ 0 ] )
 self . objects = [ ]
   def __enter__ ( self ) :
          if ch != '\\' :
 from functools import wraps
                          raise ValueError (  "%s.process_template_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
 if not self . timezone :
          return type ( self ) . __bool__ ( self )
 def combine ( cls , date , time ) :
 nodes = [ ]
  except KeyError :
          self . _archive . extract ( to_path )
              return '1'
      from django . core . mail . utils import CachedDnsName , DNS_NAME
 def messages ( self ) :
     @ python_2_unicode_compatible
  first_item , second_item = list_
              return self . empty_form . media
 return cache
   def find_commands ( management_dir ) :
  output_transaction = True
   class ContentNotRenderedError ( Exception ) :
 inner = NonCapture ( result [ start : ] )
              self . _cull_frequency = 3
                      rel_model = field . rel . to
 callback , callback_args , callback_kwargs = resolver_match
          self . nodelist = nodelist
  if self . META . get ( header , None ) == value :
 zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = zbuf )
          changeset = timestamp . strftime ( '%Y%m%d%H%M%S' )
  return RegexURLResolver ( r'^/' , urlconf )
                      d = d [ m . groups ( ) [ 0 ] ]
 if isinstance ( data , bytes ) :
                  raise ViewDoesNotExist (  "Could not import '%s'. Parent module %s does not exist." %  ( lookup_view , mod_name ) )
              raise InvalidTemplateLibrary ( "ImportError raised loading %s: %s" %  ( taglib_module , e ) )
          return timeuntil ( value , arg )
   def reset ( self ) :
   class Command ( BaseCommand ) :
   def get_handler ( self , * args , ** options ) :
 from django . utils . xmlutils import SimplerXMLGenerator
   def pop ( self , key , * args ) :
   return result
  lang_code = regex_match . group ( 1 )
     class NumberInput ( TextInput ) :
 import itertools
      def represent_decimal ( self , data ) :
  else :
   def __call__ ( self , f ) :
            all_models = [ ]
                      value = field . clean ( value )
              return list ( self . iterlists ( ) )
 def filesizeformat ( bytes ) :
              raise TypeError ( "Non-integer base36 conversion input." )
              pass
   def __repr__ ( self ) :
  g = one_percent_re . sub ( '%%' , g )
   else :
  else :
 for widget in self . widgets :
 self . allow_empty_first_page = allow_empty_first_page
      return getattr ( self , _assertCountEqual ) ( * args , ** kwargs )
                  self . queryset . filter ( ** { key : pk } )
 try :
   def validate_ipv6_address ( value ) :
 if val is None :
 super ( DecimalField , self ) . __init__ ( max_value , min_value , * args , ** kwargs )
              return
 if self . options . get ( "indent" ) :
              messages . update ( getattr ( c , 'default_error_messages' , { } ) )
   except ( ValueError , TypeError ) :
                      date_value = datetime . date ( int ( y ) , int ( m ) , int ( d ) )
                              _file . close ( )
                  raise CommandError ( "Destination directory '%s' does not "  "exist, please create it first." % top_dir )
   def _set_post ( self , post ) :
          mod = import_module ( taglib_module )
 if id_for_label :
          self . _out = out
     @ register . filter ( is_safe = False )
 binary_type = bytes
    @ register . filter ( is_safe = False )
 self . index = index
                       file_name = disposition . get ( 'filename' )
   __all__ = ( 'BaseForm' , 'Form' )
                  raise CommandError ( "You can only use --pks option with one model" )
 format = force_str ( default or get_format ( 'DATETIME_INPUT_FORMATS' ) [ 0 ] )
                   open_tags . insert ( 0 , tagname )
              source , display_name = loader ( name , dirs )
  for pattern in allowed_hosts :
 m = dict ( zip ( new_keys , keys ) )
 from django . utils . module_loading import module_has_submodule
 args_safe = map ( conditional_escape , args )
  except UnicodeEncodeError :
  if item [ 'ttl' ] is not None :
          return self . streaming_content
           raw_query_string = get_bytes_from_wsgi ( self . environ , 'QUERY_STRING' , '' )
  else :
   def lists ( self ) :
      def __init__ ( self , path , match = None , recursive = False , allow_files = True ,  allow_folders = False , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :
              print ( "Running post-migrate handlers for application %s" % app_config . label )
  else :
                  prefix = settings . STATIC_URL
  def __init__ ( self , attrs = None , format = None ) :
 return ( ret == 0 )
              try :
   def apply_response_fixes ( self , request , response ) :
              self . connection = get_connection ( fail_silently = fail_silently )
          if isinstance ( self . urlconf_name , list ) and len ( self . urlconf_name ) :
 return self . field . widget . is_hidden
                  pass
     wm = pyinotify . WatchManager ( )
    def push ( self , * args , ** kwargs ) :
              return 'nd'
 return self . data . isoformat ( )
              return data
 representative = ESCAPE_MAPPINGS . get ( ch , ch )
                  result |= ord ( x ) ^ ord ( y )
              digest = hashlib . sha256
              op = OPERATORS [ token ]
 origin = make_origin ( display_name , self . load_template_source , template_name , template_dirs )
    return msg
 from yaml import CSafeDumper as SafeDumper
              settings . SITE_ID
 return IncludeNode ( parser . compile_filter ( bits [ 1 ] ) , extra_context = namemap ,  isolated_context = isolated_context )
              this_year = datetime . date . today ( ) . year
                   template = get_template ( template )
      def __init__ ( self , regex , max_length = None , min_length = None , error_message = None , * args , ** kwargs ) :
  def add_item_elements ( self , handler , item ) :
 decorated = Node ( syms . decorated , [ decorator , klass ] , prefix = node . prefix )
 with io . open ( os . path . join ( self . dirpath , thefile ) , "w" , encoding = 'utf-8' ) as fp :
      class CacheClass ( DummyCache ) :
          super ( TemporaryFileUploadHandler , self ) . __init__ ( * args , ** kwargs )
                  block_content = token_string [ 2 : - 2 ] . strip ( )
                  if dirname . startswith ( '.' ) or dirname == '__pycache__' :
     @ register . filter ( is_safe = True )
  elif isinstance ( template , six . string_types ) :
 urlresolvers . set_urlconf ( urlconf )
 return value . strftime ( format )
   return nodes
   def S ( self ) :
  return Truncator ( value ) . words ( length , truncate = ' ...' )
  if self . verbosity > 0 :
          t = s . split ( '=' , 1 )
      def exhaust ( stream_or_iterable ) :
 self . _exception_middleware = [ ]
  import warnings
   from django . conf import settings
  return filename , display_url
 try :
 off = 6 * ( delta // 100 + delta // 400 )
 parser . add_argument ( 'args' , nargs = '*' )
 if len ( bits ) < 1 :
              warning = kwargs [ 'warning' ]
          content = content or b''
            class Trans ( object ) :
  mail . send ( fail_silently = fail_silently )
              try :
                          tried . append ( [ pattern ] )
  return modules
              docs_version = '%d.%d' % django . VERSION [ : 2 ]
          return self . scheme == 'https'
  if hasattr ( mw_instance , 'process_response' ) :
 return self . _html_output (  normal_row = '<li%(html_class_attr)s>%(errors)s%(label)s %(field)s%(help_text)s</li>' ,  error_row = '<li>%s</li>' ,  row_ender = '</li>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = False )
 wrapper = warn_about_renamed_method ( class_name , * renamed_method )
 while ch != terminal_char :
                      os . makedirs ( directory )
 @ stringfilter
    def force_text ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
 raise
   def _update_unget_history ( self , num_bytes ) :
   return self . parent_instance
 if result is not root :
              app_configs = [ apps . get_app_config ( app_label ) for app_label in app_labels ]
 if language_code not in self . _reverse_dict :
 return int ( binascii . hexlify ( x ) , 16 )
 from django . conf import settings
 if takes_context :
 try :
     def _bin_to_long ( x ) :
 field_notes . append ( 'This field type is a guess.' )
   import random
          match = self . regex . search ( path )
              for field , errors in self . error_dict . items ( ) :
          return { }
      def add_css ( self , data ) :
  except ValueError :
              use_func = False
          self . parent_widget = parent_widget
 if not ( self . inverse_match is not bool ( self . regex . search (  force_text ( value ) ) ) ) :
                  args . append ( parser . compile_filter ( value ) )
              p = i
 def __init__ ( self , convert_charrefs = False , ** kwargs ) :
                  dirs = [ basedir ]
 leading = self . has_leading_dir ( namelist )
          try :
  else :
 for bit in bits :
 PB = 1 << 50
 from django . utils import six
  from django . apps import apps
 if item [ 'description' ] is not None :
    class DictWrapper ( dict ) :
              self . activated = True
 self . attrs = attrs
  def __init__ ( self , name , regex , next = None ) :
   def validate ( self , value ) :
    def ext_convert ( self , value ) :
 from django . db import connections , DEFAULT_DB_ALIAS
          return len ( self . object_list )
 self . stderr = OutputWrapper ( options . get ( 'stderr' , sys . stderr ) )
 def empty_form ( self ) :
                      if self . verbosity > 1 :
  except OSError as e :
  return r
     def is_safe_url ( url , host = None ) :
  exec ( """exec _code_ in _globs_, _locs_""" )
                          logger . level = logging . NOTSET
  except ( ValueError , TypeError ) :
          self . _assert_mutable ( )
              self . cookies [ key ] [ 'httponly' ] = True
 if trim :
  return self . _fqdn
    class HttpResponseNotModified ( HttpResponse ) :
              return
 COMMENT_TAG_START = '{#'
  value = int ( s , 36 )
 from django . utils import six , lru_cache
    value = super ( URLField , self ) . to_python ( value )
          return "<DeserializedObject: %s.%s(pk=%s)>" % (  self . object . _meta . app_label , self . object . _meta . object_name , self . object . pk )
     field_desc = '%s = %s%s' % (  att_name ,   '' if '.' in field_type else 'models.' ,  field_type ,  )
      help = ( "Output the contents of the database as a fixture of the given "  "format (using each model's default manager unless --all is "  "specified)." )
   def id_for_label ( self , id_ ) :
                   if os . name == 'nt' :
                  raise ValueError ( 'Unable to add handler %r: %s' % ( h , e ) )
              return force_text ( time . tzname [ is_dst ] , DEFAULT_LOCALE_ENCODING )
 from django . core . management . base import BaseCommand
  for meta_line in self . get_meta ( table_name ) :
    def get_language_from_path ( path , strict = False ) :
   def ungettext ( singular , plural , number ) :
  return [ smart_text ( val ) for val in value ]
              if t . token_type == TOKEN_BLOCK and t . contents == 'endcomment' :
import os
       def __init__ ( self , file ) :
  singular_suffix , plural_suffix = bits [ : 2 ]
  unescape_entities = allow_lazy ( unescape_entities , six . text_type )
          if code is None :
                              t = select_template ( file_name )
  except KeyError as key :
      pass
                  msg . attach ( body_msg )
     @ deconstructible
 form = self . form ( ** defaults )
     if label_suffix and contents and contents [ - 1 ] not in _ ( ':?.!' ) :
 from django . utils . deprecation import RemovedInDjango20Warning
  from django . conf import settings
   _urlconfs = local ( )
 def upload_handlers ( self , upload_handlers ) :
          if self . _callback is not None :
   def __delitem__ ( self , key ) :
 if jan1_weekday > 4 :
     emit_post_migrate_signal ( created_models , self . verbosity , self . interactive , connection . alias )
  raise CommandError (  "errors happened while running xgettext on %s\n%s" %  ( self . file , errors ) )
  for path_to_remove in self . paths_to_remove :
   def _proxy_method ( self , * args , ** kwargs ) :
 import errno
 if isinstance ( s , Promise ) :
   try :
              code_list . append ( opt_dict [ o ] )
              self . _post_render_callbacks . append ( callback )
   return lib
  except smtplib . SMTPException :
 obj . _constructor_args = ( args , kwargs )
  else :
   def strip_entities ( value ) :
 import yaml
  from itertools import chain
  elif f . unique :
   class Tok ( object ) :
          return mark_safe ( result )
   def render_css ( self ) :
              new_errors = check ( app_configs = app_configs )
  initial_set = set ( force_text ( value ) for value in self . prepare_value ( initial ) )
    class AppRegistryNotReady ( Exception ) :
 parser . UnparsedEntityDeclHandler = self . unparsed_entity_decl
          self . max_digits , self . decimal_places = max_digits , decimal_places
      def _set_response_etag ( response ) :
                  opts = model . _meta
              return truncate % { 'truncated_text' : text }
               final_attrs [ 'value' ] = force_text ( self . _format_value ( value ) )
  comment_lineno_cache = None
    class SuspiciousOperation ( Exception ) :
 super ( InlineForeignKeyField , self ) . __init__ ( * args , ** kwargs )
              digits . append ( '0' )
      _version = "0.91"
  elif bytes < TB :
               raise AttributeError ( "%s could not be imported " % self . name )
 return result
          with self . mutex :
   if any ( e . is_serious ( ) and not e . is_silenced ( ) for e in all_issues ) :
   def add_handlers ( self , logger , handlers ) :
 sorted_issues = [  ( criticals , 'CRITICALS' ) ,  ( errors , 'ERRORS' ) ,  ( warnings , 'WARNINGS' ) ,  ( infos , 'INFOS' ) ,  ( debugs , 'DEBUGS' ) ,  ]
    smart_split_re = re . compile ( r"""     ((?:         [^\s'"]*         (?:             (?:"(?:[^"\\]|\\.)*" | '(?:[^'\\]|\\.)*')             [^\s'"]*         )+     ) | \S+) """ , re . VERBOSE )
 from django . utils . deprecation import RemovedInNextVersionWarning
   def configure_logging ( logging_config , logging_settings ) :
              if jan1_weekday == 5 or ( jan1_weekday == 6 and calendar . isleap ( self . data . year - 1 ) ) :
    Field . __init__ ( self , required , widget , label , initial , help_text ,  * args , ** kwargs )
 return self . cleaned_data
 super ( WSGIServer , self ) . server_bind ( )
  states = {   'div' : both_before + [  Tok ( "punct" , literals ( "/= /" ) , next = 'reg' ) ,  ] + both_after ,    'reg' : both_before + [  Tok ( "regex" ,  r"""                     /                       # opening slash                     # First character is..                     (   [^*\\/[]            # anything but * \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )                     # Following characters are same, except for excluding a star                     (   [^\\/[]             # anything but \ / or [                     |   \\.                 # or an escape sequence                     |   \[                  # or a class, which has                             (   [^\]\\]     #   anything but \ or ]                             |   \\.         #   or an escape sequence                             )*              #   many times                         \]                     )*                      # many times                     /                       # closing slash                     [a-zA-Z0-9]*            # trailing flags                 """ , next = 'div' ) ,  ] + both_after ,  }
              executor . migrate ( targets , plan , fake = options . get ( "fake" , False ) )
    def copy ( self ) :
              if not self . close_called :
          return [ ]
 notifier . check_events ( timeout = None )
 forms = ' ' . join ( form . as_p ( ) for form in self )
    def tzname ( self , dt ) :
              fail_message = 'created'
  return callback [ : dot ] , callback [ dot + 1 : ]
     else :
 params . update ( kwargs )
              params = conf . copy ( )
  self . bad_cookies . add ( key )
              continue
 return '%02d' % calendar . monthrange ( self . data . year , self . data . month ) [ 1 ]
  def to_python ( self , value ) :
 from django . utils . encoding import force_bytes
 handler . addQuickElement ( "updated" , rfc3339_date ( self . latest_post_date ( ) ) )
  except TypeError as te :
 for val in value :
                       pass
  if size == 0 :
  else :
  Module_six_moves_urllib_response . _moved_attributes = _urllib_response_moved_attributes
                      continue
                  key += tuple ( type ( v ) for k , v in sorted_items )
          if '.' in word or '@' in word or ':' in word :
   filepath = parser . compile_filter ( bits [ 1 ] )
    def deserialize ( format , stream_or_string , ** options ) :
       def __init__ ( self , input_formats = None , * args , ** kwargs ) :
          scheme , netloc , path , query , fragment = urlsplit ( url )
 result . key = key
                  self . add_handlers ( logger , handlers )
 if USE_INOTIFY :
      smart_str = smart_bytes
              self . connection = connection_class ( self . host , self . port , ** connection_params )
    DNS_NAME = CachedDnsName ( )
          return Literal ( value )
              return timedelta ( seconds = - time . timezone )
  def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , cc = None ) :
 global _default
  except KeyError :
    if not self . use_ssl and self . use_tls :
          ret = b'' . join ( self . vals )
    from django . conf import settings
  def __dir__ ( self ) :
  if error_class is None :
    def readline ( self , * args , ** kwargs ) :
  except Exception :
   def W ( self ) :
 if not func_name :
   def __iter__ ( self ) :
 return bool ( self . children )
    def get_template ( template_name , dirs = None ) :
  except StandardError as e :
  return render_value_in_context ( value , context )
     class DatabaseCache ( BaseDatabaseCache ) :
     if len ( fixture_files_in_dir ) > 1 :
     class TypedMultipleChoiceField ( MultipleChoiceField ) :
 from django . utils . jslex import prepare_js_for_gettext
                      callback = callback . func
              raise CommandError ( "Database inspection isn't supported for the currently selected database backend." )
  table2model = lambda table_name : re . sub ( r'[^a-zA-Z0-9]' , '' , table_name . title ( ) )
  number = '' . join ( reversed ( digits ) )
from __future__ import unicode_literals
 offset = ( len ( self . __starttag_text )  - self . __starttag_text . rfind ( "\n" ) )
              raise ValidationError (  self . error_messages [ 'max_whole_digits' ] ,  code = 'max_whole_digits' ,  params = { 'max' : ( self . max_digits - self . decimal_places ) } ,  )
              words [ i ] = escape ( word )
  if not self . invoked_for_django :
  except Exception :
   response . _closable_objects . append ( request )
          self . filepath = filepath
 if not supports_color ( ) :
          self . _reset_dicts ( dict_ )
                  stream_created = self . open ( )
          return path . decode ( fs_encoding )
  self . style = no_style ( )
              self . input_type = attrs . pop ( 'type' , self . input_type )
 parser . add_argument ( '-v' , '--verbosity' , action = 'store' , dest = 'verbosity' , default = '1' ,  type = int , choices = [ 0 , 1 , 2 , 3 ] ,  help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )
 if t is not None :
                          sub_match_dict = dict ( match . groupdict ( ) , ** self . default_kwargs )
              return [ ]
 self . to = list ( to )
 translation = gettext_module . translation (  domain = 'django' ,  localedir = localedir ,  languages = [ self . __locale ] ,  codeset = 'utf-8' ,  fallback = use_null_fallback )
 prefix_length = len ( template_dir ) + 1
          return any ( "__call__" in klass . __dict__ for klass in type ( obj ) . __mro__ )
          raw_cookie = get_str_from_wsgi ( self . environ , 'HTTP_COOKIE' , '' )
          if self not in context . render_context :
                              name . append ( ch )
 from django . utils . encoding import force_text , python_2_unicode_compatible
 force_unicode = force_text
 if value is not result :
                      msg = "Execution of %s failed" % self . program
 translation = self . _new_gnu_trans ( localedir )
 parser . add_argument ( '--pks' , dest = 'primary_keys' ,  help = "Only dump objects with given primary keys. "  "Accepts a comma separated list of keys. "  "This option will only work when you specify one model." )
              pass
          warnings . warn ( "IPAddressField has been deprecated. Use GenericIPAddressField instead." ,  RemovedInDjango19Warning )
                      initial = self . initial . get ( name , field . initial )
 def use_argparse ( self ) :
 if str_number [ 0 ] == '-' :
           return ip_str
   nodelist_true_output = None
   else :
              return False
 base64 = BaseConverter ( BASE64_ALPHABET , sign = '$' )
   def render_node ( self , node , context ) :
 one_percent_re = re . compile ( r"""(?<!%)%(?!%)""" )
                  response = self . get_exception_response ( request , resolver , 404 )
 from django . core . management . templates import TemplateCommand
                      break
 return '' . join ( char2number . get ( c , c ) for c in phone . lower ( ) )
                      state = tok . next
    def decorator_from_middleware_with_args ( middleware_class ) :
from __future__ import unicode_literals
              try :
  def __init__ ( self , var1 , var2 , nodelist_true , nodelist_false , negate ) :
  args = [ 'msguniq' ] + self . msguniq_options + [ potfile ]
          script_url = get_bytes_from_wsgi ( environ , 'REDIRECT_URL' , '' )
 doublecolon_start = - 1
    def urlsafe_base64_encode ( s ) :
        script_url = get_bytes_from_wsgi ( environ , 'SCRIPT_URL' , '' )
    def __repr__ ( self ) :
  super ( ContentFile , self ) . __init__ ( stream_class ( content ) , name = name )
                                  with transaction . atomic ( using = connection . alias ) :
    from django . conf import settings
          return path
  from collections import OrderedDict
  generic_lang_code = lang_code . split ( '-' ) [ 0 ]
  else :
   return ''
   def render ( self , context ) :
   def _get_files ( self ) :
     class DateInput ( DateTimeBaseInput ) :
   def error ( self , token , msg ) :
 parser . delete_first_token ( )
 self . _catalog . update ( other . _catalog )
              label_for = format_html ( ' for="{0}"' , self . id_for_label )
  import codecs
  elif autoescape :
 self . value = value
  else :
          return self . path < other . path
                  if self . require_all_fields :
              if contains ( elt , inst ) :
                  if t . contents . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
              val = self [ key ]
               pass
              encoding = self . encoding or settings . DEFAULT_CHARSET
 return
 try :
   if self . asvar :
   def render ( self ) :
              if status != STATUS_OK :
 formatter = config . pop ( 'formatter' , None )
          for d in reversed ( self . dicts ) :
  targets = [ ( app_label , migration . name ) ]
   def entity_decl ( self , name , is_parameter_entity , value , base ,  sysid , pubid , notation_name ) :
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a specific database to dump fixtures from. '  'Defaults to the "default" database.' )
              if self . verbosity > 0 :
  try :
                    raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
                          len_item = len ( item )
               lead , middle , trail = '' , word , ''
      return _trans . ngettext ( singular , plural , number )
  from django . utils . encoding import python_2_unicode_compatible , force_str
  props = config . pop ( '.' , None )
              version = self . version
   __all__ = [  'get_cache' , 'cache' , 'DEFAULT_CACHE_ALIAS' , 'InvalidCacheBackendError' ,  'CacheKeyWarning' , 'BaseCache' ,  ]
          key = self . make_key ( key , version = version )
 logger . addHandler ( handler )
              self . message = message
 app_dirs = [ ]
  else :
                  data = data ( )
 notifier . process_events ( )
          new_class = super ( RenameMethodsBase , cls ) . __new__ ( cls , name , bases , attrs )
  else :
          script_name = get_bytes_from_wsgi ( environ , 'SCRIPT_NAME' , '' )
              try :
              exts = extensions if extensions else [ 'js' ]
 message_context = context_match . group ( 1 )
                httpd . daemon_threads = True
 if 'error_messages' in kwargs :
  if dklen > ( 2 ** 32 - 1 ) * hlen :
 lead = lead + opening
 parser . add_argument ( '--backwards' , action = 'store_true' , dest = 'backwards' ,  default = False , help = 'Creates SQL to unapply the migration, rather than to apply it' )
 msg = SafeMIMEMultipart ( _subtype = self . alternative_subtype , encoding = encoding )
  except ( ValueError , OverflowError , InvalidOperation ) :
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a specific database to load '  'fixtures into. Defaults to the "default" database.' )
    def get_system_encoding ( ) :
          if isinstance ( self . warning , Exception ) :
              e . args = ( "Problem installing fixtures: %s" % e , )
  self . _ordering . sort ( key = compare_ordering_key )
                      attrvalue = attrvalue [ 1 : - 1 ]
    def ungettext ( singular , plural , number ) :
 self . indent ( 2 )
                         consume_next = False
                          for handler in handlers :
     class DebugParser ( Parser ) :
  if sys . platform . startswith ( "java" ) :
 if qs . _result_cache is not None :
          new_ip = ip_str . split ( ':' )
from django . template . base import Lexer , Parser , tag_re , NodeList , VariableNode , TemplateSyntaxError
   def _create_message ( self , msg ) :
       response_fixes = [  http . fix_location_header ,  http . conditional_content_removal ,  ]
 def get_default_prefix ( cls ) :
     def import_by_path ( dotted_path , error_prefix = '' ) :
    accept_language_re = re . compile ( r'''         ([A-Za-z]{1,8}(?:-[A-Za-z0-9]{1,8})*|\*)      # "en", "en-au", "x-y-z", "es-419", "*"         (?:\s*;\s*q=(0(?:\.\d{,3})?|1(?:.0{,3})?))?   # Optional "q=1.00", "q=0.8"         (?:\s*,\s*|$)                                 # Multiple accepts per header.         ''' , re . VERBOSE )
  start_response ( force_str ( status ) , response_headers )
   for entry in package_path :
 os . close ( fd )
              if '.' in exclude :
  except ( archive . ArchiveException , IOError ) as e :
   def render ( self , name , value , attrs = None , choices = ( ) ) :
    def get_git_changeset ( ) :
  self . ending = ending
 handler . endElement ( "rss" )
     class SafeMIMEText ( MIMEMixin , MIMEText ) :
 if settings . USE_TZ and value is not None and timezone . is_aware ( value ) :
 data_set = set ( force_text ( value ) for value in data )
 table = connections [ db ] . ops . quote_name ( self . _table )
          s = s [ 1 : ]
   else :
          kwargs = { }
 sublist_item = None
 self . nodelist_loop = nodelist_loop
              if getattr ( e , 'winerror' , 0 ) != 32 and getattr ( e , 'errno' , 0 ) != 13 :
           name = args [ 1 ]
 for c in response . cookies . values ( ) :
                  logger . addHandler ( self . config [ 'handlers' ] [ h ] )
  return self . __class__ ( self )
 msgid = '<%s.%s.%s%s@%s>' % ( utcdate , pid , randint , idstring , idhost )
  else :
               context [ self . var_name ] = [ ]
                      result . extend ( [ result [ - 1 ] ] * ( count - 1 ) )
 msg_data = msg_data . decode ( charset )
 if os . path . exists ( pot_path ) :
     def _get_model ( model_identifier ) :
   class OVERLAPPED ( Structure ) :
          return arg
 super ( Field , self ) . __init__ ( )
  return media
 from django . utils import six
 if not unused_char :
   if compare_to != state_frame [ self ] :
 next = index + len ( self . _boundary )
                              cursor . execute ( statement )
          return date_format ( value , use_l10n = use_l10n )
 from threading import local
    class URLInput ( TextInput ) :
                  os . makedirs ( self . _dir , 0o700 )
     @ python_2_unicode_compatible
 import re
 return date ( datetime . now ( tz = tzinfo ) , self . format_string )
   def popitem ( self ) :
              safe = force_bytes ( safe , self . encoding )
                      pass
    def load_template ( self , template_name , template_dirs = None ) :
  connection = connections [ options . get ( 'database' ) ]
                  del self . cleaned_data [ field ]
   def end_serialization ( self ) :
                  targets = [ ( app_label , None ) ]
  try :
              if key in d :
  elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :
 from django . utils . formats import localize
    class SsiNode ( Node ) :
 default_error_messages = {  'invalid' : _ ( 'Enter a valid date/time.' ) ,  }
  else :
                  raise
 if t is not None :
   return view
 from django . db . migrations . loader import AmbiguityError
      if not _serializers :
          if name == 'regex' :
                  self . add_error ( name , e )
          return ''
                          pass
          output . extend ( connection . creation . sql_destroy_indexes_for_model ( model , style ) )
 result . append ( Group ( ( ( "%%(%s)s" % name ) , name ) ) )
  break
  def to_python ( self , value ) :
 leading = self . has_leading_dir ( x . name for x in members )
  output_transaction = True
 yield "# Feel free to rename the models, but don't rename db_table values or field names."
              settings . INSTALLED_APPS
 return "|" . join ( prefix + re . escape ( c ) + suffix for c in choices . split ( ) )
 return klass ( fail_silently = fail_silently , ** kwds )
 def force_escape ( value ) :
 return ''
 from django . views import debug
                  if status != STATUS_OK :
   return version
 if isinstance ( widget , NumberInput ) :
  data [ field . attname ] = value
 return time_str + '%+03d:%02d' % ( hour , minute )
                      singular . append ( contents )
 use_natural_keys = options . get ( 'use_natural_keys' )
              try :
      return _trans . check_for_language ( lang_code )
 mail = EmailMultiAlternatives ( subject , message , from_email , recipient_list ,  connection = connection )
                  e . django_template_source = node . source
 pass
  filter_func = parser . find_filter ( filter_name )
                  default_list = [ ]
 self . setlistdefault ( key ) . append ( value )
 def now ( parser , token ) :
  if invalid_var_format_string :
 def __init__ ( self , message , code = None , params = None ) :
   literal_match = self . literal_regex . match ( domain_part )
 from django . utils . text import ( smart_split , unescape_string_literal ,  get_text_list )
              if lookup_view in self . _callback_strs :
 def dictsort ( value , arg ) :
                   ch , escaped = next ( pattern_iter )
 self . filters . update ( lib . filters )
          if safe and not isinstance ( data , dict ) :
                    numbers = [  MigrationAutodetector . parse_number ( migration . name )  for migration in merge_migrations  ]
 msg = self . _create_message ( msg )
   class FilterExpression ( object ) :
     class SplitDateTimeField ( MultiValueField ) :
   pos = 0
 self . stream . write ( b'\n' )
      def __init__ ( self , nodelist ) :
 link_next [ PREV ] = link_prev
              logger . propagate = propagate
 for f in post_sql_fields :
  nodelist = [ ]
 self . _reverse_dict = { }
              file_obj = handler . file_complete ( counters [ i ] )
              raise CommandError ( "Can't find %s. Make sure you have GNU "  "gettext tools 0.15 or newer installed." % program )
  return response
    return self . _post , self . _files
                    return
   def __str__ ( self ) :
 return self . forms [ index ]
   def as_json ( self , escape_html = False ) :
          s . close ( )
  from django . core . management . base import AppCommand
   self . _css = { }
 if language_code not in self . _app_dict :
              return
 get_method_self = operator . attrgetter ( _meth_self )
 if len ( value ) != 2 :
 missing_args_message = "Enter at least one %s." % label
  else :
  emit_post_migrate_signal ( set ( all_models ) , verbosity , interactive , database )
    def npgettext_lazy ( context , singular , plural , number = None ) :
                  if os . path . basename ( candidate ) in targets :
     def close ( self ) :
    def parse_starttag ( self , i ) :
                      temp_lib . tags [ name ] = lib . tags [ name ]
 return s
                  lib = get_library ( taglib )
  else :
              if not self . fail_silently :
 def __add__ ( self , rhs ) :
              self . cookies [ key ] [ 'path' ] = path
 return result
 self . content_type_extra = content_type_extra
          super ( HttpResponseNotAllowed , self ) . __init__ ( * args , ** kwargs )
 for i , piece in enumerate ( re_formatchars . split ( force_text ( formatstr ) ) ) :
  def __ne__ ( self , other ) :
  else :
          return input_val
  if ( locale is None and not exclude and not process_all ) or self . domain is None :
      p = language . find ( '-' )
 security_logger . error (  force_text ( e ) ,  extra = {  'status_code' : 400 ,  'request' : request  } )
  elif self . required :
 interactive = options . get ( 'interactive' )
              migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
   if count == 0 :
 day = int ( m . group ( 'day' ) )
     if m :
 raise NotImplementedError ( 'subclasses of BaseCache must provide an add() method' )
               return False
   def render ( self , context ) :
 response [ 'Vary' ] = ', ' . join ( vary_headers + additional_headers )
from django . http import HttpResponse
 if autoescape :
          return TemplateLiteral ( self . template_parser . compile_filter ( value ) , value )
 for module in templatetags_modules :
  return s
 self . stdout . write ( "  You should commit this migration but leave the old ones in place;" )
from __future__ import unicode_literals
      def ugettext ( message ) :
 self . _separator = b'--' + boundary
 dirname = os . path . dirname ( filename )
              value = getattr ( opts , opt )
 bits = iter ( smart_split ( self . contents ) )
                  f . process ( self , self . domain )
 if value in self . empty_values :
  while k < endpos :
  bits = token . contents . split ( )
              parentmod , submod = get_mod_func ( mod_name )
 self . html_name = form . add_prefix ( name )
    @ register . filter ( is_safe = True , needs_autoescape = True )
                          content_length = int ( meta_data . get ( 'content-length' ) [ 0 ] )
  EscapeUnicode = EscapeText
 internal_use_only = False
  loader = MigrationLoader ( connection )
          templatetags_modules = get_templatetags_modules ( )
    _supported = None
 from django . forms . utils import flatatt , to_current_timezone
  if priority :
          parser . add_argument ( '--locale' , '-l' , default = [ ] , dest = 'locale' , action = 'append' ,  help = 'Creates or updates the message files for the given locale(s) (e.g. pt_BR). '  'Can be used multiple times.' )
 self . cookies = SimpleCookie ( self . cookies )
 self . domain = options . get ( 'domain' )
  from django . core . management . base import BaseCommand , CommandError
 self . digits = digits
  return value
  msg += "System check identified %s (%s silenced)." % (  "no issues" if visible_issue_count == 0 else  "1 issue" if visible_issue_count == 1 else  "%s issues" % visible_issue_count ,  len ( all_issues ) - visible_issue_count ,  )
 self . _namespace_dict [ language_code ] = namespaces
 break
 context_extras = { }
             models . Model . save_base ( self . object , using = using , raw = True )
 parser . add_argument ( '--ipv6' , '-6' , action = 'store_true' , dest = 'use_ipv6' , default = False ,  help = 'Tells Django to use an IPv6 address.' )
    def prefix ( bp , func ) :
 if new_attr is None :
              self . setlistdefault ( key ) . append ( value )
 self . args_check ( filter_name , filter_func , args )
      class IfEqualNode ( Node ) :
  autodetector = MigrationAutodetector (  executor . loader . project_state ( ) ,  ProjectState . from_apps ( apps ) ,  )
          if self . field . empty_label is not None :
     def validate_ipv46_address ( value ) :
                  filter_name = match . group ( "filter_name" )
   def _has_changed ( self , initial , data ) :
                              value = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
 if name is None :
  else :
 self . _tzname = self . tzname ( dt )
                  int_part_gd += thousand_sep
  except TemplateDoesNotExist as e :
   else :
              models . add ( model )
   @ property
 self . xml . endElement ( "natural" )
from copy import copy
 to_python = self . _get_to_python ( pk_field )
          super ( ContextDict , self ) . __init__ ( * args , ** kwargs )
       def timestamp ( self ) :
                form . data [ form . add_prefix ( self . _pk_field . name ) ] = None
 self . _lock = _locks . setdefault ( name , RWLock ( ) )
 number = self . validate_number ( number )
 return copy . copy ( self )
 stamp = _time . mktime ( tt )
   def __getitem__ ( self , index ) :
 from django . utils . six . moves import html_entities
          handler . addQuickElement ( "title" , item [ 'title' ] )
   def get_exception_response ( self , request , resolver , status_code ) :
   def _read_limited ( self , size = None ) :
   @ staticmethod
  else :
 nodes = [ ]
 if categories :
 FormSet . model = model
          return "<%s: level=%r, msg=%r, hint=%r, obj=%r, id=%r>" % ( self . __class__ . __name__ , self . level , self . msg , self . hint , self . obj , self . id )
    imported_objects = { }
              u = salt + struct . pack ( b'>I' , i )
          if kwargs . pop ( 'ipv6' , False ) :
   def date ( self ) :
 def __init__ ( self , url , length , mime_type ) :
          self . file . seek ( 0 )
          view = viewname
  result . append ( self . create_token ( self . template_string [ start : end ] , ( start , end ) , True ) )
   def __iter__ ( self ) :
              with connection . cursor ( ) as curs :
 self . choice_value = force_text ( choice [ 0 ] )
          return baseconv . base62 . encode ( int ( time . time ( ) ) )
              raise TypeError ( "invalid keyword arguments to print()" )
   def serialize_headers ( self ) :
 try :
                 tok = tok . replace ( "\\" , "U" )
 return '\n' . join ( statements )
  sys . modules [ __name__ + ".moves.urllib_robotparser" ] = sys . modules [ __name__ + ".moves.urllib.robotparser" ] = Module_six_moves_urllib_robotparser ( __name__ + ".moves.urllib.robotparser" )
 self . find_template_cache . clear ( )
  except Resolver404 as e :
              e . django_template_source = token . source
   name = property ( _get_name , _set_name )
                  self . stdout . write ( "  No optimizations possible." )
  def serialize ( self , queryset , ** options ) :
  args = token . contents . split ( )
                  if middle . startswith ( opening ) :
 pk_field = self . model . _meta . pk
          assert len ( version ) == 5
 if hasattr ( formfield , 'queryset' ) :
 message = _ ( 'Ensure this value is greater than or equal to %(limit_value)s.' )
                         self . _mark_post_parse_error ( )
  except AttributeError :
  __all__ = ( 'UploadedFile' , 'TemporaryUploadedFile' , 'InMemoryUploadedFile' ,  'SimpleUploadedFile' )
          stream_or_string = stream_or_string . decode ( 'utf-8' )
                      self . write_po_file ( potfile , locale )
    class HttpResponseServerError ( HttpResponse ) :
 try :
                  self . interesting = re . compile ( r'</\s*%s\s*>' % tag . lower ( ) , re . I )
              return plural_suffix
   BUILTIN_SERIALIZERS = {  "xml" : "django.core.serializers.xml_serializer" ,  "python" : "django.core.serializers.python" ,  "json" : "django.core.serializers.json" ,  "yaml" : "django.core.serializers.pyyaml" ,  }
  del _serializers [ format ]
              locks . unlock ( fd )
 self . length = length
 leave_locale_alone = False
   def validate ( self , value ) :
      def compress_sequence ( sequence ) :
 def check_1_6_compatibility ( ** kwargs ) :
 field_params [ 'decimal_places' ] = row [ 5 ] if row [ 5 ] is not None else 5
 isatty = property ( lambda self : self . file . isatty )
 import time
  for i , field in enumerate ( self . fields ) :
    if item [ 'item_copyright' ] is not None :
  cleaned_data = form . cleaned_data
 compile_func . __doc__ = func . __doc__
 if not supported_platform or not is_a_tty :
    _moved_attributes = [ ]
          return _time . tzname [ self . _isdst ( dt ) ]
          paras = [ '<p>%s</p>' % escape ( p ) . replace ( '\n' , '<br />' ) for p in paras ]
  elif char in 'Yy' :
      def send_messages ( self , email_messages ) :
 if value in self . empty_values :
  from django . conf import settings
      def sort_dependencies ( app_list ) :
  self . xml . endElement ( "field" )
   sign = ''
     def build_request_repr ( request , path_override = None , GET_override = None ,  POST_override = None , COOKIES_override = None ,  META_override = None ) :
              name = p [ : i ] . strip ( ) . lower ( ) . decode ( 'ascii' )
          if settings . FILE_UPLOAD_TEMP_DIR :
                  dirs . append ( app_dir )
  return output
   def __repr__ ( self ) :
     sys . modules [ __name__ + ".moves.urllib" ] = Module_six_moves_urllib ( __name__ + ".moves.urllib" )
    def _add_fallback ( self ) :
          app_name = get_commands ( ) [ name ]
      import msvcrt
                              if self . verbosity >= 2 :
 if node . hasAttribute ( 'pk' ) :
  encoded = encoded . replace ( ";" , "\\073" ) . replace ( "," , "\\054" )
 path = kwargs . pop ( 'path' , None )
 colors . reverse ( )
     class WSGIRequestHandler ( simple_server . WSGIRequestHandler , object ) :
  else :
      Morsel = http_cookies . Morsel
   def _coerce ( self , value ) :
                  yield subnode
   def _new_gnu_trans ( self , localedir , use_null_fallback = True ) :
  for ext in pathext :
  except KeyError :
 filters = [ ]
    return [ self . forms [ i [ 0 ] ] for i in self . _ordering ]
   def _add_installed_apps_translations ( self ) :
  LANGUAGE_SESSION_KEY = '_language'
    if settings . is_overridden ( 'MANAGERS' ) :
   else :
          from importlib import find_loader as importlib_find
 opts = instance . _meta
 if isinstance ( offset , timedelta ) :
 class RegexValidator ( object ) :
     def partition ( predicate , values ) :
                   ch , escaped = next ( pattern_iter )
  if ttl is not None :
              if not package :
          path = [ path ]
 args , kwargs = parse_bits ( parser , bits , params , varargs , varkw ,  defaults , takes_context , name )
 super ( FilePathField , self ) . __init__ ( choices = ( ) , required = required ,  widget = widget , label = label , initial = initial , help_text = help_text ,  * args , ** kwargs )
              return ''
  else :
 handlers [ name ] = handler
              db = router . db_for_write ( self . cache_model_class )
 connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
 if rel_to in known_models :
 self . _dimensions_cache = get_image_dimensions ( self , close = close )
  else :
   except :
 super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
 self . include_html = include_html
          meta = type ( str ( 'Meta' ) , ( object , ) , { } )
  j = match . end ( )
  if value :
          base64d = b'.' + base64d
  elif ch == '[' :
  def __init__ ( self , tagtype ) :
 _assertRegex = "assertRegexpMatches"
     class ModelMultipleChoiceField ( ModelChoiceField ) :
 if auto_id and '%s' in smart_text ( auto_id ) :
              return 'StopUpload: Halt current upload.'
   def handle_app_config ( self , app_config , ** options ) :
  args = [  'xgettext' ,  '-d' , domain ,  '--language=C' ,  '--keyword=gettext_noop' ,  '--keyword=gettext_lazy' ,  '--keyword=ngettext_lazy:1,2' ,  '--keyword=pgettext:1c,2' ,  '--keyword=npgettext:1c,2,3' ,  '--output=-'  ] + command . xgettext_options
 self . version = params . get ( 'VERSION' , 1 )
  return EscapeBytes ( bytes ( s ) )
          super ( Deserializer , self ) . __init__ ( stream_or_string , ** options )
                  return False
 if field in self . cleaned_data :
          loaders = [ ]
 from django . db . migrations . optimizer import MigrationOptimizer
    def _initialize_handlers ( self ) :
   if six . PY3 :
     if type ( field_type ) is tuple :
                      if model in created_models :
          return hmac . compare_digest ( force_bytes ( val1 ) , force_bytes ( val2 ) )
 os . dup2 ( so . fileno ( ) , sys . stdout . fileno ( ) )
 cache = _create_cache ( backend , ** kwargs )
          s = s . replace ( '"' , '&quot;' )
  elif piece :
  return force_text ( error )
 translation . activate ( 'en-us' )
              kw [ 'microsecond' ] = kw [ 'microsecond' ] . ljust ( 6 , '0' )
  else :
 if _file is not None :
 trans_bit = [ bit ]
  return response
                  out . write ( blankout ( t . contents , 'X' ) )
          raise TemplateSyntaxError ( "%r received an invalid token: %r" %  ( bits [ 0 ] , remaining_bits [ 0 ] ) )
                  obj = mark_for_escaping ( new_obj )
 def timesince_filter ( value , arg = None ) :
          super ( EmailBackend , self ) . __init__ ( * args , ** kwargs )
          return input_val
   except NotImplementedError :
  if name is not None :
                              self . stdout . write ( " [X] %s" % title )
 if self . max_length is not None :
 for key in sorted ( user_settings ) :
          return self . source
 self . deleted_objects = [ ]
  def write ( data ) :
   return base . DeserializedObject ( obj , m2m_data )
          if not value and self . required :
          if not hasattr ( self , '_object_dict' ) :
  inner , outer = digest ( ) , digest ( )
 value , timestamp = result . rsplit ( self . sep , 1 )
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
  try :
 handle_default_options ( options )
     finally :
              yield "# This is an auto-generated Django model module."
 s = force_text ( s ) . strip ( ) . replace ( ' ' , '_' )
 self . subject = subject
 if newretval is not None :
              continue
    def _set ( self , key , value , timeout = DEFAULT_TIMEOUT ) :
               try :
  else :
  def __init__ ( self , attrs = None ) :
              form . fields [ DELETION_FIELD_NAME ] = BooleanField ( label = _ ( 'Delete' ) , required = False )
  return field . to_python
 def wrapper ( * args , ** kwargs ) :
  if isinstance ( source , NonCapture ) :
     def parse_boundary_stream ( stream , max_header_size ) :
    if self . load_initial_data :
              continue
 ignored = [ ]
    EndToken = EndToken ( )
  parser . __loaded_blocks . append ( block_name )
  else :
              self . instance = self . fk . rel . to ( )
              self . choices = [ ( "" , "---------" ) ]
              self . addr = '::1' if self . use_ipv6 else '127.0.0.1'
              return self . _render ( context )
 dirs . append ( '' )
                  if attr in flags :
 for punctuation in TRAILING_PUNCTUATION :
       class metaclass ( meta ) :
   if serializers is None :
 self . auto_id = auto_id
   if iterator is None :
  else :
   def top ( self ) :
   return __wrapper__
              addr = Header ( addr , encoding ) . encode ( )
          value = force_str ( value )
  else :
                       key = make_key ( args , kwds , typed )
 def id_for_label ( self ) :
  return '(%s: %s)' % ( self . connector , ', ' . join ( [ str ( c ) for c in  self . children ] ) )
   if target is None :
              fail_message = 'changed'
              if '--commands' in args :
 del self . dicts [ - 1 ] [ key ]
  else :
    def get_key_func ( key_func ) :
  update_wrapper ( _wrapper , dummy )
 min = int ( m . group ( 'min' ) )
          nodelist_empty = None
 self . toks = { }
 code = 'min_value'
          self . var1 , self . var2 = var1 , var2
  except StandardError as e :
 from django . utils . text import Truncator , wrap , phone2numeric
    if not self . addr :
 for sublist in second_item :
  else :
 if value in ( None , '' ) :
              widget = widget ( )
 import sys
 name = s . split ( '.' )
  else :
  setattr ( filter_func , attr , value )
  except ( KeyError , IndexError , AttributeError ) :
          from django . db import models
 import random
 LOCK_SH = fcntl . LOCK_SH
              return '%s\n\n%s' % ( usage , self . help )
   from django . conf import settings
   DOTS = [ '&middot;' , '*' , '\u2022' , '&#149;' , '&bull;' , '&#8226;' ]
 if missing_fields :
                  return False
    kwargs = { }
 return result
    def add_prefix ( self , index ) :
 self . context = context
  else :
          sys . modules [ __name__ + ".moves." + attr . name ] = attr
  __all__ = [  'CheckMessage' ,  'Debug' , 'Info' , 'Warning' , 'Error' , 'Critical' ,  'DEBUG' , 'INFO' , 'WARNING' , 'ERROR' , 'CRITICAL' ,  'register' , 'run_checks' , 'tag_exists' , 'Tags' ,  ]
 import hashlib
 return value
                  self . appendlist ( key , value )
  def copy ( self ) :
   block = type ( self ) ( block . name , block . nodelist )
      from collections import UserList
   base , tail_ext = os . path . splitext ( filename . lower ( ) )
                      num_sent += 1
 if self . is_bound :
          return DebugVariableNode ( contents )
 if since <= 0 :
              if can_fail :
   def remove_tags ( html , tags ) :
     for opt in [ 'fields' , 'exclude' , 'localized_fields' ] :
          msg = message . message ( )
 for k , v in self . choices :
                      data = data . replace ( microsecond = 0 )
 result . validators = self . validators [ : ]
              sys . stdout = NullDevice ( )
 if option_value in selected_choices :
     @ python_2_unicode_compatible
 basedirs . extend ( [ upath ( path ) for path in settings . LOCALE_PATHS ] )
   def _resolve_name ( name , package , level ) :
              self . stderr . write ( msg )
  else :
      pass
   def update_error_dict ( self , error_dict ) :
   def pop ( self ) :
                  url = smart_urlquote ( middle )
                result = SimpleLazyObject ( self . _setupfunc )
                  field_value = None
 def changed_data ( self ) :
          pass
                  if fake :
              return
  password = force_bytes ( password )
   return command . execute ( * args , ** defaults )
          year = int ( m . group ( 'year' ) )
    return False
          pass
      widget = DateInput
    if top_errors :
   if self . verbosity >= 2 :
                  return None
  elif options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :
    def _string_concat ( * strings ) :
   elif count > 1 :
 class EmailValidator ( object ) :
    def get_library ( library_name ) :
    if six . PY3 :
 for frag in name :
  return self . __cast ( ) != other
               self . tags [ name ] = compile_function
              return None
                          var_obj = Variable ( constant ) . resolve ( { } )
 @ stringfilter
 return (  path or '%s.%s' % ( obj . __class__ . __module__ , obj . __class__ . __name__ ) ,  obj . _constructor_args [ 0 ] ,  obj . _constructor_args [ 1 ] ,  )
                   url_fields [ 0 ] = 'http'
   class Command ( CheckCommand ) :
  return format_html ( '<input{0} />' , flatatt ( final_attrs ) )
 def cleanup_url ( url ) :
   return '\n' . join ( output )
   self . creation_counter = Field . creation_counter
      def render ( self , context ) :
   def fetch_command ( self , subcommand ) :
 self . active_readers = 0
   concrete_model = obj . _meta . concrete_model
  ALL_FIELDS = '__all__'
  if dec_part :
 super ( IncludeNode , self ) . __init__ ( * args , ** kwargs )
          with self . mutex :
                  endbmatch = endblock_re . match ( t . contents )
  else :
 regexes = self . regexes
 from . registry import register , run_checks , tag_exists , Tags
    def ngettext ( singular , plural , number ) :
              for date_key in date_keys :
          return value
              return fastcgi_help ( "ERROR: Invalid option for daemonize "  "parameter." )
   class Command ( BaseCommand ) :
              name = config . get ( 'name' , '' )
 if self . feed [ 'author_email' ] is not None :
          with open ( path , 'a' ) :
  else :
 leave_locale_alone = True
  return cookiedict
   def _fd ( f ) :
              if token_string . startswith ( VARIABLE_TAG_START ) :
 from django . utils . module_loading import module_has_submodule
   def url ( self , name ) :
              return default
          fill_to = 8
                      return self . tag ( name , func )
 import re
    def _itervalues ( self ) :
                              terminal_char = ')'
     def get_language_from_request ( request , check_path = False ) :
    suffixes = ( '.' . join ( ext for ext in combo if ext )  for combo in product ( databases , ser_fmts , cmp_fmts ) )
 yield "#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table"
 self . verbosity = int ( options . get ( 'verbosity' ) )
      class CacheClass ( LocMemCache ) :
   old_app_dir = os . path . normpath ( os . path . join ( app_dir , 'models/sql' ) )
                      rest = rest [ m . end ( ) : ]
     def select_template ( template_name_list , dirs = None ) :
  else :
              app_configs = None
    def npgettext ( context , singular , plural , number ) :
                          handler = self . configure_handler ( handlers [ name ] )
  def __init__ ( self , digits , sign = '-' ) :
          return self . render ( )
   def __next__ ( self ) :
          connection = connections [ self . using ]
   def load_middleware ( self ) :
  chunk_size *= 2
              raise InvalidTemplateLibrary ( "Unsupported arguments to "  "Library.tag: (%r, %r)" , ( name , compile_function ) )
  else :
              host = self . META [ 'HTTP_X_FORWARDED_HOST' ]
 def __init__ ( self , fields = ( ) , * args , ** kwargs ) :
                    content = message_from_string ( content )
          if self . timezone is None :
                  if register_to :
   def next_page_number ( self ) :
 self . resolver_match = None
  elif name is not None and compile_function is None :
                  try :
          if app_config . models_module is None :
 settingsfile = upath ( sys . modules [ settings . __module__ ] . __file__ )
 import sys
 if exp is not None and exp < time . time ( ) :
 self . sysid = sysid
  import base64
                  _ [ m [ k ] ] = v
 if definition :
 self . validate_key ( key )
 pdict = { }
  return plist
  candidate_subs = dict ( zip ( prefix_args + params , text_args ) )
     class EntitiesForbidden ( DefusedXmlException ) :
 if decimals > digits :
  if value [ 0 ] in self . empty_values and value [ 1 ] in self . empty_values :
 silent = True
   basedirs = [ os . path . join ( 'conf' , 'locale' ) , 'locale' ]
  requires_system_checks = False
  data = ( form . cleaned_data [ field ] , ) + date_data
  except ( ImportError , IndentationError , NameError , SyntaxError ,  TypeError , AttributeError ) :
   if plan_node in loader . applied_migrations :
 hour , minute = divmod ( timezone , 60 )
                  sentinal = bit [ 2 ] + ')'
          if instance is not None :
  except ImportError :
 return resolved_args , resolved_kwargs
  else :
   def add ( self , data , conn_type , squash = True ) :
 self . validate_key ( key )
                  obj = self . var . resolve ( context )
 value = environ . get ( str ( key ) , str ( default ) )
  else :
  for basedir in basedirs :
  height = property ( _get_height )
                  result . parent = self
                  absolute_path = path . abspath ( expanded_template )
  elif self . verbosity > 0 :
                  break
                      yield meta_line
                      continue
          cache = BaseDatabaseCache ( tablename , { } )
   if tried :
 from decimal import Decimal , DecimalException
 reporter = ExceptionReporter ( request , is_email = True , * exc_info )
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
     def load_label ( self , fixture_label ) :
  if hasattr ( self . file , 'name' ) :
  from django . core . exceptions import (  ImproperlyConfigured , ValidationError , NON_FIELD_ERRORS , FieldError )
 sys . stderr . write ( "  as a FastCGI application, you will need to get flup from\n" )
          return datetime . datetime . strptime ( force_str ( value ) , format )
              new_name = 'field%s' % new_name
  except AttributeError :
                 def get ( self , key , default = None , version = None ) :
                  self . _response_middleware . insert ( 0 , mw_instance . process_response )
      is_usable = resource_string is not None
 chunk = handler . receive_data_chunk ( chunk ,  counters [ i ] )
                  raise SignatureExpired (  'Signature age %s > %s seconds' % ( age , max_age ) )
 supported_platform = plat != 'Pocket PC' and ( plat != 'win32' or  'ANSICON' in os . environ )
          return b'' . join ( self . _container )
 message = _ ( 'Enter a valid URL.' )
 self . content_type_extra = None
          return force_str ( "<%s: %s (%s)>" % (  self . __class__ . __name__ , self . name , self . content_type ) )
      class WindowsError ( Exception ) :
              self . children . append ( data )
 if self . show_traceback :
 for bytes in stream :
 self . META [ 'PATH_INFO' ] = path_info
  yield representative , True
 pass
                  if bf_errors :
 if result and ( mode == 'set' or ( mode == 'add' and current_expires < now ) ) :
   def eval ( self , context ) :
   def gettext ( message ) :
   def e ( self ) :
    class TimeInput ( DateTimeBaseInput ) :
     def set_urlconf ( urlconf_name ) :
  illegal_formatting = _illegal_formatting . search ( fmt )
              domains = ( 'djangojs' , 'django' )
  if 'DJANGO_AUTO_COMPLETE' not in os . environ :
    class Paginator ( object ) :
   def get_host ( self ) :
    delta = delta + datetime . timedelta ( seconds = 1 )
 self . _cull ( )
   tags = options . get ( 'tags' , None )
   class UploadFileException ( Exception ) :
              class ConvertingDict ( dict ) :
  else :
  elif '=' in part :
  for fname in self . _list_cache_files ( ) :
  else :
          if value is None :
 if not match :
   if new_name in used_column_names :
 from django . utils . six . moves . urllib . request import urlretrieve
  if self . feed [ 'feed_copyright' ] is not None :
  try :
 major = '.' . join ( str ( x ) for x in version [ : parts ] )
 self . validate_name ( app_name , "app" )
  if cache_choices is not None :
  urlquote = allow_lazy ( urlquote , six . text_type )
   def pop ( self , k , * args ) :
  except ImportError :
  else :
          locales . append ( locale . split ( '_' ) [ 0 ] )
               _localtime = LocalTimezone ( )
    @ register . filter ( "escapejs" )
                      result = ( template , make_origin ( display_name , loader , name , dirs ) )
 self . verbose_name = 'cache entry'
     class FilterNode ( Node ) :
                      if index is not None :
 yield 'class %s(models.Model):' % table2model ( table_name )
 media = Media ( )
              data = compressed
   return result
                              terminal_char = '>'
                  raise CommandError ( "No migrations present for: %s" % ( ", " . join ( invalid_apps ) ) )
 if len ( fks_to_parent ) == 1 :
  else :
          if six . PY3 :
  try :
 ORDERING_FIELD_NAME = 'ORDER'
          self . config = ConvertingDict ( config )
              result = self . buffer [ : size ]
    _urllib_request_moved_attributes = [  MovedAttribute ( "urlopen" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "install_opener" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "build_opener" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "pathname2url" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "url2pathname" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "getproxies" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "Request" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "OpenerDirector" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPDefaultErrorHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPRedirectHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPCookieProcessor" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "BaseHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPPasswordMgr" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPPasswordMgrWithDefaultRealm" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "AbstractBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyBasicAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "AbstractDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "ProxyDigestAuthHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPSHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "FileHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "FTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "CacheFTPHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "UnknownHandler" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "HTTPErrorProcessor" , "urllib2" , "urllib.request" ) ,  MovedAttribute ( "urlretrieve" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "urlcleanup" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "URLopener" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "FancyURLopener" , "urllib" , "urllib.request" ) ,  MovedAttribute ( "proxy_bypass" , "urllib" , "urllib.request" ) ,  ]
 for node in self :
          return "<IfNode>"
  from django . utils . deprecation import RemovedInDjango19Warning
              self . schemes = schemes
 self . _input_data = input_data
 BASE64_ALPHABET = BASE62_ALPHABET + '-_'
 if end_index is None and s_len > truncate_len :
 if hasattr ( cls , k ) :
          self . objects . append ( self . get_dump_object ( obj ) )
 decorator = Node ( syms . decorator , [ Leaf ( token . AT , "@" ) , Name ( 'python_2_unicode_compatible' ) ] )
                  message = message . error_list
          if app_config . models_module is None :
 encode = lambda k , v : '%s=%s' % ( ( quote ( k , safe ) , quote ( v , safe ) ) )
   @ property
             def read ( self , * args , ** kwargs ) :
                          callback = lambda response : middleware . process_response ( request , response )
  from django . utils . encoding import force_text , force_str
    @ register . tag ( 'filter' )
          pass
                  field_output . append ( "PRIMARY KEY" )
          timezone = get_current_timezone ( )
 parts = parts [ : - 1 ]
              if self . field . choice_cache is None :
  def __init__ ( self , children = None , connector = None , negated = False ) :
  self . cookies = SimpleCookie ( )
 self . _regex_dict [ language_code ] = regex_compiled
 if not os . path . isdir ( basedir ) :
 self . _chunk_size = min ( [ 2 ** 31 - 4 ] + possible_sizes )
   while True :
              self . start_object ( obj )
 try :
  db = router . db_for_write ( self . cache_model_class )
    obj = base . build_instance ( Model , data , self . db )
  datetime_re = re . compile (  r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})'  r'[T ](?P<hour>\d{1,2}):(?P<minute>\d{1,2})'  r'(?::(?P<second>\d{1,2})(?:\.(?P<microsecond>\d{1,6})\d{0,6})?)?'  r'(?P<tzinfo>Z|[+-]\d{2}(?::?\d{2})?)?$'  )
       def __init__ ( self , text , subtype , charset ) :
 formatted = (  color_style ( ) . ERROR ( force_str ( e ) )  if e . is_serious ( )  else color_style ( ) . WARNING ( force_str ( e ) )  for e in issues )
  self . add_arguments ( parser )
      def __init__ ( self , name , params ) :
   def _create_message ( self , msg ) :
  else :
 utcdate = time . strftime ( '%Y%m%d%H%M%S' , time . gmtime ( timeval ) )
  self . base_url = base_url
 if i >= len ( subject ) :
 import sys
 klass . __str__ = lambda self : self . __unicode__ ( ) . encode ( 'utf-8' )
  fd = pyinotify . INotifyWrapper . create ( ) . inotify_init ( )
      def __init__ ( self , attrs = None , check_test = None ) :
  def __init__ ( self ) :
 self . remaining = limit
 from django . utils . six . moves . urllib . parse import urlsplit , urlunsplit
   @ property
              value = float ( value )
              raise TemplateSyntaxError ( "%s requires %d arguments, %d provided" %  ( name , alen - dlen , plen ) )
          length = int ( arg )
  else :
              if not isinstance ( initial , list ) :
 import sys
 raise ImproperlyConfigured ( msg . format ( name = self . urlconf_name ) )
              raise ValueError ( "Key '%s' not found" % key )
              @ wraps ( fget )
 return initial_value != data_value
  self . _callback_strs . update ( pattern . _callback_strs )
   def extract ( self , to_path = '' ) :
                return
                      self . stdout . write ( "Resetting sequences\n" )
          y = data . get ( self . year_field % name )
   def G ( self ) :
 import sys
              self . message = message
    try :
 from importlib import import_module
              return
 def addslashes ( value ) :
       from django . db . migrations . loader import MigrationLoader
    def loads ( s , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , max_age = None ) :
 def is_hidden ( self ) :
                  result . parent = self
 self . name = name
          vary_on = ( )
    cache = DefaultCacheProxy ( )
   executor = MigrationExecutor ( connection )
  else :
 self . bcc = list ( bcc )
 def trim_url ( x , limit = trim_url_limit ) :
              if name . lower ( ) in ( 'from' , 'to' ) :
    def clean ( self ) :
  return self . save_existing_objects ( commit ) + self . save_new_objects ( commit )
 new_method_name = renamed_method [ 1 ]
            state = self . __dict__ . copy ( )
     class Form ( six . with_metaclass ( DeclarativeFieldsMetaclass , BaseForm ) ) :
              boundary = boundary . encode ( 'ascii' )
 VARIABLE_ATTRIBUTE_SEPARATOR = '.'
 root [ : ] = [ root , root , None , None ]
                  field_notes . append (  'max_digits and decimal_places have been guessed, as this '  'database handles decimal fields as float' )
           base64d = base64d [ 1 : ]
      urlconf = settings . ROOT_URLCONF
              return
 def check_all_models ( app_configs = None , ** kwargs ) :
 CRITICAL = 50
      setattr ( Module_six_moves_urllib_request , attr . name , attr )
 raise NotImplementedError ( 'subclasses of BaseCommand must provide a handle() method' )
   def initial_form_count ( self ) :
          return True
      def __init__ ( self , table , params ) :
  self . _raw_ipv6 = False
              if connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :
        @ register . filter ( is_safe = True )
  for loader in template_source_loaders :
                  new = name
                      indexes = { }
      pytz = None
  return self . _wrapped . __dict__
   @ property
  while rest :
 def extra_forms ( self ) :
 if chunk is None :
    def compile_function_error ( self , token , e ) :
  request_middleware = [ ]
  if whitelist is not None :
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " OK" ) )
   def make_key ( self , key , version = None ) :
                          logger . disabled = True
          bits = token . split_contents ( ) [ 1 : ]
          try :
          c = cookie
  else :
  return '%s:%s' % ( self . g ( ) , self . i ( ) )
  def add_arguments ( self , parser ) :
              logger . warning ( 'Bad Request (UnicodeDecodeError)' ,  exc_info = sys . exc_info ( ) ,  extra = {  'status_code' : 400 ,  }  )
   def get_current_timezone ( ) :
   def __get__ ( self , obj , tp ) :
 super ( EmailMultiAlternatives , self ) . __init__ ( subject , body , from_email , to , bcc , connection , attachments , headers , cc )
  except ImportError :
          super ( MultiValueDict , self ) . __init__ ( key_to_list_mapping )
          try :
          return super ( Critical , self ) . __init__ ( CRITICAL , * args , ** kwargs )
  if subcommand == 'help' :
  else :
              self . reason_phrase = REASON_PHRASES . get ( self . status_code ,  'UNKNOWN STATUS CODE' )
          return item in self . dict
  tzinfo = get_fixed_timezone ( offset )
 if fk_name :
    if '::' not in ip_str and ip_str . count ( ':' ) != 7 :
  except ValueError :
 self . _done = True
          if isinstance ( data , ( MultiValueDict , MergeDict ) ) :
                  output . extend ( connection . ops . prepare_sql_script ( fp . read ( ) , _allow_fallback = True ) )
 handler . startDocument ( )
                  return [ ]
          super ( FileBasedCache , self ) . __init__ ( params )
                  break
  full_statement = [ "CREATE TABLE %s (" % qn ( tablename ) ]
  matches = True
  if isinstance ( s , Promise ) :
              contents = conditional_escape ( contents )
 migration . ancestry = loader . graph . forwards_plan ( ( app_label , migration_name ) )
                              message_context = message_context . strip ( '"' )
  options [ k . lower ( ) ] = v
          if not self . data :
              handler . addQuickElement ( "category" , cat )
  else :
     try :
   self . streaming_content = streaming_content
              return False
    def sanitize_separators ( value ) :
                          self . stdout . write ( "copying plural forms: %s\n" % plural_form_line )
 result = self . configurator . convert ( value )
              if self . verbosity > 0 :
                        print ( "In the tar file %s the member %s is invalid: %s" %  ( name , member . name , exc ) )
  return { 'TIME_ZONE' : timezone . get_current_timezone_name ( ) }
 orig_file = os . path . join ( self . dirpath , self . file )
   def render ( self , context ) :
          if not self . _upload_handlers :
 _cookie_allows_colon_in_names = True
              return ugettext ( "Please correct the duplicate data for %(field)s, "  "which must be unique." ) % {  "field" : get_text_list ( unique_check , six . text_type ( _ ( "and" ) ) ) ,  }
  import django
          if hasattr ( self , 'error_dict' ) :
 from __future__ import unicode_literals
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to synchronize. Defaults to the "default" database.' )
  style_func = [ f for f in ( style_func , self . style_func , lambda x : x )  if f is not None ] [ 0 ]
          prefix = get_script_prefix ( )
   def handle ( self , ** options ) :
 if _standard_context_processors is None :
 parts . reverse ( )
 self . charset = charset
  def __init__ ( self , iterable = None ) :
 from django . utils . _os import rmtree_errorhandler
  else :
 return WithNode ( None , None , nodelist , extra_context = extra_context )
              field_notes . append ( 'Field renamed to remove unsuitable characters.' )
 if len ( bits ) < 2 :
    return retval
 lookups . appendlist ( name , ( new_matches , p_pattern + pat , dict ( defaults , ** pattern . default_kwargs ) ) )
   sys . stderr . write ( msg )
   def _set_regex ( self , regex ) :
  name = _resolve_name ( name [ level : ] , package , level )
              queryset = self . model . _default_manager
          return value
              return list_ , False
  except TypeError :
          if data is None :
              handler . addQuickElement ( "category" , "" , { "term" : cat } )
  except TypeError :
  if 'message-id' not in header_names :
          cls = None
    _urllib_response_moved_attributes = [  MovedAttribute ( "addbase" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addclosehook" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfo" , "urllib" , "urllib.response" ) ,  MovedAttribute ( "addinfourl" , "urllib" , "urllib.response" ) ,  ]
          if not ext . startswith ( '.' ) :
  while factor >= 0 :
                      dirname = os . path . dirname ( filename )
 return msg_count
 del kwargs [ 'warning' ]
 parser . add_argument ( '--no-default-ignore' , action = 'store_false' , dest = 'use_default_ignore_patterns' ,  default = True , help = "Don't ignore the common glob-style patterns 'CVS', '.*', '*~' and '*.pyc'." )
 allow_cascade = options . get ( 'allow_cascade' , False )
  else :
              pass
 extra_params . update ( params )
 return
  return ( ( not url_info . netloc or url_info . netloc == host ) and  ( not url_info . scheme or url_info . scheme in [ 'http' , 'https' ] ) )
          self . _stream = stream
                              self . handle_field ( obj , field )
     root = config . get ( 'root' , None )
 global _supported
          path = force_text ( path )
    def delete ( self , key , version = None ) :
  re_formatchars = re . compile ( r'(?<!\\)([aAbBcdDeEfFgGhHiIjlLmMnNoOPrsStTUuwWyYzZ])' )
          _anonymous_ = [ '_offset' ]
          thread . start_new_thread ( main_func , args , kwargs )
   delta = 2000 - year
 visible_issue_count = 0
  except KeyError :
 for key , value in dict . items ( self ) :
   def format_subject ( self , subject ) :
  return self . _regex_dict [ language_code ]
  self [ 'Content-Type' ] = content_type
 self . _errors = ErrorDict ( )
          return force_text ( list_ [ 0 ] )
              warnings . warn (  '"requires_model_validation" is deprecated '  'in favor of "requires_system_checks".' ,  RemovedInDjango19Warning )
                      context [ self . loopvars [ 0 ] ] = item
  elif 'public' in cc and 'private' in kwargs :
    @ register . tag
 if app_path is None :
              return path
 tag_exists = registry . tag_exists
  return settings . TEMPLATE_STRING_IF_INVALID
 self . max_width = max_width
               msg = self . style . HTTP_SUCCESS ( msg )
   def render ( self , context ) :
      def write_pot_file ( potfile , msgs ) :
 import sys
 self . password = settings . EMAIL_HOST_PASSWORD if password is None else password
                          for matches , pat , defaults in pattern . reverse_dict . getlist ( name ) :
 return '' . join ( output )
  lineno_comment_map [ comment_lineno_cache ] = [ ]
 return { '2' : True ,  True : True ,  'True' : True ,  '3' : False ,  'False' : False ,  False : False } . get ( value , None )
              result += ugettext ( ', ' ) + avoid_wrapping ( name2 % count2 )
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be iterated over.' )
 return Page ( * args , ** kwargs )
 run_checks = registry . run_checks
  for attachment in self . attachments :
  last = pos + 1
              choices . insert ( 0 , none_value )
          self . _assert_mutable ( )
 writelines = property ( lambda self : self . file . writelines )
 file_list = self . find_files ( "." )
 result_args = new_args
 import django . core . checks . model_checks
 try :
   class BaseEmailBackend ( object ) :
   return singular_suffix
 if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs :
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database to synchronize. '  'Defaults to the "default" database.' )
 from django . core . files import uploadhandler
                    if var . find ( VARIABLE_ATTRIBUTE_SEPARATOR + '_' ) > - 1 or var [ 0 ] == '_' :
   def _findall ( text , substr ) :
          return t . render ( context_instance )
                  parser . add_option ( opt )
 parser . add_argument ( '--format' , default = 'json' , dest = 'format' ,  help = 'Specifies the output serialization format for fixtures.' )
            try :
  except ( ValueError , self . queryset . model . DoesNotExist ) :
  else :
                      logger = root . manager . loggerDict [ log ]
  filter_re = re . compile ( filter_raw_string , re . UNICODE | re . VERBOSE )
   def __iter__ ( self ) :
  if not hasattr ( func , '__name__' ) :
 return '\n' . join ( statements )
          return ( "%" + six . text_type ( arg ) ) % value
 from math import ceil
  WEEKDAYS = {  0 : _ ( 'Monday' ) , 1 : _ ( 'Tuesday' ) , 2 : _ ( 'Wednesday' ) , 3 : _ ( 'Thursday' ) , 4 : _ ( 'Friday' ) ,  5 : _ ( 'Saturday' ) , 6 : _ ( 'Sunday' )  }
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Merging %s" % app_label ) )
    if data is False :
                          unpacked_vars = dict ( zip ( self . loopvars , item ) )
  connection = connections [ options [ 'database' ] ]
  from django . core . management . base import BaseCommand
 return list ( value )
          self . object_list = object_list
 inplural = False
 localpart = str ( Header ( localpart , encoding ) )
  if localized_fields is not None :
 def get_digit ( value , arg ) :
              val = self . _cache . decr ( key , delta )
 self . interactive = options . get ( 'interactive' )
 if not os . path . exists ( self . default_locale_path ) :
          value = self . to_python ( value ) . strip ( )
          def dec ( func ) :
              return None
          raise
  create_models = set ( itertools . chain ( * manifest . values ( ) ) )
    if response . has_header ( 'Cache-Control' ) :
 from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
              final_attrs [ 'checked' ] = 'checked'
 self . merge ( translation )
    try :
                  return
              getattr ( combined , 'add_' + name ) ( getattr ( self , '_' + name , None ) )
 if cache is None :
          from django . utils . daemonize import become_daemon
  self . stdout . flush ( )
 if not data :
 kwargs = { }
 self . charset = charset
 iterbytes = iter
 if os . path . isdir ( template_dir ) :
 parser . add_argument ( '--natural-primary' , action = 'store_true' , dest = 'use_natural_primary_keys' , default = False ,  help = 'Use natural primary keys if they are available.' )
          return escape ( text )
    self . _name = name
                          continue
 table = connections [ db ] . ops . quote_name ( self . _table )
   def __eq__ ( self , other ) :
      renderer = RadioFieldRenderer
 def urlizetrunc ( value , limit , autoescape = None ) :
   connection_params = { 'local_hostname' : DNS_NAME . get_fqdn ( ) }
     class Archive ( object ) :
           pos_inf = 1e200 * 1e200
   self . can_read . acquire ( )
              kwargs [ 'label' ] = labels [ f . name ]
 chunk += over_chunk
    @ lru_cache . lru_cache ( maxsize = None )
                  result . parent = self
   if not isinstance ( d , datetime . datetime ) :
 plan = executor . migration_plan ( executor . loader . graph . leaf_nodes ( ) )
  return attrs
 six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) ,  sys . exc_info ( ) [ 2 ] )
                      try :
   def create_token ( self , token_string , in_tag ) :
   def __get__ ( self , instance , type = None ) :
   def __next__ ( self ) :
              self . renderer = renderer
 MIMEText . __setitem__ ( self , name , val )
 import warnings
          parser . add_argument ( '--locale' , '-l' , dest = 'locale' , action = 'append' , default = [ ] ,  help = 'Locale(s) to process (e.g. de_AT). Default is to process all. '  'Can be used multiple times.' )
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to create SQL for. Defaults to the '  '"default" database.' )
                      data [ f . name ] = [ item . pk for item in qs ]
              archive . extract ( filename , tempdir )
   name = self . timezone . tzname ( self . data ) if self . timezone else None
 if value is not result :
 id_ = self . field . widget . attrs . get ( 'id' ) or self . auto_id
              self . validators . remove ( self . _regex_validator )
          warnings . warn (  "django.utils.tzinfo.LocalTimezone will be removed in Django 1.9. "  "Use django.utils.timezone.get_default_timezone instead." ,  RemovedInDjango19Warning )
                          out . write ( ' gettext(%r) ' % g )
 __T = r'(?P<hour>\d{2}):(?P<min>\d{2}):(?P<sec>\d{2})'
   def is_iterable ( x ) :
 return from_current_timezone ( result )
 return Variable ( path ) . resolve ( context )
  value , converted = convert_old_style_list ( value )
  else :
   def o ( self ) :
  import time
                      var_obj = Variable ( var )
  HTMLParseError = _html_parser . HTMLParseError
  else :
 from decimal import Decimal
 errors = [ ]
          opts = self . _meta
 if self . _pk_field == self . fk :
 for k in keys :
  del cache [ oldkey ]
 jan1_weekday = self . data . replace ( month = 1 , day = 1 ) . weekday ( ) + 1
                  return nodelist . render ( context )
 if serializers is None and not _serializers :
 from django . utils . deprecation import RemovedInDjango19Warning
  if six . PY2 :
                return False
  else :
  __all__ = [ 'File' ]
  def compile_func ( parser , token ) :
              return clean_ipv6_address ( value , self . unpack_ipv4 )
    parser = command . create_parser ( '' , name )
              attrs . update ( extra_attrs )
 read = property ( lambda self : self . file . read )
  self . reset ( )
     def get_path_info ( environ ) :
  remove_tags = allow_lazy ( remove_tags , six . text_type )
  except ZeroDivisionError :
 serializers = { }
   @ property
 warnings . warn ( msg % ( language , _DJANGO_DEPRECATED_LOCALES [ language ] ) ,  RemovedInDjango19Warning , stacklevel = 2 )
   klass . __new__ = staticmethod ( __new__ )
 _file = None
              rest = rest [ m . end ( ) : ]
              return data . getlist ( name )
 format_type = force_str ( format_type )
     class Critical ( CheckMessage ) :
          if self . _done :
          if not getattr ( f , 'editable' , False ) :
  if ipv4_unpacked :
 usage . append ( style . NOTICE ( "[%s]" % app ) )
          msgs = msgs . replace ( 'charset=CHARSET' , 'charset=UTF-8' )
  return super ( BooleanField , self ) . to_python ( value )
   def appendlist ( self , key , value ) :
   def has_other_pages ( self ) :
 from datetime import datetime
 self . attrs = attrs
 return ( '<%s token: "%s...">' %  ( token_name , self . contents [ : 20 ] . replace ( '\n' , '' ) ) )
                      os . makedirs ( filename )
              return self . nodelist_true . render ( context )
 from django . core . management . sql import sql_flush
                  exclude . append ( f . name )
      compare = lambda self , a , b : a < b
                  pass
              try :
   format_locations = [ ]
   elif issubclass ( klass , logging . handlers . SMTPHandler ) and 'mailhost' in config :
  else :
          mail . attach_alternative ( html_message , 'text/html' )
   _encoding = None
 lib = libraries . get ( library_name , None )
              obj . pk = Model . _default_manager . db_manager ( db ) . get_by_natural_key ( * natural_key ) . pk
   if self . interactive :
   def values ( self ) :
          if option_value is None :
          pass
   def id_for_label ( self , id_ ) :
 self . content_type = content_type
                      if value == k2 or text_value == force_text ( k2 ) :
          if accept_lang == '*' :
                                  raise
 from django . core . mail . backends . base import BaseEmailBackend
          try :
    @ register . filter ( is_safe = True )
  if os . name == 'posix' :
              if migration . replaces :
 msg += '\n%s:\n%s\n' % ( group_name , formatted )
   if is_templatized :
 use_natural_primary_keys = options . get ( 'use_natural_primary_keys' )
   else :
              return key [ 0 ]
 if schemes is not None :
 from django . utils . deprecation import RemovedInDjango19Warning
 context [ 'block' ] = block
    class NonCapture ( list ) :
   def value_from_datadict ( self , data , files , name ) :
                      return "[Included template had syntax error: %s]" % e
     class Input ( Widget ) :
                      usage . append ( "    %s" % name )
 try :
  def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  queryset = None , ** kwargs ) :
          attrs [ 'error_messages' ] = error_messages
  except IndexError :
   return style
  values = {  name : var . resolve ( context )  for name , var in six . iteritems ( self . extra_context )  }
 handler . endElement ( "item" )
          attr = import_string ( dotted_path )
 if isinstance ( widget , NumberInput ) and 'step' not in widget . attrs :
 import tempfile
          from django . core . urlresolvers import reverse , NoReverseMatch
              potfiles = self . build_potfiles ( )
           return super ( PythonSerializer , self ) . getvalue ( )
 def ordered_forms ( self ) :
          __bytes__ = serialize
 for path in collect :
              return self . stream . getvalue ( )
                          locks . lock ( fd , locks . LOCK_EX )
   except IndexError :
                  error_text = ERRORS [ e . errno ]
  self . stdout . write ( (  "%(started_at)s\n"  "Django version %(version)s, using settings %(settings)r\n"  "Starting development server at http://%(addr)s:%(port)s/\n"  "Quit the server with %(quit_command)s.\n"  ) % {  "started_at" : now ,  "version" : self . get_version ( ) ,  "settings" : settings . SETTINGS_MODULE ,  "addr" : '[%s]' % self . addr if self . _raw_ipv6 else self . addr ,  "port" : self . port ,  "quit_command" : quit_command ,  } )
 choices = list ( chain ( self . choices , choices ) )
 if contents is not None :
   def chunks ( self , chunk_size = None ) :
 from django . utils . encoding import python_2_unicode_compatible
  elif size < len ( self . buffer ) :
 return message
  def __init__ ( self , states , first ) :
              usage = sorted ( get_commands ( ) . keys ( ) )
          self . close ( )
 from django . utils . timesince import timesince , timeuntil
                              continue
   warnings . simplefilter ( "default" , RemovedInNextVersionWarning )
                      try :
              raise AttributeError ( "You cannot set content to a 304 (Not Modified) response" )
  if formatter :
 if '%(truncated_text)s' in truncate :
                      M = self . get ( key , Morsel ( ) )
 if ch :
 def widthratio ( parser , token ) :
          return formats . date_format ( value , arg )
  if self . parsed :
  self . stream . write ( "[" )
   @ property
 return [ field for field in self if field . is_hidden ]
   if func is None :
 self . lasttag = tag = match . group ( 1 ) . lower ( )
          super ( InMemoryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )
 return nodelist
            return '%s%s' % ( self . path , ( '?' + iri_to_uri ( self . META . get ( 'QUERY_STRING' , '' ) ) ) if self . META . get ( 'QUERY_STRING' , '' ) else '' )
 gettext_module . GNUTranslations . __init__ ( self )
      format_key = 'TIME_INPUT_FORMATS'
 return guessed_path
              value = self . val_expr . resolve ( context )
 d = get_deserializer ( format )
          return ""
  elif char in 'bEFMmNn' :
  base_path = os . path . splitext ( po_path ) [ 0 ]
                  return - 1
 if version is None :
   else :
  form . _meta . fields . append ( self . fk . name )
     def format_html ( format_string , * args , ** kwargs ) :
 if count != 0 :
    def cookie_date ( epoch_seconds = None ) :
                  try :
 try :
              self . bcc = [ ]
  media = property ( _get_media )
 self . _unget_history = [ num_bytes ] + self . _unget_history [ : 49 ]
  except ( DatabaseError , IntegrityError ) as e :
 os . dup2 ( se . fileno ( ) , sys . stderr . fileno ( ) )
              hextets = [ '' ] + hextets
          raise ValidationError ( error_message , code = 'invalid' )
   if in_tag and not self . verbatim :
                      raise TemplateSyntaxError ( "Could not find variable at "  "start of %s." % token )
 return formatdate ( epoch_seconds , usegmt = True )
   else :
 def __prepare_class__ ( cls ) :
          return item in list ( self )
 obj . __class__ = cls
      class DebugVariableNode ( VariableNode ) :
   class BadHeaderError ( ValueError ) :
   self . _clean_fields ( )
 if base_url is None :
           patterns = getattr ( self . urlconf_module , "urlpatterns" , self . urlconf_module )
  lexer = lexer_class ( template_string , origin )
   def clean ( self , value ) :
                      attrvalue = self . unescape ( attrvalue )
                  return 'https'
              sys . stderr . write ( "fork #1 failed: (%d) %s\n" % ( e . errno , e . strerror ) )
 def encoding ( self , value ) :
        try :
  for cat in self . feed [ 'categories' ] :
              if ord ( char ) < 33 or ord ( char ) == 127 :
                  handler . addQuickElement ( "uri" , item [ 'author_link' ] )
 class ErrorDict ( dict ) :
                      relations = { }
              id_ = self . attrs [ 'id' ]
  else :
   def _get_size ( self ) :
     def restart_with_reloader ( ) :
                  if filename and not os . path . exists ( filename ) :
   def dst ( self , dt ) :
              ch2 = None
          self . func = func
          return "Error in formatting: %s" % force_text ( e , errors = "replace" )
                  sys . stdout . write ( self . main_help_text ( ) + '\n' )
 from django . utils . encoding import force_str
          try :
  args_check = staticmethod ( args_check )
   def _dec ( func ) :
 from django . utils import six
  except IOError as e :
 if end not in ( ">" , "/>" ) :
                  return ''
      error_class = ValueError
  else :
 try :
  except KeyError :
 prefix = 'django_%s_template_' % self . app_or_project
 self . verbatim = False
 import warnings
                      label = ''
   def utcoffset ( self , dt ) :
 self . month_none_value = ( 0 , empty_label [ 1 ] )
  return bits [ 0 ] , ''
 from functools import wraps
 RFC850_DATE = re . compile ( r'^\w{6,9}, %s-%s-%s %s GMT$' % ( __D , __M , __Y2 , __T ) )
 graph = loader . graph
 ret = self . _cache . get_multi ( new_keys )
   filesize_number_format = lambda value : formats . number_format ( round ( value , 1 ) , 1 )
              handler . startElement ( "author" , { } )
          return self . source_error ( token . source , msg )
    return False
 week_number = j // 7
          try :
 try :
 xgettext_options = [ '--from-code=UTF-8' , '--add-comments=Translators' ]
 self . template_dirs = template_dirs
              if code in _supported and check_for_language ( code ) :
  else :
          parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
              code_list . append ( foreground [ v ] )
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
 self . _expire_info [ key ] = self . get_backend_timeout ( timeout )
          return iter ( self . _container )
              settings . configure ( USE_I18N = True )
                  week_number = 52
   class LimitedStream ( object ) :
   def update ( self , other_dict ) :
 self . _errors = None
  if request . _post_parse_error :
 from django . utils import six
          if node . must_be_first and nodelist :
              msg [ 'Cc' ] = ', ' . join ( self . cc )
              if options . traceback or not isinstance ( e , CommandError ) :
  try :
                  defaults [ 'initial' ] = self . initial [ i ]
          for item in self . items :
  else :
 assert mimetype is None
          return self . __class__ ( [  ( k , v [ : ] )  for k , v in self . lists ( )  ] )
    if form . _meta . fields :
              pass
     class BaseTemporalField ( Field ) :
          return locale . lower ( )
          self . flo = flo
 self . stdout . write ( "  you can delete them." )
   def valid_ident ( s ) :
  import re
   def render ( self , name , value , attrs = None , choices = ( ) ) :
          self . model = getattr ( options , 'model' , None )
  from django . utils . encoding import force_text , DEFAULT_LOCALE_ENCODING
    @ register . filter ( is_safe = True )
          return PALETTES [ DEFAULT_PALETTE ]
      setattr ( _MovedItems , attr . name , attr )
          return
              conf = settings . CACHES [ backend ]
              nodes . append ( self )
 if os . path . exists ( fname ) :
              pass
    if hasattr ( request , 'session' ) :
          iterator = iter ( stream_or_iterable )
 def bound_func ( * args2 , ** kwargs2 ) :
    def value_from_datadict ( self , data , files , name ) :
      cache_suffix = '.djcache'
          urlconf = get_urlconf ( )
 return major
 fg = colors . pop ( )
 from IPython import start_ipython
 for cnt , digit in enumerate ( int_part [ : : - 1 ] ) :
 level = config . get ( 'level' , None )
  from django . utils . datastructures import MultiValueDict
 if cached is not None :
    class LocaleRegexProvider ( object ) :
  request_started = Signal ( )
 from django . utils . six . moves . urllib . parse import urlparse
          pid = os . getpid ( )
 _assertRegex = "assertRegex"
    for regex in RFC1123_DATE , RFC850_DATE , ASCTIME_DATE :
 if extra_attrs :
  self . _container = [ ]
 g . flatten ( self , unixfrom = unixfrom )
 object_data = { }
                  import_module ( '%s.%s' % ( app_config . name , module_to_search ) )
 try :
            return s . get_data ( ) + s . rawdata
 b64encoded = base64 . b64encode ( pickled )
   try :
  from . html_parser import HTMLParser , HTMLParseError
                  sys . exit ( exit_code )
                      continue
  return self . parent_instance
  except AppRegistryNotReady :
     class TarArchive ( BaseArchive ) :
    @ register . tag
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
              del self . _get
 result = [ ]
 for item in elt :
              if ( self . validate_max and  self . total_form_count ( ) - len ( self . deleted_forms ) > self . max_num ) or self . management_form . cleaned_data [ TOTAL_FORM_COUNT ] > self . absolute_max :
  from django . db . models . fields import Field as ModelField
   def back ( self ) :
                      m = plural_forms_re . search ( fp . read ( ) )
      pass
 if path is None :
    conflicts = executor . loader . detect_conflicts ( )
   else :
 yield SubWidget ( self , name , value , attrs , choices )
 return mark_safe ( _urlize ( value , trim_url_limit = int ( limit ) , nofollow = True ,  autoescape = autoescape ) )
              with self . initLock :
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
  from django . core import mail
   def get_signed_cookie ( self , key , default = RAISE_ERROR , salt = '' , max_age = None ) :
 from django . utils . functional import cached_property
 should_convert = ( isinstance ( value , datetime )  and ( settings . USE_TZ if use_tz is None else use_tz )  and not is_naive ( value )  and getattr ( value , 'convert_to_local_time' , True ) )
              raise base . DeserializationError (  "<%s> node has invalid model identifier: '%s'"  % ( node . nodeName , model_identifier ) )
              try :
   def token_kwargs ( bits , parser , support_legacy = False ) :
              filename = filename [ : - 9 ] + ".py"
  def _generator ( ) :
                tok = '"REGEX"'
      def __get__ ( self , instance , owner ) :
              questioner = MigrationQuestioner ( defaults = { 'ask_merge' : True } )
                      messages = ValidationError ( messages )
import copy
 def _cache ( self ) :
 if not len ( self . backout ) :
          if fget is not None :
 return force_text ( quote ( force_str ( url ) , force_str ( safe ) ) )
 return self
 if timeout is None :
  raise SyntaxError ( "Translation blocks must not include other block tags: %s (%sline %d)" % ( t . contents , filemsg , t . lineno ) )
              qs = queryset . none ( )
   def gettext ( message ) :
  else :
 def _get_val ( ) :
    decode = curry ( _proxy_method , method = bytes . decode )
 if self . is_checked ( ) :
              deactivate ( )
          return NodeList ( )
                          raw_data = field_stream . read ( )
 found = getattr ( found , frag )
          pass
              return loader . get_template ( template )
    def memoize ( func , cache , num_args ) :
                  raise
 basedirs = [ os . path . abspath ( basedir ) for basedir in basedirs  if os . path . isdir ( basedir ) ]
          from importlib . util import find_spec as importlib_find
  else :
 return ''
 constant_arg , var_arg = match . group ( "constant_arg" , "var_arg" )
      return ugettext ( message )
  for middleware_method in self . _request_middleware :
          ret_ip . append ( ( '0' * ( 4 - len ( hextet ) ) + hextet ) . lower ( ) )
                                  self . stdout . write ( "    Installing custom SQL for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
 values = _itervalues
   def has_bom ( fn ) :
 return ( ret == 0 )
  connection = connections [ database ]
  final_attrs = self . build_attrs ( attrs , name = name )
                          current = settings . TEMPLATE_STRING_IF_INVALID
    return msg_count
   try :
  with open ( filename , 'wb' ) as outfile :
 self . params = params
  self . callback = None
   def __enter__ ( self ) :
          return caches [ DEFAULT_CACHE_ALIAS ] == other
   class Command ( AppCommand ) :
          return self . _reverse_with_prefix ( lookup_view , '' , * args , ** kwargs )
 view = parts [ 0 ]
              dec_part = dec_part [ : decimal_pos ]
                  if e . errno != errno . EEXIST :
  else :
                      middle = middle [ : - len ( punctuation ) ]
                    timeout += int ( time . time ( ) )
                  try :
          stream . unget ( chunk )
 if value in self . empty_values :
 data = method ( self , * args , ** kwargs )
 import gzip
 statements = sql_custom ( app_config , self . style , connection )
 foreground = dict ( ( color_names [ x ] , '3%s' % x ) for x in range ( 8 ) )
 parser = self . create_parser ( prog_name , subcommand )
 html = starttag_re . sub ( '' , html )
from __future__ import unicode_literals
 from django . core . files . utils import FileProxyMixin
                      buffer_ = line
 if not value :
 self . dry_run = options . get ( 'dry_run' , False )
        def reloader_thread ( ) :
 from django . utils . deprecation import RemovedInDjango19Warning
    @ deconstructible
              if is_naive ( obj ) :
  if not is_valid_ipv6_address ( ip_str ) :
  from __future__ import unicode_literals
                          return True
  except LookupError :
                   logger = logging . getLogger ( 'py.warnings' )
                   kwargs [ str ( param ) ] = value
              return [ ]
   def compile_filter_error ( self , token , e ) :
 commands_dict = collections . defaultdict ( lambda : [ ] )
                       urlconf = request . urlconf
      help = 'Compiles .po files to .mo files for use with builtin gettext support.'
 for tok in rules :
 def __new__ ( cls , fget = None , fset = None , fdel = None , doc = None ) :
 for i , choice in enumerate ( self . choices ) :
          return False
          return [  Warning (  "Some project unittests may not execute as expected." ,  hint = ( "Django 1.6 introduced a new default test runner. It looks like "  "this project was generated using Django 1.5 or earlier. You should "  "ensure your tests are all running & behaving as expected. See "  "https://docs.djangoproject.com/en/dev/releases/1.6/#new-test-runner "  "for more information." ) ,  obj = None ,  id = '1_6.W001' ,  )  ]
          try :
 def __init__ ( self , parent_widget , name , value , attrs , choices ) :
 raise CommandError ( "Conflicting migrations detected (%s).\nTo fix them run 'python manage.py makemigrations --merge'" % name_str )
              for accessor_name , object_list in self . m2m_data . items ( ) :
 for key , value in six . iterlists ( self ) :
  def to_python ( self , data ) :
  if ch2 == '?' :
 @ stringfilter
          return strftime ( self , fmt )
          super ( DictWrapper , self ) . __init__ ( data )
          self . mutex = threading . RLock ( )
  except AttributeError :
  except VariableDoesNotExist :
 self . common_logger_config ( root , config , incremental )
  return list ( self )
 raise NotImplementedError ( 'subclasses of BaseCache must provide a delete() method' )
   filelist = random . sample ( filelist ,  int ( num_entries / self . _cull_frequency ) )
                  for receiver , _ , _ in receivers :
          key = self . make_key ( key , version = version )
          return self . choice_value in self . value
          self . queryset = queryset
                  if hasattr ( field . rel , 'to' ) :
                   def dec ( func ) :
     libraries = { }
   def __repr__ ( self ) :
                  message = 'make sure the name begins with a letter or underscore'
              return loader . select_template ( template )
      if urlconf is None :
      pass
                              message_context = message_context . strip ( '"' )
  requires_system_checks = False
                   for k2 , v2 in v :
 def do_for ( parser , token ) :
   def make_writeable ( self , filename ) :
 if ip_str . count ( '::' ) == 1 :
  return sites
          raise ValueError ( 'Not a valid Python identifier: %r' % s )
          self . _assert_mutable ( )
  return result
   elif t . token_type == TOKEN_VAR :
 continue
                  return not self . _is_expired ( f )
  i += 1
 try :
                  end -= 1
                      form . save_m2m ( )
                  if value is None and attr in declared_fields :
   def __getitem__ ( self , name ) :
 args = args or [ ]
    @ register . filter ( "slice" , is_safe = True )
 raise
                  return default
  if not incremental :
              return False
              docs_version = 'dev'
              _locs_ = _globs_
 return data
   class Iterator ( object ) :
                      self . addr = self . addr [ 1 : - 1 ]
           from collections import namedtuple
  filters = config . get ( 'filters' , None )
              if isinstance ( slots , str ) :
 self . timezone = None
                      raise AttributeError
              raise ImportError (  "Could not import '%s'. The path must be fully qualified." %  lookup_view )
     def format ( value , format_string ) :
 self . help_texts = getattr ( options , 'help_texts' , None )
   msgs = msgs . replace (  "#. #-#-#-#-#  %s.pot (PACKAGE VERSION)  #-#-#-#-#\n" % self . domain , "" )
                      rawdata = force_str ( rawdata )
  return value
 from django . core . serializers . python import Deserializer as PythonDeserializer
    def cache_info ( ) :
     class HttpResponseBadRequest ( HttpResponse ) :
 from django . forms . formsets import *
   ugettext_noop = gettext_noop
  else :
  import socket
                              out . write ( ' ngettext(%r, %r, count) ' % (  join_tokens ( singular , trimmed ) ,  join_tokens ( plural , trimmed ) ) )
              continue
 sql_files = [ ]
                          continue
   def listdir ( self , path ) :
  else :
   def timesince ( d , now = None , reversed = False ) :
  try :
  return _serializers [ format ] . Deserializer
 options = [ ( '--help' , None ) ]
                      outfile . write ( data )
  except AmbiguityError :
 if value in self . empty_values :
                              locale_dir = path
  if ( context . autoescape and not isinstance ( output , SafeData ) ) or isinstance ( output , EscapeData ) :
                  raise
 obj_pk = field . rel . to . _meta . get_field ( field . rel . field_name ) . to_python ( field_value )
                      locations . extend ( ( dirpath , f ) for f in filenames if f . endswith ( '.po' ) )
  else :
 self . can_read . release ( )
              raise TypeError ( "can't delete _wrapped." )
                      common_ancestor = level [ 0 ]
  super ( Textarea , self ) . __init__ ( default_attrs )
  else :
   else :
  else :
   def utcoffset ( self , dt ) :
 for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
          raise TemplateSyntaxError ( "'%s' takes at least one argument"  " (path to a view)" % bits [ 0 ] )
  self . choices = choices
              current_uri = '{scheme}://{host}{path}' . format ( scheme = self . scheme ,  host = self . get_host ( ) ,  path = self . path )
              key = self . to_field_name or 'pk'
 salt = force_bytes ( salt )
 if language not in _translations :
              pass
      def format ( self , formatstr ) :
 if kw [ 'microsecond' ] :
              if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
  except ( TypeError , AttributeError ) :
                       self . _request_middleware = None
                      self . _changed_data . append ( name )
   def writer_leaves ( self ) :
  url_info = urlparse ( url )
  output = [ ]
 return '%s-%s-%s GMT' % ( rfcdate [ : 7 ] , rfcdate [ 8 : 11 ] , rfcdate [ 12 : 25 ] )
          nodelist = parser . parse ( ( 'endif' , ) )
                       result = user_function ( * args , ** kwds )
                  before_import_registry = copy . copy ( register_to . _registry )
    @ register . filter ( is_safe = True )
      @ register . tag
                  result . parent = self
    try :
   def main_help_text ( self , commands_only = False ) :
      def __init__ ( self , source ) :
            if sys . version_info [ : 2 ] == ( 3 , 2 ) :
  touch_import ( 'django.utils.encoding' , 'python_2_unicode_compatible' , decorated )
   chunk = b'' . join ( chunks )
 self . stdout . write ( "  the new migration will be used for new installs. Once you are sure" )
 parser . delete_first_token ( )
                  header , value = settings . SECURE_PROXY_SSL_HEADER
              return
 self . limit_choices_to = limit_choices_to
          tt = ( dt . year , dt . month , dt . day ,  dt . hour , dt . minute , dt . second ,  dt . weekday ( ) , 0 , 0 )
    def _cull ( self , db , cursor , now ) :
 if not ( self . data or self . files ) :
   get_format_lazy = lazy ( get_format , six . text_type , list , tuple )
  else :
  def __init__ ( self , queryset , cache_choices = None , required = True ,  widget = None , label = None , initial = None ,  help_text = '' , * args , ** kwargs ) :
 for exclude in excludes :
          return '<Page %s of %s>' % ( self . number , self . paginator . num_pages )
          return value
 for key in c . keys ( ) :
          return self . objects
 return force_text ( iri_to_uri ( value ) )
 @ stringfilter
 for statement in sql_statements :
          self . file . seek ( 0 )
 def ifchanged ( parser , token ) :
   def tzname ( self , dt ) :
   if typed :
 return output
              return 0
          cache . close ( )
 if isinstance ( cache , BaseDatabaseCache ) :
 if csrf_token :
 if neg :
 return header_query . lower ( ) in existing_headers
  import os
  return name , ser_fmt , cmp_fmt
 cursor . execute ( "DELETE FROM %s "  "WHERE cache_key < %%s" % table ,  [ cursor . fetchone ( ) [ 0 ] ] )
  return initial_forms
  except ValueError :
    def serialize ( format , queryset , ** options ) :
          return get_supported_language_variant ( lang_code )
     class SimpleUploadedFile ( InMemoryUploadedFile ) :
          verbosity = options . get ( 'verbosity' )
                          try :
  if not self . user_regex . match ( user_part ) :
  row_data = tuple ( d . _get_pk_val ( ) if hasattr ( d , '_get_pk_val' ) else d  for d in row_data )
  else :
  import os
                  self . timezone = obj . tzinfo
                  callback = pattern . _callback
  except NotImplementedError :
  def to_python ( self , value ) :
 from django . utils . safestring import SafeData , EscapeData
 from django . core . serializers . json import DjangoJSONEncoder
              return '%s_%s' % ( id_ , first_select )
          return EscapeBytes ( s )
 if language in _DJANGO_DEPRECATED_LOCALES :
          factor += 1
                         self . stdout . write ( self . style . MIGRATE_HEADING ( "Full migrations file '%s':" % writer . filename ) + "\n" )
  else :
 sites2 = _findall ( s2 , str ( year + 28 ) )
 from django . utils . text import get_text_list , capfirst
          return formats . localize_input ( value ,  self . format or formats . get_format ( self . format_key ) [ 0 ] )
 self . xgettext_options = self . xgettext_options [ : ] + [ '--no-wrap' ]
  else :
    return type ( form ) ( class_name , ( form , ) , form_class_attrs )
 del attrs [ attr ]
  try :
                  if safe_input :
                  return getattr ( instance , name ) ( )
 from __future__ import unicode_literals
 for iso_input in ISO_INPUT_FORMATS . get ( format_type , ( ) ) :
 if len ( bits ) < 2 :
   name = self . get_available_name ( name )
  else :
                   continue
 import os
 def __init__ ( self , fail_silently = False , ** kwargs ) :
  from __future__ import unicode_literals
                              pending_references . setdefault ( refto , [ ] ) . extend ( refs )
  msg_count = 0
              app_configs = None
   __getitem__ = new_method_proxy ( operator . getitem )
 if _supported is None :
              raise TemplateEncodingError ( "Templates can only be constructed "  "from unicode or UTF-8 strings." )
                          objects = model . _base_manager
 return self . incr_version ( key , - delta , version )
   return valid
  os . _exit ( 1 )
               return dec ( func )
 import sys
 return form
                   raise
  from __future__ import unicode_literals
          nodelist_false = parser . parse ( ( 'endifchanged' , ) )
  def model_installed ( model ) :
          errors = self . default_error_messages . copy ( )
          super ( URLValidator , self ) . __init__ ( ** kwargs )
                      raise
 if f is None :
 if text == '' and len ( opts ) == 1 and opts [ 0 ] == 'reset' :
          return None
   else :
 if len ( key ) > MEMCACHE_MAX_KEY_LENGTH :
      pass
 return '%06d' % self . data . microsecond
                      self . keyOrder . append ( key )
   @ python_2_unicode_compatible
   return self . _num_pages
              raise ValueError ( "Unable to convert %r" % value )
               for supported_code in _supported :
    class DateTimeInput ( DateTimeBaseInput ) :
   @ property
          nodelist_false = NodeList ( )
  hextets [ best_doublecolon_start : best_doublecolon_end ] = [ '' ] 
     @ deconstructible
 return duplicate
          reloader = jython_reloader
              self . keyOrder . remove ( k )
  except KeyError :
    @ register . tag ( 'with' )
 pass
   def open ( self , mode = None ) :
 if parsed . scheme and parsed . scheme not in self . allowed_schemes :
  is_a_tty = hasattr ( sys . stdout , 'isatty' ) and sys . stdout . isatty ( )
                                  del form . cleaned_data [ field ]
  ch = next ( input_iter )
 from django . utils import six
 get_language = lambda : settings . LANGUAGE_CODE
      advance_iterator = next
 from django . template . base import TemplateDoesNotExist
 if j == - 1 :
   if keyword . iskeyword ( new_name ) :
 if y == m == d == "0" :
  from datetime import datetime
                  self . stdout . write ( "UnicodeDecodeError: skipped file %s in %s" % ( f . file , f . dirpath ) )
              return self . _callback
 parser . add_argument ( 'migration_name' , nargs = '?' ,  help = 'Database state will be brought to the state after that migration.' )
                              out . write ( ' pgettext(%r, %r) ' % (  message_context ,  join_tokens ( singular , trimmed ) ) )
   class ValidationError ( Exception ) :
 super ( SimpleUploadedFile , self ) . __init__ ( BytesIO ( content ) , None , name ,  content_type , len ( content ) , None , None )
          exp = self . _expire_info . get ( key , - 1 )
   ipv4_address = "%d.%d.%d.%d" % (  int ( hextets [ 6 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 6 ] [ 2 : 4 ] , 16 ) ,  int ( hextets [ 7 ] [ 0 : 2 ] , 16 ) ,  int ( hextets [ 7 ] [ 2 : 4 ] , 16 ) ,  )
              continue
  except InvalidOperation :
                      try :
              pot_path = os . path . join ( path , '%s.pot' % str ( self . domain ) )
          if app_config . models_module is None :
 from django . utils . ipv6 import clean_ipv6_address
                      raise CommandError ( "%s already exists, overlaying a "  "project or app into an existing "  "directory won't replace conflicting "  "files" % new_path )
  self . save_as_new = save_as_new
 return mark_safe ( '\n' . join ( output ) )
 return phone2numeric ( value )
  else :
  else :
   if msgs :
 from django . utils . deprecation import RemovedInDjango19Warning
   url = hashlib . md5 ( force_bytes ( iri_to_uri ( request . build_absolute_uri ( ) ) ) )
              app_output = self . handle_app_config ( app_config , ** options )
 if options :
  __all__ = ( 'WSGIServer' , 'WSGIRequestHandler' )
 self . children = children [ : ] if children else [ ]
 fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
          return self . value . resolve ( context , ignore_failures = True )
          register_serializer ( format , BUILTIN_SERIALIZERS [ format ] , serializers )
     class TimeField ( BaseTemporalField ) :
                  limit_choices_to = formfield . limit_choices_to
  self . _lib = library
 return value . replace ( '\\' , '\\\\' ) . replace ( '"' , '\\"' ) . replace ( "'" , "\\'" )
  except AttributeError :
 nodelist = parser . parse ( ( 'endverbatim' , ) )
    def rmtree_errorhandler ( func , path , exc_info ) :
                  raise
   def load_template ( self , template_name , template_dirs = None ) :
             for handler in self . _upload_handlers :
   no_settings_commands = [  'help' , 'version' , '--help' , '--version' , '-h' ,  'compilemessages' , 'makemessages' ,  'startapp' , 'startproject' ,  ]
  if isinstance ( message , SafeData ) :
              raise ValidationError ( self . message , code = self . code )
   new_key = self . key_func ( key , self . key_prefix , version )
  elif not options [ "socket" ] and not options [ "host" ] and not options [ "port" ] :
 try :
 for item in sequence :
  warnings . warn ( "django.utils.unittest will be removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
                        if isinstance ( receiver , types . FunctionType ) :
              raise ValidationError ( self . message , code = self . code )
   def write_message ( self , message ) :
    def setlist ( self , key , list_ ) :
 self . _expire_info . clear ( )
  else :
                  attrs [ 'min' ] = self . min_value
          super ( BaseInlineFormSet , self ) . add_fields ( form , index )
 for attr in _urllib_error_moved_attributes :
        constant_string = r""" (?:%(i18n_open)s%(strdq)s%(i18n_close)s| %(i18n_open)s%(strsq)s%(i18n_close)s| %(strdq)s| %(strsq)s) """ % {  'strdq' : r'"[^"\\]*(?:\\.[^"\\]*)*"' ,  'strsq' : r"'[^'\\]*(?:\\.[^'\\]*)*'" ,  'i18n_open' : re . escape ( "_(" ) ,  'i18n_close' : re . escape ( ")" ) ,  }
  if not self . is_bound :
   def _get_model_from_node ( self , node , attr ) :
     class Library ( object ) :
     def common_logger_config ( self , logger , config , incremental = False ) :
from __future__ import unicode_literals
 tzinfo . __init__ ( self )
           try :
    def deactivate ( ) :
                      parent_pat = pattern . regex . pattern
 pass
  except OSError as e :
 if check not in self . registered_checks :
                  return False
 zfile . write ( s )
                      val = getattr ( module , format_type )
              break
  except Exception :
                if self . verbosity >= 1 :
  return error_dict
 self . _populated = False
  if cc :
 d = d [ n ]
              if locales :
 end = len ( text )
                  expiry = self . get_backend_timeout ( timeout )
              return node . render ( context )
    cursor = connection . cursor ( )
              if new is None :
  except TypeError :
 from django . core . exceptions import ImproperlyConfigured
          attrs [ 'widgets' ] = widgets
 import warnings
   get_method_function = operator . attrgetter ( _meth_func )
 pass
  else :
          self . validate_unique ( )
  width = property ( _get_width )
   fields = fields_for_model ( opts . model , opts . fields , opts . exclude ,  opts . widgets , formfield_callback ,  opts . localized_fields , opts . labels ,  opts . help_texts , opts . error_messages )
   def open ( self , mode = None ) :
               both_before = [  Tok ( "comment" , r"/\*(.|\n)*?\*/" ) ,  Tok ( "linecomment" , r"//.*?$" ) ,  Tok ( "ws" , r"\s+" ) ,  Tok ( "keyword" , literals ( """                            break case catch class const continue debugger                            default delete do else enum export extends                            finally for function if import in instanceof                            new return super switch this throw try typeof                            var void while with                            """ , suffix = r"\b" ) , next = 'reg' ) ,  Tok ( "reserved" , literals ( "null true false" , suffix = r"\b" ) , next = 'div' ) ,  Tok ( "id" , r"""                   ([a-zA-Z_$   ]|\\u[0-9a-fA-Z]{4})   # first char                   ([a-zA-Z_$0-9]|\\u[0-9a-fA-F]{4})*  # rest chars                   """ , next = 'div' ) ,  Tok ( "hnum" , r"0[xX][0-9a-fA-F]+" , next = 'div' ) ,  Tok ( "onum" , r"0[0-7]+" ) ,  Tok ( "dnum" , r"""                     (   (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         \.                  # dot                         [0-9]*              # DecimalDigits-opt                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         \.                  # dot                         [0-9]+              # DecimalDigits                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     |                         (0|[1-9][0-9]*)     # DecimalIntegerLiteral                         ([eE][-+]?[0-9]+)?  # ExponentPart-opt                     )                     """ , next = 'div' ) ,  Tok ( "punct" , literals ( """                          >>>= === !== >>> <<= >>= <= >= == != << >> &&                          || += -= *= %= &= |= ^=                          """ ) , next = "reg" ) ,  Tok ( "punct" , literals ( "++ -- ) ]" ) , next = 'div' ) ,  Tok ( "punct" , literals ( "{ } ( [ . ; , < > + - * % & | ^ ! ~ ? : =" ) , next = 'reg' ) ,  Tok ( "string" , r'"([^"\\]|(\\(.|\n)))*?"' , next = 'div' ) ,  Tok ( "string" , r"'([^'\\]|(\\(.|\n)))*?'" , next = 'div' ) ,  ]
         def total_ordering ( cls ) :
              raise ValueError ( "Zip-compressed fixtures must contain one file." )
                  if filename . endswith ( ( '.pyo' , '.pyc' , '.py.class' ) ) :
  new_class = super ( ModelFormMetaclass , mcs ) . __new__ ( mcs , name , bases , attrs )
    class NullDevice :
 if extra_attrs :
   def avoid_wrapping ( value ) :
                  if isinstance ( callback , types . FunctionType ) :
 if bits [ 2 ] != 'by' :
 def stringformat ( value , arg ) :
   return mark_safe ( '\n' . join ( output ) )
  except ( ValueError , TypeError ) :
   _BROWSERS_DEPRECATED_LOCALES = {  'zh-cn' : 'zh-hans' ,  'zh-tw' : 'zh-hant' ,  }
              if hasattr ( self , '_body' ) :
  return value
   def __exit__ ( self , * args , ** kwargs ) :
  modules = _format_modules_cache . setdefault ( lang , list ( iter_format_modules ( lang , settings . FORMAT_MODULE_PATH ) ) )
  if not use_workaround :
          for d in reversed ( self . dicts ) :
    def __ne__ ( self , other ) :
 self . _catalog = translation . _catalog . copy ( )
          if not app_config . path :
                          return result
 substitutions [ 'initial' ] = format_html ( self . url_markup_template ,  value . url ,  force_text ( value ) )
 if new_value == value :
  bits = arg . split ( ',' )
      class FirstOfNode ( Node ) :
                          content_length = None
  except AttributeError :
 self . _current = None
 return FASTCGI_HELP
              raise ValueError ( 'Sign character found in converter base digits.' )
              locale_dirs = filter ( os . path . isdir , glob . glob ( '%s/*' % basedir ) )
   self . _callback = get_callable ( self . _callback_str )
          pass
    if not only_initial :
      def getInnerText ( node ) :
 for accept_lang , unused in parse_accept_lang_header ( accept ) :
  self . attach ( filename , content , mimetype )
 self . locale_paths = [ ]
 d = Decimal ( input_val )
 result = self . nodelist . render ( context )
  continue
  return not ( ( converter ( opts . db_table ) in tables ) or  ( opts . auto_created and converter ( opts . auto_created . _meta . db_table ) in tables ) )
  from __future__ import unicode_literals
 trans_real . _active = threading . local ( )
 with self . _lock . reader ( ) :
 outdict = { }
     DEFAULT_LOGGING = {  'version' : 1 ,  'disable_existing_loggers' : False ,  'filters' : {  'require_debug_false' : {  '()' : 'django.utils.log.RequireDebugFalse' ,  } ,  'require_debug_true' : {  '()' : 'django.utils.log.RequireDebugTrue' ,  } ,  } ,  'handlers' : {  'console' : {  'level' : 'INFO' ,  'filters' : [ 'require_debug_true' ] ,  'class' : 'logging.StreamHandler' ,  } ,  'null' : {  'class' : 'logging.NullHandler' ,  } ,  'mail_admins' : {  'level' : 'ERROR' ,  'filters' : [ 'require_debug_false' ] ,  'class' : 'django.utils.log.AdminEmailHandler'  }  } ,  'loggers' : {  'django' : {  'handlers' : [ 'console' ] ,  } ,  'django.request' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'django.security' : {  'handlers' : [ 'mail_admins' ] ,  'level' : 'ERROR' ,  'propagate' : False ,  } ,  'py.warnings' : {  'handlers' : [ 'console' ] ,  } ,  }  }
 use_grouping = use_grouping and grouping > 0
  raise CommandError ( message )
 from django . utils import six
   def non_form_errors ( self ) :
    def configure_formatter ( self , config ) :
  pop_context = False
 from django . conf import settings
                        unhandled_params . remove ( param )
          super ( _LazyModule , self ) . __init__ ( name )
 defaults . update ( kwargs )
    @ register . filter ( is_safe = False )
 from itertools import product
 self . _cache . delete_multi ( map ( l , keys ) )
                          continue
                      if line . lstrip ( ) . startswith ( TRANSLATOR_COMMENT_MARK ) :
  elif type ( s ) != six . text_type :
  else :
          if len ( self . dicts ) == 1 :
  from django import http
              thousand_sep = get_format ( 'THOUSAND_SEPARATOR' )
 extra_files = [ ]
          yield self
  PALETTES = {  NOCOLOR_PALETTE : {  'ERROR' : { } ,  'WARNING' : { } ,  'NOTICE' : { } ,  'SQL_FIELD' : { } ,  'SQL_COLTYPE' : { } ,  'SQL_KEYWORD' : { } ,  'SQL_TABLE' : { } ,  'HTTP_INFO' : { } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { } ,  'HTTP_NOT_MODIFIED' : { } ,  'HTTP_BAD_REQUEST' : { } ,  'HTTP_NOT_FOUND' : { } ,  'HTTP_SERVER_ERROR' : { } ,  'MIGRATE_HEADING' : { } ,  'MIGRATE_LABEL' : { } ,  'MIGRATE_SUCCESS' : { } ,  'MIGRATE_FAILURE' : { } ,  } ,  DARK_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'yellow' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'cyan' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'yellow' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  } ,  LIGHT_PALETTE : {  'ERROR' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'WARNING' : { 'fg' : 'yellow' , 'opts' : ( 'bold' , ) } ,  'NOTICE' : { 'fg' : 'red' } ,  'SQL_FIELD' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'SQL_COLTYPE' : { 'fg' : 'green' } ,  'SQL_KEYWORD' : { 'fg' : 'blue' } ,  'SQL_TABLE' : { 'opts' : ( 'bold' , ) } ,  'HTTP_INFO' : { 'opts' : ( 'bold' , ) } ,  'HTTP_SUCCESS' : { } ,  'HTTP_REDIRECT' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_MODIFIED' : { 'fg' : 'green' } ,  'HTTP_BAD_REQUEST' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  'HTTP_NOT_FOUND' : { 'fg' : 'red' } ,  'HTTP_SERVER_ERROR' : { 'fg' : 'magenta' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_HEADING' : { 'fg' : 'cyan' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_LABEL' : { 'opts' : ( 'bold' , ) } ,  'MIGRATE_SUCCESS' : { 'fg' : 'green' , 'opts' : ( 'bold' , ) } ,  'MIGRATE_FAILURE' : { 'fg' : 'red' , 'opts' : ( 'bold' , ) } ,  }  }
  smart_unicode = smart_text
 with self . _lock . reader ( ) :
                      found = False
              second_item = new_second_item
 from threading import Lock
   if hasattr ( test_runner_class , 'add_arguments' ) :
          return self . __name
   def write ( self , msg , style_func = None , ending = None ) :
                       if self . _request_middleware is None :
 if self . __language == settings . LANGUAGE_CODE :
   def __call__ ( self , * args , ** kwargs ) :
  except ImportError :
 parser . add_option ( '--pythonpath' ,  help = 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".' ) ,
  else :
      op . id = key
 tell = property ( lambda self : self . file . tell )
                      construct_instance_exclude . append ( name )
      status_code = 403
  data [ field . name ] = value
    def get_cache ( backend , ** kwargs ) :
 if self . activated :
                          pk_value = None
 import warnings
 parser . add_argument ( '--no-initial-data' , action = 'store_false' ,  dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
  def to_python ( self , value ) :
   if terminal_char != ')' :
   elif ch == '(' :
 for basedir in basedirs :
   if len ( hextet ) > 1 :
 return data
              timestamp = datetime . datetime . now ( ) . strftime ( "%Y%m%d-%H%M%S" )
  try :
   return data
   cache = _create_cache ( alias )
                           from django . core . exceptions import ImproperlyConfigured
          self . test_runner = None
 if 'date' not in header_names :
 import time
              print ( ' ' . join ( sorted ( filter ( lambda x : x . startswith ( curr ) , subcommands ) ) ) )
 self . stream . flush ( )
  if len ( initial ) != len ( data ) :
                          return self . __dispatch [ t ] [ funcname ] ( res , * args , ** kw )
 from __future__ import unicode_literals
    def validate_unique ( self ) :
              return
              questioner = InteractiveMigrationQuestioner ( )
   def compress ( self , data_list ) :
 try :
                  result . parent = self
 from django . core . management . sql import sql_custom
  getLogger = logging . getLogger
   self . invoked_for_django = False
 singular = [ ]
 git_log = subprocess . Popen ( 'git log --pretty=format:%ct --quiet -1 HEAD' ,  stdout = subprocess . PIPE , stderr = subprocess . PIPE ,  shell = True , cwd = repo_dir , universal_newlines = True )
              netloc = netloc . encode ( 'idna' ) . decode ( 'ascii' )
  __all__ = (  'Media' , 'MediaDefiningClass' , 'Widget' , 'TextInput' ,  'EmailInput' , 'URLInput' , 'NumberInput' , 'PasswordInput' ,  'HiddenInput' , 'MultipleHiddenInput' , 'ClearableFileInput' ,  'FileInput' , 'DateInput' , 'DateTimeInput' , 'TimeInput' , 'Textarea' , 'CheckboxInput' ,  'Select' , 'NullBooleanSelect' , 'SelectMultiple' , 'RadioSelect' ,  'CheckboxSelectMultiple' , 'MultiWidget' ,  'SplitDateTimeWidget' , 'SplitHiddenDateTimeWidget' ,  )
                           context_match = context_re . match ( bmatch . group ( 1 ) )
 from importlib import import_module
  else :
          return EscapeText ( s )
  elif action == "unapply_success" :
  if has_old_option and has_new_option :
  self . default_args = default_args or { }
 indent = options . get ( 'indent' )
 g = generator . BytesGenerator ( fp , mangle_from_ = False )
 from django . utils . html import ( conditional_escape , escapejs ,  escape , urlize as _urlize , linebreaks , strip_tags , avoid_wrapping ,  remove_tags )
              return '0'
              self . match_re = re . compile ( self . match )
 s = s [ end : ]
 t -= 1
 if field_type not in ( 'TextField(' , 'CharField(' ) :
          timeout = params . get ( 'timeout' , params . get ( 'TIMEOUT' , 300 ) )
 self . COOKIES = { }
              resolver = get_ns_resolver ( ns_pattern , resolver )
 assert mimetype is not None
 if root :
   return '' . join ( words )
  import collections
 from django . conf import settings
    class MiddlewareNotUsed ( Exception ) :
 from functools import reduce
                      break
    if isinstance ( message , dict ) :
    plan = [ ( executor . loader . graph . nodes [ targets [ 0 ] ] , options [ 'backwards' ] ) ]
              logger . warning (  'Forbidden (Permission denied): %s' , request . path ,  extra = {  'status_code' : 403 ,  'request' : request  } )
  return _HashedSeq ( key )
 block . context = context
 make_key = _make_key
 from django . db import DEFAULT_DB_ALIAS
          if value is None :
                              return True
 while current_chunk != b'' :
   @ deconstructible
              pass
  except UnicodeError :
  else :
     @ register . filter ( is_safe = True , needs_autoescape = True )
              yield widget
  update_wrapper ( _wrapper , func )
                  self . stdout . write ( "Checking %s for fixtures..." % humanize ( fixture_dir ) )
              return self . blocks [ name ] [ - 1 ]
 if not using_sysrandom :
          pathext = os . environ . get ( 'PATHEXT' , '.COM;.EXE;.BAT;.CMD' ) . split ( os . pathsep )
           self . ignore = options . get ( 'ignore' )
              self . template_cache [ key ] = TemplateDoesNotExist
    with context_instance . push ( dictionary ) :
  loop_dict [ 'first' ] = ( i == 0 )
          return self . _headers . get ( header . lower ( ) , ( None , alternate ) ) [ 1 ]
  elif args [ 1 ] == '404' :
 comment = [ ]
    stderr = getattr ( self , 'stderr' , OutputWrapper ( sys . stderr , self . style . ERROR ) )
   def __iter__ ( self ) :
              self . empty_label = empty_label
  for obj in queryset . iterator ( ) :
   return formataddr ( ( nm , addr ) )
          module = importlib . import_module ( '.%s' % flup_module , 'flup' )
              dict . __setitem__ ( result , copy . deepcopy ( key , memo ) ,  copy . deepcopy ( value , memo ) )
 parser . add_argument ( '--indent' , default = None , dest = 'indent' , type = int ,  help = 'Specifies the indent level to use when pretty-printing output.' )
 self . indent ( 1 )
      def get_language ( ) :
 for smigration in migrations_to_squash :
 if illegal_formatting :
 self . next = next
      _tc . load ( str ( 'foo:bar=1' ) )
 return line
              if self . _varlist :
   def __iter__ ( self ) :
    assert token . contents == 'endif'
  import base64
 if len ( t ) > 1 :
 while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :
                          self . choices . append ( ( full_file , f ) )
              data = self . flo . read ( self . chunk_size )
 if self . _leftover :
          escaper = conditional_escape
from __future__ import unicode_literals
    class Command ( BaseCommand ) :
   self . year_none_value = self . none_value
              return 1 , ch2
          def _wrapper ( self , * args , ** kwargs ) :
  else :
      while remaining != 0 :
              return
   def lru_cache ( maxsize = 100 , typed = False ) :
 return "%s: %s%s%s" % ( obj , id , self . msg , hint )
 if hasattr ( rel_model , 'natural_key' ) and rel_model != model :
   @ cached_property
          USE_INOTIFY = True
 __unicode__ = new_method_proxy ( unicode )
 self . verbose_name_plural = 'cache entries'
  if value is not result :
   def nud ( self , parser ) :
                security_logger = logging . getLogger ( 'django.security.%s' %  e . __class__ . __name__ )
  if end is None :
 return ''
 for func , unused in filter_expr . filters :
  else :
              response = func ( request , response )
    PY2 = sys . version_info [ 0 ] == 2
  return default
          if not hasattr ( self , '_dimensions_cache' ) :
  from django . utils . translation import ugettext_lazy as _ , pgettext_lazy
   form_class_attrs = {  'Meta' : Meta ,  'formfield_callback' : formfield_callback  }
                  space = line [ : max_width + 1 ] . rfind ( ' ' ) + 1
          if field . rel . through . _meta . auto_created :
                      if not hasattr ( self , 'bad_cookies' ) :
  elif len ( fks_to_parent ) == 0 :
  full_file = os . path . join ( self . path , f )
              raise SystemRestart
              return default
          field_dict = OrderedDict (  [ ( f , field_dict . get ( f ) ) for f in fields  if ( ( not exclude ) or ( exclude and f not in exclude ) ) and ( f not in ignored ) ]  )
  return [ form . cleaned_data for form in self . forms ]
 if not encoding :
    return sorted ( all_files )
 inplural = False
  else :
  else :
          import memcache
          data = zlib . decompress ( data )
              os . unlink ( work_file )
  else :
 if lang_code is not None :
                  old_attr = name
          raise TemplateSyntaxError ( "'for' statements should have at least four"  " words: %s" % token . contents )
    return script_name . decode ( UTF_8 )
 select_html = s . render ( field % name , val , local_attrs )
 self . validate ( value )
              raise ValidationError ( self . message , code = self . code )
  else :
          return False
 from django . forms . widgets import *
          with open ( options [ "pidfile" ] , "w" ) as fp :
  else :
     @ python_2_unicode_compatible
  init_path = os . path . join ( migrations_directory , "__init__.py" )
              kw [ 'microsecond' ] = kw [ 'microsecond' ] . ljust ( 6 , '0' )
   def smart_urlquote ( url ) :
          value = escape ( value )
                  break
          yes , no , maybe = bits
   def urlencode ( query , doseq = 0 ) :
   def open ( self ) :
 for bit in smart_split_re . finditer ( text ) :
  with connections [ db ] . cursor ( ) as cursor :
  if not isinstance ( var , six . string_types ) :
      def __init__ ( self , lexer ) :
   if self . to_field :
 from django . core import checks
   try :
               warnings . warn ( "No fixture named '%s' found." % fixture_name )
  excluded_apps . add ( app_config )
 return s . getvalue ( )
 six . reraise ( ValidationError , ValidationError (  message ,  code = 'ambiguous_timezone' ,  params = params ,  ) , sys . exc_info ( ) [ 2 ] )
                           old_field_name = field_name
                              app_list_value . append ( model )
          raise self . error ( None , "Unclosed tags: %s " % ', ' . join ( parse_until ) )
  else :
              if shutdown_message :
  klass = node . clone ( )
 self . default_validators = validators . ip_address_validators ( protocol , unpack_ipv4 ) [ 0 ]
 return '%s. You passed in %r (%s)' % ( original , self . obj ,  type ( self . obj ) )
  if exclude and f . name in exclude :
 self . negate = negate
 if sub_tried is not None :
  if item [ 'comments' ] is not None :
 compile_func . __doc__ = func . __doc__
 return False
          if args :
 re_newlines = re . compile ( r'\r\n|\r' )
 PY3 = sys . version_info [ 0 ] == 3
 output = [ ]
   if isinstance ( value , six . text_type ) :
 from django . utils . deprecation import RemovedInDjango20Warning
              HTMLParser . __init__ ( self , strict = False )
 return form . cleaned_data . get ( DELETION_FIELD_NAME , False )
 i += 1
              field_list . append ( ( f . name , formfield ) )
    except Exception as e :
  bits . append ( force_text ( bit ) )
          def as_bytes ( self , unixfrom = False ) :
   eol_message = message . replace ( str ( '\r\n' ) , str ( '\n' ) ) . replace ( str ( '\r' ) , str ( '\n' ) )
   def add_initial_prefix ( self , field_name ) :
          connection = connections [ options [ 'database' ] ]
 if '_' in locale :
          import fcntl
 sys . exit ( 1 )
  Module_six_moves_urllib_parse . _moved_attributes = _urllib_parse_moved_attributes
  return numberformat . format (  value ,  get_format ( 'DECIMAL_SEPARATOR' , lang , use_l10n = use_l10n ) ,  decimal_pos ,  get_format ( 'NUMBER_GROUPING' , lang , use_l10n = use_l10n ) ,  get_format ( 'THOUSAND_SEPARATOR' , lang , use_l10n = use_l10n ) ,  force_grouping = force_grouping  )
          while True :
          if not isinstance ( s , six . string_types ) :
                      self . _js . append ( path )
                  if error . code == code :
   class EmailBackend ( BaseEmailBackend ) :
 if not os . path . exists ( directory ) :
 base36 = BaseConverter ( BASE36_ALPHABET )
  return Truncator ( value ) . chars ( length , html = True )
                      curs . execute ( "\n" . join ( full_statement ) )
   for ext in pathext :
    return True
      class AdminEmailHandler ( logging . Handler ) :
 if settings . DEBUG_PROPAGATE_EXCEPTIONS :
          form = self . form (  auto_id = self . auto_id ,  prefix = self . add_prefix ( '__prefix__' ) ,  empty_permitted = True ,  )
   def __ne__ ( self , other ) :
      def curry ( _curried_func , * args , ** kwargs ) :
 filename = tmp . split ( '/' ) [ - 1 ]
                return text
   def handle_file_complete ( self , old_field_name , counters ) :
                          result . pop ( )
   value = self . get ( key , version = version )
 _cached_filenames += new_filenames
                      raise CommandError ( 'Unknown app in excludes: %s' % exclude )
 from django . conf import settings
   def handle ( self , * args , ** options ) :
   def _get_page ( self , * args , ** kwargs ) :
  self . xml . startElement ( "object" , { } )
 decompress = False
           sup_cls = super ( cls , self )
  yield buf . read ( )
              try :
           if not allow_overwrite and os . access ( new_file_name , os . F_OK ) :
   def __repr__ ( self ) :
  if s_len > length :
   def render ( self , context ) :
 if token . token_type == TOKEN_BLOCK and token . contents == endtag :
          get = '<could not parse>'
              statements . append ( " " . join ( statement ) )
 return value . tzinfo is None or value . tzinfo . utcoffset ( value ) is None
   def O ( self ) :
          _default = translation ( settings . LANGUAGE_CODE )
  elif isinstance ( value , ( decimal . Decimal , float ) + six . integer_types ) :
 with lock :
      status_code = 301
 for base in reversed ( new_class . __mro__ ) :
  except Exception :
           return ip_str
          if self . _isdst ( dt ) :
      return _entity_re . sub ( _replace_entity , text )
  json . dump ( self . get_dump_object ( obj ) , self . stream ,  cls = DjangoJSONEncoder , ** self . json_kwargs )
 self . level = level
              self . xml . addQuickElement ( "None" )
 schemes = [ 'http' , 'https' , 'ftp' , 'ftps' ]
  for statement in index_output :
      @ register . filter ( is_safe = False )
  elif _len ( cache ) >= maxsize :
              return reduce ( operator . add , dict ( self ) . values ( ) )
   @ property
  sites . append ( j )
                  view = transaction . atomic ( using = db . alias ) ( view )
  def __iter__ ( self ) :
   def _ipython ( self ) :
  from django . conf import settings
   return result
  return wrapper
 if isinstance ( s , ( SafeData , EscapeData ) ) :
  elif isinstance ( value , datetime . date ) :
              super ( URLValidator , self ) . __call__ ( value )
          if isinstance ( self . var , Variable ) :
 handler . name = name
                  sys . exit ( 0 )
 class EventHandler ( pyinotify . ProcessEvent ) :
              return 'st'
   def unsign ( self , value , max_age = None ) :
                  os . makedirs ( top_dir )
          self . fed . append ( d )
    all_locales = [ ]
 old_field_name = None
 super ( SortedDict , self ) . __init__ ( data )
 self . request = request
  else :
  try :
                  if path . isfile ( path_to_remove ) :
   else :
  MONTHS_ALT = {  1 : pgettext_lazy ( 'alt. month' , 'January' ) ,  2 : pgettext_lazy ( 'alt. month' , 'February' ) ,  3 : pgettext_lazy ( 'alt. month' , 'March' ) ,  4 : pgettext_lazy ( 'alt. month' , 'April' ) ,  5 : pgettext_lazy ( 'alt. month' , 'May' ) ,  6 : pgettext_lazy ( 'alt. month' , 'June' ) ,  7 : pgettext_lazy ( 'alt. month' , 'July' ) ,  8 : pgettext_lazy ( 'alt. month' , 'August' ) ,  9 : pgettext_lazy ( 'alt. month' , 'September' ) ,  10 : pgettext_lazy ( 'alt. month' , 'October' ) ,  11 : pgettext_lazy ( 'alt. month' , 'November' ) ,  12 : pgettext_lazy ( 'alt. month' , 'December' )  }
   @ property
          return list ( self . __iter__ ( ) ) [ idx ]
    if self . verbosity >= 2 and not fixture_files_in_dir :
     class MultiValueDictKeyError ( KeyError ) :
 ret = LockFileEx ( hfile , flags , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )
  elif domain == 'django' and ( file_ext == '.py' or file_ext in command . extensions ) :
  if localized_fields == ALL_FIELDS or ( localized_fields and f . name in localized_fields ) :
                          os . makedirs ( directory , self . directory_permissions_mode )
 from django . utils . translation import ugettext as _
              return b''
   return new_name , field_params , field_notes
  except NoReverseMatch :
   output . append ( normal_row % {  'errors' : force_text ( bf_errors ) ,  'label' : force_text ( label ) ,  'field' : six . text_type ( bf ) ,  'help_text' : help_text ,  'html_class_attr' : html_class_attr ,  'field_name' : bf . html_name ,  } )
              chunk_buffer = BytesIO ( chunk )
   def _base_set ( self , mode , key , value , timeout = DEFAULT_TIMEOUT ) :
  self . xml . endElement ( "object" )
 from django . db import models , DEFAULT_DB_ALIAS
               try :
 softspace = property ( lambda self : self . file . softspace )
    class FileBasedCache ( BaseCache ) :
              initial = [ ]
 expanded_template = path . normpath ( expanded_template )
 class MinLengthValidator ( BaseValidator ) :
 __Y = r'(?P<year>\d{4})'
                      for node in self . nodelist_loop :
  try :
  if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :
 parser . add_argument ( '--no-color' , action = 'store_true' , dest = 'no_color' , default = False ,  help = "Don't colorize the command output." )
  sys . modules [ __name__ + ".moves.urllib_parse" ] = sys . modules [ __name__ + ".moves.urllib.parse" ] = Module_six_moves_urllib_parse ( __name__ + ".moves.urllib_parse" )
          return getattr ( self . _caches , 'caches' , { } ) . values ( )
                      if not self . compile_function_error ( token , e ) :
 shell = IPShell ( argv = [ ] )
 for i , char in enumerate ( text ) :
 timestamp = baseconv . base62 . decode ( timestamp )
    function_name = ( name or  getattr ( func , '_decorated_function' , func ) . __name__ )
  def add_arguments ( self , parser ) :
              if not isinstance ( data , basestring ) :
    def add_root_elements ( self , handler ) :
          if not self . closed :
                  guessed_filename += ext
  value = '%s %s' % tuple ( value )
 try :
              guessed_path = path . join ( tempdir , guessed_filename )
  len_values = len ( values )
 try :
              file_field_list . append ( f )
                  field_value = getInnerText ( node ) . strip ( )
 return obj
 final_output . extend ( output )
 value . configurator = self
                       if lookup == 'date' :
 self . name = name
   old_field_name = None
 match = (  pattern == '*' or  pattern . startswith ( '.' ) and (  host . endswith ( pattern ) or host == pattern [ 1 : ]  ) or  pattern == host  )
   def close ( self ) :
                                  break
 if csrf_token is not None :
 if not self . is_required and CheckboxInput ( ) . value_from_datadict (  data , files , self . clear_checkbox_name ( name ) ) :
          return iter ( self . file )
     def configure_handler ( self , config ) :
   except Exception :
          if filepath . startswith ( root ) :
  return plural
 self . pointer = 0
              self . input_formats = input_formats
          self . __dict__ . update ( state )
  requires_system_checks = False
       except Exception as e :
          parser . add_argument ( 'args' , nargs = argparse . REMAINDER ,  help = 'Various KEY=val options.' )
 def fdel ( instance , name = fdel . __name__ ) :
 if not chunk_size :
 return self . format ( 'D, j M Y H:i:s O' )
     existing . sort ( )
 if value is not result :
              return
          return datetime . fromtimestamp ( os . path . getmtime ( self . path ( name ) ) )
 from django . utils . datastructures import MultiValueDict , MergeDict
                  if is_ignored ( os . path . normpath ( os . path . join ( dirpath , dirname ) ) , norm_patterns ) :
           if args [ - 3 ] == "as" :
  return _serializers [ format ] . Serializer
    templatetags_modules = [ ]
                  filterer . addFilter ( self . config [ 'filters' ] [ f ] )
    def force_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
 token = parser . next_token ( )
 if callable ( data ) :
  elif '\\' in path :
          return None
 base = force_text ( base )
              if six . PY3 :
  if level is not None :
              cmp_fmt = None
 self . xml . startElement ( "field" , {  "name" : field . name ,  "type" : field . get_internal_type ( )  } )
  raise value
              input_attrs = dict ( value = force_text ( v ) , ** final_attrs )
  def prepare_value ( self , value ) :
  else :
  return result . lower ( )
   def Z ( self ) :
  if not _cached_filenames and settings . USE_I18N :
                   if ( attr in ( "__file__" , "__name__" , "__path__" ) and  self . mod not in sys . modules ) :
          self . fail_silently = fail_silently
   def handle_m2m_field ( self , obj , field ) :
 raise NotImplementedError ( 'subclasses of Storage must provide an accessed_time() method' )
 from django . template . loader import BaseLoader
 if not hasattr ( template , 'render' ) :
  elif prefix != common_prefix :
 user_regex = re . compile (  r"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*$"  r'|^"([\001-\010\013\014\016-\037!#-\[\]-\177]|\\[\001-\011\013\014\016-\177])*"$)' ,  re . IGNORECASE )
 checkbox_id = self . clear_checkbox_id ( checkbox_name )
   def _samefile ( src , dst ) :
                merge_migrations = [ ]
                          namespaces [ namespace ] = ( p_pattern + prefix , sub_pattern )
                  i += 1
 for message in email_messages :
              settings . configure ( )
 row = cursor . fetchone ( )
      def __init__ ( self , * args , ** kwargs ) :
  else :
 self . notation_name = notation_name
              prefix , rest = self . split_leading_dir ( path )
                      src_data = fp . read ( )
      status_code = 302
   if path is not None :
                  self . stdout . write ( 'processing file %s in %s\n' % ( f , dirpath ) )
    class Group ( list ) :
                  if resolved_path :
          return s . encode ( "latin-1" )
 def striptags ( value ) :
                  if not candidate :
 LockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , DWORD , LPOVERLAPPED ]
      import warnings
                   return self . filter_function ( name , ** flags )
              media_attrs = media . __dict__
 signals . request_started . send ( sender = self . __class__ )
  except ( AttributeError , TypeError ) :
      widget = SplitDateTimeWidget
 return MONTHS [ self . data . month ]
 if text [ 0 ] == '#' :
 for line in msgs . split ( '\n' ) :
  return response
  from xml . sax . saxutils import XMLGenerator
     except Exception as e :
   @ cached_property
 def get_resolver ( urlconf ) :
 STATUS_OK = 0
 from io import BytesIO
  if self . number == self . paginator . num_pages :
   else :
          super ( SortedDict , self ) . __delitem__ ( key )
  for model in router . get_migratable_models ( app_config , connection . alias , include_auto_created = True ) :
  from __future__ import unicode_literals
  try :
  escape = allow_lazy ( escape , six . text_type )
 from django . core . management . base import BaseCommand , CommandError
   return inner
   output = [ ]
  finally :
 timeval = time . time ( )
          with self . mutex :
 parser . add_argument ( '-i' , '--interface' , choices = self . shells , dest = 'interface' ,  help = 'Specify an interactive interpreter interface. Available options: "ipython" and "bpython"' )
 self . _encoding = encoding or settings . DEFAULT_CHARSET
 if primary_keys :
                      if settings . TEMPLATE_STRING_IF_INVALID :
 return SpacelessNode ( nodelist )
    @ register . filter ( is_safe = True )
   class _OFFSET_UNION ( Union ) :
 while bits :
          super ( PasswordInput , self ) . __init__ ( attrs )
   @ register ( Tags . models )
              raise CommandError ( "you must provide %s %s name" % (  "an" if app_or_project == "app" else "a" , app_or_project ) )
 raise NotImplementedError ( 'subclasses of BaseCache must provide a get() method' )
  def __init__ ( self , value ) :
 try :
 if label_suffix is None :
          arg = ugettext ( 'yes,no,maybe' )
          super ( Command , self ) . add_arguments ( parser )
          if not f . editable or isinstance ( f , models . AutoField ) or f . name not in cleaned_data :
              if default is not RAISE_ERROR :
 key = key [ len ( self . prefix ) : ]
   def get_objects ( ) :
         else :
 from django . forms . fields import Field , ChoiceField
 def __init__ ( self , func ) :
 return six . text_type ( self . data . year ) [ 2 : ]
   T = [ F ( x ) for x in range ( 1 , l ) ]
 def _archive_cls ( file ) :
  if self . initial and 'initial' not in kwargs :
      if role in PALETTES [ NOCOLOR_PALETTE ] and definition :
 output . append ( pformat ( sys . modules ) )
    def runfastcgi ( argset = [ ] , ** kwargs ) :
 from django . core . files . move import file_move_safe
              raise AttributeError ( "This method is available only on the view class." )
          return s . encode ( encoding , errors )
 from django . forms . models import *
          self . file . close ( )
              self . DSTOFFSET = timedelta ( seconds = - _time . altzone )
              handler . addQuickElement ( "atom:link" , None ,  { "rel" : "self" , "href" : self . feed [ 'feed_url' ] } )
                   filename = traceback . extract_tb ( tb ) [ - 1 ] [ 0 ]
  logger = logging . getLogger ( 'django.request' )
                              self . stdout . write ( "    Creating table %s\n" % model . _meta . db_table )
 self . initial = initial or { }
 try :
          value = ugettext ( "%s TB" ) % filesize_number_format ( bytes / TB )
          format = force_str ( default or get_format ( 'TIME_INPUT_FORMATS' ) [ 0 ] )
   return _localtime
                  consume_next = True
 import re
   else :
 super ( SplitDateTimeWidget , self ) . __init__ ( widgets , attrs )
  else :
  else :
 def slice_filter ( value , arg ) :
   def __repr__ ( self ) :
           six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
          if self . _wrapped is empty :
   def get_response ( self , request ) :
              self . attrs [ 'id' ] += "_%d" % self . index
  filelist = [ os . path . join ( self . _dir , fname ) for fname  in glob . glob1 ( self . _dir , '*%s' % self . cache_suffix ) ]
 if slots is not None :
 if m :
  def add_item_elements ( self , handler , item ) :
 kwargs = { }
                          filters [ name ] = self . configure_filter ( filters [ name ] )
 import locale
 ERROR = 40
          if attrs is not None :
 from email . mime . base import MIMEBase
  from datetime import timedelta , tzinfo
          __str__ = serialize
                      out . write ( ' _(%s) ' % cmatch . group ( 1 ) )
          if self . options . get ( "indent" ) :
from __future__ import unicode_literals
 if self . data . minute == 0 and self . data . hour == 0 :
     class IPAddressField ( CharField ) :
  if upto != len ( token ) :
 options = [ opt for opt in options if opt [ 0 ] not in prev_opts ]
                      if self . asvar is None :
      return _trans . get_language ( )
                      self . importer ( used )
 default_validators = [ validators . URLValidator ( ) ]
               def dec ( func ) :
  from django . apps import apps
 text = unicodedata . normalize ( 'NFC' , self . _wrapped )
              raise TemplateSyntaxError ( "Invalid arguments provided to assignment_tag" )
                  continue
                  handler . addQuickElement ( "email" , item [ 'author_email' ] )
 return self . data . hour
  if issubclass ( klass , logging . handlers . MemoryHandler ) and 'target' in config :
   def resolve_template ( self , template ) :
 self . validate_key ( key )
 if connection . ops . start_transaction_sql ( ) :
          supported = False
          self . object = obj
 return do_translate ( message , 'gettext' )
   _drive_re = re . compile ( '^([a-z]):' , re . I )
   if confirm == 'yes' :
  return check
    comma_separated_int_list_re = re . compile ( '^[\d,]+$' )
   def __deepcopy__ ( self , memo ) :
                  self . stdout . write ( "No changes detected in app '%s'" % app_labels . pop ( ) )
 def divisibleby ( value , arg ) :
              output . append ( options )
 return calendar . isleap ( self . data . year )
   def __str__ ( self ) :
      _assertCountEqual = "assertItemsEqual"
 from django . core . management . templates import TemplateCommand
 if item_date :
          return mark_safe ( message )
              if csrf_token == 'NOTPROVIDED' :
   with connection . constraint_checks_disabled ( ) :
          self . s = s
              sys . exit ( 3 )
          if not os . path . exists ( self . _dir ) :
 best_doublecolon_len = 0
   def validate_name ( self , name , app_or_project ) :
                          file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
          if _default is None :
 value = value . replace ( b'\\\\' , b'\\' ) . replace ( b'\\"' , b'"' )
   def U ( self ) :
  elif self . verbosity > 0 :
                              line = '%s\n' % plural_form_line
 self . files = files or { }
  __version__ = "0.1"
                      plural . append ( contents )
 if self . data . hour > 11 :
 if len ( bits ) != 2 :
 if not regex_match :
  all_files . append ( TranslatableFile ( dirpath , filename , locale_dir ) )
  if BLOCK_CONTEXT_KEY not in context . render_context :
  @ wraps ( func )
          return "<%s: %s>" % ( self . __class__ . __name__ ,  super ( MultiValueDict , self ) . __repr__ ( ) )
     for field in concrete_model . _meta . many_to_many :
   qs = self . queryset . filter ( ** { '%s__in' % key : value } )
   for tag in open_tags :
   @ property
          return self
 self . _raw_ipv6 = True
                  pass
 from django . utils . formats import localize
 for templatetag_module in templatetags_modules_candidates :
   except ( IOError , OSError ) :
                      suffix = d [ 'suffix' ]
 key = bytes_to_text ( key , self . encoding )
              m = self . CONVERT_PATTERN . match ( value )
  try :
     def IE_sanitize ( self , filename ) :
                  pass
 hidden_widget = field . hidden_widget ( )
 from django . utils import six
              for cache_alias in settings . CACHES :
          return ''
    @ property
                      objects_in_fixture += 1
    @ register . filter ( is_safe = True )
 deprecation_warning = renamed_method [ 2 ]
 return '\n' . join ( statements )
          if name is None and filter_func is None :
    class HttpResponseRedirect ( HttpResponseRedirectBase ) :
   base64d = b64_encode ( data )
   def popen_wrapper ( args , os_err_exc_type = CommandError ) :
          try :
  else :
                  push = block = block_context . pop ( self . name )
  created_models = self . sync_apps ( connection , executor . loader . unmigrated_apps )
              encode = lambda k , v : urlencode ( { k : v } )
 from django . core import mail
 from django . db import connection
              checks = self . registered_checks
  return self . _dimensions_cache
   return super ( ModelChoiceField , self ) . prepare_value ( value )
                  self . _count = self . object_list . count ( )
 if not isinstance ( value , ( bytes , six . text_type ) ) :
 max_value = self . max_expr . resolve ( context )
                      continue
   for field , initial , data in zip ( self . fields , initial , data ) :
  return name . replace ( '_' , ' ' ) . capitalize ( )
          super ( EmailBackend , self ) . __init__ ( fail_silently = fail_silently )
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Created new squashed migration %s" % writer . path ) )
           return False
  elif ch == ')' :
     _caches = { }
    def _import_module ( name ) :
 self . items = [ ]
      class Deserializer ( six . Iterator ) :
 connection = connections [ database ]
 return super ( URLField , self ) . clean ( value )
                  r = r [ : - 6 ] + 'Z'
 def __init__ ( self , server , params ) :
              charset = msg . get_charset ( ) . get_output_charset ( ) if msg . get_charset ( ) else 'utf-8'
          self . template = template
              deactivate ( )
 if len ( password ) > inner . block_size :
              klass = self . resolve ( config . pop ( 'class' ) )
          raise TemplateDoesNotExist ( "No template names provided" )
   if len ( bits ) :
    sequence = parser . compile_filter ( bits [ in_index + 1 ] )
 return
   if six . PY3 :
                  return True
      import pytz
                          self . bad_cookies = set ( )
                  output . append ( format_html ( '<optgroup label="{0}">' , force_text ( option_value ) ) )
  handler . addQuickElement ( "guid" , item [ 'unique_id' ] , guid_attrs )
     if settings . DEBUG :
                  call_command ( 'loaddata' , 'initial_data' , verbosity = self . verbosity , database = connection . alias , skip_validation = True , app_label = app_label , hide_empty = True )
     class EndToken ( TokenBase ) :
                  args = match . groups ( )
  else :
 name = "." . join ( [ package . __name__ , module_name ] )
   def __getitem__ ( self , key ) :
 if param in unhandled_params :
 for pattern in reversed ( self . url_patterns ) :
  from django . core . management . base import AppCommand
 messages = [ EmailMessage ( subject , message , sender , recipient ,  connection = connection )  for subject , message , sender , recipient in datatuple ]
   def create_var ( self , value ) :
   def iterkeys ( d , ** kw ) :
              try :
  t = getattr ( _active , "value" , None )
              if isinstance ( s , Exception ) :
              result = self . buffer + self . _read_limited ( )
 return ( source , make_origin ( display_name , loader , name , dirs ) )
  reset_sequences = options . get ( 'reset_sequences' , True )
 if settings . DEBUG and request . META . get ( 'REMOTE_ADDR' ) in settings . INTERNAL_IPS :
 requires_system_checks = False
 with open ( writer . path , "wb" ) as fh :
          return False
          self . name = name
  else :
 node = CycleNode ( values , name , silent = silent )
 from django . utils import six
  return i
      input_type = 'file'
 media = Media ( )
    if is_protected_type ( value ) :
   except AttributeError :
  except Exception :
      from yaml import CSafeLoader as SafeLoader
     self . add_error ( None , errors )
   class Node ( object ) :
 from django . utils import six
   def _get_queryset ( self ) :
 from email . header import Header
   def render ( self , name , value , attrs = None ) :
  if failures :
   def M ( self ) :
                if not chunk [ : - rollback ] :
 orig_vars . pop ( '__dict__' , None )
      self . _request_middleware = request_middleware
    @ register . filter ( "linebreaks" , is_safe = True , needs_autoescape = True )
   elif action == "unapply_start" :
 from django . db . utils import DatabaseError
          raise NotImplementedError ( 'subclasses of BaseArchive must provide an extract() method' )
 if self . errors and hasattr ( self . form , 'error_css_class' ) :
              if show_traceback :
 commands = { name : 'django.core' for name in find_commands ( __path__ [ 0 ] ) }
 self . style_func = None
    def __setitem__ ( self , key , value ) :
    def assertCountEqual ( self , * args , ** kwargs ) :
 def regex ( self ) :
 if self . timezone and self . timezone . dst ( self . data ) :
 if _localtime is None :
 if old_handler is not None :
  except KeyError :
  return RequestContext ( self . _request , context , current_app = self . _current_app )
 return '%s:%s:%s' % ( key_prefix , version , key )
  return self . limit_choices_to
 from django . utils import autoreload
   except TypeError :
  elif bytes < GB :
   def t ( self ) :
    def set_signed_cookie ( self , key , value , salt = '' , ** kwargs ) :
  opts = instance . _meta
 if not m :
   html4_singlets = (  'br' , 'col' , 'link' , 'base' , 'img' ,  'param' , 'area' , 'hr' , 'input'  )
 parts = parts [ : - 1 ]
 self . pointer = i
          pass
              value = ConvertingDict ( value )
   def tag ( self ) :
  else :
   def exit_command ( self ) :
 def __init__ ( self , producer , length = None ) :
                  return func ( context , self . first , self . second )
 return super ( QueryDict , self ) . popitem ( )
              value = formats . sanitize_separators ( value )
  raise self . error ( token , "Invalid block tag: '%s'" % command )
          return self . as_ul ( )
    raise TemplateDoesNotExist ( ', ' . join ( not_found ) )
   @ receiver ( setting_changed )
    def parse ( self , parse_until = None ) :
  self . _cache . set_multi ( safe_data , self . get_backend_timeout ( timeout ) )
 @ stringfilter
    if unpack_ipv4 :
  else :
    class ObjectDoesNotExist ( Exception ) :
  formatted = "\n" . join ( sorted ( formatted ) )
   @ register . filter ( is_safe = True )
              handler . addQuickElement ( "enclosure" , '' ,  { "url" : item [ 'enclosure' ] . url , "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
              pass
     def find_files ( self , root ) :
 return self . forms [ self . initial_form_count ( ) : ]
                  validate_ipv46_address ( ip_address )
 for path in gen_filenames ( only_new = True ) :
 yield "# Also note: You'll have to insert the output of 'django-admin.py sqlcustom [app_label]'"
 forms_to_delete = self . deleted_forms
     def _replace_entity ( match ) :
      Signer = import_string ( settings . SIGNING_BACKEND )
 from IPython . Shell import IPShell
  from django . core . exceptions import ValidationError
              return '%s_month' % id_
   @ content . setter
  import decimal
from __future__ import unicode_literals
   def open ( self ) :
              daemonize = True
   return urljoin ( prefix , path )
   args = [ self . program ] + self . program_options + [ '-o' ,  npath ( base_path + '.mo' ) , npath ( base_path + '.po' ) ]
 locales = set ( locales ) - set ( exclude )
                  handler . addQuickElement ( "uri" , self . feed [ 'author_link' ] )
              self . content = self . rendered_content
                    res = func ( * self . __args , ** self . __kw )
     class Warning ( CheckMessage ) :
  elif token . token_type == 2 :
 return make_middleware_decorator ( middleware_class )
                  if value == k or text_value == force_text ( k ) :
 inner_args . extend ( args )
          if key not in self :
 if options [ 'app_label' ] and options [ 'migration_name' ] :
  except AttributeError :
   def is_secure ( self ) :
              self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
              raise TypeError ( "If the flags are set, regex must be a regular expression string." )
  renamed_methods = ( )
              six . reraise ( * exc_info )
               return sys . modules [ name ] is not None
      def __init__ ( self , filepath , parsed ) :
    print_ = getattr ( moves . builtins , "print" , None )
          database = options . get ( 'database' )
 def __init__ ( self ) :
 new_path = path . join ( top_dir , relative_dir ,  filename . replace ( base_name , name ) )
          natural_key = obj . natural_key ( )
   def close ( self ) :
  else :
 if isinstance ( context , Context ) :
 self . _errors . append ( form . errors )
                          tried . extend ( [ pattern ] + t for t in sub_tried )
          style = no_style ( )
 from django . utils . encoding import force_text
  elif not callable ( formfield_callback ) :
 raise NotImplementedError ( 'subclasses of Serializer must provide a start_object() method' )
      SimpleCookie = http_cookies . SimpleCookie
 return "(" + " " . join ( out ) + ")"
  else :
 return files . get ( name , None )
  self . _size = self . _get_size_from_underlying_file ( )
  def __init__ ( self , args , kw ) :
   def resolve ( self , path ) :
  else :
 from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
                  elt = [ elt ]
                  filename = file . name
 self . tag ( function_name , compile_func )
 for f in opts . concrete_fields + opts . virtual_fields + opts . many_to_many :
 if s == '"' :
 from importlib import import_module
                                result [ - 1 ] = Choice ( [ None , result [ - 1 ] ] )
              if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
 raise FieldError ( message )
  if hasattr ( mw_instance , 'process_exception' ) :
                      match = RE_DATE . match ( value )
  except Exception :
 self . indent ( 0 )
    else :
 from django . core . management import call_command
 if input_formats is not None :
 for app_config in apps . get_app_configs ( ) :
    model_dependencies . reverse ( )
 if response :
 return super ( QueryDict , self ) . setdefault ( key , default )
          if float ( value ) != 1 :
  pos = m . end ( 0 )
  else :
  if isinstance ( value , datetime . datetime ) :
 k = m . end ( )
 yield emitting
   def file_complete ( self , file_size ) :
  else :
  return t
                      pass
  def start_serialization ( self ) :
   def _get_scheme ( self ) :
  else :
   kwargs . update ( self . default_args )
          super ( LoaderOrigin , self ) . __init__ ( display_name )
  excluded_models . add ( model )
 __imul__ = complain
                  filename . encode ( 'ascii' )
                      lineno_comment_map . setdefault ( t . lineno ,  [ ] ) . append ( t . contents )
                  c = int ( text )
 def __new__ ( cls , * args , ** kwargs ) :
      return lazy ( func , * resultclasses ) ( * args , ** kwargs )
  import os
 content_type = info . get ( 'content-type' )
    class TemporaryUploadedFile ( UploadedFile ) :
 class ContentFile ( File ) :
               self . _func_path = '.' . join ( [ func . __module__ , func . __name__ ] )
    def has_key ( self , key , version = None ) :
    _cookie_encodes_correctly = http_cookies . SimpleCookie ( ) . value_encode ( ';' ) == ( ';' , '"\\073"' )
  else :
  elif char in 'dj' :
 return TEMPLATE_FRAGMENT_KEY_TEMPLATE % ( fragment_name , args . hexdigest ( ) )
    except ValueError :
  result = super ( DateTimeField , self ) . to_python ( value )
          self . attrs = attrs or { }
 self . waiting_writers = 0
  bits = urlsplit ( location )
 import warnings
   default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. That choice is not one of'  ' the available choices.' ) ,  }
 if not self . recipients ( ) :
    def get_language_bidi ( ) :
          key = self . make_key ( key , version = version )
  else :
    @ register . tag
              raise StopIteration ( )
    context_re = re . compile ( r"""^\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?'))\s*""" )
  else :
          if self . cmd . _called_from_command_line :
 self . file . seek ( 0 , os . SEEK_END )
     def a ( self ) :
 for i , item in enumerate ( values ) :
 unique_checks , date_checks = form . instance . _get_unique_checks ( exclude = exclude )
 if hasattr ( rel_model , 'natural_key' ) and rel_model != model :
      if number == 1 :
 from django . core . management . base import BaseCommand , CommandError
   def extract ( self , filename ) :
                   s = ' ' . join ( [ force_text ( arg , encoding , strings_only ,  errors ) for arg in s ] )
  return attachment
              encoding = settings . DEFAULT_CHARSET
 yield base . DeserializedObject ( obj , m2m_data )
 import re
 if meta is None :
              sep = space
                  self . appendlist ( force_text ( key , encoding , errors = 'replace' ) ,  force_text ( value , encoding , errors = 'replace' ) )
          if hasattr ( self , '_files' ) :
              try :
 if as_ != 'as' :
 if m is None :
  if isinstance ( message , ValidationError ) :
    translation . activate ( settings . LANGUAGE_CODE )
                  deps = [ ]
              raise BadHeaderError ( "Header values can't contain newlines (got %r)" % value )
 self . message_context = None
 message = ungettext_lazy (  'Ensure this value has at most %(limit_value)d character (it has %(show_value)d).' ,  'Ensure this value has at most %(limit_value)d characters (it has %(show_value)d).' ,  'limit_value' )
       def __init__ ( self , name ) :
     class DateFormat ( TimeFormat ) :
          for name , block in six . iteritems ( blocks ) :
              cursor . execute ( "SELECT cache_key FROM %s "  "WHERE cache_key = %%s and expires > %%s" % table ,  [ key , connections [ db ] . ops . value_to_db_datetime ( now ) ] )
 try :
    proxy = lazy ( lambda ** kwargs : NumberAwareString ( ) , NumberAwareString ) ( ** kwargs )
   def __lt__ ( self , other ) :
      except SkipFile :
 from django . utils import six , lru_cache
 break
   return False
  return quote ( force_bytes ( iri ) , safe = b"/#%[]=:;$&()+,!?*@'~" )
 from django . db import connections , DEFAULT_DB_ALIAS , migrations
              if isinstance ( field , InlineForeignKeyField ) :
  else :
             chunk_size = 1024
              self . stdout . write ( "Rendering %s template files with "  "extensions: %s\n" %  ( app_or_project , ', ' . join ( extensions ) ) )
 from io import BytesIO
              response = self . get_response ( request )
 request_class = WSGIRequest
 return True
              message = list ( error ) [ 0 ]
          self . vals . append ( val )
 self . cdata_tag = None
  def __getitem__ ( self , key ) :
 yield ( tok . name , toktext )
              item , old_style_list = convert_old_style_list ( sublist )
              out += truncate_text
   if sys . version_info [ : 2 ] == ( 2 , 7 ) :
                    self . children . append ( data )
              if ( db . settings_dict [ 'ATOMIC_REQUESTS' ]  and db . alias not in non_atomic_requests ) :
 default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) ,  }
 self . validate_key ( key )
          self . form = form
  else :
 self . write_migration_files ( changes )
          super ( Command , self ) . add_arguments ( parser )
 ratio = ( value / max_value ) * max_width
   else :
  quant = quant [ : - 1 ]
  return handle_app ( app_config . models_module , ** options )
  parser . _namedCycleNodes [ name ] = node
   try :
              raise
  byte2int = operator . itemgetter ( 0 )
          def wrapped ( * args , ** kwargs ) :
   return val , encoded
    validate_email = EmailValidator ( )
  del attr
 statement = [ ]
          stream_or_string = stream_or_string . read ( )
      default_error_messages = {  'invalid_image' : _ ( "Upload a valid image. The file you uploaded was either not an image or a corrupted image." ) ,  }
 attrs = { 'id' : id_ } if id_ else { }
 def as_data ( self ) :
              curr = cwords [ cword - 1 ]
   def __enter__ ( self ) :
 for i in range ( len ( result ) ) :
              self . stdout . write ( self . style . MIGRATE_HEADING ( "Optimizing..." ) )
                          latest_date = item_date
 return localtime ( value ) if should_convert else value
  if value is not result :
 def autoescape ( parser , token ) :
      def validate_integer ( value ) :
              e . django_template_source = token . source
 ret = UnlockFileEx ( hfile , 0 , 0 , 0xFFFF0000 , byref ( overlapped ) )
 insert = complain
              self [ k ] = v
   def handle ( self , * app_labels , ** options ) :
  return wrapper
    raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 self . key = key or settings . SECRET_KEY
     if self . merge and conflicts :
 n = getattr ( lookup_view , '__name__' , None )
                      old_handler = None
                      help_text = ''
 sub_match_dict . update ( sub_match . kwargs )
 class Operator ( TokenBase ) :
          bytes = float ( bytes )
 from django . db . migrations import Migration
           return timezone . localize ( value , is_dst = None )
                  sys . stdout . write ( self . main_help_text ( commands_only = True ) + '\n' )
 response = self . handle_uncaught_exception ( request , resolver , sys . exc_info ( ) )
                      end_text_pos = pos
   def tell ( self ) :
     _super = super
  cls . __dispatch [ klass ] [ funcname ] = method
 return make_middleware_decorator ( middleware_class ) ( )
  try :
 result = ungettext ( * msgs_with_ctxt )
          for filepath in self . get_template_sources ( template_name , template_dirs ) :
 if isinstance ( template , ( list , tuple ) ) :
    @ register . filter ( is_safe = True )
     class IntegerField ( Field ) :
 if best_doublecolon_start == 0 :
                          if kwargs . get ( k , v ) != v :
    class ImproperlyConfigured ( Exception ) :
 if over_bytes :
 os . umask ( umask )
              if self . message_context :
  if settings . TEMPLATE_DEBUG and origin is None :
 return Signer ( b'django.http.cookies' + key , salt = salt )
          _fields_ = [  ( 'Offset' , DWORD ) ,  ( 'OffsetHigh' , DWORD ) ]
     class IncludeNode ( Node ) :
 for i in range ( 0 , self . total_form_count ( ) ) :
       except self . LibraryValueNotFoundException :
 return out
   def add ( self , item ) :
  return self . _queryset
                                  self . stderr . write ( "    Failed to install custom SQL for %s.%s model: %s\n" % ( app_name , model . _meta . object_name , e ) )
                  self . changed_objects . append ( ( obj , form . changed_data ) )
 from django . utils . safestring import mark_safe , SafeData
              new_name += '_field'
    def _create_cache ( backend , ** kwargs ) :
 from django . utils . deprecation import RemovedInDjango19Warning
                  sublist = _helper ( sublist_item , tabs + 1 )
              return self . nodelist . render ( context )
  option_value = force_text ( option_value )
 if options . get ( 'no_color' ) :
                  value = value [ 1 : - 1 ]
   if logging_settings :
   def handle_entityref ( self , name ) :
  kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
 for i in range ( len ( result ) ) :
 link_target_attribute_re = re . compile ( r'(<a [^>]*?)target=[^\s>]+' )
                      dirnames . remove ( dirname )
          return time_str + 'Z'
    @ register . filter ( is_safe = True )
          return cls ( date . year , date . month , date . day ,  time . hour , time . minute , time . second ,  time . microsecond , time . tzinfo )
   if field . help_text :
  if exclude and f . name in exclude :
          tables = connection . introspection . table_names ( )
  return inner
   create_bound_method = types . MethodType
   def get ( self , key , default = None ) :
  except Exception as e :
      widget = TimeInput
  if self . use_argparse :
 from django . core . management . sql import sql_flush , emit_post_migrate_signal
                  if not self . can_import_settings :
 Encoders . encode_base64 ( attachment )
 result . _choices = copy . deepcopy ( self . _choices , memo )
 from django . utils import translation
 return { 'STATIC_URL' : settings . STATIC_URL }
 @ stringfilter
  db = router . db_for_read ( self . cache_model_class )
  db_module = 'django.db'
              yield
  except VariableDoesNotExist :
              return func ( * self . __args , ** self . __kw )
 self . active_writers = 0
   if self . verbosity >= 1 :
   raise StopIteration
 global _translations
 self . asvar = asvar
              self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-location' ]
 def comment ( parser , token ) :
      string_types = str ,
 for h in handlers :
          return mark_safe ( six . text_type ( number ) )
   def value_from_datadict ( self , data , files , name ) :
  self . error_dict [ field ] = messages . error_list
              exclude = form . _get_validation_exclusions ( )
  return self . _body
   self . xml . endElement ( "field" )
   TOTAL_FORM_COUNT = 'TOTAL_FORMS'
                      raise CommandError (  "errors happened while running msgmerge\n%s" % errors )
 missing_args_message = "Enter at least one application label."
 if self . sep not in signed_value :
   def usage ( self , subcommand ) :
  pythonrc = os . path . expanduser ( pythonrc )
                  if field . rel . through . _meta . auto_created :
 value = field . clean ( value , initial )
  setattr ( self , real_name , getattr ( trans , real_name ) )
              raise TypeError ( 'In order to allow non-dict objects to be '  'serialized set the safe parameter to False' )
 try :
  dow = days [ date . weekday ( ) ]
  else :
    def save ( self , commit = True ) :
          if value is True :
           value = timezone . normalize ( value )
 match = time_re . match ( value )
 return new_key
 return self . cleaned_data
                  kwargs [ 'initial' ] = self . initial_extra [ i - self . initial_form_count ( ) ]
    def send_mail ( subject , message , from_email , recipient_list ,  fail_silently = False , auth_user = None , auth_password = None ,  connection = None , html_message = None ) :
   def create_nodelist ( self ) :
                   if hasattr ( content , 'temporary_file_path' ) :
              raise ContextPopException
  import copy
  from __future__ import unicode_literals
              if self . verbosity >= 2 :
  att_name , params , notes = self . normalize_col_name (  column_name , used_column_names , is_relation )
   from django . template . base import ( ALLOWED_VARIABLE_CHARS , BLOCK_TAG_END ,  BLOCK_TAG_START , COMMENT_TAG_END , COMMENT_TAG_START ,  FILTER_ARGUMENT_SEPARATOR , FILTER_SEPARATOR , SINGLE_BRACE_END ,  SINGLE_BRACE_START , TOKEN_BLOCK , TOKEN_COMMENT , TOKEN_TEXT , TOKEN_VAR ,  TRANSLATOR_COMMENT_MARK , UNKNOWN_SOURCE , VARIABLE_ATTRIBUTE_SEPARATOR ,  VARIABLE_TAG_END , VARIABLE_TAG_START , filter_re , tag_re )
 factor -= 1
               self . _initialize_handlers ( )
  except ImportError :
    def linebreaks ( value , autoescape = False ) :
          return repr ( self . dicts )
   def __len__ ( self ) :
 for form in valid_forms :
 return value . lower ( )
  else :
  elif not isinstance ( value , ConvertingTuple ) and isinstance ( value , tuple ) :
              return
     class VariableNode ( Node ) :
              return self . func ( value )
               return dec
              kwargs [ 'error_messages' ] = error_messages [ f . name ]
              from django . utils . translation import trans_null as trans
      def __init__ ( self , value , text ) :
  return id_
          return ( len ( self . queryset ) +  ( 1 if self . field . empty_label is not None else 0 ) )
   def __str__ ( self ) :
                      e . message = self . error_messages [ e . code ]
          return self . __class__ ( [ ( key , copy . deepcopy ( value , memo ) )  for key , value in self . items ( ) ] )
 notifier . read_events ( )
  except IndexError :
 if not self . initial_forms :
 warnings . warn ( "memoize wrapper is deprecated and will be removed in "  "Django 1.9. Use django.utils.lru_cache instead." ,  RemovedInDjango19Warning , stacklevel = 2 )
    elif field . rel and isinstance ( field . rel , models . ManyToOneRel ) :
                  project_name = settings . SETTINGS_MODULE . split ( '.' ) [ 0 ]
 secret = force_bytes ( secret )
 return state
                          raise ValueError ( 'Unable to configure handler '  '%r: %s' % ( name , e ) )
              return bytes ( value )
 pass
 try :
 field_notes . append ( "Field renamed because it ended with '_'." )
 self . data = data or { }
 ns_pattern = ns_pattern + extra
  except ImportError :
 if tzinfo [ 0 ] == '-' :
 super ( CommandParser , self ) . __init__ ( ** kwargs )
              if hasattr ( self . data , 'tzinfo' ) and self . data . tzinfo :
    caches = CacheHandler ( )
 self . ignore = options . pop ( 'ignorenonexistent' , False )
    RemovedInNextVersionWarning = RemovedInDjango19Warning
                  raise
              return ''
 from django . utils . regex_helper import normalize
              self . _set ( key , pickled , timeout )
         @ register . filter ( is_safe = False )
              raise ValueError ( "Key '%s' not found" % key )
 with lock :
  requires_system_checks = False
    def reverse ( viewname , urlconf = None , args = None , kwargs = None , prefix = None , current_app = None ) :
 if ( BLOCK_CONTEXT_KEY in render_context and  render_context [ BLOCK_CONTEXT_KEY ] . get_block ( self . name ) is not None ) :
    class MultipleHiddenInput ( HiddenInput ) :
                          raise ValueError ( 'Unable to configure logger '  '%r: %s' % ( name , e ) )
   except ValidationError as e :
 pass
 column_name = row [ 0 ]
 self . _info = translation . _info . copy ( )
  from django . utils import six
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
 if id_ :
  import codecs
              data = self . form . initial . get ( self . name , self . field . initial )
    for dirname in dirs [ : ] :
          httpd_cls = WSGIServer
  from django . conf import settings
 try :
                  context [ 'block' ] = self
 self . models = set ( )
              params , varargs , varkw , defaults = getargspec ( func )
   else :
     class DateTimeField ( BaseTemporalField ) :
 cursor . execute ( "SELECT COUNT(*) FROM %s" % table )
   choices = property ( _get_choices , _set_choices )
 import subprocess
 from django . conf import settings
      help = 'Discover and run tests in the specified modules or the current directory.'
     def clear ( self ) :
   def handle ( self , * app_labels , ** options ) :
   def handle_app_config ( self , app_config , ** options ) :
 extra_context = token_kwargs ( remaining_bits , parser , support_legacy = True )
  parser . add_argument ( '--settings' ,  help = 'The Python path to a settings module, e.g. "myproject.settings.main". If this isn\'t provided, the DJANGO_SETTINGS_MODULE environment variable will be used.' )
                      old = '#: ' + work_file [ 2 : ]
       import datetime
 if not self . connection :
              self . _object_dict = dict ( ( o . pk , o ) for o in self . get_queryset ( ) )
 if domain and validate_host ( domain , settings . ALLOWED_HOSTS ) :
              raise TemplateSyntaxError ( "expected another tag, found "  "end of string: %s" % subject )
          return self
   def __repr__ ( self ) :
   def get_nodes_by_type ( self , nodetype ) :
 self . render_context = RenderContext ( )
 try :
 result = logging . Filter ( name )
     else :
 _upload_handlers = [ ]
     def parse_http_date_safe ( date ) :
     def humanize ( dirname ) :
 return mark_safe ( formats . number_format ( number , abs ( p ) ) )
 if block is None :
                                  handler = logging . _handlers [ name ]
   re_words = re . compile ( r'<.*?>|((?:\w[-\w]*|&.*?;)+)' , re . U | re . S )
  if use_reloader :
  return datetime ( * kw )
  return ""
          if app_config . models_module is None :
 from django . utils . timezone import template_localtime
    def catalog ( ) :
   def __str__ ( self ) :
 self . namespace = namespace
  __all__ = ( 'Template' , 'Context' , 'RequestContext' , 'compile_string' )
   if ':' not in ip_str :
 import json
      error_class = TemplateSyntaxError
 import os
  for state , rules in states . items ( ) :
 parser . delete_first_token ( )
  def _get_closed ( self ) :
  from_email = sanitize_address ( email_message . from_email , email_message . encoding )
          raise CommandError ( "App '%s' has migrations. Only the sqlmigrate and sqlflush commands can be used when an app has migrations." % app_config . label )
  page_range = property ( _get_page_range )
    def int_to_base36 ( i ) :
          return value
 for f in opts . fields :
 from importlib import import_module
  except NotImplementedError :
                  field_value = value [ i ]
 from django . template import ( Lexer , TOKEN_TEXT , TOKEN_VAR , TOKEN_BLOCK ,  TOKEN_COMMENT , TRANSLATOR_COMMENT_MARK )
 if not value :
   if item [ 'description' ] is not None :
 return force_text ( self . prepare_value ( initial_value ) ) != force_text ( data_value )
 for i , widget in enumerate ( self . widgets ) :
  except http_cookies . CookieError :
  else :
  return data . get ( name , None )
 from lib2to3 . pytree import Leaf , Node
 base36 . append ( digits [ i // j ] )
 from email . utils import formatdate , getaddresses , formataddr , parseaddr
     def load_template_source ( self , template_name , template_dirs = None ) :
 from django . core . files import locks
 validate_comma_separated_integer_list = RegexValidator ( comma_separated_int_list_re , _ ( 'Enter only digits separated by commas.' ) , 'invalid' )
              return None
 from django . core import signals
 self . kwargs = kwargs
          attrs = super ( CharField , self ) . widget_attrs ( widget )
    return result
   def end_object ( self , obj ) :
  elif auto_id :
 return parser . parse ( )
    if self . settings_exception is not None :
          if self . _cull_frequency == 0 :
          self . encoding = charset
 import sys
  if remaining_bits :
  except ( TypeError , ValueError ) :
                  self . _exception_middleware . insert ( 0 , mw_instance . process_exception )
 tags_re = '(%s)' % '|' . join ( tags )
              return s
                          result = middleware . process_exception ( request , e )
 from django . core . serializers import base
          raise TemplateSyntaxError ( "'%s' takes one argument" % bits [ 0 ] )
 self . error_messages = messages
 self . vals = [ ]
 package_path = package . __path__
          if self . required and not value :
 if value in self . empty_values :
                  msgs = msgs . decode ( 'utf-8' )
    _urllib_parse_moved_attributes = [  MovedAttribute ( "ParseResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "SplitResult" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qs" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "parse_qsl" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urldefrag" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urljoin" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunparse" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "urlunsplit" , "urlparse" , "urllib.parse" ) ,  MovedAttribute ( "quote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "quote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "unquote_plus" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "urlencode" , "urllib" , "urllib.parse" ) ,  MovedAttribute ( "splitquery" , "urllib" , "urllib.parse" ) ,  ]
      return _trans . get_language_bidi ( )
  last = max ( 0 , end - 1 )
    for i , handler in enumerate ( handlers ) :
   def enter_command ( self , command , token ) :
              return ''
  try :
              @ wraps ( fdel )
 return func
               translation . _catalog = { }
 if os . path . sep in fixture_name :
 if not_installed_models :
import logging
                  raise CommandError ( "The %s file has a BOM (Byte Order Mark). "  "Django only supports .po files encoded in "  "UTF-8 and without any BOM." % po_path )
    if objects_in_fixture == 0 :
                      message = e
                  yield line
    def get_bytes_from_wsgi ( environ , key , default ) :
                result = type ( self ) ( )
 parser . add_argument ( '--tag' , '-t' , action = 'append' , dest = 'tags' ,  help = 'Run only checks labeled with given tag.' )
          return self . __offset
                      raise ValueError (  "'%s' has no field named '%s'." % ( self . __class__ . __name__ , field ) )
                 if instance . pk is None :
 pass
 bits = token . split_contents ( ) [ 1 : ]
 r = dklen - ( l - 1 ) * hlen
              if ( field == NON_FIELD_ERRORS and opts . error_messages and  NON_FIELD_ERRORS in opts . error_messages ) :
 from django . core . serializers . python import Serializer as PythonSerializer
      if vary_on is None :
  import re
                  values = self . sequence . resolve ( context , True )
    def flatten_result ( source ) :
      def __init__ ( self , environ ) :
 from django . utils import datetime_safe
 from django . utils . safestring import mark_safe
 def regroup ( parser , token ) :
          if name == "_wrapped" :
              url = reverse ( view_name , args = args , kwargs = kwargs , current_app = context . current_app )
      from yaml import SafeLoader , SafeDumper
              return self . blocks [ name ] . pop ( )
              if hasattr ( handler , 'file' ) :
  if filename not in _mtimes :
 msg = "Unclosed tag '%s'. Looking for one of: %s " % ( command , ', ' . join ( parse_until ) )
 for site in sites1 :
   yield ''
               if value :
   reverse_lazy = lazy ( reverse , str )
              self . error_class = 'errorlist'
          warnings . warn ( "Custom SQL location '<app_label>/models/sql' is "  "deprecated, use '<app_label>/sql' instead." ,  RemovedInDjango19Warning )
   elif intrans :
  unichr = chr
 end = s . find ( b';' )
                                  e . django_template_source = node . source
    else :
 self . add_root_elements ( handler )
  model_dependencies = skipped
              if self . verbosity >= 1 :
   if "help" in options :
  get_valid_filename = allow_lazy ( get_valid_filename , six . text_type )
   @ encoding . setter
 if root :
   try :
                  file_path = os . path . normpath ( os . path . join ( dirpath , filename ) )
 try :
   def as_ul ( self ) :
 from django . utils import six
 bits = token . split_contents ( )
 if hasattr ( self , '_get' ) :
 return self . as_widget ( TextInput ( ) , attrs , ** kwargs )
   def __setitem__ ( self , key , value ) :
          f . save_form_data ( instance , cleaned_data [ f . name ] )
 if match :
   class TemplateCommand ( BaseCommand ) :
 reloader ( wrapped_main_func , args , kwargs )
 for app_config , model_list in app_list :
            if self . forms :
  if force_text ( value ) != force_text ( orig ) :
              obj = self . var
     if buffer_ is not None :
              raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : value } ,  )
  except AttributeError :
 if kwargs [ 'setting' ] in ( 'LANGUAGES' , 'LANGUAGE_CODE' ) :
 def get_ns_resolver ( ns_pattern , resolver ) :
 if self . body :
                          data = field_stream . read ( )
 self . set ( key , new_value , version = version )
 _assertRaisesRegex = "assertRaisesRegex"
 try :
 kwargs = dict ( ( smart_text ( k , 'ascii' ) , v . resolve ( context ) )  for k , v in self . kwargs . items ( ) )
    if os . name == 'nt' :
    return force_bytes ( value , self . _charset )
 from django . utils . six . moves import zip
  internal_use_only = True
  from django . apps import apps
                  message = error . message
          self . _read_started = True
       sites = [ ]
 from django . conf import settings
 if isinstance ( elt , Group ) :
    def get_random_string ( length = 12 ,  allowed_chars = 'abcdefghijklmnopqrstuvwxyz'  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' ) :
 yield ''
      is_usable = True
 from django . utils . encoding import force_text
              if self . to_field :
              return None
 from wsgiref import simple_server
  else :
          context_extras [ 'debug' ] = True
                  parts = t . contents . split ( '|' )
      input_type = 'radio'
  self . position += len ( output )
    if want_unicode :
                  for form in self . saved_forms :
  except TemplateSyntaxError as e :
 toks = self . toks
          from django . conf import settings
  return '' . join ( random . choice ( allowed_chars ) for i in range ( length ) )
                  template = template [ 7 : ]
   @ property
                      os . makedirs ( filename )
 def length ( value ) :
    if not os . path . isdir ( directory ) :
 return mark_safe ( _urlize ( value , nofollow = True , autoescape = autoescape ) )
  updates = dict ( )
  return getattr ( _default , translation_function ) ( singular , plural , number )
          if not fname . startswith ( self . _dir ) or not os . path . exists ( fname ) :
  moves = sys . modules [ __name__ + ".moves" ] = _MovedItems ( __name__ + ".moves" )
              if not value or not [ v for v in value if v not in self . empty_values ] :
                          continue
          parser . add_argument ( 'args' , metavar = 'table_name' , nargs = '*' ,  help = 'Optional table names. Otherwise, settings.CACHES is used to '  'find cache tables.' )
  filename = os . path . join ( to_path , name )
   TOKEN_TEXT = 0
 with open ( writer . path , "wb" ) as fh :
 tried_modules = [ ]
   original_lookup = lookup_view
     def _add_doc ( func , doc ) :
 from django . db import connections , DEFAULT_DB_ALIAS
              try :
 def linebreaksbr ( value , autoescape = None ) :
  return nodelist
          self . _archive . list ( )
           self . is_bound = data is not None or files is not None
                      for node in self . nodelist_loop :
   if url . startswith ( '///' ) :
  else :
 if self . validate_domain_part ( domain_part ) :
  else :
 self . merge ( translation )
  if app_config . models_module is None or app_config in excluded_apps :
 if timezone is None :
   def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :
                              extra_params [ 'primary_key' ] = True
              raise DisallowedRedirect ( "Unsafe redirect to URL with protocol '%s'" % parsed . scheme )
 v = datetime . datetime . strptime ( force_str ( value ) , input_format )
  except LookupError :
 if isinstance ( stream_or_string , six . string_types ) :
          try :
  for key_value in related :
  return self . _app_dict [ language_code ]
          return datetime . fromtimestamp ( os . path . getctime ( self . path ( name ) ) )
  if target_app_labels_only :
 __setitem__ = new_method_proxy ( operator . setitem )
              self . stream = six . StringIO ( stream_or_string )
 params = { 'limit_value' : self . limit_value , 'show_value' : cleaned }
 return self . data . day
   def __repr__ ( self ) :
              _meta = Options ( table )
   USE_INOTIFY = False
 integer_types = ( int , long )
  return self . data . hour
  if self . current_token is not EndToken :
                  raise TypeError (  "The argument `field` must be `None` when the `error` "  "argument contains errors for multiple fields."  )
      return _trans . activate ( language )
          if not hasattr ( self , '_body' ) :
 if isinstance ( value , six . string_types ) and value != ALL_FIELDS :
          raise ExternalReferenceForbidden ( context , base , sysid , pubid )
          return fastcgi_help ( "ERROR: Implementation must be one of prefork or "  "thread." )
 message_context = None
  if maxsize == 0 :
      message = _ ( 'Enter a valid email address.' )
              return False
 self . _remaining = length
 starttag_re = re . compile ( r'<%s(/?>|(\s+[^>]*>))' % tags_re , re . U )
                    if int ( hextet , 16 ) < 0x0 or int ( hextet , 16 ) > 0xFFFF :
    unused_char = self . _stream . read ( 1 )
              response = _set_response_etag ( response )
 tmpdir = tempfile . mkdtemp ( )
          args = [ ]
                      if name in existing :
 for form in valid_forms :
    def execute ( self , * args , ** options ) :
 urlresolvers . set_urlconf ( urlconf )
   def handle_app_config ( self , app_config , ** options ) :
 for line in content . split ( "\n" ) :
 value = str ( '%s%s%s' ) % ( value , self . sep , self . timestamp ( ) )
   try :
   def send_messages ( self , email_messages ) :
 self . data = data or { }
       data = None
 def namespace_dict ( self ) :
                              if _file is None :
 _empty_value = None
   @ cached_property
                          root , = nonlocal_root
   raise KeyError ( key )
  for ch , escaped in input_iter :
  if isinstance ( number , int ) and not use_grouping and not decimal_pos :
      help = "Returns a list of the SQL statements required to return all tables in the database to the state they were in just after they were installed."
  raise KeyError ( 'Unknown media type "%s"' % name )
 from email . mime . multipart import MIMEMultipart
                      raise CommandError ( 'Unknown model in excludes: %s' % exclude )
    class MIMEMixin ( ) :
              value = signing . get_cookie_signer ( salt = key + salt ) . unsign (  cookie_value , max_age = max_age )
  models . signals . pre_syncdb . send (  sender = app_config . models_module ,  app = app_config . models_module ,  create_models = create_models ,  verbosity = verbosity ,  interactive = interactive ,  db = db )
   def L ( self ) :
     class DefusedXmlException ( ValueError ) :
 return self . _coerce ( value )
               obj = super ( klass , cls ) . __new__ ( cls )
 for attr , value in list ( attrs . items ( ) ) :
    for f in opts . many_to_many + opts . virtual_fields :
   if ( isinstance ( data , ( datetime . datetime , datetime . time ) ) and  not getattr ( self . field . widget , 'supports_microseconds' , True ) ) :
    def is_valid_path ( path , urlconf = None ) :
   else :
  return upload
 if log in child_loggers :
 from django . utils . encoding import iri_to_uri , force_bytes , force_text
              locales = all_locales
   def clean ( self , value ) :
     class ModelChoiceIterator ( object ) :
  if isinstance ( f , ManyToManyField ) :
          self . value = value
  statement . append ( cleaned_line )
              return usage
          return "<DjangoTranslation lang:%s>" % self . __language
    else :
   def serialize ( self ) :
      help = "Checks the entire Django project for potential problems."
   if not matches :
  __all__ = ( 'LOCK_EX' , 'LOCK_SH' , 'LOCK_NB' , 'lock' , 'unlock' )
 from django . utils . encoding import force_str , force_text
 while model_dependencies :
                      for key , value in other_dict . items ( ) :
          if required and ( initial is not None ) :
 boundary = opts . get ( 'boundary' )
 loaded_objects_in_fixture = 0
 default = bytes_to_text ( default , self . encoding )
 def __init__ ( self , stream , limit , buf_size = 64 * 1024 * 1024 ) :
         OPERATORS = {  'or' : infix ( 6 , lambda context , x , y : x . eval ( context ) or y . eval ( context ) ) ,  'and' : infix ( 7 , lambda context , x , y : x . eval ( context ) and y . eval ( context ) ) ,  'not' : prefix ( 8 , lambda context , x : not x . eval ( context ) ) ,  'in' : infix ( 9 , lambda context , x , y : x . eval ( context ) in y . eval ( context ) ) ,  'not in' : infix ( 9 , lambda context , x , y : x . eval ( context ) not in y . eval ( context ) ) ,  '=' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '==' : infix ( 10 , lambda context , x , y : x . eval ( context ) == y . eval ( context ) ) ,  '!=' : infix ( 10 , lambda context , x , y : x . eval ( context ) != y . eval ( context ) ) ,  '>' : infix ( 10 , lambda context , x , y : x . eval ( context ) > y . eval ( context ) ) ,  '>=' : infix ( 10 , lambda context , x , y : x . eval ( context ) >= y . eval ( context ) ) ,  '<' : infix ( 10 , lambda context , x , y : x . eval ( context ) < y . eval ( context ) ) ,  '<=' : infix ( 10 , lambda context , x , y : x . eval ( context ) <= y . eval ( context ) ) ,  }
  try :
 field_params . update ( new_params )
   def has_changed ( self ) :
 asvar = None
 for name in bits [ 1 : - 2 ] :
 defaults = { 'data' : data , 'files' : files , 'auto_id' : auto_id , 'prefix' : prefix }
  except InputStreamExhausted :
      return ungettext ( singular , plural , number )
  if number < 1 :
 for key , value in six . iterlists ( self ) :
 try :
          super ( BaseMemcachedCache , self ) . __init__ ( params )
 def get_default_prefix ( cls ) :
 return { }
          return value
   def iteritems ( d , ** kw ) :
           command = app_name
   field_dict = OrderedDict ( field_list )
 self . warning = warning
          is_accept_language_redundant = settings . USE_I18N or settings . USE_L10N
              if len ( app_labels ) == 1 :
 run_syncdb = True
   def __str__ ( self ) :
 self . pointer = i
    def update ( self , dict_ ) :
 default_error_messages = {  'invalid' : _ ( "No file was submitted. Check the encoding type on the form." ) ,  'missing' : _ ( "No file was submitted." ) ,  'empty' : _ ( "The submitted file is empty." ) ,  'max_length' : ungettext_lazy (  'Ensure this filename has at most %(max)d character (it has %(length)d).' ,  'Ensure this filename has at most %(max)d characters (it has %(length)d).' ,  'max' ) ,  'contradiction' : _ ( 'Please either submit a file or check the clear checkbox, not both.' )  }
    @ register . filter ( is_safe = True , needs_autoescape = True )
  for app_config in app_configs :
 plat = sys . platform
 if value is not None :
 import time
    def sql_flush ( style , connection , only_django = False , reset_sequences = True , allow_cascade = False ) :
    class ModelFormOptions ( object ) :
                              from __future__ import absolute_import
    class SafeText ( six . text_type , SafeData ) :
    if item [ 'unique_id' ] is not None :
     class RadioSelect ( RendererMixin , Select ) :
   def _get_post ( self ) :
 for i in range ( 0 , self . total_form_count ( ) ) :
      def __init__ ( self , * args , ** kwargs ) :
              pending_references . setdefault ( refto , [ ] ) . extend ( refs )
 if isinstance ( value , six . string_types ) :
 from django . db import connections , transaction
   MEMCACHE_MAX_KEY_LENGTH = 250
   if locales :
                  form_field = self . fields [ field ]
              weight += 2
      if not response . streaming :
                           if self . verbosity >= 3 :
 self . resolver_match = None
   def __eq__ ( self , other ) :
 from django . template . base import Origin , Template , Context , TemplateDoesNotExist
 from __future__ import unicode_literals
              del _urlconfs . value
 res = to_digits [ digit ] + res
 return self . filter ( name , func , ** flags )
     def __str__ ( self ) :
    _add_doc ( reraise , """Reraise an exception.""" )
  except VariableDoesNotExist :
     class RegexURLPattern ( LocaleRegexProvider ) :
 return template , None
  return self . _request
   ISO_8859_1 , UTF_8 = str ( 'iso-8859-1' ) , str ( 'utf-8' )
 doy = self . year_days [ self . data . month ] + self . data . day
  if val is None :
 s = s . replace ( '\t' , '\\t' )
      pass
   def handle_app_config ( self , app_config , ** options ) :
  return force_text ( widget . render ( name , self . value ( ) , attrs = attrs ) )
   def process ( self , command , domain ) :
 import zipfile
                      raise
  except IndexError :
   def readline ( self , size = None ) :
   return d
 self . setup_environ ( )
              return ''
  elif args [ 1 ] [ 0 ] == '3' :
            args [ 1 : 2 ] = [ '"%s"' % arg for arg in args [ 1 ] . split ( "," ) ]
 def reader ( self ) :
 if neg :
    if len ( s ) > 13 :
   def __repr__ ( self ) :
                          initial_value = field . to_python ( hidden_widget . value_from_datadict (  self . data , self . files , initial_prefixed_name ) )
 if self . timeout is not None :
   def __ne__ ( self , other ) :
              sys . stderr = open ( err_log , 'a' , buffering )
    def _generate_cache_header_key ( key_prefix , request ) :
                              comment_notes . append ( 'AutoField?' )
     class BooleanField ( Field ) :
 input_formats = formats . get_format_lazy ( 'DATETIME_INPUT_FORMATS' )
  else :
                  target_dir = path . join ( top_dir , relative_dir )
          bits = [ ]
  ip_str = _sanitize_ipv4_mapping ( ip_str )
  if arg is None :
 self . second = None
  return original_urlencode (  [ ( force_str ( k ) ,  [ force_str ( i ) for i in v ] if isinstance ( v , ( list , tuple ) ) else force_str ( v ) )  for k , v in query ] ,  doseq )
     def resolve_variable ( path , context ) :
     self . _post = QueryDict ( '' , mutable = True )
 return mark_safe ( value )
              return None
  _prefixes . value = prefix
      def import_module ( name , package = None ) :
          pass
              response = None
          upload = super ( ClearableFileInput , self ) . value_from_datadict ( data , files , name )
          return 'Raw content'
 base62 = BaseConverter ( BASE62_ALPHABET )
                  output = fp . read ( )
   empty = object ( )
      if not is_valid_ipv6_address ( value ) :
 try :
 self . prefix = prefix or self . get_default_prefix ( )
          return ugettext ( "Please correct the duplicate values below." )
   def _has_changed ( self , initial , data ) :
 import copy
 return date ( d . year , d . month , d . day )
  except Exception as e :
  try :
                  pass
              value = True
  else :
 handler . addQuickElement ( "link" , item [ 'link' ] )
 bottom = ( number - 1 ) * self . per_page
 if constant_time_compare ( sig , self . signature ( value ) ) :
            pass
     def make_middleware_decorator ( middleware_class ) :
          self . takes_context = takes_context
  _ , file_ext = os . path . splitext ( self . file )
                              raise AttributeError
  try :
  for path in all_locale_paths ( ) :
 for chunk in self . chunks ( ) :
          self . regexes = { }
      initial_text = ugettext_lazy ( 'Currently' )
  forms = [ self . _construct_form ( i ) for i in xrange ( self . total_form_count ( ) ) ]
 from django . utils import six
          int_part , dec_part = str_number . split ( '.' )
          os . symlink ( original_path , symlink_path )
  now = now . replace ( microsecond = 0 )
   def __iter__ ( self ) :
 parser . add_argument ( '--extension' , '-e' , dest = 'extensions' ,  help = 'The file extension(s) to examine (default: "html,txt", or "js" '  'if the domain is "djangojs"). Separate multiple extensions with '  'commas, or use -e multiple times.' ,  action = 'append' )
  return results
 statements = sql_indexes ( app_config , self . style , connection )
              taglib_module = '%s.%s' % ( module , library_name )
 if 'class' in attrs :
   if ',' in args [ 1 ] :
 if data in self . children :
     utc = pytz . utc if pytz else UTC ( )
    if hasattr ( hmac , "compare_digest" ) :
  if sys . platform . startswith ( 'java' ) :
  FASTCGI_OPTIONS = {  'protocol' : 'fcgi' ,  'host' : None ,  'port' : None ,  'socket' : None ,  'method' : 'fork' ,  'daemonize' : None ,  'workdir' : '/' ,  'pidfile' : None ,  'maxspare' : 5 ,  'minspare' : 2 ,  'maxchildren' : 50 ,  'maxrequests' : 0 ,  'debug' : None ,  'outlog' : None ,  'errlog' : None ,  'umask' : None ,  }
 super ( TemporaryFileUploadHandler , self ) . new_file ( file_name , * args , ** kwargs )
 if use_func :
  self . _callback_strs . add ( lookup_str )
          d = ',%s' % datetime_safe . new_datetime ( date ) . strftime ( '%Y-%m-%d' )
          obj_list = self . target . resolve ( context , True )
 toktext = match . group ( name )
  try :
 while i < list_length :
               host = self . META [ 'SERVER_NAME' ]
   def get_queryset ( self ) :
     self . state = state
  finally :
          return self . level >= ERROR
 i = next_space_index ( subject , i )
  output = [ ]
 from django . utils import six
               if not isinstance ( node , TextNode ) :
              raise ValueError ( "Key '%s' not found" % key )
 from django . utils . http import urlquote
 if os . environ . get ( 'DJANGO_SETTINGS_MODULE' ) :
   def salted_hmac ( key_salt , value , secret = None ) :
 parser . add_argument ( '--traceback' , action = 'store_true' ,  help = 'Raise on exception' )
          return '' , ''
          super ( QueryDict , self ) . __init__ ( )
                  comment . append ( t . contents )
              if isinstance ( expires , datetime . datetime ) :
  exclude . append ( name )
     class Parser ( object ) :
          return self . _get_image_dimensions ( ) [ 0 ]
   return value . replace ( tzinfo = timezone )
  sys . exit ( 0 )
 self [ 'Allow' ] = ', ' . join ( permitted_methods )
  if config [ 'version' ] != 1 :
    if len ( app_labels ) == 0 :
 if not field_name :
   def save ( self , save_m2m = True , using = None ) :
                          date = form . cleaned_data [ unique_for ]
          return ''
              initial = [ '' for x in range ( 0 , len ( data ) ) ]
from __future__ import unicode_literals
 return result
          super ( JsLexer , self ) . __init__ ( self . states , 'reg' )
 _itervalues = "itervalues"
  val1 = parser . compile_filter ( bits [ 1 ] )
                  self . handle_starttag ( tag , attrs )
          try :
          if self . connection_reset :
    @ register . tag
                  name , ext = os . path . splitext ( name )
  for i , ( seconds , name ) in enumerate ( chunks ) :
 got_request_exception = Signal ( providing_args = [ "request" ] )
      decimal_digits = '0123456789'
     return errors
  nesting -= 1
          return tag in self . tags_available ( )
     def get_image_dimensions ( file_or_path , close = False ) :
 pass
 class BaseForm ( object ) :
 from django . utils . functional import lazy
                      return True
 d = data . get ( self . day_field % name )
 if leading :
 self . _unget_history = [ ]
  if not basedirs :
  if 'args' in options :
                      args . append ( ( True , Variable ( var_arg ) ) )
   self . stdout . write ( output )
          return self . content
  app_template_dirs . append ( template_dir )
   def camel_case_to_spaces ( value ) :
 value = None
          fp . write ( msgs )
              field_type = 'TextField'
          return int ( value ) + int ( arg )
      resource_string = None
                          os . umask ( old_umask )
   def __setitem__ ( self , name , val ) :
      class BaseInlineFormSet ( BaseModelFormSet ) :
 file_root , file_ext = os . path . splitext ( file_name )
          return isinstance ( other , self . __class__ ) and ( self . limit_value == other . limit_value ) and ( self . message == other . message ) and ( self . code == other . code )
 self . exclude = getattr ( options , 'exclude' , None )
  from django . conf import settings
  except ( TypeError , AttributeError , KeyError , ValueError ) :
 self . target_var = target_var
   db_name = connection . creation . create_test_db ( verbosity = verbosity , autoclobber = not interactive , serialize = False )
              self . remove ( item )
          sign = '-'
          return datetime . datetime . strptime ( force_str ( value ) , format ) . date ( )
 tags = [ re . escape ( tag ) for tag in tags . split ( ) ]
          if '__str__' not in klass . __dict__ :
   loop_dict = context [ 'forloop' ] = { 'parentloop' : parentloop }
 runfastcgi ( args )
              return self . _cache . decr ( key , - delta )
 if server_port != ( '443' if self . is_secure ( ) else '80' ) :
                   self . literal = float ( var )
 field_notes . append ( "Field renamed because it wasn't a valid Python identifier." )
 def do_block ( parser , token ) :
              yield v
              raise ContentNotRenderedError ( 'The response content must be '  'rendered before it can be pickled.' )
          max_num = 1
 self . _lock = threading . RLock ( )
              output . append ( html [ field ] )
 return RelatedObject ( cls . fk . rel . to , cls . model , cls . fk ) . get_accessor_name ( ) . replace ( '+' , '' )
                      exclude . append ( f . name )
   def __copy__ ( self ) :
                  if self . verbosity >= 2 :
  except KeyError :
 command_dir = os . path . join ( management_dir , 'commands' )
                      def m2m_convert ( value ) :
      input_type = 'url'
   queryset = objects . using ( using ) . order_by ( model . _meta . pk . name )
  elif bytes < PB :
           renderer = kwargs . pop ( 'renderer' , None )
 try :
          if self . use_natural_foreign_keys and hasattr ( field . rel . to , 'natural_key' ) :
   def templatize ( src , origin = None ) :
 parser . add_argument ( '--name' , '-n' , dest = 'files' ,  action = 'append' , default = [ ] ,  help = 'The file name(s) to render. '  'Separate multiple extensions with commas, or use '  '-n multiple times.' )
                   self . handle_startendtag ( tag , attrs )
 from django . core . serializers . python import Deserializer as PythonDeserializer
 def encoding ( self ) :
          self . command_stack . append ( ( command , token . source ) )
 defaults [ 'files' ] = self . files
               MAXSIZE = int ( ( 1 << 31 ) - 1 )
   if field . rel and isinstance ( field . rel , models . ManyToManyRel ) :
    def allow_lazy ( func , * resultclasses ) :
   def initial_form_count ( self ) :
  from __future__ import unicode_literals
          self . fed . append ( '&%s;' % name )
   app_list_value = app_list . setdefault ( app_config , [ ] )
        contains_nontext = False
   queryset = property ( _get_queryset , _set_queryset )
    @ register . tag
  else :
   def reader_enters ( self ) :
      return base64 . urlsafe_b64encode ( s ) . strip ( b'=' )
 options += [ ( k , 1 ) for k in FASTCGI_OPTIONS ]
  self . _update_unget_history ( len ( bytes ) )
 if keys :
   for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :
  return self . parent_widget . render ( * args )
 import operator
 if formatter :
          time_str = time_str . decode ( 'utf-8' )
 for k , v in defaults . items ( ) :
              close = self . closed
   def default_key_func ( key , key_prefix , version ) :
 if options . settings :
 from django . utils . six . moves import xrange
 buffer_types = ( bytes , bytearray , memoryview )
                  if not isinstance ( node , ExtendsNode ) :
    def parse_accept_lang_header ( lang_string ) :
 s = get_serializer ( format ) ( )
    TRAILING_PUNCTUATION = [ '.' , ',' , ':' , ';' , '.)' , '"' , '\'' ]
 boundary = self . _find_boundary ( chunk , len ( chunk ) < self . _rollback )
 self . msg = msg
  elif getattr ( current , 'alters_data' , False ) :
              if field not in self . errors :
 self . clear_cdata_mode ( )
          self . _post = post
          _templatetags_modules = [ ]
 from django . db import models
   try :
          attrs [ 'exclude' ] = exclude
              return _ ( 'midnight' )
      return _trans . deactivate ( )
      def model_to_dict ( instance , fields = None , exclude = None ) :
 upto = start
 self . queryset = queryset
   def decompress ( self , value ) :
 return '' . join ( force_text ( s ) for s in strings )
    default_storage = DefaultStorage ( )
     if with_base_fields :
  check_for_migrations ( app_config , connection )
  handle_default_options ( options )
                  cls . __dispatch [ resultclass ] = { }
          return number_format ( value , use_l10n = use_l10n )
   except ( ImportError , AttributeError ) as e :
 block_context . add_blocks ( blocks )
 if not field . show_hidden_initial :
  except KeyError :
 if filter_name in ( 'escape' , 'safe' ) :
 if _supported is None :
 all_issues = checks . run_checks ( app_configs = app_configs , tags = tags )
      import pickle
  except ImportError :
                  var , constant = match . group ( "var" , "constant" )
  elif ch == ':' :
  with connections [ db ] . cursor ( ) as cursor :
              raise ValidationError ( self . error_messages [ 'invalid_list' ] , code = 'invalid_list' )
          if truncate is None :
          return s
  else :
                  f . close ( )
              content = File ( content )
 return RegexURLResolver ( r'^/' , [ ns_resolver ] )
   self . template_cache [ key ] = ( template , None )
          value = list . pop ( self , idx )
  from django . utils import six
                      result = middleware . process_view ( request , view_func , args , kwargs )
              try :
              cache_choices = False
                   row_data = ( form . cleaned_data [ field ]  for field in unique_check if field in form . cleaned_data )
     class lazy_property ( property ) :
              primary_keys = [ ]
 for key , value in data . items ( ) :
              if self . _delegate_bytes and six . PY2 :
 from __future__ import unicode_literals
   def __getitem__ ( self , key ) :
          self . _stream = stream
 try :
   base_name = '%s_name' % app_or_project
                          apps . setdefault ( app_name , [ ] ) . extend ( namespace_list )
 if '\n' in val or '\r' in val :
    class DisallowedRedirect ( SuspiciousOperation ) :
 return chunk [ : - rollback ]
 lists = _iterlists
          return self . loader ( self . loadname , self . dirs ) [ 0 ]
                  data [ f . name ] = [ ]
          result = getattr ( t , translation_function ) ( eol_message )
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Target specific migration: " ) + "%s, from %s" % ( targets [ 0 ] [ 1 ] , targets [ 0 ] [ 0 ] ) )
 from datetime import datetime
 import sys
      smart_str = smart_text
          from django . conf import settings
              sys . stdout = open ( out_log , 'a' , buffering )
                        continue
   default_error_messages = {  'required' : _ ( 'This field is required.' ) ,  }
          original = UnicodeDecodeError . __str__ ( self )
 try :
 def initial_forms ( self ) :
  else :
                  if ( isinstance ( message , ValidationError ) and  message . code in error_messages ) :
                      return '%s-%s-%s' % ( y , m , d )
 for app_config in reversed ( list ( apps . get_app_configs ( ) ) ) :
 if converter :
  data = data . encode ( fp . encoding , errors )
                      continue
          return mark_safe ( formats . number_format ( '%d' % ( int ( d ) ) , 0 ) )
          db = options . get ( 'database' )
  if not data and initial :
 file_field_list = [ ]
          nodelist_false = parser . parse ( ( end_tag , ) )
 super ( Context , self ) . __init__ ( dict_ )
                      return True
  try :
 def spaceless ( parser , token ) :
 c = config . pop ( '()' )
 from email import ( charset as Charset , encoders as Encoders ,  message_from_string , generator )
 from django . utils . encoding import python_2_unicode_compatible
 val2 = self . var2 . resolve ( context , True )
              return o . isoformat ( )
   Model = self . _get_model_from_node ( node , "model" )
  plural_forms_re = re . compile ( r'^(?P<value>"Plural-Forms.+?\\n")\s*$' , re . MULTILINE | re . DOTALL )
 if value is None :
  else :
  return parser
 return FormSet
 def __promise__ ( cls , klass , funcname , method ) :
 def fget ( instance , instance_type = None , name = fget . __name__ ) :
 endblock_re = re . compile ( r"""^\s*endblocktrans$""" )
 if changes :
 import zlib
   def __getitem__ ( self , i ) :
  return ResolverMatch ( self . callback , args , kwargs , self . name )
              return ""
  if os . path . isdir ( 'locale' ) :
    def _explode_shorthand_ip_string ( ip_str ) :
      DEFAULT_CHUNK_SIZE = 64 * 2 ** 10
  except zlib . error as e :
    def __str__ ( self ) :
  def _text_chars ( self , length , truncate , text , truncate_len ) :
  except ValidationError as e :
 from django . test . signals import setting_changed
 text_value = force_text ( value )
 if '/' in path and ( ( '\\' in path and path . find ( '/' ) < path . find ( '\\' ) )  or '\\' not in path ) :
    @ python_2_unicode_compatible
          if value in self . empty_values :
    class _LazyDescr ( object ) :
     utf8_charset = Charset . Charset ( 'utf-8' )
  else :
 if self . _options :
 return func
  klass . __unicode__ = klass . __str__
  return value
      def render_node ( self , node , context ) :
 sql_files . append ( os . path . join ( app_dir , "%s.sql" % opts . model_name ) )
                  return False
 self . _non_form_errors = self . error_class ( )
              base_url = settings . MEDIA_URL
  if self . connector == conn_type :
                      view_name = callback . __class__ . __name__ + '.__call__'
   else :
 assert rawdata [ i : i + 2 ] == "</" , "unexpected call to parse_endtag"
 pass
                  continue
     url = None
 try :
   @ property
 if not settings . ADMINS :
          assert name , "The name argument is not allowed to be empty."
          os . remove ( symlink_path )
              app_name = commands [ subcommand ]
 indexbytes = operator . getitem
          combined = Media ( )
                      encoded = '"' + encoded + '"'
  for part in singular :
 return NowNode ( format_string )
 continue
 result = ':' . join ( hextets [ 0 : 6 ] )
   if not now :
 parser . add_argument ( '--liveserver' ,  action = 'store' , dest = 'liveserver' , default = None ,  help = 'Overrides the default address where the live server (used '  'with LiveServerTestCase) is expected to run from. The '  'default value is localhost:8081.' ) ,
          return self . load_template ( template_name , template_dirs )
   def args_check ( name , func , provided ) :
 return '' . join ( rendered_widgets )
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
          self . name = name
   def handle ( self , * labels , ** options ) :
 for bit in bits :
          tpl = "ExternalReferenceForbidden(system_id='{}', public_id={})"
                  new_name = new_name [ : - 3 ]
      pass
    filters = config . get ( 'filters' , EMPTY_DICT )
    dictConfigClass = DictConfigurator
 if self . feed [ 'author_name' ] is not None :
          return self . as_table ( )
 force_str = force_bytes
    class HttpResponseForbidden ( HttpResponse ) :
          return "\\u%04x" % ord ( match . group ( 1 ) )
  elif change == I18N_MODIFIED :
          return self . dicts [ - 1 ] [ key ]
 field_notes = [ ]
   def fastcgi_help ( message = None ) :
 result = self . configurator . convert ( value )
              if not renamed :
   return "" . join ( inner_text )
  return six . text_type ( name )
  raise TemplateDoesNotExist ( error_msg )
                      call_command ( "createsuperuser" , interactive = True , database = options [ 'database' ] )
   if "\\" in encoded and not encoded . startswith ( '"' ) :
              try :
          mem_args = args [ : num_args ]
              cursor . close ( )
 for form in valid_forms :
          handler . addQuickElement ( "title" , item [ 'title' ] )
              val = Header ( val , encoding ) . encode ( )
 if not widget :
  msgs , errors , status = popen_wrapper ( args )
              return self . paginator . count
 memo [ id ( self ) ] = result
                  usage . append ( "" )
   def as_p ( self ) :
              return six . unichr ( html_entities . name2codepoint [ text ] )
   def _existing_object ( self , pk ) :
          try :
          for elt in source :
              yield d
              args = [ 'msgattrib' ] + self . msgattrib_options + [ '-o' , pofile , pofile ]
 from django . utils . _os import safe_join
                              if self . verbosity >= 3 :
              handler . addQuickElement ( "subtitle" , self . feed [ 'subtitle' ] )
          return escape ( value )
                  with io . open ( orig_file , 'r' , encoding = settings . FILE_CHARSET ) as fp :
   if type ( s ) == bytes :
               if opts . fields is None and opts . exclude is None :
    else :
 def rjust ( value , arg ) :
              formfield = formfield_callback ( f , ** kwargs )
  else :
              if key in d :
  else :
   if hidden_fields :
  new_ip += hextet [ 1 ] . split ( ':' )
   return '' . join ( pieces )
   def urlquote ( url , safe = '/' ) :
               if bit . startswith ( '_("' ) or bit . startswith ( "_('" ) :
  if val is None :
 global _format_cache , _format_modules_cache
 UnlockFileEx . argtypes = [ HANDLE , DWORD , DWORD , DWORD , LPOVERLAPPED ]
 bits = token . split_contents ( )
              self [ key ] = result
  src_data = prepare_js_for_gettext ( src_data )
 if path . exists ( new_path ) :
  except KeyError :
                      raise CommandError ( '"%s" is not a valid IPv6 address.' % self . addr )
from __future__ import unicode_literals
 self . open ( )
 return self . is_bound and not self . errors
          self . parent_instance = parent_instance
          self . _archive . printdir ( * args , ** kwargs )
  block_name = bits [ 1 ]
                  if args :
              connection . check_constraints ( table_names = table_names )
    if field_type == 'CharField' and row [ 3 ] :
 new_filenames = [ filename . __file__ for filename in new_modules  if hasattr ( filename , '__file__' ) ]
          try :
 common_prefix = None
   for cat in item [ 'categories' ] :
 return None
 self . stream . write ( '-' * 79 )
          return ( ord ( byte ) for byte in buf )
 new_class . declared_fields = declared_fields
      pass
  return int ( values [ 0 ] ) , ch
    @ register . filter ( is_safe = True )
          return ContextDict ( self , * args , ** kwargs )
          return type ( self ) . __bool__ ( self )
 from django . utils . module_loading import import_string
                  for model in model_list :
 if not roots :
              value = False
                  try :
 continue
  output . append ( '</select>' )
    def request ( request ) :
  elif indexes [ column_name ] [ 'unique' ] :
              self . regex = re . compile ( self . regex , self . flags )
  def add_arguments ( self , parser ) :
 while not bit . endswith ( sentinal ) :
    cls . _delegate_bytes = bytes in resultclasses
          return json . dumps ( self . get_json_data ( escape_html ) )
          return
              self . __args = args
          if callable ( key_func ) :
              message = trim_whitespace ( message )
              self . namespaces = [ x for x in namespaces if x ]
     class TemplateResponse ( SimpleTemplateResponse ) :
              return t [ 0 ]
                name = self . fk . name
 pass
 from django . utils import six
    elif maxsize is None :
              field = self . fields [ name ]
  self . set ( key , value , timeout , version )
      widget = TextInput
     shutdown_message = '\nServer stopped.\nNote that the test database, %r, has not been deleted. You can explore it on your own.' % db_name
 self . source = source
          raise TemplateSyntaxError ( "'autoescape' tag requires exactly one argument." )
          return self
          offset = date . tzinfo . utcoffset ( date )
 break
  factory = c
 if result is not None :
                  apps . get_app_config ( app_label )
      def copy_plural_forms ( self , msgs , locale ) :
 return j
  from django . apps import apps
          if not formset . is_valid ( ) :
                  os . remove ( tmp_path )
                              current = current [ int ( bit ) ]
    return output
                      if t . token_type != TOKEN_COMMENT :
       def stringfilter ( func ) :
                      confirm = input ( 'Please enter either "yes" or "no": ' )
          for var in self . vars :
                          continue
     def get_valid_name ( self , name ) :
 memo [ id ( self ) ] = result
                  self . stderr . write ( "The po files under %s are in a seemingly not writable location. "  "mo files will not be updated/created." % dirpath )
  sio = BytesIO ( self . buffer )
 def is_rendered ( self ) :
  except UnicodeError :
    if token . contents == 'else' :
                          self . configure_root ( root , True )
 config [ '()' ] = factory
  from django . apps import apps
   def tokenize ( self ) :
      if cookie == '' :
   block_context . add_blocks ( self . blocks )
    initial_value = initial if initial is not None else ''
  self . cleaned_data = { }
 if CONTEXT_SEPARATOR in result :
              raise
 return statements
              return op ( )
           class X ( object ) :
   @ property
                  self . field . choice_cache = [  self . choice ( obj ) for obj in self . queryset . all ( )  ]
 def __init__ ( self , * dicts ) :
  cache_key = _generate_cache_header_key ( key_prefix , request )
 overlapped = OVERLAPPED ( )
          dot = callback . rindex ( '.' )
 if not self . _is_rendered :
 self . _start_relational_field ( field )
     class WidthRatioNode ( Node ) :
 become_daemon ( our_home_dir = options [ "workdir" ] , ** daemon_kwargs )
          import bpython
              self [ key ] = default
 return True
   def __getitem__ ( self , key ) :
 return _i18n_cache_key_suffix ( request , cache_key )
          if gettext_module . find ( 'django' , path , [ to_locale ( lang_code ) ] ) is not None :
    def parse_http_date ( date ) :
          return settings . LANGUAGE_CODE
   def D ( self ) :
 return tt . tm_isdst > 0
  from django . utils . itercompat import is_iterable
 parser . EntityDeclHandler = self . entity_decl
 self . interactive = options . get ( 'interactive' )
   def display ( self ) :
          name , val = forbid_multi_line_headers ( name , val , self . encoding )
  from django . core . management . base import AppCommand
                  return plural_suffix
                  self . stdout . write ( "Cleaning up temporary files.\n" )
 from django . utils . encoding import smart_text
                  if hasattr ( field . rel . to . _default_manager , 'get_by_natural_key' ) :
   def get_connection ( backend = None , fail_silently = False , ** kwds ) :
   def delete_first_token ( self ) :
    def sql_delete ( app_config , style , connection , close_connection = True ) :
                  config [ 'address' ] = self . as_tuple ( config [ 'address' ] )
  bits = token . contents . split ( )
 output = options . get ( 'output' )
                          if indexes [ column_name ] [ 'primary_key' ] :
          return s
          return set ( chain ( * [ check . tags for check in self . registered_checks if hasattr ( check , 'tags' ) ] ) )
 from django . core . serializers . base import SerializerDoesNotExist
 request_repr = "unavailable"
  options += [ ( app_config . label , 0 ) for app_config in app_configs ]
  self . ignore_patterns = list ( set ( ignore_patterns ) )
              if self . active_writers == 0 and self . waiting_writers == 0 and self . active_readers == 0 :
 errors . extend ( new_errors )
 m = data . get ( self . month_field % name )
              raise StopIteration ( )
   result = avoid_wrapping ( name % count )
 if self . first :
 changes = autodetector . changes ( graph = executor . loader . graph )
   def is_valid ( self ) :
  return result
  cc = ', ' . join ( dictvalue ( el ) for el in cc . items ( ) )
    if callable ( current ) :
   class Serializer ( base . Serializer ) :
      is_usable = True
 from django . db import connections , router , transaction , models , DEFAULT_DB_ALIAS
 content = template . render ( context )
 nonlocal_root = [ root ]
   def __next__ ( self ) :
 return super ( EmailField , self ) . clean ( value )
   if recursive :
                      app_label , model_label = label . split ( '.' )
 from django . utils import archive
 for field in _parse_date_fmt ( ) :
 from django . utils import six
 if not ext and content_type :
 from xml . sax . expatreader import ExpatParser as _ExpatParser
  if verbosity >= 2 :
      @ decorator
 ch , escaped = next ( pattern_iter )
  else :
 if refto in known_models :
   def value ( self ) :
 new_environ [ "RUN_MAIN" ] = 'true'
          return [ ( '' , [ ] ) ]
              response . content = b''
               name = os . path . join ( dir_name , "%s_%s%s" % ( file_root , next ( count ) , file_ext ) )
          handler = SimplerXMLGenerator ( outfile , encoding )
              f . close ( )
 raise NotImplementedError ( 'subclasses of Storage must provide a url() method' )
                          self . setlistdefault ( key ) . append ( value )
          self . autoescape = autoescape
 self . can_write = threading . Semaphore ( 0 )
              return path . join ( django . __path__ [ 0 ] , 'conf' , subdir )
 while s [ : 1 ] == b';' :
          builtins = { 'True' : True , 'False' : False , 'None' : None }
   else :
  field_type += '('
   else :
 stats [ MISSES ] += 1
      def __init__ ( self , dirpath , file_name , locale_dir ) :
                          self . stdout . write ( self . style . SQL_KEYWORD ( connection . ops . start_transaction_sql ( ) ) )
          project_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )
  else :
 return tt . tm_isdst > 0
 counters = [ 0 ] * len ( handlers )
 from django . template import Template , Context
                            errors . append ( self . get_date_error_message ( date_check ) )
 self . dicts = [ builtins ]
 start += len ( toktext )
      t = s . split ( '=' , 1 )
  except TypeError :
              remaining = self . _remaining if size is None else size
  token . lineno = self . lineno
   try :
 if not match :
      def execute_from_command_line ( argv = None ) :
   if len ( args ) == 2 :
  else :
          return time_format ( value , 'TIME_FORMAT' , use_l10n = use_l10n )
 if obj_pk is not None :
  elif ch == "^" :
   manifest = OrderedDict (  ( app_name , list ( filter ( model_installed , model_list ) ) )  for app_name , model_list in all_models  )
                  guid_attrs [ 'isPermaLink' ] = str (  item [ 'unique_id_is_permalink' ] ) . lower ( )
          for base in bases [ : : - 1 ] :
                          description = "An instance of the '%s' class" % receiver . __class__ . __name__
  def join_tokens ( tokens , trim = False ) :
 @ stringfilter
   gettext_lazy = lazy ( gettext , str )
          def __getattr__ ( self , attr ) :
          if self . attachments :
   def add_arguments ( self , parser ) :
  def __init__ ( self , fields = ( ) , * args , ** kwargs ) :
               ttl = force_text ( ttl )
 parser . add_option ( '-v' , '--verbosity' , action = 'store' , dest = 'verbosity' , default = '1' ,  type = 'choice' , choices = [ '0' , '1' , '2' , '3' ] ,  help = 'Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, 3=very verbose output' )
 code = 'min_length'
                  raise ValueError ( 'Unable to add filter %r: %s' % ( f , e ) )
 merge_migrations . append ( migration )
 return True
          attrs [ 'labels' ] = labels
 if start > upto :
                  pass
    if self . allow_folders :
  from django . utils . encoding import smart_text
   from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
  piece = '' . join ( source [ last : pos ] )
 raise NotImplementedError ( 'subclasses of Widget must provide a render() method' )
  except VariableDoesNotExist :
 if decimal_pos is not None :
              self . nodelist_empty = NodeList ( )
  else :
          return self . has_previous ( ) or self . has_next ( )
                  form = self . forms [ i ]
 __hash__ = new_method_proxy ( hash )
              self . loaddata ( fixture_labels )
                      continue
 return os . path . join ( self . _dir , '' . join (  [ hashlib . md5 ( force_bytes ( key ) ) . hexdigest ( ) , self . cache_suffix ] ) )
 odds = sum ( LUHN_ODD_LOOKUP [ int ( c ) ] for c in candidate [ - 2 : : - 2 ] )
  _func_closure = "func_closure"
 check_for_language . cache_clear ( )
      from django . utils . six . moves import cPickle as pickle
              return hash ( self . __cast ( ) )
  import os
 word_split_re = re . compile ( r'(\s+)' )
  if field_value in self . empty_values :
     @ register . filter ( is_safe = False )
 for node_app , node_name in migration . branch :
  else :
                    return self . data . tzinfo . tzname ( self . data ) or ""
  if not expires :
   def strptime ( self , value , format ) :
   if six . PY3 :
 self . salt = force_str ( salt or  '%s.%s' % ( self . __class__ . __module__ , self . __class__ . __name__ ) )
  for k , list_ in self . lists ( ) :
                      value = flags [ attr ]
              if e . errno != errno . ENOENT :
      pass
              locks . lock ( fd , locks . LOCK_EX )
   if _samefile ( old_file_name , new_file_name ) :
  from . messages import ( CheckMessage ,  Debug , Info , Warning , Error , Critical ,  DEBUG , INFO , WARNING , ERROR , CRITICAL )
  else :
     class FilePathField ( ChoiceField ) :
                     f . required = False
  def __init__ ( self ) :
          response [ 'ETag' ] = '"%s"' % hashlib . md5 ( response . content ) . hexdigest ( )
              migration = executor . loader . get_migration_by_prefix ( app_label , migration_name )
  else :
   try :
  finally :
 if propagate is not None :
    def parse_endtag ( self , i ) :
          return SafeBytes ( s )
 os . close ( fd )
 from django . utils . functional import allow_lazy
              self . _current [ field . name ] = field . value_to_string ( obj )
          super ( MultipleHiddenInput , self ) . __init__ ( attrs )
   def open ( self ) :
                  fixture . close ( )
  strip_tags = allow_lazy ( strip_tags )
              if not self . fail_silently :
 if os . path . exists ( fname ) :
 uclass , lookup , field , unique_for = date_check
  return end , next
 return dict ( ( k , repr ( v ) ) for k , v in module . __dict__ . items ( ) if not omittable ( k ) )
   if isinstance ( boundary , six . text_type ) :
 try :
          key = self . make_key ( key , version = version )
  SafeUnicode = SafeText
                  break
     def __repr__ ( self ) :
 file_size = data . size
 silent_variable_failure = True
 from django . utils import dateformat , numberformat , datetime_safe
  except UnicodeDecodeError :
          self . _createdir ( )
 palette = PALETTES [ NOCOLOR_PALETTE ] . copy ( )
  return super ( CommandParser , self ) . parse_args ( args , namespace )
   else :
  else :
                          response = middleware_method ( request , e )
              raise CommandError ( "%s. Are you sure your INSTALLED_APPS setting is correct?" % e )
          self . writer_enters ( )
          block_context = context . render_context . get ( BLOCK_CONTEXT_KEY )
 self . obj = obj
 if isinstance ( attr , MovedModule ) :
 new_migration = subclass ( "0001_squashed_%s" % migration . name , app_label )
          handler . addQuickElement ( "title" , item [ 'title' ] )
  def __repr__ ( self ) :
  import logging
 self . base_fields [ INITIAL_FORM_COUNT ] = IntegerField ( widget = HiddenInput )
     def deactivate ( ) :
   else :
          return '<ExtendsNode: extends %s>' % self . parent_name . token
 return six . iteritems ( super ( MultiValueDict , self ) )
 if language_code not in self . _regex_dict :
                  self . stdout . write ( " (no migrations)" , self . style . MIGRATE_FAILURE )
  mapped_tokens . append ( self . translate_token ( token ) )
    def assertRegex ( self , * args , ** kwargs ) :
          if not hasattr ( e , 'django_template_source' ) :
 method = kwargs . pop ( 'method' )
                          self . configure_logger ( name , loggers [ name ] )
 import unicodedata
    for chunk in field_stream :
  else :
 if not ip_str . lower ( ) . startswith ( '0000:0000:0000:0000:0000:ffff:' ) :
                  obj = template_localtime ( obj , context . use_tz )
  else :
              _localtime = pytz . timezone ( settings . TIME_ZONE )
              self . unclosed_block_tag ( parse_until )
                  serializers . serialize ( format , get_objects ( ) , indent = indent ,  use_natural_foreign_keys = use_natural_foreign_keys ,  use_natural_primary_keys = use_natural_primary_keys ,  stream = stream or self . stdout )
    def patch_response_headers ( response , cache_timeout = None ) :
              raise CommandError ( "Can't find %s. Make sure you have GNU gettext "  "tools 0.15 or newer installed." % self . program )
 return value . strftime ( format )
                              message_context = message_context . strip ( "'" )
 mapped_tokens = [ ]
          return unicode ( s . replace ( r'\\' , r'\\\\' ) , "unicode_escape" )
 from django . utils import six
          handler . addQuickElement ( "title" , self . feed [ 'title' ] )
          tpl = "DTDForbidden(name='{}', system_id={!r}, public_id={!r})"
from importlib import import_module
                  end_index = i
 raise NotImplementedError ( 'subclasses of Storage must provide a size() method' )
          super ( DecimalField , self ) . validate ( value )
              if can_fail :
          attrs [ 'fields' ] = fields
    class EmptyPage ( InvalidPage ) :
 def date ( value , arg = None ) :
   finally :
  except AttributeError :
  except ( AttributeError , UnsupportedOperation ) :
 return getattr ( module , self . attr )
   except SuspiciousOperation as e :
          key = self . make_key ( key , version = version )
 try :
                  yield b'' . join ( self )
              raise self . error ( token , "Invalid block tag: '%s', expected %s" %  ( command , get_text_list ( [ "'%s'" % p for p in parse_until ] ) ) )
   def value ( self ) :
 pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
 self . proxy = False
 if not extra_context :
      pass
 return super ( SlugField , self ) . clean ( value )
  else :
 for localedir in reversed ( settings . LOCALE_PATHS ) :
   return client
  self . start_serialization ( )
   def clean ( self ) :
   class SimplerXMLGenerator ( XMLGenerator ) :
 wrapper . cache_info = cache_info
   def has_key ( self , key , version = None ) :
              with codecs . open ( sql_file , 'r' , encoding = settings . FILE_CHARSET ) as fp :
 if sys . platform == "win32" :
                        self . children . extend ( data . children )
              return self . clear ( )
    self . find_template_cache [ key ] = result
 def __init__ ( self , argv = None ) :
   if six . PY2 :
   else :
              parsed = True
 self . _leftover = b'' . join ( [ bytes , self . _leftover ] )
 from django . utils . deprecation import RemovedInDjango19Warning
              self . nodelist_empty = nodelist_empty
  self . namespace = ':' . join ( self . namespaces )
  except ImportError :
              app_configs = reversed ( list ( apps . get_app_configs ( ) ) )
          if name is None :
    def npgettext ( context , singular , plural , number ) :
    for cat in item [ 'categories' ] :
   wsgi_opts [ 'debug' ] = options [ 'debug' ] is not None
 self . value = value
 if isinstance ( data , bytes ) :
 self . tag ( function_name , compile_func )
   def iterlists ( d , ** kw ) :
  pdict [ name ] = value
  new_result = [ ]
          path = os . path . join ( app_config . path , 'management' )
              self . namespaces = [ ]
          if self . save_as_new :
 if not email_messages :
  if six . PY2 :
 return d ( stream_or_string , ** options )
              return r'\"'
 args = args [ : - 1 ]
   def get_block ( self , name ) :
   except UnicodeError :
              template = self . template . resolve ( context )
 bits = token . split_contents ( )
 self . object_name = 'CacheEntry'
 default_error_messages = {  'invalid' : _ ( 'Enter a list of values.' ) ,  'incomplete' : _ ( 'Enter a complete value.' ) ,  }
   try :
    def base64_hmac ( salt , value , key ) :
   return '\n' . join ( output )
  except ( IndexError , TypeError , ValueError ) :
 if settings . configured :
   def __next__ ( self ) :
          return
    global _cached_modules , _cached_filenames
 from django . utils import six
  request_queue_size = 10
   return False
  __author__ = "Benjamin Peterson <benjamin@python.org>"
    else :
 return self . get ( key , version = version ) is not None
   try :
          return language . lower ( )
    if self . can_delete and self . _should_delete_form ( form ) :
 from django . utils import six
              raise ValidationError ( self . error_messages [ 'list' ] , code = 'list' )
   if commit and hasattr ( form , 'save_m2m' ) :
              if not hasattr ( e , 'django_template_source' ) :
          return ''
  block_context = context . render_context [ BLOCK_CONTEXT_KEY ]
          length = int ( arg )
              tzinfo = utc
          return self . _encoding
  def items ( self ) :
   return '\n' . join ( output )
              pass
   def __nonzero__ ( self ) :
 DEFAULT_CHUNK_SIZE = 64 * 2 ** 10
              if msg :
              nodelist = getattr ( self , attr , None )
  else :
              buf = self . readline ( )
              raise ImproperlyConfigured ( 'Path for saving email messages exists, but is not a directory: %s' % self . file_path )
  else :
                      self . close ( )
    def gettext_noop ( message ) :
  else :
   app_labels = set ( app_labels )
                  raise base . DeserializationError ( "<field> node is missing the 'name' attribute" )
                   chunk = self . _read_limited ( size - len ( self . buffer ) )
          if bits [ 2 ] == 'parsed' :
     class Select ( Widget ) :
                  raise RawPostDataException ( "You cannot access body after reading from request's data stream" )
 lexer_class , parser_class = DebugLexer , DebugParser
              for key , value in parse_qsl ( query_string or '' ,  keep_blank_values = True ) :
          response [ 'Location' ] = request . build_absolute_uri ( response [ 'Location' ] )
 if self not in state_frame :
  new_second_item . extend ( item )
    count = itertools . count ( 1 )
    self . path = '%s/%s' % ( script_name . rstrip ( '/' ) ,  path_info . replace ( '/' , '' , 1 ) )
          self . template_string = template_string
   def cache_key ( self , template_name , template_dirs ) :
          if self . _wrapped is empty :
from __future__ import unicode_literals
              errors . update ( kwargs [ 'error_messages' ] )
              package_name = package . __name__
    def find_template ( self , name , dirs = None ) :
   def get_parent ( self , context ) :
 return timesince ( d , now , reversed = True )
  self . cache_model_class = CacheEntry
 save_m2m ( )
  elif field_type == 'IntegerField(' and not connection . features . can_introspect_autofield :
   def setlistdefault ( self , key , default_list = None ) :
              return lang_code
 from wsgiref . util import FileWrapper
     class _LazyModule ( types . ModuleType ) :
       def __init__ ( self , name , old_mod , new_mod , old_attr = None , new_attr = None ) :
   def validate ( self , value ) :
              self . stdout . write ( self . style . NOTICE ( "\nYou have unapplied migrations; your app may not work properly until they are applied." ) )
 if o . microsecond :
   def _handle_object ( self , node ) :
 for app_config in apps . get_app_configs ( ) :
 def __init__ ( self , offset ) :
 from __future__ import unicode_literals
                  self . cleaned_data = cleaned_data
          args = [ self . name , self . value , self . attrs ]
 super ( MemcachedCache , self ) . __init__ ( server , params ,  library = memcache ,  value_not_found_exception = ValueError )
  except Exception as e :
     class HttpResponseGone ( HttpResponse ) :
 pending_references = { }
                      self . saved_forms . append ( form )
 _func_defaults = "__defaults__"
 return result
     @ contextlib . contextmanager
from __future__ import unicode_literals
              mail . outbox = [ ]
   def dst ( self , dt ) :
  return _curried
 if self . feed [ 'ttl' ] is not None :
     class FileInput ( Input ) :
     elif not hasattr ( message , 'message' if six . PY3 else 'code' ) :
                      raise e
  if self . domain not in ( 'django' , 'djangojs' ) :
 trail = punctuation + trail
          if not getattr ( f , 'editable' , False ) :
              return LANG_INFO [ generic_lang_code ]
 kw [ 'tzinfo' ] = tzinfo
 try :
          pattern = pattern . lower ( )
    def normalize ( pattern ) :
 response . add_post_render_callback ( callback )
      self . m2m_data = None
          duplicate = super ( Context , self ) . __copy__ ( )
   def created_time ( self , name ) :
          if incomment :
                  try :
  return super ( DateField , self ) . to_python ( value )
              cursor . close ( )
  from django . apps import apps
 for field in self . fields . values ( ) :
  except KeyError :
              found = self . importer ( used )
              translation . activate ( settings . LANGUAGE_CODE )
     class Context ( BaseContext ) :
                  m2m_value = lambda value : smart_text ( value . _get_pk_val ( ) , strings_only = True )
                  if e . errno != errno . EEXIST :
   def widget_attrs ( self , widget ) :
  user_settings = module_to_dict ( settings . _wrapped )
 if comment_notes :
 assert content is not None
    if ':::' in ip_str :
 if value and ':' in value :
  return val
 default_error_messages = {  'invalid' : _ ( 'Enter a valid time.' )  }
  else :
  class SimpleNode ( TagHelperNode ) :
              def m2m_convert ( n ) :
          if initial is None :
    def npath ( path ) :
  prefix_norm , prefix_args = normalize ( urlquote ( _prefix ) ) [ 0 ]
  try :
  except re . error as e :
                  if self . fail_silently :
   def _list_cache_files ( self ) :
    conflicts = loader . detect_conflicts ( )
 if not isinstance ( candidate , six . string_types ) :
 var = var [ 2 : - 1 ]
          super ( Command , self ) . add_arguments ( parser )
   def __exit__ ( self , exc_type , exc_value , tb ) :
  else :
                  del _error_files [ _error_files . index ( filename ) ]
    def to_locale ( language ) :
 return self . form . errors . get ( self . name , self . form . error_class ( ) )
      def _make_decorator ( * m_args , ** m_kwargs ) :
                  keys = n . getElementsByTagName ( 'natural' )
              if force_text ( val ) not in pks :
 path_info = get_path_info ( environ )
 self . template_cache . clear ( )
          nesting = 0
 if not prefix . endswith ( '/' ) :
  return self . number * self . paginator . per_page
              del self . _expire_info [ key ]
   DEFAULT_LOCALE_ENCODING = get_system_encoding ( )
  elif self . verbosity > 0 :
              lang = get_language ( )
 import sys
 from django . utils . deprecation import RemovedInDjango19Warning
          self . coerce = kwargs . pop ( 'coerce' , lambda val : val )
              digest = hashlib . sha256
   def get_connection ( self , fail_silently = False ) :
   class Command ( BaseCommand ) :
 domain_whitelist = [ 'localhost' ]
 if not os . path . exists ( potfile ) :
  register_to = kwargs . get ( 'register_to' )
  def __init__ ( self , include_html = False , email_backend = None ) :
   if years :
  else :
          if arg :
 msg [ 'From' ] = self . extra_headers . get ( 'From' , self . from_email )
          raise self . exception
   def copy ( self ) :
 models = 'models'
              return self . forms [ 0 ] . is_multipart ( )
    return False
              if text [ 0 ] in 'xX' :
      setattr ( Module_six_moves_urllib_response , attr . name , attr )
  else :
          pass
 if use_l10n or ( use_l10n is None and settings . USE_L10N ) :
  try :
 if params . get ( 'filename' ) :
                  pass
 def __new__ ( mcs , name , bases , attrs ) :
  elif ch == '|' :
   LPOVERLAPPED = POINTER ( OVERLAPPED )
  def b ( self ) :
              pass
     class OutputWrapper ( object ) :
 self . _post_parse_error = False
  self . addr , _ipv4 , _ipv6 , _fqdn , self . port = m . groups ( )
          for line in text . splitlines ( True ) :
          for base in bases [ : : - 1 ] :
              raise TemplateSyntaxError ( "Invalid arguments provided to simple_tag" )
 value = value . replace ( arg , '' )
                  widget_value = None
  except UnicodeEncodeError :
  else :
   def clear_cdata_mode ( self ) :
 from inspect import getargspec , getcallargs
          if self . _wrapped is empty :
 space = unicode ( " " )
  try :
 if day_of_year <= ( 8 - jan1_weekday ) and jan1_weekday > 4 :
 from django . utils . encoding import force_str
          count = since // seconds
                  form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , initial = index + 1 , required = False )
          self . template_parser = parser
   changes = dict (  ( app , [ Migration ( "custom" , app ) ] )  for app in app_labels  )
 convert = {  '__lt__' : [ ( '__gt__' , lambda self , other : not ( self < other or self == other ) ) ,  ( '__le__' , lambda self , other : self < other or self == other ) ,  ( '__ge__' , lambda self , other : not self < other ) ] ,  '__le__' : [ ( '__ge__' , lambda self , other : not self <= other or self == other ) ,  ( '__lt__' , lambda self , other : self <= other and not self == other ) ,  ( '__gt__' , lambda self , other : not self <= other ) ] ,  '__gt__' : [ ( '__lt__' , lambda self , other : not ( self > other or self == other ) ) ,  ( '__ge__' , lambda self , other : self > other or self == other ) ,  ( '__le__' , lambda self , other : not self > other ) ] ,  '__ge__' : [ ( '__le__' , lambda self , other : ( not self >= other ) or self == other ) ,  ( '__gt__' , lambda self , other : self >= other and not self == other ) ,  ( '__lt__' , lambda self , other : not self >= other ) ]  }
                      deps = [ apps . get_model ( dep ) for dep in deps ]
                  setattr ( self . object , accessor_name , object_list )
 if domain == 'djangojs' and file_ext in command . extensions :
              self . add_filters ( result , filters )
              self . add_error ( None , e )
              return self . _truncate_html ( length , truncate , text , truncate_len , False )
          ULONG_PTR = c_int64
  return True
   except :
                  raise CommandError ( "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" % app_label )
              return formats . localize_input ( value )
  import copy
   def __str__ ( self ) :
 for app_label in app_labels :
              return self . empty_value
  def __init__ ( self , * args , ** kwargs ) :
 return self . __copy__ ( )
              self . _populate ( )
          val . encode ( 'ascii' )
 import re
     def walk_to_end ( ch , input_iter ) :
              with io . open ( fname , 'rb' ) as f :
                          yield obj
  else :
 return self . _open ( name , mode )
 return chain ( * [  [ format_html ( '<link href="{0}" type="text/css" media="{1}" rel="stylesheet" />' , self . absolute_path ( path ) , medium )  for path in self . _css [ medium ] ]  for medium in media ] )
 self . email_backend = email_backend
              if not hasattr ( f , 'save_form_data' ) :
     class FixedOffset ( tzinfo ) :
    @ register . tag
                model = self . obj
              context [ self . variable_name ] = value
 from django . utils . encoding import smart_text
  return '%s...' % x [ : max ( 0 , limit - 3 ) ]
              msg += ending
 self . set_charset ( utf8_charset )
 super ( QueryDict , self ) . setlist ( key , list_ )
   class Command ( AppCommand ) :
   def check_programs ( * programs ) :
              return len ( self . get_queryset ( ) )
  else :
   def add_prefix ( self , prefix ) :
  elif cmatches :
 import sys
 return self . expression . resolve ( context , True )
 loader = MigrationLoader ( connection )
          self . nodelist = nodelist
  password += b'\x00' * ( inner . block_size - len ( password ) )
          return input_val
                  migration = loader . get_migration ( app_label , migration_name )
    if not hasattr ( self , '_deleted_form_indexes' ) :
          parser . add_argument ( '--plain' , action = 'store_true' , dest = 'plain' ,  help = 'Tells Django to use plain Python, not IPython or bpython.' )
          value = ugettext ( "%s KB" ) % filesize_number_format ( bytes / KB )
 if isinstance ( value , six . string_types ) :
 self . prefix = prefix
 if token_string . find ( TRANSLATOR_COMMENT_MARK ) :
  target = parser . compile_filter ( bits [ 1 ] )
 show_traceback = options . get ( 'traceback' )
                          new_context [ 'csrf_token' ] = csrf_token
  return value
  if not model . _meta . proxy and router . allow_migrate ( using , model ) :
                  break
                  want_unicode = True
    def get_date_error_message ( self , date_check ) :
 sys . stderr . write ( "Unknown command: %r\nType '%s help' for usage.\n" %  ( subcommand , self . prog_name ) )
 from django . utils import six
  if format not in _serializers :
    @ deconstructible
          value = self . to_python ( value ) . strip ( )
    @ deconstructible
 to_unicode = lambda s : force_text ( s , strings_only = True )
   class Command ( BaseCommand ) :
 self . current_token = self . next_token ( )
  sys . exit ( 2 )
  else :
  bit = ' ' . join ( trans_bit )
  result = 0
          name , val = forbid_multi_line_headers ( name , val , self . encoding )
    def media ( request ) :
         @ python_2_unicode_compatible
  if self . paginator . count == 0 :
          return self . s
                  raise CommandError ( "%r is not a valid port number." % self . port )
 from django . utils . safestring import mark_safe
  else :
  else :
      return latest_date or datetime . datetime . now ( )
from __future__ import unicode_literals
    def timeuntil ( d , now = None ) :
                   loop_dict [ 'counter0' ] = i
  else :
 try :
 try :
   def urlunquote_plus ( quoted_url ) :
  def add_arguments ( self , parser ) :
   fields = (   models . CharField ( name = 'cache_key' , max_length = 255 , unique = True , primary_key = True ) ,  models . TextField ( name = 'value' ) ,  models . DateTimeField ( name = 'expires' , db_index = True ) ,  )
 if sep is not None :
   NOCOLOR_PALETTE = 'nocolor'
  if hasattr ( mw_instance , 'process_template_response' ) :
    def reset_translations ( ) :
                   def wrapper ( * args , ** kwds ) :
  if self . _cull_frequency == 0 :
  commands = get_commands ( )
 if not kwarg_format :
  for name in dir ( models . signals ) :
  problem_fields = [  field  for model in apps . get_models ( ** kwargs )  if app_configs is None or model . _meta . app_config in app_configs  for field in model . _meta . local_fields  if isinstance ( field , models . BooleanField ) and not field . has_default ( )  ]
 if file_obj :
 parser . add_argument ( '--fake' , action = 'store_true' , dest = 'fake' , default = False ,  help = 'Mark migrations as run without actually running them' )
  if app_config . models_module is None or app_config in excluded_apps :
          def activate ( timezone ) :
          os . remove ( old_file_name )
 return '%s(%s)' % ( self . __class__ . __name__ , dictreprs )
              if len ( app_labels ) > 1 and primary_keys :
          s . feed ( value )
  else :
   def B ( self ) :
   def start_object ( self , obj ) :
 self . host = host or settings . EMAIL_HOST
  def handle ( self , ** options ) :
  else :
  buffering = int ( six . PY3 )
 self . FILES = MultiValueDict ( )
       def __init__ ( self , level , msg , hint = None , obj = None , id = None ) :
 from django . conf import settings
 kwargs = { }
              return True
 self . second = parser . expression ( bp )
          indent = '\t' * tabs
          pass
              continue
          self . _fname = None
              exc_info = record . exc_info
          super ( HttpResponseNotModified , self ) . __init__ ( * args , ** kwargs )
 import os
 raise NotImplementedError ( 'subclasses of LabelCommand must provide a handle_label() method' )
    def __repr__ ( self ) :
   gettext_noop = gettext_lazy = _ = gettext
  self . error ( "junk characters in start tag: %r"  % ( rawdata [ k : endpos ] [ : 20 ] , ) )
 import calendar
                  break
 return html
  def handle ( self , ** options ) :
 return data
   @ property
              self . xml . ignorableWhitespace ( '\n' + ' ' * self . options . get ( 'indent' , None ) * level )
 for replacement in set ( [  thousand_sep , unicodedata . normalize ( 'NFKD' , thousand_sep ) ] ) :
              try :
 default_error_messages = {  'invalid_choice' : _ ( 'Select a valid choice. %(value)s is not one of the available choices.' ) ,  'invalid_list' : _ ( 'Enter a list of values.' ) ,  }
 match = _html_parser . endtagfind . match ( rawdata , i )
    except StopIteration :
  old_style_list = True
  else :
                  current_chunk = old_file . read ( chunk_size )
           return [ ( '' , [ ] ) ]
  except UnicodeError :
 parser . add_argument ( '--merge' , action = 'store_true' , dest = 'merge' , default = False ,  help = "Enable fixing of migration conflicts." )
              return s
 pickled = None
  self . _stream = LimitedStream ( self . environ [ 'wsgi.input' ] , content_length )
          return LANG_INFO [ lang_code ]
          return str ( self )
          self . set_cookie ( key , max_age = 0 , path = path , domain = domain ,  expires = 'Thu, 01-Jan-1970 00:00:00 GMT' )
 import types
 call_command (  'runserver' ,  addrport = options [ 'addrport' ] ,  shutdown_message = shutdown_message ,  use_reloader = False ,  use_ipv6 = options [ 'use_ipv6' ] ,  use_threading = use_threading  )
                  data = str ( data )
           hextets [ index ] = hextets [ index ] . lstrip ( '0' )
              top_dir = path . join ( os . getcwd ( ) , name )
              option_value = ''
                          i = existing . index ( name )
  return result
 @ stringfilter
  fixture_files . extend ( fixture_files_in_dir )
          try :
              yield key , self [ key ]
  return self . template_cache [ key ]
          return list ( reversed ( modules ) )
   @ property
 exit_code = os . spawnve ( os . P_WAIT , sys . executable , args , new_environ )
              out += '</%s>' % tag
      return ( form_class is not None and (  hasattr ( form_class , '_meta' ) and  ( form_class . _meta . fields is not None or  form_class . _meta . exclude is not None )  ) )
   return attrs
 return get_internal_wsgi_application ( )
          if self . negated :
              temp_lib = Library ( )
      from django . utils . six . moves import _dummy_thread as thread
          if app_config . models_module is None :
   forms_valid &= form . is_valid ( )
 model_identifier = node . getAttribute ( attr )
        if ( not normcase ( final_path ) . startswith ( normcase ( base_path + sep ) ) and  normcase ( final_path ) != normcase ( base_path ) and  dirname ( normcase ( base_path ) ) != normcase ( base_path ) ) :
  else :
                  self . stdout . write ( " - %s" % migration . name )
              raise BadSignature ( 'No "%s" found in value' % self . sep )
 def closed ( self ) :
                  yield node
 itervalues = _itervalues
   else :
 return ( ( evens + odds ) % 10 == 0 )
  internal_use_only = False
              widget . is_localized = True
 @ stringfilter
   elif not os . path . exists ( self . file_path ) :
                  if self . output_transaction :
 connection . close ( )
              thefile = self . file
              handler . addQuickElement ( "ttl" , item [ 'ttl' ] )
          query = query . items ( )
 self . _varlist = varlist
   def file_complete ( self , file_size ) :
                  if model in excluded_models :
   def create_nodelist ( self ) :
  new_context = context_class ( _dict , ** {  'autoescape' : context . autoescape ,  'current_app' : context . current_app ,  'use_l10n' : context . use_l10n ,  'use_tz' : context . use_tz ,  } )
     absolute_max = max_num + DEFAULT_MAX_NUM
 self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
  self . update ( updates )
              os . makedirs ( basedir )
                  self . set_payload ( text , utf8_charset )
  viewname = parser . compile_filter ( bits [ 1 ] )
    return value
          change = fn ( )
      help = 'Deprecated. Use "check" command instead. ' + CheckCommand . help
          cursor = None
   @ property
 if isinstance ( obj , models . signals . ModelSignal ) :
 from itertools import groupby , cycle as itertools_cycle
   return data . get ( name , None )
 while i < len ( subject ) and subject [ i ] not in ( ' ' , '\t' ) :
  from django . core . servers . fastcgi import runfastcgi
                  if path not in self . _js :
 from django . utils import six
      if args is None :
  def __init__ ( self , attrs = None , years = None , months = None , empty_label = None ) :
  else :
 for digit in str ( number ) :
 for member in members :
          idstring = '.' + idstring
                  if character != '.' :
  finally :
  shown . add ( plan_node )
 self . can_write . release ( )
      class DebugNodeList ( NodeList ) :
  count = property ( _get_count )
   raise TemplateDoesNotExist ( name )
 return result
              ch2 = None
          lbp = bp
 super ( MultiWidget , self ) . __init__ ( attrs )
              self . dicts . append ( value )
                          cursor . execute ( "UPDATE %s SET value = %%s, expires = %%s "  "WHERE cache_key = %%s" % table ,  [ b64encoded , exp , key ] )
   def handle_m2m_field ( self , obj , field ) :
                  self . event_stream . expandNode ( node )
  yield buf
          self . vals = [ ]
 self . to_field_name = to_field_name
                  return six . text_type ( s ) . encode ( encoding )
    def deactivate ( ) :
 from logging . config import dictConfig
 def __init__ ( self , initlist = None , error_class = None ) :
  try :
           selected_choices = set ( force_text ( v ) for v in selected_choices )
  else :
          _load_serializers ( )
 from itertools import chain
                  return cached
          from django import VERSION as version
  return translation
    finally :
          raise TemplateSyntaxError ( "%r expected at least one variable "  "assignment" % bits [ 0 ] )
  else :
          if sender and getattr ( sender , 'handles_files' , False ) :
          return self . get_renderer ( name , value , attrs , choices ) . render ( )
 value = force_text ( value )
  else :
              iter ( patterns )
    def _lazy_proxy_unpickle ( func , args , kwargs , * resultclasses ) :
          fs_encoding = sys . getfilesystemencoding ( ) or sys . getdefaultencoding ( )
  elif ch == '(' :
 if self . data . hour > 11 :
 from django . utils import six
 import warnings
          data = {  "model" : smart_text ( obj . _meta ) ,  "fields" : self . _current ,  }
              _default = translation ( settings . LANGUAGE_CODE )
              raise TemplateSyntaxError ( "widthratio final argument must be a number" )
 sub_ul_renderer . choice_input_class = self . choice_input_class
   form = modelform_factory ( model , form = form , fields = fields , exclude = exclude ,  formfield_callback = formfield_callback ,  widgets = widgets , localized_fields = localized_fields ,  labels = labels , help_texts = help_texts , error_messages = error_messages )
  if doublecolon_len > best_doublecolon_len :
  chars = allow_lazy ( chars )
  headerlist = cache . get ( cache_key , None )
 try :
                  self . stdout . write ( self . style . MIGRATE_LABEL ( "  Synchronize unmigrated apps: " ) + ( ", " . join ( executor . loader . unmigrated_apps ) ) )
 p = locale . find ( '_' )
  to_py = super ( ModelMultipleChoiceField , self ) . to_python
  app_dir = os . path . join ( app_config . path , 'fixtures' )
 self . validate_key ( key )
 if not _serializers :
     def import_library ( taglib_module ) :
                      return _CacheInfo ( stats [ HITS ] , stats [ MISSES ] , maxsize , len ( cache ) )
          if os . path . exists ( sql_file ) :
import collections
 def __init__ ( self , attrs = None , date_format = None , time_format = None ) :
          value = ugettext ( "%s GB" ) % filesize_number_format ( bytes / GB )
          parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '+' ,  help = 'One or more application label.' )
              autoreload . main ( self . inner_run , None , options )
  return 'tag:%s%s:%s/%s' % ( bits . hostname , d , bits . path , bits . fragment )
               self . instance = opts . model ( )
  raise TemplateSyntaxError ( error_msg )
  def __init__ ( self , nodelist_true , nodelist_false , * varlist ) :
 self . day_none_value = self . none_value
 if hasattr ( file_or_path , 'read' ) :
  for node in self . nodelist_empty :
    class LazyObject ( object ) :
 return self . set_cookie ( key , value , ** kwargs )
              number = str ( number ) [ 1 : ]
  def add_arguments ( self , parser ) :
  from django . db import models
   def is_ajax ( self ) :
  except UnicodeDecodeError :
          return [ widget . value_from_datadict ( data , files , name + '_%s' % i ) for i , widget in enumerate ( self . widgets ) ]
    __dir__ = new_method_proxy ( dir )
   def _handle_fk_field_node ( self , node , field ) :
 def __init__ ( self , context , base , sysid , pubid ) :
    to_delete . add ( model )
import argparse
         global template_source_loaders
              self . seek ( 0 )
 id_ = widget . attrs . get ( 'id' ) or self . auto_id
 self . _app_dict [ language_code ] = apps
                  output . append ( "### %s = %s" % ( key , user_settings [ key ] ) )
  if hasattr ( TemplateLoader , 'load_template_source' ) :
 VARIABLE_TAG_END = '}}'
 return callback ( request , ** param_dict )
 if self . alternatives :
                  exp = datetime . fromtimestamp ( timeout )
                          self . handle_m2m_field ( obj , field )
 return func
 if value in self . empty_values :
 if len ( fks_to_parent ) == 1 :
 from lib2to3 . pgen2 import token
          return len ( list ( self . __iter__ ( ) ) )
          d = datetime . datetime ( d . year , d . month , d . day )
 text_kwargs = dict ( ( k , force_text ( v ) ) for ( k , v ) in kwargs . items ( ) )
                  result . parent = self
 if fields is not None :
                  result_args [ i ] . append ( param )
 base , ext = posixpath . splitext ( the_path )
                      raise EnvironmentError (  "Cache directory '%s' does not exist "  "and could not be created'" % self . _dir )
                  self . encoding = content_params [ 'charset' ]
   next = advance_iterator
                  src_data = fp . read ( )
  else :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 key = args
  def nud ( self , parser ) :
  except LookupError :
 return IfChangedNode ( nodelist_true , nodelist_false , * values )
 inputs = [ ]
 self . url_name = url_name
  def get_template_sources ( self , template_name , template_dirs = None ) :
  else :
      from django . utils . six . moves import _thread as thread
 self . empty_value = kwargs . pop ( 'empty_value' , [ ] )
 year_val , month_val , day_val = v . year , v . month , v . day
   if pos >= last :
 def truncatewords_html ( value , arg ) :
   def __getattr__ ( self , attr ) :
  except IndexError :
 return '%02d' % self . g ( )
          exp = Decimal ( 1 )
   def decr ( self , key , delta = 1 , version = None ) :
   _active = local ( )
    def check_errors ( fn ) :
  num_sent = 0
 return obj
              return LazyStream ( BoundaryIter ( self . _stream , self . _boundary ) )
 localedir = os . path . join ( os . path . dirname ( settingsfile ) , 'locale' )
 self . nodelist_true , self . nodelist_false = nodelist_true , nodelist_false
 return ''
 self . lookups = None
 remove = complain
          raise EntitiesForbidden ( name , value , base , sysid , pubid , notation_name )
 if len ( args ) != 2 :
 contents = contents or self . label
      exec_ = getattr ( moves . builtins , "exec" )
              name = member . name
                  return p . image . size
 @ stringfilter
  else :
  if arg < 1 :
    _trans = Trans ( )
          return t
          self . _assert_mutable ( )
     def boolean_check ( v ) :
    def add_to_builtins ( module ) :
              cookie_value = self . COOKIES [ key ]
  except base . DeserializationError :
              if year < 70 :
                  raise
     @ deconstructible
   out = self . compress ( clean_data )
 for fixture_dir in fixture_dirs :
 from django . core . validators import validate_ipv4_address
 parser . add_argument ( '--no-obsolete' , action = 'store_true' , dest = 'no_obsolete' ,  default = False , help = "Remove obsolete message strings." )
 for pos , elt in enumerate ( source ) :
 if not self . use_argparse :
          result = super ( ChoiceField , self ) . __deepcopy__ ( memo )
 from django . core . files . uploadedfile import TemporaryUploadedFile , InMemoryUploadedFile
 token = parser . next_token ( )
              raise TemplateSyntaxError ( "No named cycles in template. '%s' is not defined" % name )
  from django . conf import settings
              if cursor and connection . introspection . table_name_converter ( model . _meta . db_table ) in table_names :
   def _get_count ( self ) :
 existing_headers = set ( header . lower ( ) for header in vary_headers )
  self . validators = self . default_validators + validators
 parser . add_argument ( '--no-location' , action = 'store_true' , dest = 'no_location' ,  default = False , help = "Don't write '#: filename:line' lines." )
     class Template ( object ) :
    value = value . astimezone ( timezone )
 while end > 0 and s . count ( b'"' , 0 , end ) % 2 :
  elif child . nodeType == child . ELEMENT_NODE :
                          var_obj = None
    id = "literal"
 if not parent :
  field_name = force_text ( field_name , encoding , errors = 'replace' )
          return self
 shell . mainloop ( )
           logging_config_func = import_string ( logging_config )
   format_locations . append ( 'django.conf.locale.%s' )
              message = _ (  '%(datetime)s couldn\'t be interpreted '  'in time zone %(current_timezone)s; it '  'may be ambiguous or it may not exist.'  )
 i += 1
 opts = model . _meta
          return s
 def check_model_signals ( app_configs = None , ** kwargs ) :
   return ip_str . rsplit ( ':' , 1 ) [ 1 ]
  return value
  requires_system_checks = False
  value = new_value
                  pass
 self . models . add ( obj . object . __class__ )
                       exhaust ( stream )
 setattr ( cls , opname , opfunc )
                                  pass
          for dict_ in self . dicts :
  return _standard_context_processors
 @ stringfilter
    if text . endswith ( truncate ) :
                          formatters [ name ] = self . configure_formatter (  formatters [ name ] )
 response [ 'Cache-Control' ] = cc
          super ( StringOrigin , self ) . __init__ ( UNKNOWN_SOURCE )
 self . _options = params . get ( 'OPTIONS' , None )
              if isinstance ( node , Node ) :
 import traceback
     _format_cache = { }
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Migrations for '%s':" % app_label ) + "\n" )
          middleware = middleware_class ( * m_args , ** m_kwargs )
 if t is not None :
                          raise ValueError ( 'Unable to configure '  'formatter %r: %s' % ( name , e ) )
                      msg . attach ( attachment )
 if safe :
   def exists ( self , name ) :
   except ImportError :
from __future__ import unicode_literals
  kwargs = dict ( ( k , config [ k ] ) for k in config if valid_ident ( k ) )
                      label = conditional_escape ( force_text ( bf . label ) )
              self . stdout . write ( "Flush cancelled.\n" )
                  display_url = tmp + '/'
 input_type = None
    @ lru_cache . lru_cache ( maxsize = None )
              str_hidden = '' . join ( hidden_fields )
  def module_has_submodule ( package , module_name ) :
 return s . getvalue ( )
    class MultipleObjectsReturned ( Exception ) :
     return bound_func ( * args , ** kwargs )
 super ( FileField , self ) . __init__ ( * args , ** kwargs )
 with context . push ( ) :
 def pprint ( value ) :
 return self . file . name
  elif user_settings [ key ] != default_settings [ key ] :
     if self . loaded_object_count > 0 :
  def __init__ ( self , stream_or_string , ** options ) :
      return _trans . templatize ( src , origin )
 return form
   def unclosed_block_tag ( self , parse_until ) :
                          os . makedirs ( dirname )
 if 'charset' in content_params :
              repr_attr = self . _wrapped
              fmt = config . get ( 'format' , None )
 self . key_func = get_key_func ( params . get ( 'KEY_FUNCTION' , None ) )
 WARNING = 30
 SINGLE_BRACE_END = '}'
                                  filemsg = 'file %s, ' % origin
   if common_ancestor is None :
              func = import_string ( path )
      try :
                  res , args = flatten_result ( item )
    class PasswordInput ( TextInput ) :
          super ( ExternalReferenceForbidden , self ) . __init__ ( )
 valid = True
  super ( RendererMixin , self ) . __init__ ( * args , ** kwargs )
  elif isinstance ( obj , EscapeData ) :
                    if e . args [ 0 ] . startswith ( "Error -5" ) :
          return get_supported_language_variant ( lang_code , strict = strict )
    def writer_enters ( self ) :
 super ( QueryDict , self ) . __delitem__ ( key )
 def __init__ ( self , token , parser ) :
     class RequireDebugTrue ( logging . Filter ) :
   def A ( self ) :
 from django . db import ( connections , router , transaction , DEFAULT_DB_ALIAS ,  IntegrityError , DatabaseError )
 return from_current_timezone ( result )
    def get_language_from_request ( request , check_path = False ) :
          return not self . file or self . file . closed
 StringIO = BytesIO = StringIO . StringIO
              file = data . temporary_file_path ( )
  key , value = bits [ 2 ] , bits [ 0 ]
          return map ( self . make_bytes , self . _iterator )
 super ( QueryDict , self ) . __setitem__ ( key , value )
 if len ( list_ ) == 0 :
   class Module_six_moves_urllib_robotparser ( _LazyModule ) :
  except NameError :
                          if os . path . abspath ( dirpath ) . startswith ( os . path . dirname ( path ) ) :
    def create_parser ( self , prog_name , subcommand ) :
     return offset . days * 86400 + offset . seconds
              hextets += [ '' ]
              obj = form . instance
  del frame
   elif len ( fks_to_parent ) == 0 :
    return mark_safe ( template % substitutions )
     class NullBooleanSelect ( Select ) :
  from django . core . mail . backends . base import BaseEmailBackend
   def render ( self , name , value , attrs = None ) :
  else :
 run ( self . addr , int ( self . port ) , handler ,  ipv6 = self . use_ipv6 , threading = threading )
 return True
 app_dir = apps . get_app_config ( model . _meta . app_label ) . path
                      pk_value = None
              from django . conf import settings
          if key not in self :
  if old_style_list :
  result = datetime . datetime . combine ( * data_list )
   elif self . META . get ( 'CONTENT_TYPE' , '' ) . startswith ( 'application/x-www-form-urlencoded' ) :
     class QueryDict ( MultiValueDict ) :
          parser . add_argument ( 'args' , metavar = 'test_label' , nargs = '*' ,  help = 'Module paths to test; can be modulename, modulename.TestCase or modulename.TestCase.test_method' )
 supported = True
 if name . startswith ( '.' ) :
 if num_entries < self . _max_entries :
                  continue
              try :
   update_watch ( )
   else :
   def __contains__ ( self , key ) :
          super ( SplitHiddenDateTimeWidget , self ) . __init__ ( attrs , date_format , time_format )
  if end . endswith ( '/>' ) :
     def load_template_source ( self , template_name , template_dirs = None ) :
 self . _current = None
  nodelist = parser . parse ( ( 'endblock' , ) )
   def unlock ( f ) :
  import json
  else :
              handler . addQuickElement ( "ttl" , self . feed [ 'ttl' ] )
 del self . _expire_info [ key ]
  def __init__ ( self , loaders ) :
   class EmailBackend ( BaseEmailBackend ) :
  def lock ( f , flags ) :
   executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )
 table = connections [ db ] . ops . quote_name ( self . _table )
   def receive_data_chunk ( self , raw_data , start ) :
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
   else :
                  return True
              widget . attrs . update ( extra_attrs )
                  result . append ( self . create_token ( self . template_string [ upto : start ] , ( upto , start ) , False ) )
          serializers [ format ] = module
   def handle_app_config ( self , app_config , ** options ) :
              model_list = app_config . get_models ( )
  value , sig = signed_value . rsplit ( self . sep , 1 )
 import operator
                      inplural = True
   def _truncate_html ( self , length , truncate , text , truncate_len , words ) :
              if os . fork ( ) > 0 :
 nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )
 missing_args_message = "You must provide a project name."
 parser . add_argument ( '--version' , action = 'version' , version = self . get_version ( ) )
   if invalid_apps :
   def get_language_info ( lang_code ) :
                  if six . PY2 :
  elif not base_url . endswith ( '/' ) :
 fp = six . StringIO ( )
                      content = content . decode ( 'utf-8' )
   return kwargs
 return '%02d' % self . data . minute
  try :
                        if os . path . isdir ( entry ) :
 node . replace ( decorated )
               value = self . literal
          fname = self . _key_to_file ( key , version )
    def conditional_content_removal ( request , response ) :
  from django . utils import six
   if bad_app_labels :
 self . pk_field = kwargs . pop ( "pk_field" , False )
     if isinstance ( value , six . string_types ) and value . lower ( ) in ( 'false' , '0' ) :
 parser . add_argument ( '--pythonpath' )
                      if callable ( limit_choices_to ) :
 while 1 :
          self . _stream = stream
 for fixture_file , fixture_dir , fixture_name in self . find_fixtures ( fixture_label ) :
              cleaned_data = self . clean ( )
  val . append ( iso_input )
   else :
  return save_instance ( self , self . instance , self . _meta . fields ,  fail_message , commit , self . _meta . exclude ,  construct = False )
              return timedelta ( 0 )
 add_move ( MovedModule ( "_thread" , "thread" ) )
              self . _setup ( )
  except ImportError :
 raise TemplateDoesNotExist ( name )
 constant_re = re . compile ( r"""_\(((?:".*?")|(?:'.*?'))\)""" )
  delta = expires - expires . utcnow ( )
 import ssl
 from django . utils . html import conditional_escape , format_html
 return getattr ( _active , "value" , get_default_timezone ( ) )
          super ( Command , self ) . add_arguments ( parser )
 choices = list ( six . iteritems ( self . months ) )
        def parse_cookie ( cookie ) :
 input_type = None
 pass
  else :
  else :
  template_with_initial = '%(initial_text)s: %(initial)s %(clear_template)s<br />%(input_text)s: %(input)s'
  except NameError :
   self . fixture_count = 0
 return instance
 filelist = self . _list_cache_files ( )
 singular = [ ]
              self . cookies [ key ] [ 'domain' ] = domain
  elif message_context [ 0 ] == "'" :
 tf = TimeFormat ( value )
              ns = path . pop ( )
              return list ( self . iteritems ( ) )
          self . app_or_project = app_or_project
                  self . emit_post_migrate ( verbosity , interactive , database )
                  if k [ 1 ] is None :
                      ch , escaped = next ( pattern_iter )
                          continue
  else :
 try :
 if keys :
  else :
     class DebugNode ( Node ) :
 setattr ( base , old_method_name , wrapper ( old_method ) )
    def i18n ( request ) :
   def create_bound_method ( func , obj ) :
          warnings . warn (  "NoArgsCommand class is deprecated and will be removed in Django 2.0. "  "Use BaseCommand instead, which takes no arguments by default." ,  RemovedInDjango20Warning  )
       def __init__ ( self , file ) :
   class Command ( BaseCommand ) :
 from django . utils . safestring import mark_safe
 def __init__ ( self , out , style_func = None , ending = '\n' ) :
  return ExtendsNode ( nodelist , parent_name )
          key = self . make_key ( key , version = version )
  id = "(%s) " % self . id if self . id else ""
      status_code = 400
 super ( BaseModelFormSet , self ) . __init__ ( ** defaults )
          value = super ( TypedChoiceField , self ) . clean ( value )
 return new_value
 paths = [ force_text ( p ) for p in paths ]
 matches = filter_re . finditer ( token )
 value = super ( IntegerField , self ) . to_python ( value )
              locales = locale or all_locales
          return ugettext ( "Please correct the duplicate data for %(field_name)s "  "which must be unique for the %(lookup)s in %(date_field)s." ) % {  'field_name' : date_check [ 2 ] ,  'date_field' : date_check [ 3 ] ,  'lookup' : six . text_type ( date_check [ 1 ] ) ,  }
  for app_label , migration_names in conflicts . items ( ) :
   def tell ( self ) :
                  pass
 etags = ETAG_MATCH . findall ( etag_str )
              if self . _wrapped is empty :
   if is_relation :
      WindowsError = WindowsError
 msg_count += 1
 self . fixture_object_count += objects_in_fixture
              alter_sql . extend ( [ '-- ' + sql for sql in  connection . creation . sql_for_pending_references ( model , style , pending_references ) ] )
  elif options [ "daemonize" ] . lower ( ) in ( 'false' , 'no' , 'f' ) :
          key = self . make_key ( key , version = version )
               msg = self . style . HTTP_SERVER_ERROR ( msg )
 with io . open ( work_file , "w" , encoding = 'utf-8' ) as fp :
 raise NotImplementedError ( 'subclasses of Storage must provide a created_time() method' )
          return reversed ( self . keyOrder )
   def to_python ( self , value ) :
    obj = base . build_instance ( Model , data , db )
     @ python_2_unicode_compatible
 from django . utils import six
              name , value = main_value_pair . split ( ':' , 1 )
                  host = '%s:%s' % ( host , server_port )
    def do_ifequal ( parser , token , negate ) :
   def parse_date ( value ) :
              return get_supported_language_variant ( accept_lang )
 self . app_name = app_name
 output . append ( format_html ( self . inner_html ,  choice_value = force_text ( w ) , sub_widgets = '' ) )
 if errors :
      pass
      def __init__ ( self , template , * args , ** kwargs ) :
    @ register . tag
  messages . update ( error_messages or { } )
  return rv
              if is_library_missing ( taglib_module ) :
          del self . tokens [ 0 ]
   is_compressed = False
   output = [ ]
    def strftime ( dt , fmt ) :
                  TYPE = FILE
              categories = [ ( c ) for c in categories ]
                              os . mkdir ( migrations_directory )
   def tzname ( self , dt ) :
           class LocalTimezone ( tzinfo ) :
                   field_notes . append ( "Field renamed because it contained more than one '_' in a row." )
  except AttributeError :
              continue
 _templatetags_modules . append ( templatetag_module )
  def u ( s ) :
          lexer_class , parser_class = Lexer , Parser
              tz_name = force_text ( get_current_timezone_name ( ) , errors = 'ignore' )
          return s
 if data is None or isinstance ( data , dict ) :
    def get_full_path ( self ) :
                  bits . append ( int ( x ) )
    def sql_all ( app_config , style , connection ) :
   def __repr__ ( self ) :
                          limit_choices_to = limit_choices_to ( )
              yield obj
          parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '*' ,  help = 'Path(s) to fixtures to load before running the server.' )
          current_timezone = timezone . get_current_timezone ( )
  ipv4_re = re . compile ( r'^(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}$' )
          available_shells = [ shell ] if shell else self . shells
   hextets = ip_str . split ( ':' )
 from django . utils . functional import cached_property
 from django . utils . safestring import ( SafeData , EscapeData , mark_safe ,  mark_for_escaping )
   def __reduce_ex__ ( self , proto ) :
              try :
          tpl = "EntitiesForbidden(name='{}', system_id={!r}, public_id={!r})"
   def clean ( self , data , initial = None ) :
                  self . stdout . write ( self . style . MIGRATE_HEADING ( "Synchronizing apps without migrations:" ) )
              self . saved_forms = [ ]
          args = [ sys . executable ] + [ '-W%s' % o for o in sys . warnoptions ] + sys . argv
 self . xml . characters ( smart_text ( key_value ) )
 bad_app_labels = set ( )
          return sorted ( value , key = Variable ( arg ) . resolve , reverse = True )
 def __init__ ( self , func , name = None ) :
                              result . append ( Group ( ( ( "%%(%s)s" % param ) , param ) ) )
    class HttpRequest ( object ) :
              return self . handle_merge ( loader , conflicts )
 @ stringfilter
   def urlencode ( self , safe = None ) :
   def widget_attrs ( self , widget ) :
   def validate_key ( self , key ) :
                  register_to . _registry = before_import_registry
 conditions_nodelists . append ( ( None , nodelist ) )
 converter = self . value_converters . get ( prefix , None )
 if url . endswith ( '/' ) :
 WRAPPING_PUNCTUATION = [ ( '(' , ')' ) , ( '<' , '>' ) , ( '[' , ']' ) , ( '&lt;' , '&gt;' ) , ( '"' , '"' ) , ( '\'' , '\'' ) ]
              data = self . _archive . read ( name )
  def write ( self , outfile , encoding ) :
   def clean ( self ) :
          try :
    new_modules = module_values - _cached_modules
 message = _ ( 'Ensure this value is less than or equal to %(limit_value)s.' )
          for obj in PythonDeserializer ( yaml . load ( stream , Loader = SafeLoader ) , ** options ) :
 plural = [ ]
 return [ value . date ( ) , value . time ( ) . replace ( microsecond = 0 ) ]
    return saved_instances
   def write_message ( self , message ) :
      help = "Introspects the database tables in the given database and outputs a Django model module."
 if len ( words ) > length :
 locales = [ locale ]
    def _make_key ( args , kwds , typed ,  kwd_mark = ( object ( ) , ) ,  fasttypes = { int , str , frozenset , type ( None ) } ,  sorted = sorted , tuple = tuple , type = type , len = len ) :
  try :
   def _get_regex ( self ) :
   def get ( self , key , default = None ) :
 try :
  except ValidationError :
 hlen = digest ( ) . digest_size
  def __init__ ( self , regex = None , message = None , code = None , inverse_match = None , flags = None ) :
   def _send ( self , email_message ) :
 for pk in value :
 from django . utils . six . moves import input
      pass
 all_locales . extend ( map ( os . path . basename , locale_dirs ) )
          widgets = ( DateInput ( attrs = attrs , format = date_format ) ,  TimeInput ( attrs = attrs , format = time_format ) )
    def _check_test_runner ( app_configs = None , ** kwargs ) :
          return "<IfEqualNode>"
              command . stdout . write ( 'processing file %s in %s\n' % ( self . file , self . dirpath ) )
              return [ ]
                  widget . is_localized = self . is_localized
  def __init__ ( self , permitted_methods , * args , ** kwargs ) :
 from IPython . frontend . terminal . ipapp import TerminalIPythonApp
 tried = [ ]
  except ( OverflowError , ValueError ) :
    return created_models
                      if primary_keys :
 if self . lookups is not None :
          if self . is_localized :
                      os . unlink ( work_file )
 if old_attr is None :
  for issues , group_name in sorted_issues :
      ungettext = ngettext
 return forms
 from django . db . migrations . writer import MigrationWriter
                  digits = decimals
 excluded_models = set ( )
  if boundary :
          return '%s-%s' % ( self . prefix , index )
 from __future__ import unicode_literals
          super ( MovedModule , self ) . __init__ ( name )
  except MiddlewareNotUsed :
   def _populate ( self ) :
              raise CommandError ( "Can't resolve dependencies for %s in serialized app list." %  ', ' . join ( '%s.%s' % ( model . _meta . app_label , model . _meta . object_name )  for model , deps in sorted ( skipped , key = lambda obj : obj [ 0 ] . __name__ ) )  )
  except NotImplementedError :
 import os
  try :
 obj = Node ( connector = self . connector , negated = self . negated )
          if cmd . endswith ( ext ) :
                      raise
   def write ( self , outfile , encoding ) :
          timestamp = datetime . datetime . utcfromtimestamp ( int ( timestamp ) )
 from django . utils . translation import get_language
              field_params [ 'db_column' ] = col_name
        @ register . filter ( is_safe = False )
 if cls . _delegate_text :
 return retval
  else :
 mtime = stat . st_mtime
   def multiple_chunks ( self , chunk_size = None ) :
    def urlsafe_base64_decode ( s ) :
      def __init__ ( self , options = None ) :
   else :
              try :
  else :
              self . _fqdn = socket . getfqdn ( )
  return False
  except AttributeError :
  out . write ( ' pgettext(%r, %r) ' % ( message_context , g ) )
 if isinstance ( rhs , SafeText ) :
                   count , ch = get_quantifier ( ch , pattern_iter )
          script_name = get_script_name ( environ )
              for node in nodelist :
    self . widget . choices = self . choices
      bits = list ( token . split_contents ( ) )
 if ret :
    try :
  def next_space_index ( subject , i ) :
                   finder = sys . path_importer_cache [ entry ]
 from django . utils import timezone
 if not data :
  except ImportError as e :
  return mark_safe ( '\n' . join ( output ) )
     class DateTimeBaseInput ( TextInput ) :
                         for middleware_method in self . _exception_middleware :
 for dict_ in self . dicts :
          super ( RadioChoiceInput , self ) . __init__ ( * args , ** kwargs )
   def resolve ( self , s ) :
 consume_next = True
          if to_lower :
                  new_value . append ( self . coerce ( choice ) )
              return SafeText ( t )
  FILE_MODIFIED = 1
 from optparse import OptionParser
          raise ValidationError ( _ ( 'Enter a valid IPv6 address.' ) , code = 'invalid' )
              self . validators . append ( validators . MinLengthValidator ( int ( min_length ) ) )
     class NullBooleanField ( BooleanField ) :
              return default
            if self . _request_middleware is None :
       def make_msgid ( idstring = None ) :
 now = timezone . now ( )
   return getattr ( settings , format_type )
  output_transaction = True
 if not isinstance ( list_ , ( tuple , list ) ) or len ( list_ ) != 2 :
  super ( BaseModelFormSet , self ) . add_fields ( form , index )
 if not email_messages :
          try :
 t = re . sub ( "([a-z])'([A-Z])" , lambda m : m . group ( 0 ) . lower ( ) , value . title ( ) )
 from django . core . management . base import CommandError , BaseCommand
 from django . utils . module_loading import import_string
  return value . replace ( tzinfo = None )
  def add_arguments ( self , parser ) :
 if row_data and None not in row_data :
  if pk_is_not_editable ( pk ) or pk . name not in form . fields :
 if last == 1 :
          value = ugettext ( "%s PB" ) % filesize_number_format ( bytes / PB )
 if token . contents == 'empty' :
   class BadHeaderError ( ValueError ) :
                  attr_list [ 3 ] |= termios . ECHO
  logger = logging . getLogger ( 'django.request' )
  return force_bytes ( s , encoding , strings_only , errors )
              return context
   if not func . is_usable :
  for k , v in six . iteritems ( kwargs ) :
          if isinstance ( level , int ) :
   class CommandError ( Exception ) :
  except ( ValueError , TypeError ) :
    def resolve_context ( self , context ) :
 reverse = complain
               return '-' . join ( [ template_name , hashlib . sha1 ( force_bytes ( '|' . join ( template_dirs ) ) ) . hexdigest ( ) ] )
  raise CommandError ( msg )
  def __init__ ( self , var ) :
 if command . use_argparse :
       def bytes_to_text ( s , encoding ) :
 if not _is_shorthand_ip ( ip_str ) :
   @ property
   def as_hidden ( self , attrs = None , ** kwargs ) :
 from django . forms . widgets import (  TextInput , NumberInput , EmailInput , URLInput , HiddenInput ,  MultipleHiddenInput , ClearableFileInput , CheckboxInput , Select ,  NullBooleanSelect , SelectMultiple , DateInput , DateTimeInput , TimeInput ,  SplitDateTimeWidget , SplitHiddenDateTimeWidget , FILE_INPUT_CONTRADICTION  )
              id_ = 'id_%s' % name
 if not cleaned_line :
 pass
  raise Resolver404 ( { 'path' : path } )
                  write ( sep )
  if not dklen :
 result = c ( ** kwargs )
          if hasattr ( response , 'render' ) and callable ( response . render ) :
          return
 for ext in extensions :
  elif ch != 'P' :
                  t = self . waiting_readers
  cc_delim_re = re . compile ( r'\s*,\s*' )
   for o in opts :
    def is_valid_ipv6_address ( ip_str ) :
  else :
              template_dirs = settings . TEMPLATE_DIRS
 try :
 pass
    def add_root_elements ( self , handler ) :
              return Media ( ** { str ( name ) : getattr ( self , '_' + name ) } )
          fill_to = 7
 backend = params . pop ( 'BACKEND' )
 substitutions [ 'clear' ] = CheckboxInput ( ) . render ( checkbox_name , False , attrs = { 'id' : checkbox_id } )
    class NoReverseMatch ( Exception ) :
  return super ( TimeField , self ) . to_python ( value )
 import os
  else :
 if m is not None and n is not None :
                  cur_lineno = t . lineno + t . contents . count ( '\n' )
  def __init__ ( self , * args , ** kwargs ) :
 self . xgettext_options = self . xgettext_options [ : ] + [ '--no-location' ]
   def reverse ( self , lookup_view , * args , ** kwargs ) :
          raise SerializerDoesNotExist ( format )
              data [ Model . _meta . pk . attname ] = Model . _meta . pk . to_python ( d . get ( "pk" , None ) )
          self . val_expr = val_expr
 new_args = [ ]
  from django . core . management . base import CommandError
   response = response . render ( )
          cc [ k . replace ( '_' , '-' ) ] = v
          self . _caches = local ( )
 class dummy :
 WSGIServer = module . WSGIServer
   def compile_filter_error ( self , token , e ) :
                  bits = normalize ( p_pattern )
   def d ( self ) :
                  template_dir = template_dir . decode ( fs_encoding )
              self . seek ( 0 )
     ip_address_validator_map = {  'both' : ( [ validate_ipv46_address ] , _ ( 'Enter a valid IPv4 or IPv6 address.' ) ) ,  'ipv4' : ( [ validate_ipv4_address ] , _ ( 'Enter a valid IPv4 address.' ) ) ,  'ipv6' : ( [ validate_ipv6_address ] , _ ( 'Enter a valid IPv6 address.' ) ) ,  }
              raise MultiValueDictKeyError ( repr ( key ) )
 host_validation_re = re . compile ( r"^([a-z0-9.-]+|\[[a-f0-9]*:[a-f0-9:]+\])(:\d+)?$" )
 return filelist
 import sys
 for form in self . extra_forms :
          value = list . __getitem__ ( self , key )
                              result . append ( Group ( ( ( "%%(%s)s" % param ) , None ) ) )
      global _mtimes , _win
  hidden_fields . append ( six . text_type ( bf ) )
      def __init__ ( self , filter_expr , nodelist ) :
 pk = self . data [ pk_key ]
    else :
  output [ - 1 ] = last_row [ : - len ( row_ender ) ] + str_hidden + row_ender
              dklen = hlen
   return '\n' . join ( output )
   def save ( self , name , content ) :
  from django . core . management . base import AppCommand
    def to_python ( self , value ) :
              handler . addQuickElement ( "language" , self . feed [ 'language' ] )
 self . method = None
   return response
   def phone2numeric ( phone ) :
 hint = "\n\tHINT: %s" % self . hint if self . hint else ''
   def error ( self , message ) :
  self . _meta = META
 return dirs
              _mtimes = { }
 result , upto = [ ] , 0
 from django . db . migrations . autodetector import MigrationAutodetector
   def normalize_newlines ( text ) :
  return [ k for k , v in six . iteritems ( _serializers ) if not v . Serializer . internal_use_only ]
 parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database onto which the cache tables will be '  'installed. Defaults to the "default" database.' )
              for widget in self . widgets :
 compatibility = 'compatibility'
   else :
   def __repr__ ( self ) :
          first , lang , priority = pieces [ i : i + 3 ]
 if p >= 0 :
              return
 warnings . warn ( warn_msg , TranslatorCommentWarning )
 try :
 if graph . nodes [ plan_node ] . replaces :
 for field in self . fields . values ( ) :
          for bit in bits :
  if code is not None :
                  result = self . configure_custom ( config )
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
                   if not isinstance ( message , ValidationError ) :
  except Exception as e :
 TB = 1 << 40
 size = self . file . tell ( )
     new_class . base_fields = declared_fields
  if max_num is None :
                         if field . error_messages [ 'incomplete' ] not in errors :
          super ( UploadedFile , self ) . __init__ ( file , name )
   def add_fields ( self , form , index ) :
    if commit :
 from email . mime . message import MIMEMessage
  return dec
                  raise ViewDoesNotExist (  "Could not import '%s'. View does not exist in module %s." %  ( lookup_view , mod_name ) )
                  self . connection . login ( self . username , self . password )
 from django . http . cookie import SimpleCookie
 from django . utils . encoding import smart_text , force_text
 new = '#: ' + orig_file
   def to_python ( self , value ) :
 for attr in _urllib_robotparser_moved_attributes :
    def mark_for_escaping ( s ) :
          self . exception = exception
       def __init__ ( self ) :
              pass
    return obj_dict
 from django . test . utils import get_runner
                              open ( init_path , "w" ) . close ( )
 TOKEN_COMMENT = 3
  try :
  plen = len ( provided ) + 1
   potfile = os . path . join ( self . locale_dir , '%s.pot' % str ( domain ) )
 parser . add_argument ( '--no-optimize' , action = 'store_true' , dest = 'no_optimize' , default = False ,  help = 'Do not try to optimize the squashed operations.' )
    class StreamingBuffer ( object ) :
   def N ( self ) :
 for sub_stream in boundarystream :
          return type ( self ) . __bool__ ( self )
   def __iter__ ( self ) :
   save . alters_data = True
  self . backout . append ( self . pointer )
 from django . utils . encoding import force_bytes , force_str , force_text
          for i , line in enumerate ( lines ) :
  return value if six . PY2 else value . encode ( ISO_8859_1 ) . decode ( UTF_8 )
               if upload :
              line = sio . readline ( size )
 from django . utils import formats
 self . write_items ( handler )
    return False
  else :
  from django . conf import settings
   def __nonzero__ ( self ) :
   possibilities = self . reverse_dict . getlist ( lookup_view )
          return (  isinstance ( other , RegexValidator ) and  self . regex . pattern == other . regex . pattern and  self . regex . flags == other . regex . flags and  ( self . message == other . message ) and  ( self . code == other . code ) and  ( self . inverse_match == other . inverse_match )  )
import cgi
              file = tempfile . NamedTemporaryFile ( suffix = '.upload' )
  for model in app_models :
 if os . path . exists ( old_app_dir ) :
      self . _queryset = qs
          del _prefixes . value
 from __future__ import unicode_literals
   if check_path :
 for filename in gen_filenames ( ) :
              raise AttributeError ( attr )
      pass
 import os
 in_index = - 3 if is_reversed else - 2
   _format_cache [ cache_key ] = None
              return self . _size
          if message is not None :
   else :
              self . _post , self . _files = QueryDict ( '' , encoding = self . _encoding ) , MultiValueDict ( )
   def run_checks ( self , app_configs = None , tags = None ) :
    out = b'' . join ( parts ( ) )
 parser . add_argument ( '--empty' , action = 'store_true' , dest = 'empty' , default = False ,  help = "Create an empty migration." )
              html_class_attr = ''
              return time_format ( value , arg )
  elif isinstance ( o , decimal . Decimal ) :
 if self . waiting_writers != 0 :
 sortable_virtual_fields = [ f for f in opts . virtual_fields  if isinstance ( f , ModelField ) ]
 _format_modules_cache = { }
  self . _ordering . append ( ( i , form . cleaned_data [ ORDERING_FIELD_NAME ] ) )
  config = self . config
              return self . nodelist_false . render ( context )
 seen_models = connection . introspection . installed_models ( tables )
  except LookupError :
              widget . input_type = 'hidden'
  color_names = ( 'black' , 'red' , 'green' , 'yellow' , 'blue' , 'magenta' , 'cyan' , 'white' )
          return [ '' ] , [ [ ] ]
 for field in concrete_model . _meta . local_fields :
 try :
              raise ValidationError ( self . error_messages [ 'contradiction' ] , code = 'contradiction' )
 endtag_re = re . compile ( '</%s>' % tags_re )
 parser . add_argument ( '-n' , '--natural' , action = 'store_true' , dest = 'use_natural_keys' , default = False ,  help = 'Use natural keys if they are available (deprecated: use --natural-foreign instead).' )
  if hasattr ( response , 'render' ) and callable ( response . render ) :
    def is_naive ( value ) :
   prev_opts = [ x . split ( '=' ) [ 0 ] for x in cwords [ 1 : cword - 1 ] ]
       def __init__ ( self , * args , ** kwargs ) :
              version = self . version
  new_name = col_name . lower ( )
 if location is None :
 if subcommand_cls . use_argparse :
   def id_for_label ( self , id_ ) :
          return get_connection ( backend = self . email_backend , fail_silently = True )
  return True
  import datetime
              content = f . read ( )
 M . set ( key , real_value , coded_value )
  except IndexError :
   if isinstance ( elt , ( Choice , NonCapture ) ) :
 index_output = [ ]
              try :
                      file_move_safe ( content . temporary_file_path ( ) , full_path )
 days = ( 'Mon' , 'Tue' , 'Wed' , 'Thu' , 'Fri' , 'Sat' , 'Sun' )
  else :
       else :
 from django . template . loader import BaseLoader , get_template_from_string , find_template_loader , make_origin
                  handle_m2m ( relobj )
              super ( Serializer , self ) . handle_field ( obj , field )
          resolved_args = [ var . resolve ( context ) for var in self . args ]
 if not f . blank and not form_field . required and field_value in form_field . empty_values :
                  return bytes ( self ) % rhs
  elif isinstance ( value , datetime . date ) :
          BaseCache . __init__ ( self , * args , ** kwargs )
          raise ValueError ( 'The joined path (%s) is located outside of the base '  'path component (%s)' % ( final_path , base_path ) )
 from django . core . mail . backends . console import EmailBackend as ConsoleEmailBackend
 try :
 self . exit_command ( )
  except ValueError :
  if app_config is None :
   def previous_page_number ( self ) :
           members = [ member for member in self . _archive . getmembers ( )  if member . name != 'pax_global_header' ]
  if item_type == FIELD :
 del self [ 'Content-Transfer-Encoding' ]
              cursor . close ( )
   def address_string ( self ) :
 for operation in migration . operations :
 content = force_bytes ( content )
   def render ( self , context ) :
  if response is None :
  self . name = name
 continue
              try :
          if app_config . models_module is None :
 i = i + 1
   def __copy__ ( self ) :
              offset_mins = int ( tzinfo [ - 2 : ] ) if len ( tzinfo ) > 3 else 0
               self . filters [ name ] = filter_func
 salt = force_bytes ( salt )
          super ( DebugParser , self ) . __init__ ( lexer )
     class TextNode ( Node ) :
              extra_classes . add ( self . form . error_css_class )
 if kwds :
  from django . utils . dates import MONTHS , MONTHS_3 , MONTHS_ALT , MONTHS_AP , WEEKDAYS , WEEKDAYS_ABBR
   finally :
          seen = set ( )
 raise NoReverseMatch ( "Reverse for '%s' with arguments '%s' and keyword "  "arguments '%s' not found. %d pattern(s) tried: %s" %  ( lookup_view_s , args , kwargs , len ( patterns ) , patterns ) )
          self . field = field
    class TagHelperNode ( Node ) :
              chunk_size = self . DEFAULT_CHUNK_SIZE
    chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
  Iterator = object
  else :
 if err_log :
 if token . contents == 'else' :
  potfiles . append ( potfile )
                  continue
 words [ i ] = mark_safe ( '%s%s%s' % ( lead , middle , trail ) )
 if not boundary or not cgi . valid_boundary ( boundary ) :
 if sent :
from __future__ import unicode_literals
 models = set ( )
 if not url_fields [ 0 ] :
               path_rest = root [ prefix_length : ]
  basedirs . extend ( settings . LOCALE_PATHS )
 from django . utils import baseconv
     def getlist ( self , key ) :
      allowed_schemes = [ 'http' , 'https' , 'ftp' ]
                              field_type = 'NullBooleanField('
   def set_cookie ( self , key , value = '' , max_age = None , expires = None , path = '/' ,  domain = None , secure = False , httponly = False ) :
  list_length = len ( list_ )
  else :
                  message = 'Unknown field(s) (%s) specified for %s'
 try :
              if len ( value ) != 1 :
 from io import BytesIO
              self . flags = flags
 from django . forms import Form
                  f . save_form_data ( instance , cleaned_data [ f . name ] )
  return ( resource , 'egg:%s:%s' % ( app_config . name , pkg_name ) )
               final_attrs [ 'value' ] = force_text ( value )
  else :
 if kwds :
     def render_value_in_context ( value , context ) :
     def _delete ( self , key ) :
 for message in email_messages :
  return timesince ( value )
  if is_aware ( date ) :
 for path in self . locale_paths :
                  raise TemplateSyntaxError ( "Malformed arguments to url tag" )
 return False
              return True
 @ stringfilter
   @ property
              context [ self . asvar ] = result
                  pass
 return base64 . urlsafe_b64decode ( s + pad )
          return parse_http_date ( date )
  normalize_newlines = allow_lazy ( normalize_newlines , six . text_type )
 self . html_initial_id = form . add_initial_prefix ( self . auto_id )
 self . filters = { }
 for x in range ( level , 1 , - 1 ) :
   except NameError :
  load_template_source . is_usable = True
   def validate ( self , value ) :
   new_class . base_fields = fields
          output . extend ( connection . creation . sql_indexes_for_model ( model , style ) )
   try :
 def default ( self , o ) :
 warnings . warn ( msg , RemovedInDjango19Warning , stacklevel = 2 )
              _ , ser_fmt , cmp_fmt = self . parse_name ( os . path . basename ( fixture_file ) )
 if key . startswith ( self . prefix ) :
  if attrvalue :
   try :
 changed = True
 return self . file . closed
      return _trans . gettext_noop ( message )
 if arg not in ( 'on' , 'off' ) :
  else :
      input_type = 'password'
          parsed = urlparse ( force_text ( redirect_to ) )
 assert version [ 3 ] in ( 'alpha' , 'beta' , 'rc' , 'final' )
 value . configurator = self
  tables . append ( connection . introspection . table_name_converter ( model . _meta . db_table ) )
  else :
 d = { }
  last = max ( 0 , end - 1 )
           if data is FILE_INPUT_CONTRADICTION :
   def get_data ( self ) :
 from django . db . migrations . loader import AmbiguityError
 if fd >= 0 :
 from django . conf import settings
  except ImportError :
 self . connection = connection
 context_extras [ 'LANGUAGES' ] = settings . LANGUAGES
              if not self . required :
  if data :
 from django . utils . safestring import mark_safe
 widget = SelectMultiple
 result = ugettext ( msg_with_ctxt )
 self . args = args
              if self . fixture_count == 0 and self . hide_empty :
  except VariableDoesNotExist :
  except StandardError as e :
   as_form = False
     def find_template_loader ( loader ) :
    for model in app_models :
          if input_val in special_floats :
    locales = locale or all_locales
    @ register . tag
 for loader in self . _loaders :
 num = cursor . fetchone ( ) [ 0 ]
   except KeyError :
  styles = instructions . split ( ',' )
                          custom_sql = custom_sql_for_model ( model , no_style ( ) , connection )
 values = '' . join ( quant ) . split ( ',' )
  return language [ : p ] . lower ( ) + '_' + language [ p + 1 : ] . upper ( )
          try :
          filepath = self . filepath . resolve ( context )
                      m = self . INDEX_PATTERN . match ( rest )
 import glob
 timezone = ( offset . days * 24 * 60 ) + ( offset . seconds // 60 )
 parser = self . _parser
 html [ 'year' ] = self . create_select ( name , self . year_field , value , year_val , choices , self . year_none_value )
                  return getattr ( instance , name ) ( )
 lbp = 0
  for field_name in self . fields :
          kw = match . groupdict ( )
 super ( WSGIRequestHandler , self ) . __init__ ( * args , ** kwargs )
   def render ( self , context ) :
 if timeout == DEFAULT_TIMEOUT :
      class WithNode ( Node ) :
                                  current = settings . TEMPLATE_STRING_IF_INVALID
   def save_existing_objects ( self , commit = True ) :
          self . setting , self . nodelist = setting , nodelist
    def send_messages ( self , email_messages ) :
 day_field = '%s_day'
 def escapejs_filter ( value ) :
 from django . core . cache . backends . db import BaseDatabaseCache
                          from django . template . loader import get_template , select_template
          return False
 parser . print_help ( )
   def render ( self , name , value , attrs = None ) :
   def unsign ( self , signed_value ) :
 add_to_builtins ( 'django.template.defaultfilters' )
              if self . pk_field :
  def add_arguments ( self , parser ) :
    except UnicodeError as e :
                          field_desc += '  # ' + ' ' . join ( comment_notes )
          try :
                  if ignore_failures :
  def prepare_value ( self , value ) :
    class HttpResponsePermanentRedirect ( HttpResponseRedirectBase ) :
   def has_changed ( self ) :
          for k , v in six . iteritems ( dict_ ) :
 from pprint import pformat
              template_dirs = app_template_dirs
 flat = { }
          for format in settings . SERIALIZATION_MODULES :
   for module_to_search in args :
 from django . core import signals
 from django . utils . safestring import mark_safe , SafeData , mark_for_escaping
          parser . add_argument ( 'args' , metavar = 'fixture' , nargs = '+' ,  help = 'Fixture labels.' )
 args , kwargs = parse_bits ( parser , bits , params ,  varargs , varkw , defaults , takes_context , function_name )
 if self . m2m_data and save_m2m :
              fext = f + ext
                      return
              self . xml . characters ( field . value_to_string ( obj ) )
 for root in settings . ALLOWED_INCLUDE_ROOTS :
                      if varargs is None :
       def __init__ ( self ) :
              fh . write ( writer . as_string ( ) )
from django . http . cookie import SimpleCookie , parse_cookie
  except OSError as e :
 time_str = date . strftime ( '%Y-%m-%dT%H:%M:%S' )
          ext_list . extend ( ext . replace ( ' ' , '' ) . split ( ',' ) )
 return format_html ( '<textarea{0}>\r\n{1}</textarea>' ,  flatatt ( final_attrs ) ,  force_text ( value ) )
                  break
 from __future__ import unicode_literals
                  obj = new_obj
              break
 from django . core import signing
              if len ( new_operations ) == len ( operations ) :
   headers = [  ( b': ' . join ( [ to_bytes ( key , 'ascii' ) , to_bytes ( value , 'latin-1' ) ] ) )  for key , value in self . _headers . values ( )  ]
 return FilterNode ( filter_expr , nodelist )
    if sys . platform . startswith ( 'java' ) :
                   for hook in sys . path_hooks :
from __future__ import unicode_literals
 forms = ' ' . join ( form . as_ul ( ) for form in self )
  else :
   except UnicodeEncodeError :
  return super ( ModelMultipleChoiceField , self ) . prepare_value ( value )
  os . setsid ( )
 result += ':' + ipv4_address
              file_name = data . name
              client . behaviors = self . _options
   def unget ( self , bytes ) :
  if self . localize :
   if not strict :
  if subject [ i ] in ( '"' , "'" ) :
 pos = last = 0
              return [ super ( ModelMultipleChoiceField , self ) . prepare_value ( v ) for v in value ]
                      message %= error . params
   self . extend_nodelist ( nodelist , compiled_result , token )
   self . widget = widget
  except StopIteration :
   for check in checks :
 self . paths_to_remove . append ( tempdir )
              unique_id = get_tag_uri ( item [ 'link' ] , item [ 'pubdate' ] )
                   def render ( self , context ) :
    def end_object ( self , obj ) :
 raise NotImplementedError ( 'subclasses of Storage must provide a modified_time() method' )
              return value
   def new_method_proxy ( func ) :
  self . regexes [ state ] = re . compile ( "|" . join ( parts ) , re . MULTILINE | re . VERBOSE )
   content_disposition = info . get ( 'content-disposition' )
 def encoding ( self , val ) :
      def __init__ ( self , target , expression , var_name ) :
   if self . verbosity > 0 :
          try :
  data = b64_decode ( base64d )
              for item_type , meta_data , field_stream in Parser ( stream , self . _boundary ) :
 def do_with ( parser , token ) :
  closing_tag , tagname , self_closing = tag . groups ( )
 import sys
 root = logging . getLogger ( )
    @ register . filter ( is_safe = False )
 self . _expire_info = _expire_info . setdefault ( name , { } )
 self . buffer = b''
      return { 'request' : request }
  else :
 _ , content_params = cgi . parse_header ( environ . get ( 'CONTENT_TYPE' , '' ) )
     if value != value or value == Decimal ( "Inf" ) or value == Decimal ( "-Inf" ) :
 gettext . _translations = { }
    def ensure_echo_on ( ) :
 return strip_spaces_between_tags ( self . nodelist . render ( context ) . strip ( ) )
 context = self . resolve_context ( self . context_data )
  if len ( list_ ) == 1 :
  finally :
                  r = r [ : 12 ]
 char2number = { 'a' : '2' , 'b' : '2' , 'c' : '2' , 'd' : '3' , 'e' : '3' , 'f' : '3' ,  'g' : '4' , 'h' : '4' , 'i' : '4' , 'j' : '5' , 'k' : '5' , 'l' : '5' , 'm' : '6' ,  'n' : '6' , 'o' : '6' , 'p' : '7' , 'q' : '7' , 'r' : '7' , 's' : '7' , 't' : '8' ,  'u' : '8' , 'v' : '8' , 'w' : '9' , 'x' : '9' , 'y' : '9' , 'z' : '9' }
      def __init__ ( self , display_name , loader , name , dirs ) :
          return True
              raise TypeError
              other_dict = args [ 0 ]
  except Model . DoesNotExist :
 import errno
                  self . stdout . write ( "No fixture '%s' in %s." %  ( fixture_name , humanize ( fixture_dir ) ) )
  def add_arguments ( self , parser ) :
                      return self . compress ( [ ] )
   class MLStripper ( HTMLParser ) :
 self . invoked_for_django = True
  def add_arguments ( self , parser ) :
 import warnings
                  data = self
          try :
 import warnings
  from django . template . base import Variable , Library , VariableDoesNotExist
 if PY3 :
   def modified_time ( self , name ) :
                       field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
       expression = parser . compile_filter ( var_name +  VARIABLE_ATTRIBUTE_SEPARATOR +  bits [ 3 ] )
 error = sys . modules [ __name__ + ".moves.urllib_error" ]
          if key not in self :
 substitutions [ 'clear_checkbox_name' ] = conditional_escape ( checkbox_name )
     @ register . filter ( is_safe = True , needs_autoescape = True )
 filename = os . path . basename ( path )
    def configure_root ( self , config , incremental = False ) :
          ch = None
    raise ImportError ( "No IPython" )
 failures = test_runner . run_tests ( test_labels )
 try :
 if not url :
 self . content_length = content_length
   def _get_context_stack_frame ( self , context ) :
 if six . PY2 :
          if self . _isdst ( dt ) :
 self . alternatives = alternatives or [ ]
              @ wraps ( view_func , assigned = available_attrs ( view_func ) )
   def start_serialization ( self ) :
  from os import path
              defaults [ 'empty_permitted' ] = True
  res = subject [ p : i ]
  except ( KeyError , AttributeError ) as exc :
              with io . open ( fd , 'wb' ) as f :
                      app_config = apps . get_app_config ( exclude )
          output = self . nodelist . render ( context )
  def F ( i ) :
 retval = self
  output_transaction = True
 from django . core . exceptions import ValidationError
 chunks . append ( bytes )
 if submod and not module_has_submodule ( import_module ( parentmod ) , submod ) :
              raise InvalidTemplateLibrary ( "Unsupported arguments to "  "Library.filter: (%r, %r)" , ( name , filter_func ) )
   def __mod__ ( self , rhs ) :
    @ property
          return None
      from pkg_resources import resource_string
              post = ( pformat ( POST_override )  if POST_override is not None  else pformat ( request . POST ) )
  else :
   def render ( self , context ) :
     return text
 if message :
 _itervalues = "values"
          if self . is_bound and i < self . initial_form_count ( ) :
 self . params = params
 _empty_value = ''
 opts = instance . _meta
 __str__ = new_method_proxy ( str )
 value = p [ i + 1 : ] . strip ( )
 empty_values = list ( validators . EMPTY_VALUES )
  raise
  else :
          cache_timeout = settings . CACHE_MIDDLEWARE_SECONDS
          self . _archive . close ( )
   if field_type == 'DecimalField' :
 conditions_nodelists . append ( ( condition , nodelist ) )
 pass
  if not getattr ( self , 'nodelist' , False ) :
  else :
   def _set_queryset ( self , queryset ) :
  else :
 oldkey = root [ KEY ]
          return False
                  data [ field . attname ] = self . _handle_fk_field_node ( field_node , field )
              name = self . html_initial_name
                  self . compile_messages ( locations )
   def csrf ( request ) :
              self . to = [ ]
              if ignore :
                          if self . selected_fields is None or field . attname [ : - 3 ] in self . selected_fields :
                      continue
   kwargs [ "required" ] = False
                      self . stdout . write ( self . style . NOTICE ( "  Your models have changes that are not yet reflected in a migration, and so won't be applied." ) )
     templatetags_modules_candidates = [ 'django.templatetags' ]
 self . directory_permissions_mode = (  directory_permissions_mode if directory_permissions_mode is not None  else settings . FILE_UPLOAD_DIRECTORY_PERMISSIONS  )
              raise SuspiciousMultipartForm (  "The multipart parser got stuck, which shouldn't happen with"  " normal uploaded files. Check for malicious upload activity;"  " if there is none, report this to the Django developers."  )
              return text
  test_runner_class = get_runner ( settings , self . test_runner )
    possible_sizes = [ x . chunk_size for x in upload_handlers if x . chunk_size ]
 ugettext_lazy = lazy ( ugettext , six . text_type )
  else :
 if self . connection is None :
        def compare_ordering_key ( k ) :
                  self . _post , self . _files = self . parse_file_upload ( self . META , data )
 def default_if_none ( value , arg ) :
              try :
              self . clear ( )
              if isinstance ( value , Field ) :
 key = self . make_key ( key , version = version )
          return value
  else :
     @ classmethod
  def __init__ ( self , content = b'' , * args , ** kwargs ) :
                      offset = offset + len ( self . __starttag_text )
          daemon_kwargs [ 'out_log' ] = options [ 'outlog' ]
          return not ( self == other )
  except ValueError :
          if response . streaming :
from __future__ import unicode_literals
 if not self . port . isdigit ( ) :
                  if field != NON_FIELD_ERRORS and field not in self . fields :
          return True
              yield
 if html_message :
    DEFAULT_ATTACHMENT_MIME_TYPE = 'application/octet-stream'
   def eval ( self , context ) :
   child_loggers = [ ]
   def has_next ( self ) :
 if self . cc :
              raise ValueError ( "Base36 conversion input too large." )
 args = hashlib . md5 ( force_bytes ( key ) )
                      raise ValueError ( 'Unable to convert '  '%r at %r' % ( value , rest ) )
          safe_data = { }
    def color_style ( ) :
   stream = LazyStream ( ChunkIter ( self . _input_data , self . _chunk_size ) )
   def value_from_datadict ( self , data , files , name ) :
   _cached_modules = _cached_modules . union ( new_modules )
 code = 'limit_value'
 django_dir = os . path . normpath ( os . path . join ( os . path . dirname ( django . __file__ ) ) )
  else :
 self . _cache . set ( key , value , self . get_backend_timeout ( timeout ) )
 roots = set ( dir ( cls ) ) & set ( convert )
   result = user_function ( * args , ** kwds )
 if renderer :
 self . error_class = error_class
   def _isdst ( self , dt ) :
 alternative_subtype = 'alternative'
 from django . forms . fields import Field , FileField
          cleaned_data = form . cleaned_data
  except IndexError :
 DELETION_FIELD_NAME = 'DELETE'
 self . pos = 0
 self . validate_key ( key )
   def write_items ( self , handler ) :
          self . _archive . close ( )
 while i < len ( subject ) and subject [ i ] != c :
 self . json_kwargs = self . options . copy ( )
               ttl = force_text ( ttl )
 if self . verbosity > 1 :
  return self . _fname
      if settings . TEMPLATE_DEBUG and display_name :
      pass
              self . _delete ( key )
              retval = self . tokens [ self . pos ]
           fks_to_parent = [  f for f in opts . fields  if isinstance ( f , ForeignKey )  and ( f . rel . to == parent_model  or f . rel . to in parent_model . _meta . get_parent_list ( ) )  ]
 return do_ntranslate ( singular , plural , number , 'ngettext' )
 opts = model . _meta
      help = "Runs a Python interactive interpreter. Tries to use IPython or bpython, if one of them is available."
 final_path = abspathu ( join ( base , * paths ) )
          return mark_safe ( six . text_type ( value ) )
          cache = caches [ settings . CACHE_MIDDLEWARE_ALIAS ]
 supports_microseconds = False
                  yield field , list ( ValidationError ( errors ) )
                      invalid_apps . append ( app_name )
   def as_p ( self ) :
 if ch != '?' or escaped :
                      self . set_cdata_mode ( tag )
          return ''
                  current_fields . append ( ( key , value ) )
 for code in ( lang_code , generic_lang_code ) :
  else :
  def __init__ ( self , request = None ) :
  if not UserModel . _default_manager . exists ( ) and options . get ( 'interactive' ) :
 from django . utils . functional import lazy
          if key not in self :
      pass
 def errors ( self ) :
              output . extend ( f . post_create_sql ( style , model . _meta . db_table ) )
 super ( DebugParser , self ) . extend_nodelist ( nodelist , node , token )
    @ staticmethod
     class SplitDateTimeWidget ( MultiWidget ) :
 while t > 0 :
                      args . append ( ( False , Variable ( constant_arg ) . resolve ( { } ) ) )
  else :
 self . _add_fallback ( )
    if var . endswith ( '.' ) :
 for c in reversed ( self . __class__ . __mro__ ) :
  except ValueError :
              if self . _has_expired ( key ) :
              request = record . request
 using = options . get ( 'database' )
  if isinstance ( s , bytes ) or ( isinstance ( s , Promise ) and s . _delegate_bytes ) :
 import warnings
 from email . header import Header
 for message in message :
              the_path , info = urlretrieve ( url , path . join ( tempdir , filename ) )
              priority = 1.0
  elif value in ( False , 'False' , '0' ) :
                          cursor . execute ( line )
  self . backout . append ( self . pointer )
  if val == [ ] :
  for line in chunk_buffer :
 self . _done = False
from __future__ import unicode_literals
   else :
 token = parser . next_token ( )
   else :
                  raise ValidationError ( self . error_messages [ 'invalid_date' ] , code = 'invalid_date' )
 errors . extend ( _check_middleware_classes ( ** kwargs ) )
                  pass
 self . _template_response_middleware = [ ]
                      if self . selected_fields is None or field . attname in self . selected_fields :
   except KeyboardInterrupt :
              _ = { }
              timeout = self . default_timeout
          raise self . error ( token , "Empty block tag" )
 widget = widget or self . widget
 if self . setting :
    return None
   return result
 result = block . nodelist . render ( context )
 return strip_tags ( value )
  else :
  t = getattr ( _active , "value" , None )
     def dumps ( obj , key = None , salt = 'django.core.signing' , serializer = JSONSerializer , compress = False ) :
                  return bytes ( s )
  def __init__ ( self , redirect_to , * args , ** kwargs ) :
  if self . feed [ 'feed_copyright' ] is not None :
 func . __doc__ = doc
          return ''
              data = self . read ( chunk_size )
    def ngettext_lazy ( singular , plural , number = None ) :
  MAXSIZE = sys . maxsize
  self . connection = None
 import zlib
 dir_name , file_name = os . path . split ( name )
              self . validators . append ( validators . MinValueValidator ( min_value ) )
  def handle_raw_input ( self , input_data , META , content_length , boundary , encoding = None ) :
   save . alters_data = True
                  serializers . get_serializer ( format )
          return "<TranslatableFile: %s>" % os . sep . join ( [ self . dirpath , self . file ] )
   return commands
    callable = callable
   if daemonize :
 if isinstance ( value , bool ) :
  except AttributeError :
   def __setitem__ ( self , header , value ) :
              if key not in default_settings :
 self . managed = True
          self . object_list = object_list
      def addQuickElement ( self , name , contents = None , attrs = None ) :
   if header_end == - 1 :
   def delete_many ( self , keys , version = None ) :
              body_msg = msg
    def sql_destroy_indexes ( app_config , style , connection ) :
 if run_syncdb and executor . loader . unmigrated_apps :
   patterns = [ pattern for ( possibility , pattern , defaults ) in possibilities ]
                      if not self . compile_filter_error ( token , e ) :
 return self . _size
  return obj_pk
                  data [ field . name ] = field . to_python ( field_value )
 writer = MigrationWriter ( new_migration )
 if upto != start :
 import re
  phone2numeric = allow_lazy ( phone2numeric )
              return timesince ( value , arg )
                      m = Media ( )
  except ( ValueError , TypeError ) :
   for message in messages :
              options , args = parser . parse_args ( argv [ 2 : ] )
 readinto = property ( lambda self : self . file . readinto )
   def check_for_migrations ( app_config , connection ) :
   key_salt = force_bytes ( key_salt )
    @ property
          self . filter_expr , self . nodelist = filter_expr , nodelist
   def end_index ( self ) :
 if change == FILE_MODIFIED :
 from django . db import connections , DEFAULT_DB_ALIAS
                  if settings . DEBUG :
 return True
 _func_defaults = "func_defaults"
  for part in plural :
          meta = '<could not parse>'
      def handle_merge ( self , loader , conflicts ) :
          parser . add_argument ( '--all' , action = 'store_true' , dest = 'all' , default = False ,  help = 'Display all settings, regardless of their value. '  'Default values are prefixed by "###".' )
              self . _current [ field . name ] = value
 re_tag = re . compile ( r'<(/)?([^ ]+?)(?:(\s*/)| .*?)?>' , re . S )
 msg = SafeMIMEText ( self . body , self . content_subtype , encoding )
 def __init__ ( self , title , link , description , language = None , author_email = None ,  author_name = None , author_link = None , subtitle = None , categories = None ,  feed_url = None , feed_copyright = None , feed_guid = None , ttl = None , ** kwargs ) :
 from django . utils . module_loading import import_string
      input_type = 'hidden'
              reloader_thread ( )
          ch , escaped = next ( input_iter )
   elif name == 'id' :
   def id_for_label ( self , id_ ) :
          _translations [ language ] = DjangoTranslation ( language )
       def from_current_timezone ( value ) :
    def __deepcopy__ ( self , memo ) :
 from django . views . debug import ExceptionReporter , get_exception_reporter_filter
              params , varargs , varkw , defaults = getargspec ( func )
 with self . _lock . writer ( ) :
              exc_type = type ( exc )
                                      for sql in custom_sql :
          warnings . warn (  "django.utils.tzinfo.FixedOffset will be removed in Django 1.9. "  "Use django.utils.timezone.get_fixed_timezone instead." ,  RemovedInDjango19Warning )
 _url_drive_re = re . compile ( '^([a-z])[:|]' , re . I )
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_fk_field() method' )
  except Exception as e :
 full_path = self . path ( name )
              try :
   def add_move ( move ) :
  return result
 if isinstance ( error , ValidationError ) :
              raise ValidationError ( _ ( 'Enter a valid IPv4 or IPv6 address.' ) , code = 'invalid' )
          return super ( Error , self ) . __init__ ( ERROR , * args , ** kwargs )
          sql_files . append ( os . path . join ( app_dir , "%s.%s.sql" % ( opts . model_name , backend_name ) ) )
      return _trans . get_language_from_path ( path )
 bits = token . split_contents ( )
       def get_format_modules ( lang = None , reverse = False ) :
 val = self . _cache . get ( key )
              full_statement . append ( '    %s%s' % ( line , ',' if i < len ( table_output ) - 1 else '' ) )
     def deactivate_all ( ) :
                      arg_vals . append ( mark_safe ( arg ) )
          if self . old_timezone is None :
              assert not isinstance ( bcc , six . string_types ) , '"bcc" argument must be a list or tuple'
 key = self . cache_key ( name , dirs )
 from django . core . mail import get_connection
  def __init__ ( self ) :
             self . _regex = regex
          reversed_text = ' reversed' if self . is_reversed else ''
           msgs = '\n' . join ( dropwhile ( len , msgs . split ( '\n' ) ) )
  elif command . verbosity > 0 :
  else :
 self . file = TemporaryUploadedFile ( self . file_name , self . content_type , 0 , self . charset , self . content_type_extra )
     class MemcachedCache ( BaseMemcachedCache ) :
 self . _unget_history = [ ]
  return proxy
 inner . update ( password . translate ( hmac . trans_36 ) )
  return value
     class JsLexer ( Lexer ) :
              raise TemplateSyntaxError ( 'The %r option was specified more '  'than once.' % option )
              raise CommandError ( "App '%s' does not have migrations (so squashmigrations on it makes no sense)" % app_label )
  return form
   if not response . has_header ( 'Last-Modified' ) :
 if not prefix :
 ser_fmts = serializers . get_public_serializer_formats ( ) if ser_fmt is None else [ ser_fmt ]
  return result
 if decompress :
              del self . _cache [ key ]
                  raise CommandError ( '"%s" is not a valid port number '  'or address:port pair.' % options [ 'addrport' ] )
   def get ( self , key , default = None , version = None ) :
  _active . value = translation ( language )
                              return settings . TEMPLATE_STRING_IF_INVALID % self . var
 if option in options :
     if self . paths_to_remove :
                          if hasattr ( field_value , '__iter__' ) and not isinstance ( field_value , six . text_type ) :
  return result
 comment_lineno_cache = t . lineno
   def handle_app_config ( self , app_config , ** options ) :
     class Widget ( six . with_metaclass ( MediaDefiningClass ) ) :
 key = force_bytes ( settings . SECRET_KEY )
                  if e . errno == errno . EEXIST :
from __future__ import unicode_literals
   def __iter__ ( self ) :
  if data_list [ 1 ] in self . empty_values :
  return klass
  if domain is not None :
 if not email_message . recipients ( ) :
   def create_variable_node ( self , filter_expression ) :
              for match in regexes [ state ] . finditer ( text , start ) :
    if opts . model :
 for attr in _urllib_parse_moved_attributes :
    def _iterkeys ( self ) :
 self . name , self . value = name , value
                               break
   def __str__ ( self ) :
 has_bz2 = True
    else :
  from lib2to3 import fixer_base
  def to_python ( self , value ) :
 bits = token . split_contents ( )
                  qs = self . queryset
  if not want_unicode :
          self . command_stack . pop ( )
                          app_config = apps . get_app_config ( app_label )
              exts = extensions if extensions else [ 'html' , 'txt' ]
  except OSError as e :
   def __repr__ ( self ) :
 cache_key += '.%s' % tz_name . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' ) . replace ( ' ' , '_' )
  return backend_cls ( location , params )
                  del obj_dict [ attr ]
     class PyLibMCCache ( BaseMemcachedCache ) :
 return _generate_cache_key ( request , request . method , headerlist , key_prefix )
               raise NotImplementedError (  "Subclasses of AppCommand must provide"  "a handle_app_config() method." )
  elif not isinstance ( value , ConvertingList ) and isinstance ( value , list ) :
                  values = reversed ( values )
    @ lru_cache . lru_cache ( maxsize = 1000 )
     def include_is_allowed ( filepath ) :
 dictreprs = ', ' . join ( repr ( d ) for d in self . dicts )
 stream = open ( output , 'w' ) if output else None
                  return expanded_template
 singular = [ ]
 comment = [ ]
      def __init__ ( self , class_name , old_method_name , new_method_name , deprecation_warning ) :
  except TemplateDoesNotExist :
    DjangoSafeDumper . add_representer ( decimal . Decimal , DjangoSafeDumper . represent_decimal )
 import os
          return value
  for char in key :
 key = bytes_to_text ( key , self . encoding )
          to_unicode = lambda s : force_text ( s , strings_only = True )
  if i >= len ( subject ) :
          timeout = self . get_backend_timeout ( timeout )
    style . ERROR_OUTPUT = style . ERROR
          value = super ( TypedMultipleChoiceField , self ) . clean ( value )
                      self . unlink ( self . name )
 if protocol != 'both' and unpack_ipv4 :
  except NameError :
              if not callable ( view_func ) :
 logger . handlers = [ ]
      def __init__ ( self , obj , * args ) :
   dirs . extend ( list ( settings . FIXTURE_DIRS ) )
                  if hasattr ( request , 'urlconf' ) :
 self . args = args
 if ( connections [ db ] . features . needs_datetime_string_cast and not  isinstance ( current_expires , datetime ) ) :
   def render ( self , context ) :
  warnings . warn (  "The django.forms.util module has been renamed. "  "Use django.forms.utils instead." , RemovedInDjango19Warning , stacklevel = 2 )
   def __iter__ ( self ) :
   class Command ( AppCommand ) :
 if hasattr ( value , 'close' ) :
                           context_match = context_re . match ( imatch . group ( 2 ) )
                      extracted = self . _archive . extractfile ( member )
 if constant_arg :
  with io . open ( potfile , 'a' , encoding = 'utf-8' ) as fp :
 from django . utils . encoding import force_bytes
          _anonymous_ = [ '_offset_union' ]
    def get_language_bidi ( ) :
 for field in self . fields :
          module_path , class_name = dotted_path . rsplit ( '.' , 1 )
          return '\n' . join ( sql_flush ( self . style , connections [ options [ 'database' ] ] , only_django = True ) )
  if filters :
 import time
 try :
  class HTMLParser ( _html_parser . HTMLParser ) :
      def __init__ ( self , template_string , origin = None , name = None ) :
 if not self . leave_locale_alone :
          httpd_cls = type ( str ( 'WSGIServer' ) , ( socketserver . ThreadingMixIn , WSGIServer ) , { } )
 self . app_label = 'django_cache'
              os . chmod ( dst , mode )
              self . inverse_match = inverse_match
 import base64
 from django . utils . html import format_html , format_html_join , escape
 token = parser . next_token ( )
                      shutil . rmtree ( path_to_remove ,  onerror = rmtree_errorhandler )
 def body ( self ) :
          hfile = msvcrt . get_osfhandle ( _fd ( f ) )
   def get_text_list ( list_ , last_word = ugettext_lazy ( 'or' ) ) :
      def __init__ ( self , * args , ** kwargs ) :
   class EmailBackend ( BaseEmailBackend ) :
from __future__ import unicode_literals
              self . _delete ( fname )
              rv = level
              self [ key ] = result
   endblock = parser . next_token ( )
  def __init__ ( self , input_date_formats = None , input_time_formats = None , * args , ** kwargs ) :
 from django . db import connections , DEFAULT_DB_ALIAS
          return TemplateSyntaxError ( msg )
 pass
                  return default
 readline = property ( lambda self : self . file . readline )
 @ stringfilter
              return result
 TOKEN_BLOCK = 2
          parser . add_argument ( 'args' , metavar = 'app_label[.ModelName]' , nargs = '*' ,  help = 'Restricts dumped data to the specified app_label or app_label.ModelName.' )
          self . language = language
   def _get_filename ( self ) :
      def __init__ ( self , * args , ** kwargs ) :
      if PY3 :
 while i < len ( subject ) and subject [ i ] != subject [ p ] :
              stamp = time . mktime ( tt )
          e = TemplateSyntaxError ( msg )
 return http . QueryDict ( raw_query_string , encoding = self . _encoding )
 import sys
    class Http404 ( Exception ) :
 return [ globalpath ] + list ( settings . LOCALE_PATHS )
 import tempfile
      def get_quantifier ( ch , input_iter ) :
 break
 pass
  except KeyError :
   def _has_changed ( self , initial , data ) :
   return path_info . decode ( UTF_8 )
   def __call__ ( self , value ) :
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
              for fixture_label in fixture_labels :
          key = self . make_key ( key , version = version )
 from django . utils import six
 from django . utils . text import normalize_newlines
 if extend :
 self . _app_dict = { }
 if not hasattr ( obj , "_meta" ) :
 with open ( writer . path , "wb" ) as fh :
  return self . _get_page ( self . object_list [ bottom : top ] , number , self )
   def __nonzero__ ( self ) :
 if related_att is not None :
                   query_string = query_string . decode ( )
                   raise ImportError
  url = 'mailto:%s@%s' % ( local , domain )
 value = normalize_newlines ( value )
  if i >= self . initial_form_count ( ) and not form . has_changed ( ) :
      @ lru_cache . lru_cache ( maxsize = None )
   stream = self . _stream
                  try :
  register = Library ( )
  self . help_text = field . help_text or ''
 filename = os . path . basename ( path )
   else :
                  files . append ( entry )
      def constant_time_compare ( val1 , val2 ) :
              if new_mod is None :
 from ctypes import ( sizeof , c_ulong , c_void_p , c_int64 ,  Structure , Union , POINTER , windll , byref )
   current_fields . sort ( key = lambda x : x [ 1 ] . creation_counter )
   class Choice ( list ) :
          return get_git_changeset . cache
  from django . forms . utils import *
              host = self . META [ 'HTTP_HOST' ]
              if self . to_field_name :
      def advance_iterator ( it ) :
 thread . start_new_thread ( main_func , args )
 from django . core . files . uploadhandler import StopUpload , SkipFile , StopFutureHandlers
          length = int ( arg )
 from django . core . management . base import BaseCommand , CommandError
                  error = error . error_dict
   extra_attrs = self . widget_attrs ( widget )
  result . sort ( key = lambda k : k [ 1 ] , reverse = True )
  for sql_file in sql_files :
   def widget_attrs ( self , widget ) :
                  self . fetch_command ( options . args [ 0 ] ) . print_help ( self . prog_name , options . args [ 0 ] )
                       migrations_directory = os . path . dirname ( writer . path )
   def flush ( self ) :
                      attrs_plus [ 'id' ] += '_{0}' . format ( i )
 try :
                  value = related . natural_key ( )
              localedir = os . path . join ( app_config . path , 'locale' )
              continue
 if autoescape and not safe_input :
                  continue
                          translators_comment_start = lineno
              del self . _post
    def get_template_from_string ( source , origin = None , name = None ) :
   def write ( self , val ) :
  if args :
 attrs . pop ( key )
   def eval ( self , context ) :
       def constant_time_compare ( val1 , val2 ) :
 return supported
      def delete ( self , name ) :
                  priority = float ( priority )
      fmt = get_format ( 'DATE_FORMAT' )
  s = s . replace ( '\\' , '\\\\' )
 from django . conf import settings
                  output . append ( "%s = %s  ###" % ( key , user_settings [ key ] ) )
          try :
 from django . core . management . color import no_style
   if locations :
              self . settings_exception = exc
              obj = self . _new_instance ( self . children , self . connector ,  self . negated )
                          self . stdout . write ( "    - %s\n" % operation . describe ( ) )
     class EmailMessage ( object ) :
                  bits . append ( None )
           raise EntitiesForbidden ( name , None , base , sysid , pubid , notation_name )
      def load_handler ( path , * args , ** kwargs ) :
 return force_str ( '<%s\npath:%s,\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>' %  ( request . __class__ . __name__ ,  path ,  six . text_type ( get ) ,  six . text_type ( post ) ,  six . text_type ( cookies ) ,  six . text_type ( meta ) ) )
              return os . path . samefile ( src , dst )
                      self . stdout . write ( errors )
   else :
 def is_hidden ( self ) :
              self . _callback = callback
   if str ( '\n' ) in value or str ( '\r' ) in value :
   def __repr__ ( self ) :
  _iterkeys = "keys"
  _func_closure = "__closure__"
     return Operator
 import time
                      resolved_args , resolved_kwargs = self . get_resolved_arguments ( context )
  except OSError :
              k , v = x . split ( '=' , 1 )
   def render ( self , name , value , attrs = None , choices = ( ) ) :
 if self . field . show_hidden_initial :
  _BASE64_DECODE_ERROR = TypeError if six . PY2 else binascii . Error
 result = self . configurator . convert ( value )
                              self . stdout . write ( "    Processing %s.%s model\n" % ( app_name , model . _meta . object_name ) )
 deactivate = deactivate_all = lambda : None
                          if f == '__pycache__' :
  new_name = '%s_%d' % ( new_name , num )
 handler . addQuickElement ( "name" , self . feed [ 'author_name' ] )
 for i , v in enumerate ( value ) :
 self . first = True
 getattr ( combined , 'add_' + name ) ( getattr ( other , '_' + name , None ) )
      def get_unbound_function ( unbound ) :
  else :
   os . chmod ( path , stat . S_IWRITE )
  def _get_num_pages ( self ) :
 self . _non_form_errors = None
  sign = '-' if offset < 0 else '+'
   def render ( self , name , value , attrs = None ) :
                  return template . render ( context . new ( values ) )
    def no_style ( ) :
  def __init__ ( self , takes_context , args , kwargs ) :
          super ( FloatField , self ) . validate ( value )
     def get_valid_filename ( s ) :
     return OrderedDict ( fields )
 return iter ( getattr ( d , _iterlists ) ( ** kw ) )
    opts = tuple ( s for s in styles if s in opt_dict . keys ( ) )
          csrf_token = context . get ( 'csrf_token' , None )
 def id_for_label ( self ) :
  num_pages = property ( _get_num_pages )
              rawdata = self . rawdata
  if settings . DEBUG :
   from django . http . response import REASON_PHRASES as STATUS_CODE_TEXT
   @ property
                  return lookup_view
 parser . add_argument ( '--ignore' , '-i' , action = 'append' , dest = 'ignore_patterns' ,  default = [ ] , metavar = 'PATTERN' ,  help = 'Ignore files or directories matching this glob-style pattern. '  'Use multiple times to ignore more.' )
  both_after = [  Tok ( "other" , r"." ) ,  ]
                   raise ViewDoesNotExist (  "Could not import '%s.%s'. View is not callable." %  ( mod_name , func_name ) )
  candidate_subs = text_kwargs
  else :
  return int ( value )
          value = force_str ( value )
 self . setFeature ( handler . feature_external_pes , False )
 from __future__ import unicode_literals
 tables = connection . introspection . table_names ( )
              return False
 if auto_id and 'id' not in attrs and 'id' not in widget . attrs :
  return node
  if f . name in cleaned_data :
 while ch != '}' :
                      return ''
 app_label , migration_name = options [ 'app_label' ] , options [ 'migration_name' ]
                      return ( fp . read ( ) . decode ( settings . FILE_CHARSET ) , filepath )
 title = ''
                   data = BytesIO ( self . _body )
          return "<Block Node: %s. Contents: %r>" % ( self . name , self . nodelist )
          return value [ 0 ]
 global _serializers
          return [ ]
   def autocomplete ( self ) :
 try :
 so = open ( out_log , 'a+' , buffering )
 while len ( digits ) <= abs ( exponent ) :
                          link = cache_get ( key )
   def decompress ( self , value ) :
          iteritems = _iteritems
   def encode ( self , i ) :
              return True
    class Literal ( TokenBase ) :
 try :
  cc = dict ( _to_tuple ( el ) for el in  cc_delim_re . split ( response [ 'Cache-Control' ] ) )
 def __init__ ( self , subject ) :
   def add_arguments ( self , parser ) :
 def truncatechars_html ( value , arg ) :
          return self . paginator . validate_number ( self . number + 1 )
 from xml . sax import handler
 cmatches = constant_re . findall ( t . contents )
 LOCK_NB = 0x1
              for app_label in bad_app_labels :
              if form . is_bound :
import warnings
                      cls . __bytes__ = cls . __bytes_cast
  def add_arguments ( self , parser ) :
 if not self . timezone :
          return File ( open ( self . path ( name ) , mode ) )
   def __call__ ( self , template_name , template_dirs = None ) :
              return raw_data
  else :
 def load ( parser , token ) :
          language_code = get_language ( )
  if r . endswith ( '+00:00' ) :
   if six . PY3 :
 if limit_choices_to is not None :
                      if not table_name_filter ( table_name ) :
 parser = self . create_parser ( argv [ 0 ] , argv [ 1 ] )
               value = self . _resolve_lookup ( context )
                  for path in paths :
 try :
 from django . utils . synch import RWLock
   def decr_version ( self , key , delta = 1 , version = None ) :
     def Deserializer ( object_list , ** options ) :
  return data . get ( name , None )
  if number > self . num_pages :
 try :
  return path
              categories = [ force_text ( c ) for c in categories ]
  except ImportError :
    if '.' not in var and 'e' not in var . lower ( ) :
              raise ValueError ( "@python_2_unicode_compatible cannot be applied "  "to %s because it doesn't define __str__()." %  klass . __name__ )
  elif not isinstance ( sep , str ) :
    def save_instance ( form , instance , fields = None , fail_message = 'saved' ,  commit = True , exclude = None , construct = True ) :
          main_value_pair , params = parse_header ( line )
              self . close ( )
  else :
 from django . db . migrations . executor import MigrationExecutor
     class Resolver404 ( Http404 ) :
              return
  if bases == ( BaseModelForm , ) :
   def receive_data_chunk ( self , raw_data , start ) :
 def truncatechars ( value , arg ) :
 return escape ( value )
 if len ( bits ) >= 4 and bits [ - 2 ] == "from" :
 from django . utils . encoding import force_text
                      self . stdout . write ( self . style . MIGRATE_LABEL ( "  Unapply all migrations: " ) + "%s" % ( targets [ 0 ] [ 0 ] , ) )
 if not os . path . isfile ( init_path ) :
   def skip_past ( self , endtag ) :
   writer = MigrationWriter ( new_migration )
   year = dt . year
 node = CycleNode ( values )
 if self_closing or tagname in html4_singlets :
   def reraise ( tp , value , tb = None ) :
          raise NotImplementedError ( 'subclasses of BaseArchive must provide a list() method' )
 from django . core . cache import caches
      help = "Starts a lightweight Web server for development."
  target_var = bits [ - 1 ]
  whole_digits = digits - decimals
              r = o . isoformat ( )
  try :
    def dst ( self , dt ) :
    @ register . filter ( is_safe = False )
  def configure ( self ) :
              self . active_writers -= 1
    if is_relation :
 if last_bit :
  while current_len <= length :
   def copy ( self ) :
   def sign ( self , value ) :
      def print_ ( * args , ** kwargs ) :
          return singular
           buffer_ = None
   def getvalue ( self ) :
    def smart_bytes ( s , encoding = 'utf-8' , strings_only = False , errors = 'strict' ) :
              val = None
  except ( OSError ) :
  return serializer ( ) . loads ( data )
    for node in compiled_parent . nodelist :
  for name , field in self . fields . items ( ) :
      table_names = [ model . _meta . db_table for model in self . models ]
      input_type = 'email'
   def iri_to_uri ( iri ) :
 message = _ ( 'Enter a valid value.' )
 is_compressed = True
     ADDRESS_HEADERS = set ( [  'from' ,  'sender' ,  'reply-to' ,  'to' ,  'cc' ,  'bcc' ,  'resent-from' ,  'resent-sender' ,  'resent-to' ,  'resent-cc' ,  'resent-bcc' ,  ] )
   class Tags ( object ) :
   def __text_cast ( self ) :
                      return
 self . timeout = timeout
                  wrapped_callback = self . make_view_atomic ( callback )
    class WSGIHandler ( base . BaseHandler ) :
 return res
  self . stream = options . pop ( "stream" , six . StringIO ( ) )
   def _reverse_with_prefix ( self , lookup_view , _prefix , * args , ** kwargs ) :
          try :
 if self . can_delete :
  known_models . add ( model )
 result . widget = copy . deepcopy ( self . widget , memo )
 self . prog_name = os . path . basename ( self . argv [ 0 ] )
    class EscapeText ( six . text_type , EscapeData ) :
          raise ValueError ( e )
    def tz ( request ) :
              fd , name = tempfile . mkstemp ( suffix = suffix , prefix = prefix , dir = dir )
 result = datetime . datetime ( year , month , day , hour , min , sec )
 count2 = ( since - ( seconds * count ) ) // seconds2
   def list ( self , * args , ** kwargs ) :
                      value = None
 self . app_label = options . get ( 'app_label' )
                  final_attrs = dict ( final_attrs , id = '%s_%s' % ( id_ , i ) )
    def xreadlines ( self ) :
    class RemovedInDjango19Warning ( DeprecationWarning ) :
          nodelist_empty = parser . parse ( ( 'endfor' , ) )
                   raise TemplateSyntaxError (  "'%s' received unexpected keyword argument '%s'" %  ( name , param ) )
 raise NotImplementedError ( 'subclasses of LazyObject must provide a _setup() method' )
  cache_key = ( format_type , lang )
 form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
    forms = ' ' . join ( form . as_table ( ) for form in self )
   regex = property ( _get_regex , _set_regex )
  except ImportError :
  except IOError as e :
     class TimeFormat ( Formatter ) :
          return None
  else :
         @ register . filter ( expects_localtime = True , is_safe = False )
 self . verbosity = int ( options . get ( 'verbosity' ) )
  logging_config_func ( DEFAULT_LOGGING )
          raise ValueError ( "%r is not in a valid HTTP date format" % date )
 raise
              context . render_context [ BLOCK_CONTEXT_KEY ] = BlockContext ( )
 return lambda text : colorize ( text , opts , ** kwargs )
  try :
    def __exit__ ( self , exc_type , exc_value , traceback ) :
 pending_references = { }
                  self . active_readers += 1
          return ord ( bs [ 0 ] )
          _active . value = timezone
                  if errors :
                      try :
 if key_func is not None :
          sep = len ( hextet [ 0 ] . split ( ':' ) ) + len ( hextet [ 1 ] . split ( ':' ) )
 return size
 i = i + 1
              field_type = connection . introspection . get_field_type ( row [ 1 ] , row )
          raise NotImplementedError ( 'Subclasses must define this method.' )
 ext = ext [ : 255 ]
  except ( LookupError , TypeError ) :
 self . origin = origin
                  b64encoded = b64encoded . decode ( 'latin1' )
 output , errors , status = popen_wrapper ( args )
              if isinstance ( other , Promise ) :
      BaseRunserverCommand = Command
  elif self . reason_phrase is None :
   @ property
     def pgettext ( context , message ) :
  def __setattr__ ( self , name , value ) :
    def assertRaisesRegex ( self , * args , ** kwargs ) :
   else :
      return "'%s'" % dirname if dirname else 'absolute path'
  httpd = httpd_cls ( server_address , WSGIRequestHandler , ipv6 = ipv6 )
   def flatatt ( attrs ) :
from __future__ import unicode_literals
          super ( DebugLexer , self ) . __init__ ( template_string , origin )
 field_name = disposition [ 'name' ] . strip ( )
 try :
   def create_var ( self , value ) :
  except Exception as e :
 def rendered_content ( self ) :
 from django . utils import six
  if i >= len ( subject ) :
  else :
          BaseCache . __init__ ( self , params )
  RE_DATE = re . compile ( r'(\d{4})-(\d\d?)-(\d\d?)$' )
      def filter ( self , record ) :
 handler . startElement ( "channel" , self . root_attributes ( ) )
              path = join ( os . getcwdu ( ) , path )
 self . msgattrib_options = self . msgattrib_options [ : ] + [ '--no-location' ]
               if condition is not None :
          if not self . _is_rendered :
  option_list = ( )
          result = self . __class__ ( '' , mutable = True , encoding = self . encoding )
   else :
 while len ( line ) > max_width :
 from django . db . migrations . autodetector import MigrationAutodetector
 import glob
 if id_ :
 if color_settings :
   finally :
 import time
          return VariableNode ( filter_expression )
              for bit in self . lookups :
    class JsonResponse ( HttpResponse ) :
 if self . verbatim and block_content == self . verbatim :
   @ property
              self . object_list = list ( self . object_list )
   class Storage ( object ) :
       def __init__ ( self , _subtype = 'mixed' , boundary = None , _subparts = None , encoding = None , ** _params ) :
                  return func ( context , self . first )
 parser . add_argument ( '--dry-run' , action = 'store_true' , dest = 'dry_run' , default = False ,  help = "Just show what migrations would be made; don't actually write them." )
  return dec
  if self . field . required and hasattr ( self . form , 'required_css_class' ) :
      def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :
              if not self . _has_expired ( key ) :
  self . __language = language
              return ( t [ 0 ] . lower ( ) , t [ 1 ] )
 try :
                      raise ValueError ( "MultiValueDict.update() takes either a MultiValueDict or dictionary" )
 import warnings
 if pattern . app_name :
                                  file_ . close ( )
   class DebugLexer ( Lexer ) :
              return ''
    extension_map = {  '.tar' : TarArchive ,  '.tar.bz2' : TarArchive ,  '.tar.gz' : TarArchive ,  '.tgz' : TarArchive ,  '.tz2' : TarArchive ,  '.zip' : ZipArchive ,  }
              raise AttributeError ( self . warning )
 def __init__ ( self , META , input_data , upload_handlers , encoding = None ) :
                      self . can_read . release ( )
 I18N_MODIFIED = 2
 def from_dict ( cls , file_dict ) :
          _load_serializers ( )
  try :
                  self . test_runner = arg [ len ( option ) : ]
   def is_protected_type ( obj ) :
 import shutil
          return bytes ( s )
  return get_callable ( callback ) , { }
      try :
 return ( RAW , { } , stream )
 default_error_messages = {  'invalid_date' : _ ( 'Enter a valid date.' ) ,  'invalid_time' : _ ( 'Enter a valid time.' ) ,  }
  else :
   def get_backend_timeout ( self , timeout = DEFAULT_TIMEOUT ) :
 label = bf . label_tag ( label ) or ''
    def get_complete_version ( version = None ) :
 self . _base_set ( 'set' , key , value , timeout )
     class BaseConfigurator ( object ) :
 if six . PY2 :
 super ( NoArgsCommand , self ) . __init__ ( )
 self . keyOrder . remove ( result [ 0 ] )
   attachment = SafeMIMEMessage ( content , subtype )
                  timeout = int ( timeout )
    EMPTY_VALUES = ( None , '' , [ ] , ( ) , { } )
          lang = get_language ( )
 def split_leading_dir ( self , path ) :
      import gettext
   def value_from_datadict ( self , data , files , name ) :
              self . set ( key , value , timeout = timeout , version = version )
  def __init__ ( self , obj , m2m_data = None ) :
           fd = os . open ( new_file_name , ( os . O_WRONLY | os . O_CREAT | getattr ( os , 'O_BINARY' , 0 ) |  ( os . O_EXCL if not allow_overwrite else 0 ) ) )
                  return self . __text_cast ( )
    def _load_serializers ( ) :
    def handle_extensions ( extensions = ( 'html' , ) , ignored = ( 'py' , ) ) :
   def handle_fk_field ( self , obj , field ) :
 result . append ( ch )
 return header . lower ( ) in self . _headers
  if exctype is not WindowsError or 'Access is denied' not in str ( value ) :
 if ch in "iLmsu#" :
    def _itervalues ( self ) :
          self . db_table = table
              output = next ( self . _producer )
      def close ( self ) :
 @ stringfilter
 from django . utils . six . moves . urllib . parse import quote , unquote , urlsplit , urlunsplit
 self . _num_pages = self . _count = None
                               root , = nonlocal_root
                        self . prepend_token ( token )
      help = "Creates the tables needed to use the SQL cache backend."
 original_path = os . path . join ( tmpdir , 'original' )
                  if stream :
    self . xml . startElement ( "object" , attrs )
   else :
                  local , domain = middle . rsplit ( '@' , 1 )
 six . reraise ( ImproperlyConfigured , ImproperlyConfigured ( msg ) ,  sys . exc_info ( ) [ 2 ] )
 return bool ( self . changed_data )
          return all ( w . is_hidden for w in self . widgets )
                   result . append ( "." )
 outer . update ( password . translate ( hmac . trans_5C ) )
 namemap = options . get ( 'with' , { } )
          return None
          try :
 if data [ last : last + 1 ] == b'\r' :
 from django . db import router , DEFAULT_DB_ALIAS
 from django . utils import six
              self . stdout . write ( app_name , self . style . MIGRATE_LABEL )
 if not commit :
    def _i18n_cache_key_suffix ( request , cache_key ) :
 if k in seen :
  __len__ = new_method_proxy ( len )
  if self . verbosity >= 2 :
 output = self . nodelist . render ( context )
   if self . empty :
      def __init__ ( self , host , * args , ** kwargs ) :
              self . writer_leaves ( )
  finally :
 list_ = [ bytes_to_text ( elt , self . encoding ) for elt in list_ ]
 def __init__ ( self , file , field_name , name , content_type , size , charset , content_type_extra = None ) :
 data = serializer ( ) . dumps ( obj )
 import io
 parser . delete_first_token ( )
       mime_type = 'application/atom+xml; charset=utf-8'
 if len ( bits ) == 4 :
     def sql_create ( app_config , style , connection ) :
      import imp
 __M = r'(?P<mon>\w{3})'
     class LocalTimezone ( ReferenceLocalTimezone ) :
                      namespaces [ pattern . namespace ] = ( p_pattern , pattern )
          _dec . __name__ = 'method_decorator(%s)' % decorator . __class__ . __name__
 import warnings
  import django
                      filter_expression = self . compile_filter ( token . contents )
                      pass
 self . cdata_tag = None
  from django . db . models import ForeignKey
 self . waiting_readers = 0
     def load_command_class ( app_name , name ) :
 if not self . is_valid ( ) or not self . can_delete :
      import dummy_threading as threading
                  raise EmptyPage ( 'That page contains no results' )
  else :
   def handle ( self , ** options ) :
  from django . utils import six
  if self . data . hour > 12 :
   for namespace , ( prefix , sub_pattern ) in pattern . namespace_dict . items ( ) :
              try :
                  raise
 from django . template . base import ( Node , NodeList , Template , Context , Library ,  TemplateSyntaxError , VariableDoesNotExist , InvalidTemplateLibrary ,  BLOCK_TAG_START , BLOCK_TAG_END , VARIABLE_TAG_START , VARIABLE_TAG_END ,  SINGLE_BRACE_START , SINGLE_BRACE_END , COMMENT_TAG_START , COMMENT_TAG_END ,  VARIABLE_ATTRIBUTE_SEPARATOR , get_library , token_kwargs , kwarg_re ,  render_value_in_context )
 import warnings
              self . cookies [ key ] [ 'max-age' ] = max_age
          package = import_module ( path )
 self . _view_middleware = [ ]
          self . unpack_ipv4 = unpack_ipv4
     class Info ( CheckMessage ) :
 six . reraise ( MultiPartParserError , MultiPartParserError ( msg ) , sys . exc_info ( ) [ 2 ] )
 add_to_builtins ( 'django.template.loader_tags' )
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
 from django . utils . deprecation import RemovedInDjango19Warning
           six . reraise ( DeserializationError , DeserializationError ( e ) , sys . exc_info ( ) [ 2 ] )
              doy += 1
              self . _urlconf_module = import_module ( self . urlconf_name )
 if os . path . isdir ( app_dir ) :
                   command . stdout . write ( errors )
  class SimpleCookie ( http_cookies . SimpleCookie ) :
              return self . STDOFFSET
   class ManagementForm ( Form ) :
              return debug . technical_500_response ( request , * exc_info )
   else :
  try :
  import hashlib
   def get_dump_object ( self , obj ) :
                            field_type , field_params , field_notes = self . get_field_type ( connection , table_name , row )
  BASE2_ALPHABET = '01'
          return self . get_fqdn ( )
          msg = "%s doesn't look like a module path" % dotted_path
          self . _wrapped = get_storage_class ( ) ( )
          dec_part = dec_part + ( '0' * ( decimal_pos - len ( dec_part ) ) )
 if not commit :
            unhandled_params = unhandled_params [ : - len ( defaults ) ]
   def build_attrs ( self , extra_attrs = None , ** kwargs ) :
 parser . add_argument ( '--nothreading' , action = 'store_false' , dest = 'use_threading' , default = True ,  help = 'Tells Django to NOT use threading.' )
   def remove ( self , item ) :
  if self . addr :
              print ( "Running pre-migrate handlers for application %s" % app_config . label )
   def get ( self , key , otherwise = None ) :
 from django . utils . encoding import force_str , force_text , iri_to_uri
   return output
              return mark_safe ( output )
 from django . utils import six
       self . fields = copy . deepcopy ( self . base_fields )
  return str ( '<%s %s (%s:%s) %s>' ) % (  self . __class__ . __name__ , urlconf_repr , self . app_name ,  self . namespace , self . regex . pattern )
              value = '-' + value
  sys . modules [ __name__ + ".moves.urllib_response" ] = sys . modules [ __name__ + ".moves.urllib.response" ] = Module_six_moves_urllib_response ( __name__ + ".moves.urllib.response" )
   return ( TYPE , outdict , stream )
 if self . save_as_new :
   else :
 from django . conf import settings
                  try :
                  msg . attach ( self . _create_mime_attachment ( * alternative ) )
 use_base_manager = options . get ( 'use_base_manager' )
                      if translators_comment_start is not None and lineno >= translators_comment_start :
 def url_patterns ( self ) :
    def get_serializer ( format ) :
          error = self . data [ i ]
 if self . verbosity >= 2 :
                  self . xml . characters ( smart_text ( related_att ) )
 from django . utils . timezone import get_current_timezone_name
                          if message_context :
    def file_complete ( self , file_size ) :
    @ python_2_unicode_compatible
 form . _errors [ NON_FIELD_ERRORS ] = self . error_class ( [ self . get_form_error ( ) ] )
  try :
  return self . _regex_dict [ language_code ]
 super ( MultiValueField , self ) . __init__ ( * args , ** kwargs )
    result = ":" . join ( hextets )
 for ch in input_iter :
      status_code = 405
  delattr ( obj . __class__ , self . name )
 if t is not None :
 from django . db . migrations . loader import MigrationLoader
 self . m2m_data = m2m_data
                  continue
  app_list = OrderedDict ( ( app_config , None )  for app_config in apps . get_app_configs ( )  if app_config . models_module is not None and app_config not in excluded_apps )
  _tc = http_cookies . SimpleCookie ( )
          return [ ]
  else :
 raise self . source_error ( source , msg )
   def extend_nodelist ( self , nodelist , node , token ) :
              self . __name = name
 space = " "
     def is_library_missing ( name ) :
                          if model not in app_list_value :
              try :
                          try :
 pattern_iter = next_char ( iter ( pattern ) )
  from django . core . management . base import AppCommand
   self . year_none_value = ( 0 , empty_label [ 0 ] )
                  pk_value = form . instance . pk
 def cycle ( parser , token ) :
 if nodelist :
 for attr in _urllib_request_moved_attributes :
  as_form = True
 for obj in PythonDeserializer ( objects , ** options ) :
              return self . limit_choices_to ( )
 exctype , value = exc_info [ : 2 ]
  return decorator ( * args , ** kwargs )
          self . max_length = kwargs . pop ( 'max_length' , None )
 self . _raw_ipv6 = bool ( self . use_ipv6 )
              if type ( result ) in ( ConvertingDict , ConvertingList ,  ConvertingTuple ) :
              return template
              if incremental :
 if age > max_age :
              data = self . to_python ( data )
                          break
                  if field_value is not None :
 return mark_safe ( _helper ( value ) )
 self . method = environ [ 'REQUEST_METHOD' ] . upper ( )
                   writer = MigrationWriter ( migration )
                             meth = cls . __promise__ ( resultclass , k , v )
   else :
  app_list = OrderedDict ( )
          attrs = super ( FloatField , self ) . widget_attrs ( widget )
          lookups = MultiValueDict ( )
           self . sep = force_str ( sep )
 self . pubid = pubid
 if secret is None :
                  migration . branch = migration . ancestry [  ( migration . ancestry . index ( common_ancestor ) + 1 ) :  ]
   from logging import NullHandler
          self . _archive = self . _archive_cls ( file ) ( file )
   class SerializerDoesNotExist ( KeyError ) :
 from django . utils . translation import ugettext_lazy as _
 qn = connection . ops . quote_name
 self . verbosity = options [ 'verbosity' ]
   def latest_post_date ( self ) :
   from PIL import Image
  final_attrs = self . build_attrs ( attrs , name = name )
  if data in seen_data :
  if self . decimal_places is not None and decimals > self . decimal_places :
     class RenameMethodsBase ( type ) :
          if filter_name in self . filters :
                                  self . stdout . write ( "    Installing index for %s.%s model\n" % ( app_name , model . _meta . object_name ) )
 request_repr = '\n{0}' . format ( filter . get_request_repr ( request ) )
 return duplicate
          try :
          return "<%s: %s>" % ( self . __class__ . __name__ , self or "None" )
              return field in self . errors
    class EmailField ( CharField ) :
 def wordwrap ( value , arg ) :
 all_files = [ ]
 class_types = type ,
  if now and not isinstance ( now , datetime . datetime ) :
   def render ( self , context ) :
  else :
    def _iterlists ( self ) :
      return _trans . get_language_from_request ( request , check_path )
 if attrs is None :
      def pbkdf2 ( password , salt , iterations , dklen = 0 , digest = None ) :
                      return True
    if self . merge and not conflicts :
          self . file_name = None
  except TypeError :
 self . format = format if format else None
 from django . utils . six . moves import input
 self . abstract = False
 try :
  else :
  try :
   class Module_six_moves_urllib_parse ( _LazyModule ) :
   prefix = 'django_%s_template_' % self . app_or_project
                      initial_value = self . initial . get ( name , field . initial )
 kwarg_format = match and match . group ( 1 )
                  exhaust ( self . _input_data )
          return '\x1b[%sm' % RESET
 domain_regex = re . compile (    r'(?:[A-Z0-9](?:[A-Z0-9-]{0,247}[A-Z0-9])?\.)+(?:[A-Z]{2,6}|[A-Z0-9-]{2,}(?<!-))$' ,  re . IGNORECASE )
  else :
              sites . append ( site )
  except smtplib . SMTPException :
   def __len__ ( self ) :
  else :
                              file_ , _ , _ = imp . find_module ( module_name , [ entry ] )
              exc_info = sys . exc_info ( )
        try :
 import stat
  current = getattr ( current , bit )
   def H ( self ) :
   self . _regex_dict [ language_code ] = compiled_regex
    def multiple_chunks ( self , chunk_size = None ) :
 self . connection . starttls ( )
              self . full_clean ( )
 break
     class RegexURLResolver ( LocaleRegexProvider ) :
              return host
 if PY3 :
              doublecolon_len += 1
      pass
              return ( ( not pk . editable ) or ( pk . auto_created or isinstance ( pk , AutoField ) )  or ( pk . rel and pk . rel . parent_link and pk_is_not_editable ( pk . rel . to . _meta . pk ) ) )
   def __contains__ ( self , item ) :
                  palette [ role ] = definition
 if only_django :
 return new_context
 def check_1_7_compatibility ( ** kwargs ) :
  except :
     def _find_boundary ( self , data , eof = False ) :
 if isinstance ( s , SafeData ) :
  return args , kwargs
    i = next_space_index ( subject , i )
    self . handle_endtag ( tag . lower ( ) )
          if self . _cull_frequency == 0 :
 if value is None :
          return self . text
  try :
   return True
   def item_attributes ( self , item ) :
  break
       if transaction . get_autocommit ( self . using ) :
              args = [ '"%s"' % arg for arg in args ]
 from django . utils . module_loading import import_string
 return SsiNode ( filepath , parsed )
          return decorator
 if exp is None or exp > time . time ( ) :
  return TimestampSigner ( key , salt = salt ) . sign ( base64d )
          try :
                      attrs [ 'class' ] = self . form . required_css_class
 self . base_fields [ MAX_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
 from django . db import models
   def parse_color_setting ( config_string ) :
  except CommandError :
 return random_module . choice ( value )
  else :
 if self . _count is None :
    if months :
   class Module_six_moves_urllib_error ( _LazyModule ) :
  return msg
          return self . attrs . get ( 'id' , '' )
  else :
          self . max_value , self . min_value = max_value , min_value
 super ( TypedMultipleChoiceField , self ) . __init__ ( * args , ** kwargs )
          def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False ) :
                          queryset = queryset . filter ( pk__in = primary_keys )
              name = self . format ( 'O' )
  MEDIA_TYPES = ( 'css' , 'js' )
 ignore = options . pop ( 'ignorenonexistent' , False )
                  filename = ev . filename
          old_setting = context . autoescape
          for event , node in self . event_stream :
 raise NotImplementedError ( 'subclasses of Deserializer must provide a __next__() method' )
                  if isinstance ( s , bytes ) :
 from django . utils . encoding import force_str
   def handle ( self , ** options ) :
 decimal_separator = get_format ( 'DECIMAL_SEPARATOR' )
  except ValueError :
  if self . max_digits is not None and digits > self . max_digits :
 output = [ format_html ( '<select{0}>' , flatatt ( final_attrs ) ) ]
          if value != self . empty_value :
   if p == 0 :
  elif not isinstance ( content , Message ) :
          return _generate_cache_key ( request , method , headerlist , key_prefix )
  if format not in _serializers :
  return value
          self . _wrapped = self . _setupfunc ( )
  language_code_re = re . compile ( r'^[a-z]{1,8}(?:-[a-z0-9]{1,8})*$' , re . IGNORECASE )
              if mime_encode :
   def is_serious ( self ) :
 inline_re = re . compile ( r"""^\s*trans\s+((?:"[^"]*?")|(?:'[^']*?'))(\s+.*context\s+((?:"[^"]*?")|(?:'[^']*?')))?\s*""" )
 label = 'label'
   def visible_fields ( self ) :
   if strings_only and is_protected_type ( s ) :
 options = self . render_options ( choices , [ value ] )
  value = urlunsplit ( url_fields )
 if autoescape :
 self . value = force_text ( self . value )
                  name = self . split_leading_dir ( name ) [ 1 ]
 match = tagfind . match ( rawdata , i + 1 )
 from PIL import ImageFile as PillowImageFile
 root [ : ] = [ root , root , None , None ]
     class Lexer ( object ) :
 self . common_logger_config ( logger , config , incremental )
 if not options . get ( 'addrport' ) :
   def save ( self , commit = True ) :
 pass
 saved_instances . append ( self . save_existing ( form , obj , commit = commit ) )
 def __newobj__ ( cls , * args ) :
     class IfChangedNode ( Node ) :
 return self . errors . get ( NON_FIELD_ERRORS , self . error_class ( error_class = 'nonfield' ) )
 import re
 for name in sorted ( handlers ) :
          substitutions = {  'initial_text' : self . initial_text ,  'input_text' : self . input_text ,  'clear_template' : '' ,  'clear_checkbox_label' : self . clear_checkbox_label ,  }
  return value
                  s = six . text_type ( s )
  password = force_bytes ( password )
 self . hide_empty = options . get ( 'hide_empty' , False )
              if args [ - 1 ] != "silent" :
                   selected_choices . remove ( option_value )
              error_msg = "Invalid template name in 'extends' tag: %r." % parent
 max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
 iterkeys = _iterkeys
  elif int ( timeout ) == 0 :
  except ImportError :
    def __enter__ ( self ) :
  except InputStreamExhausted :
      pass
 reason_phrase = None
   def close ( self ) :
                  usage . append ( style . NOTICE (  "Note that only Django core commands are listed "  "as settings are not properly configured (error: %s)."  % self . settings_exception ) )
      def __init__ ( self , * args , ** kwargs ) :
   def ip_address_validators ( protocol , unpack_ipv4 ) :
 known_models . append ( table2model ( table_name ) )
      is_usable = True
              self . stdout . write ( statement )
   self . _current_app = current_app
              return host
   def end_serialization ( self ) :
    return week_number
              return ''
  def items ( self ) :
              return
    except Exception as e :
              orig = self . parent_instance . pk
                             six . reraise ( * exc_info )
          return [ 'parse' , 'error' , 'request' , 'response' , 'robotparser' ]
    self . _reverse_dict [ language_code ] = lookups
    def get_declared_fields ( bases , attrs , with_base_fields = True ) :
  fixture_files = [ ]
 self . initial_extra = kwargs . pop ( 'initial' , None )
          _ExpatParser . __init__ ( self , * args , ** kwargs )
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
 return _get_timezone_name ( get_current_timezone ( ) )
     def compress_string ( s ) :
                                      traceback . print_exc ( )
 from django . utils . timezone import is_aware
   def handle_noargs ( self , ** options ) :
          self . class_name = class_name
   def words ( self , num , truncate = None , html = False ) :
    return iri_to_uri ( resolver . _reverse_with_prefix ( view , prefix , * args , ** kwargs ) )
                  return code
              func = TemplateLoader ( * args )
    @ register . filter ( is_safe = True )
 if not content_type :
    def run_validators ( self , value ) :
  except KeyError :
      from logging import _checkLevel
   tag = re_tag . match ( m . group ( 0 ) )
 if bits and not kwarg_format :
           if is_aware ( value ) :
                  options += [ ( s_opt . get_opt_string ( ) , s_opt . nargs ) for s_opt in  parser . option_list ]
 if timeout is not None :
   else :
              extra_files . extend ( map ( lambda x : x . strip ( ) , file . split ( ',' ) ) )
          source , display_name = self . load_template_source ( template_name , template_dirs )
          vary_headers = [ ]
   def __repr__ ( self ) :
 default_settings = module_to_dict ( global_settings )
  return ( 0 , k [ 1 ] )
      url = ''
   def start_index ( self ) :
 pass
 from django . core . mail . message import sanitize_address
   def __repr__ ( self ) :
           if not self . _cached_loaders :
  wrap = allow_lazy ( wrap , six . text_type )
  if exclude and f . name in exclude :
          return self . render ( )
   def resolve_expression ( self , obj , context ) :
   class Command ( AppCommand ) :
          if self . _wrapped is empty :
  else :
 def dictitem ( s ) :
 return self . _coerce ( value )
    except DatabaseError :
                          self . _css . setdefault ( medium , [ ] ) . append ( path )
              raise ValidationError ( self . error_messages [ 'invalid' ] , code = 'invalid' )
  else :
          return s . get_data ( )
   def full_clean ( self ) :
 if self . _is_rendered :
     @ register . filter ( is_safe = True )
          pass
              self . _max_entries = 300
  self . error_list . extend ( message . error_list )
           return s
                                          cursor . execute ( sql )
  return get_template ( parent )
     class SortedDict ( dict ) :
 return update_wrapper ( wrapper , user_function )
 self . __kw = kw
 from django . utils import lru_cache
  return result
                  path_info = '/'
    new_name , num_repl = re . subn ( r'\W' , '_' , new_name )
 def timeuntil_filter ( value , arg = None ) :
 response = sys . modules [ __name__ + ".moves.urllib_response" ]
 statements = connection . ops . sql_flush ( style , tables , seqs , allow_cascade )
 get_supported_language_variant . cache_clear ( )
 dig1 . update ( u )
           int2byte = operator . methodcaller ( "to_bytes" , 1 , "big" )
 from django . core . files . base import File
 if not m :
  else :
 return MONTHS_AP [ self . data . month ]
      def __init__ ( self , cyclevars , variable_name = None , silent = False ) :
   from django . conf import settings
                              try :
 import datetime
  for uclass , unique_check in all_unique_checks :
              return match . group ( 0 )
  self . feed = {  'title' : to_unicode ( title ) ,  'link' : iri_to_uri ( link ) ,  'description' : to_unicode ( description ) ,  'language' : to_unicode ( language ) ,  'author_email' : to_unicode ( author_email ) ,  'author_name' : to_unicode ( author_name ) ,  'author_link' : iri_to_uri ( author_link ) ,  'subtitle' : to_unicode ( subtitle ) ,  'categories' : categories or ( ) ,  'feed_url' : iri_to_uri ( feed_url ) ,  'feed_copyright' : to_unicode ( feed_copyright ) ,  'id' : feed_guid or link ,  'ttl' : ttl ,  }
 self . negated = not self . negated
   return result , result_args
 import os
              return timezone . make_aware ( value , current_timezone )
              if hasattr ( base , 'declared_fields' ) :
  except StandardError as e :
     class DjangoTranslation ( gettext_module . GNUTranslations ) :
              apps . get_model ( 'auth' , 'Permission' )
 self . add_fallback ( default_translation )
 return id_
 namespaces = { }
              return False
          warnings . warn ( '"validate" has been deprecated in favor of "check".' ,  RemovedInDjango19Warning )
      class SelectDateWidget ( Widget ) :
              return _ ( 'p.m.' )
 parts . append ( "(?P<%s>%s)" % ( groupid , tok . regex ) )
 from django . forms . utils import ErrorList
 return obj
          def lock ( f , flags ) :
 if _win :
    def sql_indexes ( app_config , style , connection ) :
 if status is not None :
 if self . options . get ( 'indent' ) :
 import warnings
    for filename in files :
 from __future__ import unicode_literals
  msg = ""
                  if e . errno == errno . ENOENT :
      runfastcgi ( sys . argv [ 1 : ] )
 handler . addQuickElement ( "description" , self . feed [ 'description' ] )
    def get_str_from_wsgi ( environ , key , default ) :
          initial_value = initial if initial is not None else ''
 def content ( self , value ) :
  except ValueError :
 i = self . pointer
     class HiddenInput ( Input ) :
                      cls . __str__ = cls . __bytes_cast
                  return
   return new_class
      builtins . append ( import_library ( module ) )
   def render_options ( self , choices , selected_choices ) :
      return None
 return "<For Node: for %s in %s, tail_len: %d%s>" % ( ', ' . join ( self . loopvars ) , self . sequence , len ( self . nodelist_loop ) ,  reversed_text )
              field_notes . append ( 'Field name made lowercase.' )
 import sys
 return avoid_wrapping ( value )
                          continue
              context [ self . asvar ] = url
          if self . base_url is None :
 def _dec ( * args , ** kwargs ) :
 response_headers = [ ( str ( k ) , str ( v ) ) for k , v in response . items ( ) ]
                          out . write ( ' _(%s) ' % fmatch )
   return False
                          apps . setdefault ( pattern . app_name , [ ] ) . append ( pattern . namespace )
 logger . propagate = True
              msg = self . style . HTTP_NOT_FOUND ( msg )
 parser . add_argument ( '--no-initial-data' , action = 'store_false' , dest = 'load_initial_data' , default = True ,  help = 'Tells Django not to load any initial data after database synchronization.' )
    return output
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
    def dst ( self , dt ) :
                  newretval = post_callback ( retval )
              warnings . warn ( "``use_natural_keys`` is deprecated; use ``use_natural_foreign_keys`` instead." ,  RemovedInDjango19Warning )
  return _default
          del cc [ 'private' ]
    if self . file_permissions_mode is not None :
  except ValueError :
              arg_vals = [ ]
    class Variable ( object ) :
 top = bottom + self . per_page
          try :
  except InvalidOperation :
          raise TemplateSyntaxError ( "'now' statement takes one argument" )
 from django . utils import six
          opts = self . _meta
                  raise TemplateSyntaxError ( "Could not parse some characters: "  "%s|%s|%s" %  ( token [ : upto ] , token [ upto : start ] ,  token [ start : ] ) )
   def set_cdata_mode ( self , tag ) :
                          if message_context :
  return False
   def flush ( self ) :
  if name is None :
 if ( self . negate and val1 != val2 ) or ( not self . negate and val1 == val2 ) :
 from django . db import models , DEFAULT_DB_ALIAS
 return any ( form . has_changed ( ) for form in self )
           return self . client_address [ 0 ]
  self . new_objects . append ( self . save_new ( form , commit = commit ) )
          raise SerializerDoesNotExist ( format )
   default = 'DEFAULT'
              _module = self . _resolve ( )
 se = open ( err_log , 'a+' , buffering )
              id_for_label = widget . id_for_label ( id_ )
          if not isinstance ( s , Exception ) :
                  cull_num = num // self . _cull_frequency
                            if not isinstance ( item , ( list , tuple ) ) :
   else :
                  form . fields [ ORDERING_FIELD_NAME ] = IntegerField ( label = _ ( 'Order' ) , required = False )
 from django . utils . _os import upath
                  self . stdout . write ( "No changes detected in apps '%s'" % ( "', '" . join ( app_labels ) ) )
              return None
              with open ( filepath , 'r' ) as fp :
   return neg , res
              msg [ 'Date' ] = formatdate ( )
          return s
  quote = s [ 0 ]
  elif msg and visible_issue_count :
              for x , y in zip ( val1 , val2 ) :
   else :
   if initial_forms > self . max_num >= 0 :
 def csrf_token ( parser , token ) :
  import errno
          raise BadHeaderError ( "Header values can't contain newlines (got %r for header %r)" % ( val , name ) )
 from django . utils . itercompat import is_iterable
  values = { 'true' : True , 'false' : False }
  scheme = value . split ( '://' ) [ 0 ] . lower ( )
                     return b' ' . join ( [ force_bytes ( arg , encoding , strings_only ,  errors ) for arg in s ] )
  locations = [ ]
  super ( HttpResponseRedirectBase , self ) . __init__ ( * args , ** kwargs )
          return ( self . func , self . args , self . kwargs ) [ index ]
   check_programs ( 'xgettext' )
   for ( k , v ) in kwargs . items ( ) :
 from django . conf import settings
                  return pickle . loads ( pickled )
  if node . getElementsByTagName ( 'None' ) :
 from django . core . management . color import no_style
 current_chunk = None
              flat . update ( d )
              class dummy :
          return time_str + '-0000'
 import datetime
  elif token_string . startswith ( COMMENT_TAG_START ) :
  from django . core . serializers . base import DeserializationError
                      result = middleware . process_request ( request )
  def __init__ ( self , loopvars , sequence , is_reversed , nodelist_loop , nodelist_empty = None ) :
  from django . core . management . base import CommandError
  try :
              if i :
      def localtime ( value , timezone = None ) :
     def formset_factory ( form , formset = BaseFormSet , extra = 1 , can_order = False ,  can_delete = False , max_num = None , validate_max = False ,  min_num = None , validate_min = False ) :
              return ''
 from django . db . migrations . executor import MigrationExecutor
  try :
      msg = (  "django.utils.text.javascript_quote() is deprecated. "  "Use django.utils.html.escapejs() instead."  )
 try :
  self . _current = None
 def unordered_list ( value , autoescape = None ) :
              raise AttributeError ( "This QueryDict instance is immutable" )
   def server_bind ( self ) :
 def __iter__ ( self ) :
 return self . _handle_object ( node )
   return False
   if i >= len ( subject ) :
  except KeyError :
                  return False
  scheme = template . split ( ':' , 1 ) [ 0 ] . lower ( )
 if hasattr ( _active , "value" ) :
 safe_data [ key ] = value
 args = ''
 from django . utils . text import normalize_newlines , slugify as _slugify
 bmatch = block_re . match ( t . contents )
from importlib import import_module
 if self . use_ipv6 and not socket . has_ipv6 :
 return self . _html_output (  normal_row = '<p%(html_class_attr)s>%(label)s %(field)s%(help_text)s</p>' ,  error_row = '%s' ,  row_ender = '</p>' ,  help_text_html = ' <span class="helptext">%s</span>' ,  errors_on_separate_row = True )
 if not self . timezone :
 return pickle . loads ( base64 . b64decode ( force_bytes ( value ) ) )
 return re . sub ( r'>\s+<' , '><' , force_text ( value ) )
              os . utime ( dst , ( st . st_atime , st . st_mtime ) )
              handler . startElement ( "entry" , self . item_attributes ( item ) )
              return lookup_view
      if isinstance ( loader , ( tuple , list ) ) :
 for part in parts :
   self . attr = new_attr
 level = handler_config . get ( 'level' , None )
 if i >= 0 :
          fks_to_parent = [ f for f in opts . fields if f . name == fk_name ]
          reloader = python_reloader
  return '<%s: %r>' % ( type ( self ) . __name__ , repr_attr )
  else :
 if len_values < 1 :
 yield ''
 if g [ 0 ] == '"' :
 bpython . embed ( )
    if x == 0 :
    def sql_custom ( app_config , style , connection ) :
          return False
              raise CommandError ( 'You must set settings.ALLOWED_HOSTS if DEBUG is False.' )
  from django . core . files import File
 return "%s%02d%02d" % ( sign , seconds // 3600 , ( seconds // 60 ) % 60 )
          from django . core . servers . fastcgi import FASTCGI_HELP
    for app_name , model_list in manifest . items ( ) :
 item . update ( kwargs )
  try :
  if not language_code_re . search ( lang_code ) :
          return self . _headers [ header . lower ( ) ] [ 1 ]
              media = media + w . media
          global _supported
           try :
 self . paths_to_remove . append ( tempdir )
 from django . utils . translation import ugettext_lazy as _ , ungettext_lazy
                  return format_html ( "" )
      from django . utils . six . moves import cPickle as pickle
  except IndexError :
                      self . handle_data ( rawdata [ i : j ] )
  javascript_quote = allow_lazy ( javascript_quote , six . text_type )
 endpos = self . check_for_whole_start_tag ( i )
   template_source_loaders = tuple ( loaders )
      pass
 self . close_called = False
      get_callable . cache_clear ( )
  else :
   class Loader ( BaseLoader ) :
 self . add_fields ( form , None )
              output = self . _leftover
              raise ValueError (  "make_aware expects a naive datetime, got %s" % value )
 self . _files = MultiValueDict ( )
      def __init__ ( self , data = None , files = None , auto_id = 'id_%s' , prefix = None ,  initial = None , error_class = ErrorList , label_suffix = None ,  empty_permitted = False , instance = None ) :
 self . _changed_data = None
  from django . conf import settings
                      data [ f . name ] = list ( qs . values_list ( 'pk' , flat = True ) )
          msg = ( "The use of the language code '%s' is deprecated. "  "Please use the '%s' translation instead." )
 return self . to + self . cc + self . bcc
   def to_python ( self , value ) :
              m2m_convert = lambda n : field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
 from django . utils . module_loading import module_has_submodule
 parser . add_argument ( 'migration_name' ,  help = 'Migration name to print the SQL for.' )
 return '"%s"' % etag . replace ( '\\' , '\\\\' ) . replace ( '"' , '\\"' )
 from __future__ import unicode_literals
                  return [ ]
 def floatformat ( text , arg = - 1 ) :
                  return list ( urlsplit ( url ) )
 if not hasattr ( translation , '_catalog' ) :
 exclude = options . get ( 'exclude' )
 memoryview = memoryview
  KB = 1 << 10
            try :
    def valid_value ( self , value ) :
      with open ( old_path , 'rb' ) as template_file :
   def __getitem__ ( self , index ) :
 for i , handler in enumerate ( self . _upload_handlers ) :
 self . validate_key ( key )
 from django . utils import datetime_safe
   try :
              import warnings
  return doy
          post = '<could not parse>'
   response = self . apply_response_fixes ( request , response )
 if not match or not match . group ( 1 ) :
 if finder is None :
                  d = m . groupdict ( )
          return get_wsgi_application ( )
 result = cache_get ( key , root )
 content_type = content_type . strip ( )
                  self . interesting = _html_parser . interesting_cdata
 parser . add_argument ( '--noinput' ,  action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' ) ,
              error_msg = "Tried %s" % tried
   leave_locale_alone = True
          from django . conf import settings
 formatted_subject = subject . replace ( '\n' , '\\n' ) . replace ( '\r' , '\\r' )
              self . _cull ( )
 def __init__ ( self , attrs = None ) :
 missing_fields = ( set ( none_model_fields ) -  set ( new_class . declared_fields . keys ( ) ) )
                      message = "'%s' already exists" % top_dir
  value = value . strip ( )
   def save_existing ( self , form , instance , commit = True ) :
 _active = local ( )
  return self . as_widget ( )
          raise AttributeError ( "This %s instance has no `content` attribute. "  "Use `streaming_content` instead." % self . __class__ . __name__ )
  import StringIO
   _default = None
      def render ( self , context ) :
 from django . utils . timezone import utc , get_fixed_timezone
  return 0 , ch2
              value = token_kwargs ( remaining_bits , parser , support_legacy = False )
  finally :
                      if len ( args ) != len ( params ) + len ( prefix_args ) :
   def widget_attrs ( self , widget ) :
  ngettext_lazy = ngettext
  return t [ 0 ] . lower ( ) , True
   if not isinstance ( self . file_path , six . string_types ) :
                   return getattr ( settings , format_type )
 self . empty = options . get ( 'empty' , False )
  now = timezone . now ( )
              yield subwidget
      text = match . group ( 1 )
  seen . add ( k )
     class Node ( object ) :
 from django . core . mail . utils import DNS_NAME
          if self . _wrapped is empty :
  def __init__ ( self , name , value , attrs , choice , index ) :
              style = no_style ( )
   def end_serialization ( self ) :
 from django . utils import six
 if six . PY2 :
               context . render_context [ self ] = itertools_cycle ( self . cyclevars )
 fileno = property ( lambda self : self . file . fileno )
          new_keys = [ self . make_key ( x , version = version ) for x in keys ]
     class Command ( BaseCommand ) :
              self . stream . write ( "\n" )
          vary_headers = cc_delim_re . split ( response [ 'Vary' ] )
                              new_matches = normalize ( parent_pat + pat )
 value = int ( value )
          parts = viewname . split ( ':' )
      setattr ( Module_six_moves_urllib_parse , attr . name , attr )
     def translation ( language ) :
 compile_func = partial ( generic_tag_compiler ,  params = params , varargs = varargs , varkw = varkw ,  defaults = defaults , name = function_name ,  takes_context = takes_context , node_class = InclusionNode )
          return iter ( self . dict . keys ( ) )
 def _new_instance ( cls , children = None , connector = None , negated = False ) :
      def __init__ ( self ) :
          handler . addQuickElement ( "title" , self . feed [ 'title' ] )
          now = datetime . datetime . now ( utc if is_aware ( d ) else None )
  if hasattr ( self , '_post' ) :
   def supports_color ( ) :
          return ip_address_validator_map [ protocol . lower ( ) ]
  except TemplateSyntaxError as e :
 use_grouping = use_grouping or force_grouping
          """         Set a value in the cache if the key does not already exist. If         timeout is given, that timeout will be used for the key; otherwise         the default cache timeout will be used.         Returns True if the value was stored, False otherwise.         """
   def url ( self , name ) :
 value = unicodedata . normalize ( 'NFKD' , value ) . encode ( 'ascii' , 'ignore' ) . decode ( 'ascii' )
              return
   def render ( self , context ) :
                          number_value = rhs [ number ]
 flup_module += '_fork'
                       old = '#: ' + work_file
  parent_name = parser . compile_filter ( bits [ 1 ] )
 if not value or isinstance ( value , ( list , tuple ) ) :
 from importlib import import_module
  except AttributeError :
  import datetime
              self . msgmerge_options = self . msgmerge_options [ : ] + [ '--no-wrap' ]
              raise ValueError ( 'must define at least one ordering operation: < > <= >=' )
                  if self . cleaned_data . get ( name ) is not None and self . cleaned_data [ name ] . _state . adding :
              try :
  sys . stdout , sys . stderr = so , se
 from io import BytesIO
   elif form . has_changed ( ) :
  super ( BaseInlineFormSet , self ) . __init__ ( data , files , prefix = prefix ,  queryset = qs , ** kwargs )
try :
    class InputStreamExhausted ( Exception ) :
   def configure_filter ( self , config ) :
 import sys
                  config [ 'mailhost' ] = self . as_tuple ( config [ 'mailhost' ] )
     class ImmutableList ( tuple ) :
  value = smart_text ( value ) . strip ( )
                      app = app . rpartition ( '.' ) [ - 1 ]
  _ , rest = token . contents . split ( None , 1 )
                        if self . required :
              if settings . USE_L10N :
          if template_dirs :
   def reset_format_cache ( ) :
   def hidden_fields ( self ) :
                  raise
                      output . append ( self . render_option ( selected_choices , * option ) )
                  self . stdout . write ( shutdown_message )
  elif field in self . fields :
              app_label = options [ 'app_label' ]
 if year < 100 :
 if self . data . hour == 0 :
              self . _populate ( )
                  settings . configure ( )
  def __init__ ( self , choices = ( ) , required = True , widget = None , label = None ,  initial = None , help_text = '' , * args , ** kwargs ) :
  return self . connection
 for lookup , arg in args :
          return ValidationError ( self . data ) . error_list
                              field_type = "ForeignKey('%s'" % rel_to
  bits = token . split_contents ( ) [ 1 : ]
  if self . max_value is not None :
          if self . has_key ( key , version ) :
          return list ( iter ( self ) )
                      self . _errors [ field ] = self . error_class ( )
 from django . utils . crypto import constant_time_compare , salted_hmac
     def split_domain_port ( host ) :
                        start = non_capturing_groups . pop ( )
 all_unique_checks = all_unique_checks . union ( set ( unique_checks ) )
              f . seek ( 0 )
 return '\n' . join ( statements )
 result = 0
   message_context = None
  if filename . endswith ( "$py.class" ) :
 setattr ( obj , self . fk . get_attname ( ) , getattr ( pk_value , 'pk' , pk_value ) )
              self . add_library ( lib )
  targets = [ key for key in executor . loader . graph . leaf_nodes ( ) if key [ 0 ] == app_label ]
    def __exit__ ( self , exc_type , exc_value , traceback ) :
  else :
                  return True
          def int2byte ( i ) :
              settings . BASE_DIR
 if bytes_read > rollback :
 t = getattr ( _active , "value" , None )
                      yield line
   def handle_fk_field ( self , obj , field ) :
   existing_headers = set ( header . lower ( ) for header in vary_headers )
 dfmt = config . get ( 'datefmt' , None )
 return self . __language
  from django . utils import six
  def clean ( self , value ) :
 hidden_widget = HiddenInput
 left = t . nud ( self )
              dot = package . rindex ( '.' , 0 , dot )
 if six . PY2 :
 num_existing = len ( existing )
      widget = ClearableFileInput
 from django . core . management . base import BaseCommand
 def streaming_content ( self , value ) :
              k , v = x , True
          yield bit . group ( 0 )
 return date_value . strftime ( input_format )
 context . update ( unpacked_vars )
 if len ( tablenames ) :
 if value :
               return self . tag_function
              pass
 try :
 safe = isinstance ( value , SafeData )
  import re
 check_for_language = lambda x : True
          if self . pos >= len ( self . tokens ) :
                                      for sql in index_sql :
      from django . conf import settings
    def get_cookie_signer ( salt = 'django.core.signing.get_cookie_signer' ) :
              return self . _truncate_html ( length , truncate , self . _wrapped , length , True )
                  sublist_item = title
           if id_ :
   def _make_parser ( self ) :
 return escapejs ( value )
              new_ip . append ( '0000' )
  yield data
 self . choices . append ( ( f , f . replace ( path , "" , 1 ) ) )
              try :
          super ( MemoryFileUploadHandler , self ) . new_file ( * args , ** kwargs )
 get_resolver . cache_clear ( )
  s2 = time . strftime ( fmt , ( year + 28 , ) + timetuple [ 1 : ] )
  else :
 output . append ( '\n' . join ( '  * %s' % e for e in errors ) )
              self . _load_post_and_files ( )
          if name . lower ( ) == 'subject' :
  bf_errors = self . error_class ( [ conditional_escape ( error ) for error in bf . errors ] )
  if settings . USE_X_FORWARDED_HOST and (  'HTTP_X_FORWARDED_HOST' in self . META ) :
 self . base = base
          response [ 'Expires' ] = http_date ( time . time ( ) + cache_timeout )
   self . requires_system_checks = (  self . requires_system_checks if has_new_option else  self . requires_model_validation if has_old_option else  True )
     except OSError as e :
 self . paginator = paginator
  else :
 use_reloader = options . get ( 'use_reloader' )
          from pprint import pformat
    def assignment_tag ( self , func = None , takes_context = None , name = None ) :
                  self . active_writers += 1
 from django . utils import six
 from django . utils import datastructures
 if not script_url :
  raise AttributeError ( "Unable to determine the file's size." )
 bits = token . split_contents ( )
 sublist = ''
  return _make_decorator
              return template_name
                      raise
   if name == 'content-disposition' :
      if not _serializers :
 handler . addQuickElement ( "link" , self . feed [ 'link' ] )
                  bit = node
              if self . stream is not None :
          if code_changed ( ) :
                      return False
          super ( ErrorList , self ) . __init__ ( initlist )
                  with transaction . atomic ( using = database ,  savepoint = connection . features . can_rollback_ddl ) :
          if data_list :
 attachment . set_payload ( content )
   def __deepcopy__ ( self , memo ) :
    def j ( self ) :
 def __repr__ ( self ) :
                 return ''
 if base . lower ( ) . endswith ( '.tar' ) :
  else :
 if not hasattr ( template , 'render' ) :
                      comment_notes = [ ]
              warnings . warn ( "cache_choices has been deprecated and will be "  "removed in Django 1.9." ,  RemovedInDjango19Warning , stacklevel = 2 )
 if version [ 3 ] == 'alpha' and version [ 4 ] == 0 :
              call_command (  'flush' ,  verbosity = max ( self . verbosity - 1 , 0 ) ,  interactive = False ,  database = db ,  reset_sequences = False ,  inhibit_post_migrate = True ,  )
              return { "xmlns" : self . ns , "xml:lang" : self . feed [ 'language' ] }
   def __eq__ ( self , other ) :
 from django . core import serializers
     return ( os . path . normcase ( os . path . abspath ( src ) ) ==  os . path . normcase ( os . path . abspath ( dst ) ) )
                      pass
              return context
              handler . startElement ( "author" , { } )
 for filename in filelist :
              return ''
              msg [ 'Message-ID' ] = make_msgid ( )
       app_models = app_config . get_models ( include_auto_created = True )
      operations = [ ]
   return result
 errors = [ ]
          orig_vars = cls . __dict__ . copy ( )
     @ register . tag ( 'if' )
                  return Media ( definition )
  return [ first_item , second_item ] , old_style_list
   __all__ = (  'ModelForm' , 'BaseModelForm' , 'model_to_dict' , 'fields_for_model' ,  'save_instance' , 'ModelChoiceField' , 'ModelMultipleChoiceField' ,  'ALL_FIELDS' , 'BaseModelFormSet' , 'modelformset_factory' ,  'BaseInlineFormSet' , 'inlineformset_factory' ,  )
  else :
  print ( opt_label )
 from django . core import urlresolvers
              data = data or [ ]
 self . _upload_handlers = upload_handlers
          raise ImproperlyConfigured ( 'Loader does not define a "load_template" callable template source loader' )
              self . message = message
  buffer_types = ( bytearray , memoryview )
 import sys
 for middleware_path in settings . MIDDLEWARE_CLASSES :
 BASE36_ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz'
   def render ( self , name = None , value = None , attrs = None , choices = ( ) ) :
  else :
          stream = StringIO ( stream_or_string )
              self . validators . append ( validators . MaxValueValidator ( max_value ) )
  url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )
                          pk_value = self . get_queryset ( ) [ index ] . pk
                      if hasattr ( middleware , 'process_response' ) :
      global _default
                  kwargs [ name ] = parser . compile_filter ( value )
      from importlib import import_module
 TRANSLATOR_COMMENT_MARK = 'Translators'
  except ValidationError :
 from subprocess import PIPE , Popen
              if len ( x ) == 0 :
  try :
     if '.' in ip_str . split ( ':' ) [ - 1 ] :
          if isinstance ( format_module_path , six . string_types ) :
              lines [ i ] = ( "%0" + width + "d. %s" ) % ( i + 1 , escape ( line ) )
          raise ValueError ( "The protocol '%s' is unknown. Supported: %s"  % ( protocol , list ( ip_address_validator_map ) ) )
 obj . attrs = self . attrs . copy ( )
                       obj_pk = field . rel . to . _meta . pk . to_python ( n . getAttribute ( 'pk' ) )
 kwargs [ 'instance' ] = self . _existing_object ( pk )
  except ImportError as exc :
 BASE62_ALPHABET = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'
 resolver = urlresolvers . RegexURLResolver ( r'^/' , urlconf )
              boolean_attrs . append ( ( attr , ) )
  return result
              localpart , domain = addr . split ( '@' , 1 )
 try :
              def __mod__ ( self , rhs ) :
 if basetype == 'text' :
 chunks = (  ( 60 * 60 * 24 * 365 , ungettext_lazy ( '%d year' , '%d years' ) ) ,  ( 60 * 60 * 24 * 30 , ungettext_lazy ( '%d month' , '%d months' ) ) ,  ( 60 * 60 * 24 * 7 , ungettext_lazy ( '%d week' , '%d weeks' ) ) ,  ( 60 * 60 * 24 , ungettext_lazy ( '%d day' , '%d days' ) ) ,  ( 60 * 60 , ungettext_lazy ( '%d hour' , '%d hours' ) ) ,  ( 60 , ungettext_lazy ( '%d minute' , '%d minutes' ) )  )
   def _get_name ( self ) :
 needs_multipart_form = True
          super ( DTDForbidden , self ) . __init__ ( )
                      s = six . text_type ( s , encoding , errors )
  import os
   def read ( self , size = None ) :
      def sync_apps ( self , connection , app_labels ) :
 acceptable_endblocks = ( 'endblock' , 'endblock %s' % block_name )
   class Command ( BaseCommand ) :
              msg = self . style . HTTP_REDIRECT ( msg )
          nesting = 1
  elif self . nodelist_false :
               return 0
   def handle ( self , * fixture_labels , ** options ) :
          formfield_callback = attrs . pop ( 'formfield_callback' , None )
 def dumps ( self , obj ) :
      class InlineForeignKeyField ( Field ) :
   def migration_progress_callback ( self , action , migration , fake = False ) :
 callback = getattr ( urls , 'handler%s' % view_type )
 return result
 date_keys = ( 'updateddate' , 'pubdate' )
 from django . utils . encoding import force_text , filepath_to_uri
 BytesIO = io . BytesIO
                      pass
 comment_notes . extend ( field_notes )
  except ( ValueError , TypeError ) :
              return _ ( 'PM' )
 def pluralize ( value , arg = 's' ) :
  super ( TemporaryUploadedFile , self ) . __init__ ( file , name , content_type , size , charset , content_type_extra )
  from django . conf import settings
 try :
  for shell in available_shells :
 self . _boundary = boundary
 try :
      has_bz2 = False
     for date_check in all_date_checks :
    @ register . tag ( 'include' )
              raise KeyError (  "Key %r not found in '%s'" % ( name , self . __class__ . __name__ ) )
  return ' ' . join ( words )
                  stream . unget ( chunk [ - rollback : ] )
          message = '' . join ( tokens )
              if six . PY2 :
 message_context = context_match . group ( 1 )
          super ( SortedDict , self ) . clear ( )
   def _construct_form ( self , i , ** kwargs ) :
 self . connection_reset = connection_reset
               return False
  else :
    def _resolve ( self ) :
  time . sleep ( 1 )
 robotparser = sys . modules [ __name__ + ".moves.urllib_robotparser" ]
  bytes_read = 0
  return left
     class IfNode ( Node ) :
   def get_default_timezone ( ) :
   return decorating_function
   def emit ( self , record ) :
  except LookupError :
 context . autoescape = self . setting
                    output . append ( str_hidden )
 if git_changeset :
   def make_aware ( value , timezone ) :
              if bits [ 0 ] != 'and' :
 prefix = d [ 'prefix' ]
              parser = CommandParser ( self , prog = "%s %s" % ( os . path . basename ( prog_name ) , subcommand ) ,  description = self . help or None )
              reset_translations ( )
     def delete ( self , key , version = None ) :
              params , varargs , varkw , defaults = getargspec ( func )
 self . symlinks = options . get ( 'symlinks' )
 MB = 1 << 20
 def path ( self ) :
   elif name is not None and filter_func is None :
 if ch in '*?+' :
          if initial is None :
      child_nodelists = ( 'nodelist_true' , 'nodelist_false' )
      default_error_messages = {  'invalid' : _ ( 'Enter a number.' ) ,  'max_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit in total.' ,  'Ensure that there are no more than %(max)s digits in total.' ,  'max' ) ,  'max_decimal_places' : ungettext_lazy (  'Ensure that there are no more than %(max)s decimal place.' ,  'Ensure that there are no more than %(max)s decimal places.' ,  'max' ) ,  'max_whole_digits' : ungettext_lazy (  'Ensure that there are no more than %(max)s digit before the decimal point.' ,  'Ensure that there are no more than %(max)s digits before the decimal point.' ,  'max' ) ,  }
 orig_vars . pop ( '__weakref__' , None )
              return parent
   def value_from_datadict ( self , data , files , name ) :
  self . stdout . write ( "Performing system checks...\n\n" )
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
  else :
      if dt . year >= 1900 :
 from django . utils . six . moves . urllib . parse import urljoin
   elif hasattr ( s , '__unicode__' ) :
                  del self . _cache [ key ]
  try :
  return context_extras
 if value is not None :
      pass
 from django . db import connections , DEFAULT_DB_ALIAS
  nodelist = parser . parse ( ( 'endwith' , ) )
 from django . utils . translation import ugettext as _
 self . allow_files , self . allow_folders = allow_files , allow_folders
  if options . get ( 'no_location' ) :
  return value
 if i < 36 ** factor :
  return result
              self . attrs = attrs . copy ( )
   def decr ( self , key , delta = 1 , version = None ) :
     def python_2_unicode_compatible ( klass ) :
   def colorize ( text = '' , opts = ( ) , ** kwargs ) :
          return pformat ( value )
 import os
   return [ ]
 if match :
              self . _setup ( )
  from django . utils import six
              truncate = pgettext (  'String to return when truncating text' ,  '%(truncated_text)s...' )
   def convert ( self , value ) :
 silent = False
 klass = import_string ( backend or settings . EMAIL_BACKEND )
               name = os . path . basename ( name )
   self . unclosed_block_tag ( [ endtag ] )
 if representative is None :
   from django . template . base import ( Context , FilterExpression , Lexer , Node ,  NodeList , Parser , RequestContext , Origin , StringOrigin , Template ,  TextNode , Token , TokenParser , Variable , VariableNode , constant_string ,  filter_raw_string )
    def __iter__ ( self ) :
          value = self . to_python ( value ) . strip ( )
 for key_value in natural :
 for option in options :
 self . find_template_cache = { }
              operations . extend ( smigration . operations )
                  self . add_filters ( logger , filters )
 return chunk
   def check ( self , app_configs = None , tags = None , display_num_errors = False ) :
              doublecolon_len = 0
                      try :
    @ register . filter ( is_safe = True )
  import copy
 MIMEMessage . __setitem__ ( self , name , val )
    def clear_script_prefix ( ) :
              return [ ]
 return value . rjust ( int ( arg ) )
     if not settings . is_overridden ( 'TEST_RUNNER' ) :
 return time_str + '%+03d%02d' % ( hour , minute )
                              raise ValueError ( "Non-reversible reg-exp portion: '(?P%s'" % ch )
 for type_ in reversed ( resultclass . mro ( ) ) :
      def __init__ ( self , * args , ** kwargs ) :
   def tell ( self ) :
          if o in opt_dict :
               self . options . update ( { 'use_decimal' : False } )
 def media ( self ) :
                    continue
     class HttpResponseRedirectBase ( HttpResponse ) :
 try :
  elif settings . USE_TZ :
 keys = _iterkeys
          key = self . make_key ( key , version = version )
   class RemovedInDjango20Warning ( PendingDeprecationWarning ) :
              return
 try :
  except Exception as e :
  isolated_context = options . get ( 'only' , False )
 if callable ( self . limit_choices_to ) :
 from django . forms . utils import flatatt , ErrorDict , ErrorList
 self . use_ipv6 = True
  try :
 context . autoescape = old_setting
      if not qs . ordered :
      allow_multiple_selected = False
              raise IOError ( "Destination file %s exists and allow_overwrite is False" % new_file_name )
          value = dict . pop ( self , key , default )
 return result
 from django . db import connections , DEFAULT_DB_ALIAS
 from django . utils . http import urlquote
  return translated
          key = self . make_key ( key , version = version )
 while i < len ( subject ) and subject [ i ] in ( ' ' , '\t' ) :
    class SerializationError ( Exception ) :
 if six . PY3 :
   def u ( s ) :
   return num_sent
     def register_serializer ( format , serializer_module , serializers = None ) :
              fp . write ( msgs )
  if value is None :
 value = environ . get ( str ( key ) , str ( default ) )
 new_permissions = stat . S_IMODE ( st . st_mode ) | stat . S_IWUSR
       candidate_pat = prefix_norm . replace ( '%' , '%%' ) + result
              return [ ]
          result = super ( SortedDict , self ) . pop ( k , * args )
 for f in fields :
 text = force_text ( text )
  try :
    else :
 for name in namelist :
 e . django_template_source = source
       def base36_to_int ( s ) :
                      incomment = True
                  self . close_called = True
 from django . utils . encoding import force_str
 key = bytes_to_text ( key , self . encoding )
  if data is not None :
      random = random . SystemRandom ( )
      from functools import total_ordering
 if conflicts and not self . merge :
 thefile = '%s.c' % self . file
      widget = DateTimeInput
                  directories . append ( entry )
 if not hasattr ( c , '__call__' ) and hasattr ( types , 'ClassType' ) and type ( c ) != types . ClassType :
 response = self . get_exception_response ( request , resolver , 403 )
              if i % 2 :
              return result
 self . auto_id = auto_id
                              exec ( compile ( handle . read ( ) , pythonrc , 'exec' ) , imported_objects )
  for migration in app_migrations :
 raise v
  else :
 return mark_safe ( '\n' . join ( output ) )
      import pickle
 self . attachments = attachments or [ ]
              self . validators . append ( validators . MaxLengthValidator ( int ( max_length ) ) )
  for obj in objects :
              def value_encode ( self , val ) :
  def __init__ ( self , template , context = None , content_type = None , status = None ) :
  elif callable ( func ) :
from django . core . management . base import BaseCommand
  else :
     return self . _get_scheme ( )
 try :
  super ( WSGIServer , self ) . __init__ ( * args , ** kwargs )
   if not inhibit_post_migrate :
 token . source = self . origin , source
  if not os . access ( filename , os . W_OK ) :
                  disable_existing = config . pop ( 'disable_existing_loggers' , True )
 self . current_token = self . next_token ( )
              view_func = getattr ( mod , func_name )
     key = hashlib . sha1 ( key_salt + secret ) . digest ( )
 v = ValueError ( 'Cannot resolve %r: %s' % ( s , e ) )
 import warnings
 from django . db import connections , transaction , router , DatabaseError
    def render ( self , context ) :
  except AttributeError :
    def clean ( self , value ) :
              format_module_path = [ format_module_path ]
              self . domain_whitelist = whitelist
   def __len__ ( self ) :
   @ property
   def __init__ ( self , data = None ) :
   self . use_ipv6 = options . get ( 'use_ipv6' )
 self . widgets = getattr ( options , 'widgets' , None )
  elif k == 'bg' :
 while ( i < num_existing ) and ( existing [ i ] [ : pflen ] == prefixed ) :
                  return value . serializable_value ( self . to_field_name )
 return name + '_id'
                  raise ValidationError ( self . error_messages [ 'invalid_time' ] , code = 'invalid_time' )
 def do_extends ( parser , token ) :
   else :
   attachment = self . _create_mime_attachment ( content , mimetype )
 obj . __class__ = self . __class__
  except ValueError :
   for model in model_list :
  try :
 if p_pattern . startswith ( '^' ) :
              value = Decimal ( value )
  return initial != data
   def strptime ( self , value , format ) :
          if not hasattr ( self , '_fqdn' ) :
          try :
  return ''
     @ classmethod
  except ImportError :
  return result
  cycle_iter = context . render_context [ self ]
  elif self . _delegate_text :
  return cache_key
              try :
                              f = os . path . join ( root , f )
                from django . conf import urls
   if self . can_delete and self . _should_delete_form ( form ) :
  self = tuple . __new__ ( cls , * args , ** kwargs )
 from django . db import models
                              try :
     def __deepcopy__ ( self , memo ) :
              cursor . execute ( "DELETE FROM %s WHERE cache_key = %%s" % table , [ key ] )
   def expression ( self , rbp = 0 ) :
  return ''
  else :
   def __str__ ( self ) :
  from django . db . models . fields . related import ManyToManyField
                      lookup_str = callback . __module__ + "." + callback . __name__
   def __contains__ ( self , other ) :
              nodes . extend ( node . get_nodes_by_type ( nodetype ) )
 import sys
  if isinstance ( value , datetime . date ) :
              if default_list is None :
      def __init__ ( self , template_string , origin ) :
          return [ f [ : - 3 ] for f in os . listdir ( command_dir )  if not f . startswith ( '_' ) and f . endswith ( '.py' ) ]
  else :
 from django . conf import settings
                  other = other . __cast ( )
  elif item_type == FILE :
 return form . save ( commit = commit )
                      self . stdout . write ( self . style . MIGRATE_SUCCESS ( " FAKED" ) )
              param = None
          try :
              result . setFormatter ( formatter )
  used_column_names = [ ]
 self . content_type = content_type
  if self . is_url ( template ) :
 if value is None :
 stats [ HITS ] += 1
    class CheckboxFieldRenderer ( ChoiceFieldRenderer ) :
 klass . prefix = '\n' + find_indentation ( node )
          post_sql_fields = [ f for f in opts . local_fields if hasattr ( f , 'post_create_sql' ) ]
                  if six . PY3 :
   if len ( parts ) > 1 :
      errors = [ model . check ( ** kwargs )  for model in apps . get_models ( )  if app_configs is None or model . _meta . app_config in app_configs ]
 lib = get_library ( taglib )
 def __getitem__ ( self , key ) :
      def _curried ( * moreargs , ** morekwargs ) :
    if response is None :
          raise TemplateSyntaxError ( "'cycle' tag requires at least two arguments" )
 self . delete ( key , version = version )
  from django . conf import settings
 _locks = { }
 try :
 cache [ key ] = result
 if 'Location' in response and request . get_host ( ) :
 target_app_labels_only = True
 self . _delete ( f . name )
          self . name = name
  elif g [ 0 ] == "'" :
 missing_args_message = "You must provide an application name."
   else :
 if ext :
              response . streaming_content = [ ]
              key += tuple ( type ( v ) for v in args )
 parser . add_option ( '--no-color' , action = 'store_true' , dest = 'no_color' , default = False ,  help = "Don't colorize the command output." )
                      os . mkdir ( target_dir )
  raise
          self . stream = kwargs . pop ( 'stream' , sys . stdout )
    try :
   def validate ( self , value ) :
 from django . utils import six
   def run_from_argv ( self , argv ) :
 return val
      opts = model . _meta
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
 zfile = GzipFile ( mode = 'wb' , compresslevel = 6 , fileobj = buf )
                  break
              ch2 , escaped = next ( input_iter )
 from django . db . migrations . loader import MigrationLoader , AmbiguityError
   def __repr__ ( self ) :
 self . loader , self . loadname , self . dirs = loader , name , dirs
                  raise CommandError (  "Problem installing fixture '%s': %s is not a known "  "serialization format." % ( '' . join ( parts [ : - 1 ] ) , parts [ - 1 ] ) )
    def clear ( self ) :
 zfile . close ( )
                        ns = current_app
  _js_escapes = {  ord ( '\\' ) : '\\u005C' ,  ord ( '\'' ) : '\\u0027' ,  ord ( '"' ) : '\\u0022' ,  ord ( '>' ) : '\\u003E' ,  ord ( '<' ) : '\\u003C' ,  ord ( '&' ) : '\\u0026' ,  ord ( '=' ) : '\\u003D' ,  ord ( '-' ) : '\\u002D' ,  ord ( ';' ) : '\\u003B' ,  ord ( '\u2028' ) : '\\u2028' ,  ord ( '\u2029' ) : '\\u2029'  }
          super ( ModelMultipleChoiceField , self ) . __init__ ( queryset , None ,  cache_choices , required , widget , label , initial , help_text ,  * args , ** kwargs )
 dirs = [ ]
   def as_ul ( self ) :
       for name , field in self . fields . items ( ) :
                      self . stdout . write ( "Creating %s\n" % new_path )
   except KeyError :
      pass
  def __str__ ( self ) :
 from django . forms . fields import IntegerField , BooleanField
 if app_output :
              raise ValueError ( "attempted relative import beyond top-level package" )
   def get_many ( self , keys , version = None ) :
   def itervalues ( d , ** kw ) :
          LocaleRegexProvider . __init__ ( self , regex )
                  self . stdout . write ( self . style . MIGRATE_LABEL ( "  Apply all migrations: " ) + ( ", " . join ( set ( a for a , n in targets ) ) or "(none)" ) )
   self . end_serialization ( )
                           context . pop ( )
  root = max ( roots )
                  pass
                  os . makedirs ( dirname )
 return int ( value ) % int ( arg ) == 0
 self . __doc__ = self . __class__ . __doc__
 from django . utils . six . moves . urllib . parse import quote
              yield 'day'
 if '()' in config :
   def _resolve_lookup ( self , context ) :
   class DummyCache ( BaseCache ) :
                  guts = re . sub ( r"\\.|." , escape_quotes , tok [ 1 : - 1 ] )
   def add_library ( self , lib ) :
     class SlugField ( CharField ) :
   if ( ( os . stat ( path ) . st_mode & stat . S_IREAD ) != stat . S_IREAD ) :
   def complain ( self , * wargs , ** kwargs ) :
          if name == "_wrapped" :
 from django . utils . module_loading import import_string
  try :
 from django . db . migrations . executor import MigrationExecutor
              form = self . forms [ i ]
   def handle ( self , app_or_project , name , target = None , ** options ) :
  else :
          if app_config . models_module is None :
              lookup_view_s = lookup_view
      def __init__ ( self , attrs = None ) :
                  field_value = smart_text ( field_value , options . get ( "encoding" , settings . DEFAULT_CHARSET ) , strings_only = True )
 self . show_traceback = options . get ( 'traceback' )
  return obj_pk
          return _import_module ( self . mod )
 obj = field . rel . to . _default_manager . db_manager ( self . db ) . get_by_natural_key ( * field_value )
 for field , messages in errors . error_dict . items ( ) :
  except KeyError :
                  raise ValidationError (  self . error_messages [ 'invalid_pk_value' ] ,  code = 'invalid_pk_value' ,  params = { 'pk' : pk } ,  )
                          return pickle . loads ( zlib . decompress ( f . read ( ) ) )
  except UnicodeDecodeError :
  __all__ = [ 'luhn' ]
              raise TemplateSyntaxError (  "'%s' is decorated with takes_context=True so it must "  "have a first argument of 'context'" % name )
   RAISE_ERROR = object ( )
 symlink_path = os . path . join ( tmpdir , 'symlink' )
              token = self . next_token ( )
    def close ( self ) :
              return ugettext ( "Please correct the duplicate data for %(field)s." ) % {  "field" : unique_check [ 0 ] ,  }
  except AttributeError :
 import types
 self . day_none_value = ( 0 , empty_label [ 2 ] )
    @ lru_cache . lru_cache ( maxsize = 1000 )
                      s = six . text_type ( s )
  class _HashedSeq ( list ) :
                  continue
 try :
  for key , value in parse_qsl ( query_string or '' ,  keep_blank_values = True ,  encoding = encoding ) :
 if not prefix or not hasattr ( self , '_callback_str' ) :
 tt = _time . localtime ( stamp )
 nofollow_attr = ' rel="nofollow"' if nofollow else ''
              raise ValueError ( "Unsupported version: %s" % config [ 'version' ] )
              os . chmod ( full_path , self . file_permissions_mode )
  except ( ValueError , TypeError ) :
   @ upload_handlers . setter
 from django . utils . crypto import get_random_string
  else :
                       if row_data in seen_data :
                  output . append ( "%s = %s" % ( key , user_settings [ key ] ) )
 from django . utils . safestring import mark_safe
   def get_nodes_by_type ( self , nodetype ) :
   @ classmethod
              os . utime ( path , None )
          raise TemplateSyntaxError ( "'for' statements should use the format"  " 'for x in y': %s" % token . contents )
          raise TemplateSyntaxError ( "'templatetag' statement takes one argument" )
      def __init__ ( self , params ) :
 code_list = [ ]
 locale = to_locale ( lang )
                  cache = caches [ cache_alias ]
   def as_ul ( self ) :
 for choice in value :
 default_validators = [ validators . validate_email ]
 trimmed = 'trimmed' in t . split_contents ( )
          iteritems = _iteritems
    def mail_admins ( subject , message , fail_silently = False , connection = None ,  html_message = None ) :
   def write_po_file ( self , potfile , locale ) :
 itervalues = _itervalues
                      break
                      self . file . close ( )
   LockFileEx = windll . kernel32 . LockFileEx
  attrs . setdefault ( 'step' , step )
              self . full_clean ( )
              raise ValueError ( "Invalid header: %r" % line )
          loader , args = loader [ 0 ] , loader [ 1 : ]
 from __future__ import unicode_literals
              if self . _read_started :
 for key in self :
   def lex ( self , text ) :
     ESCAPE_MAPPINGS = {  "A" : None ,  "b" : None ,  "B" : None ,  "d" : "0" ,  "D" : "x" ,  "s" : " " ,  "S" : "x" ,  "w" : "x" ,  "W" : "!" ,  "Z" : None ,  }
  truncate = force_text ( truncate )
              value = getattr ( obj , field . get_attname ( ) )
 c . load ( cookie )
 os . chdir ( our_home_dir )
  else :
  if ( getattr ( Meta , 'fields' , None ) is None and  getattr ( Meta , 'exclude' , None ) is None ) :
  if expires < now :
 if isinstance ( stream_or_string , bytes ) :
                      errors = "strict"
   except :
  self . urlconf_name = urlconf_name
       import pyinotify
              content_length = int ( META . get ( 'HTTP_CONTENT_LENGTH' , META . get ( 'CONTENT_LENGTH' , 0 ) ) )
                              return smart_text ( field . rel . to . _meta . pk . to_python ( value ) )
  value = getattr ( _module , attr )
 __all__ = [ "runfastcgi" ]
 self . indent ( 2 )
    def _sanitize_ipv4_mapping ( ip_str ) :
          self . _cache . disconnect_all ( )
   def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :
   class warn_about_renamed_method ( object ) :
 def __init__ ( self , host = None , port = None , username = None , password = None ,  use_tls = None , fail_silently = False , use_ssl = None , timeout = None ,  ** kwargs ) :
  return self . _reverse_dict [ language_code ]
  elif options [ 'all' ] :
 return tpl . format ( self . sysid , self . pubid )
 _assertRaisesRegex = "assertRaisesRegexp"
          client = self . _lib . Client ( self . _servers )
 try :
  for domain in domains :
              mimetype , _ = mimetypes . guess_type ( filename )
                  continue
    return self . getlist ( key )
   def add_item_elements ( self , handler , item ) :
              result [ i ] += piece
  except ( LookupError , BinasciiError ) as e :
                      new_attr = name
              return self . management_form . cleaned_data [ INITIAL_FORM_COUNT ]
                          app_config = apps . get_app_config ( app_label )
 FormSet = formset_factory ( form , formset , extra = extra , min_num = min_num , max_num = max_num ,  can_order = can_order , can_delete = can_delete ,  validate_min = validate_min , validate_max = validate_max )
      def __init__ ( self , tokens ) :
  try :
 import zipfile
 import glob
       def __setitem__ ( self , name , val ) :
 self . choice_cache = None
  else :
          return self . var
 class MaxValueValidator ( BaseValidator ) :
                  v ( value )
   with io . open ( potfile , 'w' , encoding = 'utf-8' ) as fp :
  try :
    def close ( self ) :
  else :
    def __iter__ ( self ) :
          __bytes__ = serialize_headers
   def resolve ( self , path ) :
        def template_localtime ( value , use_tz = None ) :
   class LocMemCache ( BaseCache ) :
  def __init__ ( self , attrs = None , choices = ( ) ) :
 import re
          raise ValueError (  "You can only use `unpack_ipv4` if `protocol` is set to 'both'" )
  return self . object_list [ index ]
 addr = '@' . join ( [ localpart , domain ] )
              if new_name . endswith ( '_id' ) :
  url_schemes = [ 'http' , 'https' , 'ftp' ]
          self . changed_objects = [ ]
                     self . connection . close ( )
              ser_fmt = None
  return format_html ( '<label{0}>{1} {2}</label>' , label_for , self . tag ( ) , self . choice_label )
 if value == self . empty_value or value in self . empty_values :
 from django . utils . safestring import mark_safe
              handler . addQuickElement ( "rights" , self . feed [ 'feed_copyright' ] )
  if not self . is_required :
    def end_serialization ( self ) :
 fields = (  DateField ( input_formats = input_date_formats ,  error_messages = { 'invalid' : errors [ 'invalid_date' ] } ,  localize = localize ) ,  TimeField ( input_formats = input_time_formats ,  error_messages = { 'invalid' : errors [ 'invalid_time' ] } ,  localize = localize ) ,  )
      def _media ( self ) :
 import sys
  return name , ( value , params )
      def strftime ( self , fmt ) :
   def _get_scheme ( self ) :
  result = getattr ( _default , translation_function ) ( eol_message )
          super ( Command , self ) . add_arguments ( parser )
 if self . active_readers == 0 and self . waiting_writers != 0 :
                  break
  except ( TypeError , ValueError , UnicodeDecodeError ) :
              register_serializer ( format , settings . SERIALIZATION_MODULES [ format ] , serializers )
                      relations = connection . introspection . get_relations ( cursor , table_name )
 token = parser . next_token ( )
      import threading
  else :
 dict . __setitem__ ( self , key , http_cookies . Morsel ( ) )
 for site in sites :
              content_length = 0
   def widget_attrs ( self , widget ) :
                  j = day_of_year + ( 7 - weekday ) + ( jan1_weekday - 1 )
              all_models . extend ( router . get_migratable_models ( app_config , database , include_auto_created = True ) )
  from . import six
  if settings . USE_TZ :
  except TypeError :
              return val if isinstance ( val , bytes ) else val . encode ( encoding )
   app_label = label
  elif callable ( func ) :
  del bits [ : 1 ]
 from django . template . base import TemplateDoesNotExist
   def clean ( self , value ) :
    def get_format ( format_type , lang = None , use_l10n = None ) :
 self . lineno = 1
 self . text = text
 def __new__ ( mcs , name , bases , attrs ) :
       major = get_major_version ( version )
   elif var is None :
    def _is_shorthand_ip ( ip_str ) :
 ignore_patterns = options . get ( 'ignore_patterns' )
 from django . utils . deprecation import RenameMethodsBase , RemovedInDjango19Warning
          obj = getattr ( models . signals , name )
              self . connection = None
               cache = dict ( )
     if best_doublecolon_len > 1 :
 if link is not None :
  model_dependencies = [ ]
          return list ( self ) != other
          class NumberAwareString ( resultclass ) :
 if isinstance ( other , BaseContext ) :
 break
          return len ( self . content )
 from __future__ import unicode_literals
          if close :
                  self . stdout . write ( "  Installing indexes...\n" )
 key = self . make_key ( key , version = version )
  else :
                  qs = pk . rel . to . _default_manager . get_queryset ( )
    s = s1
           if settings . SECURE_PROXY_SSL_HEADER :
 num_entries = len ( filelist )
              self . reason_phrase = reason
              i += 1
 if len ( bits ) > 2 :
   def __nonzero__ ( self ) :
   if not priority :
          for _ , nodelist in self . conditions_nodelists :
    if six . PY2 :
     def has_key ( self , key , version = None ) :
 if cache is None :
              pass
              if number == 1 and self . allow_empty_first_page :
  if response is None :
   @ property
          if 'warning' in kwargs :
              cursor . execute ( "SELECT cache_key, value, expires FROM %s "  "WHERE cache_key = %%s" % table , [ key ] )
 self . parent_name = parent_name
                       fixture_files_in_dir . append ( ( candidate , fixture_dir , fixture_name ) )
    finally :
  name = [ ]
 pass
   def _get_request ( self ) :
 statements = [ ]
 def __init__ ( self , form , field , name ) :
 processors . append ( func )
 for char in fmt :
 return attrs
   month = MONTHS . index ( m . group ( 'mon' ) . lower ( ) ) + 1
 if self . verbosity >= 2 :
  else :
 str_number = str_number [ 1 : ]
 def __init__ ( self , widgets , attrs = None ) :
  else :
 parser . add_argument ( '--ignorenonexistent' , '-i' , action = 'store_true' ,  dest = 'ignore' , default = False ,  help = 'Ignores entries in the serialized data for fields that do not '  'currently exist on the model.' )
   def value_from_datadict ( self , data , files , name ) :
              self . _current [ field . name ] = str ( getattr ( obj , field . name ) )
                   absolute_path = self . download ( template )
                  return result [ 0 ] , result [ 1 ]
                  mimetype = DEFAULT_ATTACHMENT_MIME_TYPE
                  compiled_regex = re . compile ( regex , re . UNICODE )
                      if f == '__pycache__' :
          return "<BaseConverter: base%s (%s)>" % ( len ( self . digits ) , self . digits )
              raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as an app "  "name. Please try another name." % app_name )
          if '-' not in lang_code :
                         ns = app_list [ 0 ]
 return form . save ( commit = commit )
  except AttributeError :
                  pass
  except StopIteration :
 parser . add_argument ( '--database' , default = DEFAULT_DB_ALIAS ,  help = 'Nominates a database to print the SQL for. Defaults to the '  '"default" database.' )
  else :
 if not template_name_list :
          return len ( value ) == int ( arg )
    def _split_statements ( content ) :
              return
               initial = False
   def __iter__ ( self ) :
   def __repr__ ( self ) :
  return field_dict
  _iterkeys = "iterkeys"
 super ( QueryDict , self ) . appendlist ( key , value )
                  msg += " You may need to add %r to ALLOWED_HOSTS." % domain
  return super ( SortedDict , self ) . setdefault ( key , default )
     class ForNode ( Node ) :
                   parser . add_argument ( 'args' , nargs = '*' )
          super ( CheckboxInput , self ) . __init__ ( attrs )
              raise ValidationError ( self . error_messages [ 'empty' ] , code = 'empty' )
                   content = content . message ( )
 language_code = get_language ( )
  elif timeout == 0 :
 return bool ( ret )
                          if not os . path . isdir ( migrations_directory ) :
                  if self . verbosity > 0 :
  else :
   saved_locale = None
 from __future__ import unicode_literals
 i = i % j
 if six . PY2 :
     FILE_INPUT_CONTRADICTION = object ( )
 from django . utils . encoding import smart_text , is_protected_type
 if key_prefix is None :
 self . choices = choices
  except ( ValueError , TypeError ) :
  template_dir = os . path . join ( app_config . path , 'templates' )
  except Exception as e :
  if not host_validation_re . match ( host ) :
 if self . verbosity >= 1 :
  unescape_string_literal = allow_lazy ( unescape_string_literal )
 words = self . _wrapped . split ( )
 rest = value
  def __init__ ( self , subject = '' , body = '' , from_email = None , to = None , bcc = None ,  connection = None , attachments = None , headers = None , alternatives = None ,  cc = None ) :
  except Exception :
      compare = lambda self , a , b : a < b
   url = url . replace ( '\\' , '/' )
  else :
  if col_name . lower ( ) . find ( '__' ) >= 0 :
                  exclude . append ( f . name )
  from django . core . management . base import AppCommand
   def __eq__ ( self , other ) :
  if y and m and d :
  self . endElement ( name )
                      message = ValidationError ( message )
    return wrapper
                  return pgettext_lazy ( self . message_context , value )
                  fp . write ( src_data )
 from django . forms . widgets import Media , MediaDefiningClass , TextInput , Textarea
  from binascii import Error as BinasciiError
              if hasattr ( message , 'error_dict' ) :
   def get ( self , key , otherwise = None ) :
   else :
                  pass
 if i < 0 :
              if calendar . isleap ( self . data . year ) :
 return result
 slots = orig_vars . get ( '__slots__' )
 html_message = reporter . get_traceback_html ( ) if self . include_html else None
                  values = [ ]
 def urlencode ( value , safe = None ) :
  else :
          lang = None
 self . labels = getattr ( options , 'labels' , None )
  if httponly :
                          temp_lib . filters [ name ] = lib . filters [ name ]
 zfile . flush ( )
 i = self . pointer
           pass
    class TemplateDoesNotExist ( Exception ) :
    except IndexError :
     return new_class
   except NotImplementedError :
 from django . utils . deconstruct import deconstructible
 result = str ( int ( round ( ratio ) ) )
              pass
                      old_handler = signal . signal ( signal . SIGTTOU , signal . SIG_IGN )
   date_re = re . compile (  r'(?P<year>\d{4})-(?P<month>\d{1,2})-(?P<day>\d{1,2})$'  )
 self . fed = [ ]
 if not hasattr ( parser , '_namedCycleNodes' ) :
              if self . decimal_places is not None :
 self . __to_language = to_language ( language )
        def close ( self ) :
  except Exception :
 if self . method != 'POST' :
   def import_string ( dotted_path ) :
              related = getattr ( obj , field . name )
     if not shown :
              form = ManagementForm ( self . data , auto_id = self . auto_id , prefix = self . prefix )
 return self . serialize_headers ( ) + b'\r\n\r\n' + self . content
   if not self . dry_run :
   def send ( self , fail_silently = False ) :
 self . stream . write ( b'-' * 79 )
      """     Adds (or updates) the "Vary" header in the given HttpResponse object.     newheaders is a list of header names that should be in "Vary". Existing     headers in "Vary" aren't removed.     """
  self . encoding = encoding
   def subwidgets ( self , name , value , attrs = None , choices = ( ) ) :
  else :
   i += 1
    if six . PY3 :
                      break
          return super ( Debug , self ) . __init__ ( DEBUG , * args , ** kwargs )
  kw = dict ( ( k , int ( v ) ) for k , v in six . iteritems ( kw ) if v is not None )
 parser . add_argument ( '--noinput' , action = 'store_false' , dest = 'interactive' , default = True ,  help = 'Tells Django to NOT prompt the user for input of any kind.' )
              for x , y in zip ( val1 , val2 ) :
 return '%02d' % self . data . second
  setattr ( obj , self . name , result )
                              out . write ( ' gettext(%r) ' % join_tokens ( singular ,  trimmed ) )
                      if p . find ( ':_(' ) >= 0 :
 trimmed = False
  from django . apps import apps
  super ( RegexField , self ) . __init__ ( max_length , min_length , * args , ** kwargs )
              raise ImproperlyConfigured ( 'Path for saving emails is invalid: %r' % self . file_path )
 old_method = base . __dict__ . get ( old_method_name )
 sign = '-' if seconds < 0 else '+'
    else :
   def calculate_app_template_dirs ( ) :
                  cls . __dispatch [ klass ] = { }
 return do_ntranslate ( singular , plural , number , 'ungettext' )
       def __init__ ( self , key = None , sep = ':' , salt = None ) :
          ch , escaped = next ( input_iter )
              subject = '%s: %s' % (  record . levelname ,  record . getMessage ( )  )
          if getattr ( self , '_client' , None ) is None :
             self . _request = request
                    input_attrs [ 'id' ] = '%s_%s' % ( id_ , i )
  if len ( args ) > 4 :
              basedirs . append ( os . path . join ( app_config . path , 'locale' ) )
  self . _cached_loaders = cached_loaders
  if bytes < KB :
 self . add_item_elements ( handler , item )
              value = self . decompress ( value )
 data = method ( self , * args , ** kwargs )
  def __new__ ( cls , name , bases , attrs ) :
      class BlockNode ( Node ) :
              return super ( DjangoJSONEncoder , self ) . default ( o )
 return WSGIHandler ( )
  else :
 self . use_ssl = settings . EMAIL_USE_SSL if use_ssl is None else use_ssl
 return Template ( source , origin , name )
import os
  else :
     @ python_2_unicode_compatible
 __eq__ = new_method_proxy ( operator . eq )
 raise NotImplementedError ( 'subclasses of Storage must provide a delete() method' )
  except AmbiguityError :
  from django . conf import settings
 hidden_widget = MultipleHiddenInput
   def __getinitargs__ ( self ) :
 return (  output ,  force_text ( errors , DEFAULT_LOCALE_ENCODING , strings_only = True ) ,  p . returncode  )
  else :
 kwargs [ 'error_messages' ] = error_messages
      if self . ignore and field_name not in model_fields :
  import glob
 match = date_re . match ( value )
   @ property
   def attach_alternative ( self , content , mimetype ) :
  want_unicode = False
  try :
   except GeneratorExit :
 obj = '%s.%s' % ( app , model . _meta . object_name )
 return data_set != initial_set
 if self . is_reversed :
 @ stringfilter
   __all__ = ( 'Storage' , 'FileSystemStorage' , 'DefaultStorage' , 'default_storage' )
              return True
 self . validate_key ( key )
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : val } ,  )
      from django . utils import translation
  if self . _wrapped is empty :
  return iri_to_uri ( location )
 return force_text ( unquote_plus ( force_str ( quoted_url ) ) )
              if field . _has_changed ( field . to_python ( initial ) , data ) :
          return NodeList ( node for _ , nodelist in self . conditions_nodelists for node in nodelist )
   except OSError as e :
              self . _load_post_and_files ( )
          raise ValidationError ( _ ( 'Enter a valid integer.' ) , code = 'invalid' )
  def _text_words ( self , length , truncate ) :
       if self . verbosity >= 1 :
 if not cls :
 cache_key = 'views.decorators.cache.cache_header.%s.%s' % (  key_prefix , url . hexdigest ( ) )
                      response = middleware_method ( request , callback , callback_args , callback_kwargs )
 d = ''
 return s [ 1 : - 1 ] . replace ( r'\%s' % quote , quote ) . replace ( r'\\' , '\\' )
  else :
          for taglib in bits [ 1 : ] :
 LOCK_NB = fcntl . LOCK_NB
  else :
           def split_url ( url ) :
                      migration . merged_operations . extend (  loader . get_migration ( node_app , node_name ) . operations  )
 from django . core . exceptions import AppRegistryNotReady
                  e . django_template_source = self . source
              self . __starttag_text = None
       def __init__ ( self , object_list , number , paginator ) :
                error = ValidationError ( error )
 if self . variable_name :
  commands_dict [ app ] . append ( name )
   if args [ 1 ] [ 0 ] == '2' :
          return os . path . getsize ( self . path ( name ) )
 return cursor . fetchone ( ) is not None
 from threading import local
 import warnings
  references_to_delete = { }
   importer = __import__
 statements = sql_delete ( app_config , self . style , connection )
              raise CommandError ( "couldn't extract file %s to %s: %s" %  ( filename , tempdir , e ) )
 def length_is ( value , arg ) :
 from django . core . files import locks , File
   def urlunquote ( quoted_url ) :
              raise self . error_class ( "Unused '%s' at end of if expression." %  self . current_token . display ( ) )
                  if timezone . is_aware ( expires ) :
 if kw [ 'microsecond' ] :
 self . empty_permitted = empty_permitted
 self . validate_key ( key )
 return name + '-clear'
              raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % (  migration_name , app_label ) )
 from django . utils . deprecation import RemovedInDjango19Warning , RemovedInDjango20Warning
 v . __cause__ , v . __traceback__ = e , tb
           raise TemplateSyntaxError (  "'%s' did not receive value(s) for the argument(s): %s" %  ( name , ", " . join ( "'%s'" % p for p in unhandled_params ) ) )
   if opts . fields == ALL_FIELDS :
          return force_str ( self . _tzname )
 if extra_params :
 choices = [ ( i , i ) for i in self . years ]
 if literal_match :
  output_transaction = True
   return response
          return mark_safe ( '\n' . join ( chain ( * [ getattr ( self , 'render_' + name ) ( ) for name in MEDIA_TYPES ] ) ) )
                  return
              self . locale_paths = [ os . path . abspath ( os . path . join ( 'conf' , 'locale' ) ) ]
 return value or arg
              _active . value = self . old_timezone
          from django . conf import settings
              if key in d :
  if not context_instance :
  except LookupError :
   def clean ( self , value ) :
                          raise ValueError ( 'Unable to configure '  'filter %r: %s' % ( name , e ) )
 _fields_ = [  ( 'Internal' , ULONG_PTR ) ,  ( 'InternalHigh' , ULONG_PTR ) ,  ( '_offset_union' , _OFFSET_UNION ) ,  ( 'hEvent' , HANDLE ) ]
  return '\n\n' . join ( paras )
          if value is None :
 options [ 'secret_key' ] = get_random_string ( 50 , chars )
  if command in parse_until :
  if self . username and self . password :
          key = self . make_key ( key , version = version )
     class MovedModule ( _LazyDescr ) :
 plist = _parse_header_params ( b';' + line )
                              cursor . execute ( sql )
 if min_length is not None :
                      lead , trail = escape ( lead ) , escape ( trail )
              self . years = years
              return { "xmlns" : self . ns }
   def invalid_block_tag ( self , token , command , parse_until = None ) :
   return otherwise
 for name in pattern . reverse_dict :
          if data in ( None , FILE_INPUT_CONTRADICTION ) :
  final_attrs = self . build_attrs ( attrs , type = self . input_type , name = name )
          arg = settings . TIME_FORMAT
                  self . active_writers += 1
   if initial is not None :
 usage = '%%prog %s [options] %s' % ( subcommand , self . args )
  def copystat ( src , dst ) :
              use_func = True
          self . target , self . expression = target , expression
                              if transfer_encoding == 'base64' :
   if answer != "y" :
  self . _regex = regex
               return dec ( func )
 return dateformat . time_format ( value , get_format ( format or 'TIME_FORMAT' , use_l10n = use_l10n ) )
                          continue
              field_type , new_params = field_type
   self . save_m2m = save_m2m
          final_attrs = self . build_attrs ( attrs , type = 'checkbox' , name = name )
              try :
   if num_loopvars != len_item :
  if isinstance ( app_name , BaseCommand ) :
      if PY3 :
 for name , app in six . iteritems ( get_commands ( ) ) :
  elif _locs_ is None :
 literal_regex = re . compile (   r'\[([A-f0-9:\.]+)\]$' ,  re . IGNORECASE )
 raise NotImplementedError ( 'subclasses of Serializer must provide an handle_field() method' )
   def gettext_noop ( message ) :
                if e . errno != errno . ENOENT :
           yes , no , maybe = bits [ 0 ] , bits [ 1 ] , bits [ 1 ]
  try :
     if self . asvar :
  from django . conf import settings
              primary_keys = pks . split ( ',' )
  except signing . BadSignature :
 nodelist = parser . parse ( ( 'elif' , 'else' , 'endif' ) )
          attrs = super ( DecimalField , self ) . widget_attrs ( widget )
              url = urlunsplit ( ( scheme , netloc , path , query , fragment ) )
                  qs = self . model . _default_manager . get_queryset ( )
  if prefix is None :
   return "%s.%s" % ( package [ : dot ] , name )
  with connection . cursor ( ) as cursor :
     class InterBoundaryIter ( six . Iterator ) :
   def add_fields ( self , form , index ) :
 from django . core . management import call_command
 for post_callback in self . _post_render_callbacks :
   def created_time ( self , name ) :
 for basedir in basedirs :
              options = parser . parse_args ( argv [ 2 : ] )
 return datetime . datetime ( ** kw )
     def learn_cache_key ( request , response , cache_timeout = None , key_prefix = None , cache = None ) :
  try :
              sequence_sql = connection . ops . sequence_reset_sql ( no_style ( ) , self . models )
          instance = construct_instance ( form , instance , fields , exclude )
              self . instance = instance
    UNKNOWN_SOURCE = '<unknown source>'
              sys . stdout . write ( django . get_version ( ) + '\n' )
              return self . forms [ 0 ] . media
     class TypedChoiceField ( ChoiceField ) :
   def listdir ( self , path ) :
          final_attrs = dict ( self . attrs , type = self . input_type , name = self . name , value = self . choice_value )
 import warnings
  return super ( SimpleTemplateResponse , self ) . content
    def tag_function ( self , func ) :
 Field . creation_counter += 1
 import binascii
                      view_name = callback . __name__
   class FixUnicode ( fixer_base . BaseFix ) :
 self . alternatives . append ( ( content , mimetype ) )
 super ( TemplateResponse , self ) . __init__ (  template , context , content_type , status )
              if isinstance ( end , unicode ) :
          return WRAPPER_ASSIGNMENTS
  inner_result , inner_args = [ ] , [ ]
  if not isinstance ( s , six . string_types ) :
              object_data . update ( initial )
   if hasattr ( middleware , 'process_view' ) :
   return msg
 stderr . write ( '%s: %s' % ( e . __class__ . __name__ , e ) )
              yield d
              return _ ( 'noon' )
 HITS , MISSES = 0 , 1
                          finder = hook ( entry )
 for f in filters :
 from __future__ import unicode_literals
 import os
          return value
 for character in name :
 class BaseFormSet ( object ) :
              self . execute ( * args , ** cmd_options )
     class DTDForbidden ( DefusedXmlException ) :
          parser . add_argument ( 'app_label' ,  help = 'App label of the application containing the migration.' )
                  i += 1
    class SimpleTemplateResponse ( HttpResponse ) :
 seek = property ( lambda self : self . file . seek )
              return self . g ( )
 return sys . modules [ name ]
  result . queryset = result . queryset
      def __init__ ( self , var , name , nodelist , extra_context = None ) :
  return result
   super ( Command , self ) . handle ( 'app' , app_name , target , ** options )
              urlconf_repr = repr ( self . urlconf_name )
 self . paths_to_remove = [ ]
                      arg_vals . append ( arg . resolve ( context ) )
  except AttributeError :
 self . waiting_readers = 0
 return mark_safe ( format_string . format ( * args_safe , ** kwargs_safe ) )
   __all__ = (  'Field' , 'CharField' , 'IntegerField' ,  'DateField' , 'TimeField' , 'DateTimeField' ,  'RegexField' , 'EmailField' , 'FileField' , 'ImageField' , 'URLField' ,  'BooleanField' , 'NullBooleanField' , 'ChoiceField' , 'MultipleChoiceField' ,  'ComboField' , 'MultiValueField' , 'FloatField' , 'DecimalField' ,  'SplitDateTimeField' , 'IPAddressField' , 'GenericIPAddressField' , 'FilePathField' ,  'SlugField' , 'TypedChoiceField' , 'TypedMultipleChoiceField'  )
     @ property
      help = ( "Creates a Django app directory structure for the given app "  "name in the current directory or optionally in the given "  "directory." )
   def escapejs ( value ) :
  try :
 def __init__ ( self , urlconf_name , default_kwargs = None , app_name = None , namespace = None ) :
                  try :
              max_width = min ( ( line . endswith ( '\n' ) and width + 1 or width ) , width )
 seconds = abs ( seconds )
 if categories :
 from django . core . cache import caches
                          if field_type == 'AutoField(' :
  if name not in parser . _namedCycleNodes :
 from django . utils . functional import lazy
 urlconf = settings . ROOT_URLCONF
   if self . empty_permitted and not self . has_changed ( ) :
  return urljoin ( self . base_url , filepath_to_uri ( name ) )
  try :
                 MIMEText . __init__ ( self , text , subtype , None )
    if html :
 raise StopFutureHandlers ( )
  elif issubclass ( klass , logging . handlers . SysLogHandler ) and 'address' in config :
              if not self . _has_expired ( key ) :
 if tags is not None :
 UnlockFileEx . restype = BOOL
                  def handle_m2m ( value ) :
 readline . set_completer ( rlcompleter . Completer ( imported_objects ) . complete )
              pass
  qs = qs . using ( form . instance . _state . db )
              if saved_locale is not None :
                  if nodelist . contains_nontext :
 return nodelist_true_output or self . nodelist_true . render ( context )
          parser . add_argument ( 'args' , metavar = 'app_label' , nargs = '*' ,  help = 'Specify the app label(s) to create migrations for.' )
              handler . addQuickElement ( 'updated' , rfc3339_date ( item [ 'updateddate' ] ) )
   try :
                                  getcallargs ( current )
 guessed_filename = params . get ( 'filename' ) or used_name
                              field_desc += ', '
   else :
  else :
                          self . load_middleware ( )
              return self . keyOrder [ : ]
 return self . _html_output (  normal_row = '<tr%(html_class_attr)s><th>%(label)s</th><td>%(errors)s%(field)s%(help_text)s</td></tr>' ,  error_row = '<tr><td colspan="2">%s</td></tr>' ,  row_ender = '</td></tr>' ,  help_text_html = '<br /><span class="helptext">%s</span>' ,  errors_on_separate_row = False )
              result = self . buffer + self . _read_limited ( size - len ( self . buffer ) )
              extra_classes . add ( self . form . required_css_class )
  return ustring_re . sub ( fix , s )
      class ChunkIter ( six . Iterator ) :
          exp = Decimal ( '1.0' ) / ( Decimal ( 10 ) ** abs ( p ) )
          return callback , ''
  except ImproperlyConfigured as exc :
  date = datetime_safe . new_datetime ( date )
   settings . _setup ( )
          obj = super ( MultiWidget , self ) . __deepcopy__ ( memo )
      pass
 dlen = len ( defaults or [ ] )
   def page ( self , number ) :
 def cut ( value , arg ) :
  with transaction . atomic ( using = database ,  savepoint = connection . features . can_rollback_ddl ) :
   else :
  from django . apps import apps
                  if _ipv6 :
   raise TemplateDoesNotExist ( template_name )
 s . serialize ( queryset , ** options )
          try :
      format_key = 'DATE_INPUT_FORMATS'
 import itertools
   if format_module_path is None :
   def unlock ( f ) :
 from django . utils . deprecation import RemovedInDjango19Warning
  sys . modules [ __name__ + ".moves.urllib_request" ] = sys . modules [ __name__ + ".moves.urllib.request" ] = Module_six_moves_urllib_request ( __name__ + ".moves.urllib.request" )
  except ImproperlyConfigured :
  elif self . fixture_object_count == self . loaded_object_count :
 created_models . add ( model )
     def _get_foreign_key ( parent_model , model , fk_name = None , can_fail = False ) :
   def led ( self , left , parser ) :
              if six . PY3 :
  except ( TypeError , VariableDoesNotExist ) :
 filters . append ( ( filter_func , args ) )
                          global invalid_var_format_string
 value = re . sub ( '[^\w\s-]' , '' , value ) . strip ( ) . lower ( )
 for migration in merge_migrations :
 self . silent = silent
      return force_text ( ngettext ( singular , plural , number ) )
  else :
 from django . core import checks
   def get_field_type ( self , connection , table_name , row ) :
  return default
    forms_valid = True
          if not support_legacy :
   from django . template . base import ( ContextPopException , InvalidTemplateLibrary ,  TemplateDoesNotExist , TemplateEncodingError , TemplateSyntaxError ,  VariableDoesNotExist )
                   best_doublecolon_len = doublecolon_len
 if self . _errors is None :
 pass
from __future__ import unicode_literals
   def __str__ ( self ) :
 if isinstance ( filename , MIMEBase ) :
 @ stringfilter
  zfile . close ( )
              try :
              raise ValueError ( 'ModelForm has no model class specified.' )
  handler . addQuickElement ( "lastBuildDate" , rfc2822_date ( self . latest_post_date ( ) ) )
      def __init__ ( self , s ) :
              check_programs ( 'msguniq' , 'msgmerge' , 'msgattrib' )
  else :
  except ValidationError as e :
           state_frame = self . _get_context_stack_frame ( context )
  if self . locale_paths :
 try :
  if pks :
   def close ( self , ** kwargs ) :
  if self . silent :
      class Rss201rev2Feed ( RssFeed ) :
 content_subtype = 'plain'
 output = force_text ( output )
    code . interact ( local = imported_objects )
   def _post_clean ( self ) :
                      value = field . to_python ( getInnerText ( field_node ) . strip ( ) )
   def __copy__ ( self ) :
          if self . id_for_label :
 for p in plist :
 msg [ 'Subject' ] = self . subject
      class Atom1Feed ( SyndicationFeed ) :
    @ register . tag
  output , errors = p . communicate ( )
                    compare_to = [ var . resolve ( context , True ) for var in self . _varlist ]
   if subcommand in no_settings_commands :
 return binascii . unhexlify ( ( hex_format_string % x ) . encode ( 'ascii' ) )
 parser . delete_first_token ( )
     class SpacelessNode ( Node ) :
   def parse_file_upload ( self , META , post_data ) :
          self . tokens = tokens
     def open ( self , name , mode = 'rb' ) :
 path = path . lstrip ( '/' ) . lstrip ( '\\' )
  for d in object_list :
          raise TemplateSyntaxError ( "next-to-last argument to 'regroup' tag must"  " be 'as'" )
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
  regex = re_words if words else re_chars
   @ property
                  for i_item , i_args in zip ( inner_result , inner_args ) :
              if is_aware ( o ) :
 from django . core . exceptions import ImproperlyConfigured
          if isinstance ( elt , six . string_types ) :
 self . field_name = field_name
     __delitem__ = complain
  else :
                          continue
 try :
 self . content_type_extra = content_type_extra
     @ register . filter ( is_safe = False )
 if bf . is_hidden :
                          self . stdout . write ( 'ignoring directory %s\n' % dirname )
   def __eq__ ( self , other ) :
  self . stderr . write ( "Error: %s" % error_text )
 self . _out . write ( force_str ( style_func ( msg ) ) )
              MIMEText . __init__ ( self , text , subtype , charset )
    def get_public_serializer_formats ( ) :
                        flags = ( os . O_WRONLY | os . O_CREAT | os . O_EXCL |  getattr ( os , 'O_BINARY' , 0 ) )
  else :
          _serializers [ format ] = module
  try :
 from django . template import loader , Context , RequestContext
   def resolve ( self , context , ignore_failures = False ) :
 from django . utils . translation import TranslatorCommentWarning , trim_whitespace , LANGUAGE_SESSION_KEY
 from django . utils . deprecation import RemovedInDjango19Warning
 if isinstance ( value , list ) :
   else :
 import sys
                  self . remove_potfiles ( )
  if has_old_option :
 values = [ parser . compile_filter ( arg ) for arg in args [ 1 : - 2 ] ]
 def phone2numeric_filter ( value ) :
   _serializers = serializers
 if isinstance ( d , real_datetime ) :
  return templatetags_modules
   class MultiPartParserError ( Exception ) :
          return self . _queryset
   self . check_test = boolean_check if check_test is None else check_test
              return self . hashvalue
 for item in values :
    if not isinstance ( self . object_list , list ) :
           if hasattr ( value , '__iter__' ) and not isinstance ( value , ( bytes , six . string_types ) ) :
 self . _post_parse_error = True
 from django . core . wsgi import get_wsgi_application
 if 100 <= response . status_code < 200 or response . status_code in ( 204 , 304 ) :
    def ugettext ( message ) :
 if use_natural_keys :
 import unicodedata
   form . data [ form . add_prefix ( self . fk . name ) ] = None
  return '\n' . join ( output )
      content_type = META . get ( 'HTTP_CONTENT_TYPE' , META . get ( 'CONTENT_TYPE' , '' ) )
 app . initialize ( argv = [ ] )
   return response
 bits = token . split_contents ( )
              name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
                  try :
  except ImportError :
              validate_ipv6_address ( value )
  seqs = connection . introspection . sequence_list ( ) if reset_sequences else ( )
                  try :
  return self . _namespace_dict [ language_code ]
              match = kwarg_re . match ( bit )
   from django . core . validators import EMPTY_VALUES
          lang_code = request . session . get ( LANGUAGE_SESSION_KEY )
 self . unget ( chunk [ remaining : ] )
              warnings . warn ( 'Cache key will cause errors if used with memcached: '  '%s (longer than %s)' % ( key , MEMCACHE_MAX_KEY_LENGTH ) ,  CacheKeyWarning )
              raise CommandError ( "%r conflicts with the name of an existing "  "Python module and cannot be used as a "  "project name. Please try another name." %  project_name )
                      match = condition . eval ( context )
                  for filename in locale_filenames :
   if errors :
 pass
    sql_list = sql_flush ( self . style , connection , only_django = True ,  reset_sequences = reset_sequences ,  allow_cascade = allow_cascade )
    class MediaDefiningClass ( type ) :
 self . attrs , self . choices = attrs , choices
                          g = g . strip ( '"' )
                      if model in created_models :
          super ( StreamingHttpResponse , self ) . __init__ ( * args , ** kwargs )
                  raise ValueError
              base_url += '/'
   if content_length > settings . FILE_UPLOAD_MAX_MEMORY_SIZE :
   elif t . token_type == TOKEN_VAR :
  from __future__ import unicode_literals
   def add ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
   super ( Command , self ) . run_from_argv ( argv )
  elif i < list_length - 1 :
 value = template_localtime ( value , use_tz = context . use_tz )
                  raise ImproperlyConfigured (  '"%s" is not a valid regular expression: %s' %  ( regex , six . text_type ( e ) ) )
   else :
      if self . has_header ( 'Content-Encoding' ) :
                                      over_chunk = field_stream . read ( 4 - over_bytes )
   for filename in filenames :
  else :
 verbosity = options . get ( 'verbosity' )
   class Page ( collections . Sequence ) :
 result = self . configurator . convert ( value )
  write ( arg )
 return result
   @ property
 import signal
  po_path = os . path . join ( dirpath , f )
  except ( ValueError , TypeError , OverflowError ) :
   def end_serialization ( self ) :
    class RendererMixin ( object ) :
  else :
          return self . __offset
  connection = connections [ options [ 'database' ] ]
 try :
 fixture_name = os . path . basename ( fixture_name )
  super ( SortedDict , self ) . __setitem__ ( key , value )
  if strings_only and is_protected_type ( s ) :
 simple_url_2_re = re . compile ( r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$' , re . IGNORECASE )
 if ( isinstance ( args [ 0 ] , SafeData ) and  getattr ( _dec . _decorated_function , 'is_safe' , False ) ) :
    ip_str = _explode_shorthand_ip_string ( ip_str )
      from functools import lru_cache
 if form . _meta . widgets :
 def time ( value , arg = None ) :
          return ''
 process_all = options . get ( 'all' )
     class Deserializer ( base . Deserializer ) :
   if '.' in str_number :
                  if field_node . getElementsByTagName ( 'None' ) :
              words = words [ : length ]
          pass
              return smart_text ( auto_id ) % self . html_name
import django
   def __repr__ ( self ) :
 year = year + off
  def add_arguments ( self , parser ) :
                   raise TemplateSyntaxError (  "'%s' received multiple values for keyword argument '%s'" %  ( name , param ) )
 @ stringfilter
  from django . db import models
 cmatch = constant_re . match ( parts [ 0 ] )
 def ifnotequal ( parser , token ) :
   else :
 self . asvar = asvar
 super_set = super ( SortedDict , self ) . __setitem__
   def render ( self , name , value , attrs = None ) :
          return s
                              data = base64 . b64decode ( raw_data )
  else :
     class NodeList ( list ) :
    class RWLock ( object ) :
          if '@' in addr :
  except ImportError :
 if has_bom ( po_path ) :
              result . setLevel ( _checkLevel ( level ) )
                              continue
 parser . add_argument ( '--exclude' , '-x' , default = [ ] , dest = 'exclude' , action = 'append' ,  help = 'Locales to exclude. Default is none. Can be used multiple times.' )
  key = self . to_field_name or 'pk'
 parser . add_argument ( '--pythonpath' ,  help = 'A directory to add to the Python path, e.g. "/home/djangoprojects/myproject".' )
 import sys
   def reload ( self ) :
    def urlize ( text , trim_url_limit = None , nofollow = False , autoescape = False ) :
  urlunquote = allow_lazy ( urlunquote , six . text_type )
          return delattr ( caches [ DEFAULT_CACHE_ALIAS ] , name )
 self . endChannelElement ( handler )
 return f . fileno ( ) if hasattr ( f , 'fileno' ) else f
 if self . data . minute == 0 :
              raise InvalidTemplateLibrary ( "Template library %s not found, "  "tried %s" %  ( library_name ,  ',' . join ( tried_modules ) ) )
 pass
     m2m_data = { }
 from django . core . management . utils import find_command , popen_wrapper
 args = '[fixture ...]'
                      ch , escaped = next ( pattern_iter )
 trail = closing + trail
  if not settings . configured :
  sub_ul_renderer = ChoiceFieldRenderer ( name = self . name ,  value = self . value ,  attrs = attrs_plus ,  choices = choice_label )
              initial = bool ( initial )
   if new_conn_created :
 self . write ( s , encoding )
  try :
                      return self . strptime ( value , format )
  return _ ( 'a.m.' )
   return name
 widget = self . field . widget
          key = self . make_key ( key , version = version )
   def validate_number ( self , number ) :
              self . reader_leaves ( )
   raise TypeError ( "Lazy object returned unexpected type." )
  elif action == "apply_success" :
 num = 0
                  args = options . args
  except StandardError as e :
   def i ( self ) :
  import copy
 if not self . is_valid ( ) or not self . can_order :
 _cached_modules = set ( )
                  return getattr ( instance , name ) ( value )
      return b64_encode ( salted_hmac ( salt , value , key ) . digest ( ) )
              table_names = connection . introspection . table_names ( cursor )
              confirm = input ( """You have requested a flush of the database. This will IRREVERSIBLY DESTROY all data currently in the %r database, and return each table to an empty state. Are you sure you want to do this?     Type 'yes' to continue, or 'no' to cancel: """ % connection . settings_dict [ 'NAME' ] )
              year_val = month_val = day_val = None
 mode = stat . S_IMODE ( st . st_mode )
  if error_messages and f . name in error_messages :
 value = getattr ( obj , field . rel . field_name )
 if django . VERSION [ - 2 ] != 'final' :
 from django . utils . encoding import force_text
 import re
  return self . _upload_handlers
          if can_fail :
              handler . addQuickElement ( "link" , '' ,  { "rel" : "enclosure" ,  "href" : item [ 'enclosure' ] . url ,  "length" : item [ 'enclosure' ] . length ,  "type" : item [ 'enclosure' ] . mime_type } )
                          try :
  def __init__ ( self , content_type = None , status = None , reason = None ) :
  msgs = msgs . replace ( old , new )
  if fields and f . name not in fields :
              self . _populate ( )
              raise ValidationError ( self . error_messages [ 'required' ] , code = 'required' )
                   import_string ( backend )
 from django . utils . encoding import force_bytes
                  if targets [ 0 ] [ 1 ] is None :
      if termios :
                      if not self . _css . get ( medium ) or path not in self . _css [ medium ] :
  return data
  now = datetime . now ( ) . strftime ( '%B %d, %Y - %X' )
   def __enter__ ( self ) :
   def __repr__ ( self ) :
                          response = middleware . process_template_response ( request , response )
  import hmac
          return datetime . now ( )
 from django . utils . encoding import force_text
                   raise
              name_str = "; " . join (  "%s in %s" % ( ", " . join ( names ) , app )  for app , names in conflicts . items ( )  )
from __future__ import unicode_literals
                  return
          for key in self . keyOrder :
 def __init__ ( self , server , params ) :
              return False
  return self . _text_chars ( length , truncate , text , truncate_len )
 self . tags = { }
   return property ( fget , fset , fdel , doc )
 g . flatten ( self , unixfrom = unixfrom )
              self . instance = instance
  if hasattr ( decorator , '__name__' ) :
       BM_compatible = True
 for name in sorted ( commands_dict [ app ] ) :
                      middle = middle [ len ( opening ) : ]
          return iter ( self . keyOrder )
 context_extras [ 'sql_queries' ] = connection . queries
    def get_script_prefix ( ) :
 msg [ 'To' ] = self . extra_headers . get ( 'To' , ', ' . join ( self . to ) )
                  yield safe_join ( template_dir , template_name )
     kwargs [ 'stream' ] = None
 file_name = self . IE_sanitize ( unescape_entities ( file_name ) )
 if not self . form . is_bound :
  else :
   class Field ( object ) :
  except ( ssl . SSLError , smtplib . SMTPServerDisconnected ) :
                    opts . fields = None
              if self . verbosity >= 1 :
  else :
          non_atomic_requests = getattr ( view , '_non_atomic_requests' , set ( ) )
     class CharField ( Field ) :
     self . run_validators ( value )
                  return kwargs
          return super ( Info , self ) . __init__ ( INFO , * args , ** kwargs )
               return { }
      is_usable = False
 module_values = set ( sys . modules . values ( ) )
 FILTER_ARGUMENT_SEPARATOR = ':'
 if router . allow_migrate ( self . using , obj . object . __class__ ) :
          super ( HttpResponse , self ) . __init__ ( * args , ** kwargs )
      import stat
 obj_dict = super ( SimpleTemplateResponse , self ) . __getstate__ ( )
           all_unique_checks = set ( )
              return apps . get_model ( model_identifier )
              state_frame [ self ] = compare_to
 truncate_text = self . add_truncation_text ( '' , truncate )
   if os . path . isabs ( fixture_name ) :
  __iter__ = _iterkeys
    if display_num_errors :
   class Truncator ( SimpleLazyObject ) :
 self . _payload = payload . decode ( 'ascii' , 'surrogateescape' )
 self . _dir = os . path . abspath ( dir )
          return timedelta ( 0 )
    return output [ : : - 1 ]
 self . extend_nodelist ( nodelist , var_node , token )
  last_bit = self . template_string [ upto : ]
 if space == 0 :
         for cache in caches . all ( ) :
  try :
 if tags and any ( not checks . tag_exists ( tag ) for tag in tags ) :
 missing_args_message = ( "No database fixture specified. Please provide the "  "path of at least one fixture in the command line." )
 return super ( QueryDict , self ) . setlistdefault ( key , default_list )
  result = func ( * args )
 return getattr ( _prefixes , "value" , '/' )
  func = TemplateLoader
  elif not isinstance ( end , str ) :
   def simple_tag ( self , func = None , takes_context = None , name = None ) :
  digits = len ( digittuple )
 parser . add_argument ( '--symlinks' , '-s' , action = 'store_true' , dest = 'symlinks' ,  default = False , help = 'Follows symlinks to directories when examining '  'source code and templates for translation strings.' )
          return self . _name
 from django . db import connections , router , transaction , DEFAULT_DB_ALIAS
from __future__ import unicode_literals
              if six . PY2 :
 hidden_widget = SplitHiddenDateTimeWidget
   def handle ( self , * args , ** options ) :
 return http . parse_cookie ( raw_cookie )
 def __getattr__ ( self , name ) :
 if comment_lineno_cache == cur_lineno :
   if alias not in settings . CACHES :
                  unique = "UNIQUE " if f . unique else ""
 return errors
  else :
  def __init__ ( self , * args , ** kwargs ) :
 memo [ id ( self ) ] = result
 INFO = 20
              msg = self . style . HTTP_NOT_MODIFIED ( msg )
  except ValueError :
 id_ = widget . attrs . get ( 'id' ) or self . auto_id
          stream = stream_or_string
          l = lambda x : self . make_key ( x , version = version )
   def __repr__ ( self ) :
                  self . create_table ( db , tablename )
 data_value = data if data is not None else ''
              if isinstance ( option_label , ( list , tuple ) ) :
               klass = app_name
  return klass
    def has_leading_dir ( self , paths ) :
 if plan :
  def inner ( check ) :
              label_for = ''
 base_subdir = '%s_template' % app_or_project
       def decorating_function ( user_function ) :
                   try :
 from django . utils . functional import total_ordering
   class Module_six_moves_urllib_request ( _LazyModule ) :
  except StopIteration :
 return form
 try :
              return cache [ mem_args ]
  import time
  yield '    %s' % field_desc
 pass
 cls . _delegate_text = six . text_type in resultclasses
   def __delitem__ ( self , key ) :
    basedirs = set ( map ( os . path . abspath , filter ( os . path . isdir , basedirs ) ) )
  except OSError as e :
              return self . html_name
 self . name = name
 if template is None :
  from django . utils . deprecation import RemovedInDjango19Warning
 app_models = router . get_migratable_models ( app_config , connection . alias , include_auto_created = True )
 trailing_empty_content_re = re . compile ( r'(?:<p>(?:&nbsp;|\s|<br \/>)*?</p>\s*)+\Z' )
 def content ( self , value ) :
  if connection . settings_dict [ 'ENGINE' ] == 'django.db.backends.dummy' :
              data = [ ]
 @ stringfilter
              guessed_filename = used_name
  self . environ = environ
 parser . add_argument ( '--no-wrap' , action = 'store_true' , dest = 'no_wrap' ,  default = False , help = "Don't break long message lines into several lines." )
  return mark_safe ( '\n' . join ( inputs ) )
          self . file . seek ( 0 )
          wsgi_opts = {  'maxSpare' : int ( options [ "maxspare" ] ) ,  'minSpare' : int ( options [ "minspare" ] ) ,  'maxChildren' : int ( options [ "maxchildren" ] ) ,  'maxRequests' : int ( options [ "maxrequests" ] ) ,  }
   def write_migration_files ( self , changes ) :
 yield buf . read ( )
                      words [ i ] = mark_safe ( word )
          return False
   def get_version ( version = None ) :
 LIGHT_PALETTE = 'light'
              try :
   def __deepcopy__ ( self , memo ) :
    class Serializer ( object ) :
   try :
   def _construct_form ( self , i , ** kwargs ) :
from django . core . files . base import File
 self . _js = [ ]
  if number_equal > 40 :
 MONTHS_3_REV = {  'jan' : 1 , 'feb' : 2 , 'mar' : 3 , 'apr' : 4 , 'may' : 5 , 'jun' : 6 , 'jul' : 7 , 'aug' : 8 ,  'sep' : 9 , 'oct' : 10 , 'nov' : 11 , 'dec' : 12  }
              newline = "\n"
                if not ip_str . split ( ':' ) [ - 1 ] == hextet :
   def close ( self ) :
   @ property
                       field_value = [ getInnerText ( k ) . strip ( ) for k in keys ]
 import re
       def __init__ ( self , name ) :
 return
              result . append ( self . create_token ( last_bit , ( upto , upto + len ( last_bit ) ) , False ) )
              if cleaned_data is not None :
              self [ : ] = tup
              field = f . name
   def accessed_time ( self , name ) :
              attrs = { }
    def render_to_string ( template_name , dictionary = None , context_instance = None ,  dirs = None ) :
   if hasattr ( filter_func , "_decorated_function" ) :
                                  sql . extend ( connection . creation . sql_for_pending_references ( refto , no_style ( ) , pending_references ) )
              cursor . execute ( "SELECT COUNT(*) FROM %s" % table )
  def render ( self , context ) :
 result . fields = tuple ( [ x . __deepcopy__ ( memo ) for x in self . fields ] )
   self . default_timeout = timeout
 def linenumbers ( value , autoescape = None ) :
              return output
 if _locs_ is None :
  except KeyError :
               tables = connection . introspection . table_names ( cursor )
              if self . count == 0 and not self . allow_empty_first_page :
 self . plural = lambda n : int ( n != 1 )
              cmp_fmt = parts [ - 1 ]
  from django . core . exceptions import ValidationError , NON_FIELD_ERRORS
  field_desc += ', ' . join ( [  '%s=%s' % ( k , strip_prefix ( repr ( v ) ) )  for k , v in extra_params . items ( ) ] )
          return t . render ( context_instance )
                          raise TemplateSyntaxError (  "'%s' received too many positional arguments" %  name )
 if nodelist . get_nodes_by_type ( ExtendsNode ) :
   def value_from_datadict ( self , data , files , name ) :
   def _get_size_from_underlying_file ( self ) :
     class BaseArchive ( object ) :
 for j in xrange ( int ( iterations ) ) :
          app_name , target = options . pop ( 'name' ) , options . pop ( 'directory' )
          skipped = [ ]
  return self . get_connection ( fail_silently ) . send_messages ( [ self ] )
 from django . db . migrations . state import ProjectState
          if not isinstance ( index , ( slice , ) + six . integer_types ) :
   if six . PY2 and value > sys . maxint :
    else :
          parser . add_argument ( 'args' , metavar = self . label , nargs = '+' )
 number_equal = len ( [ current_number for current_number in self . _unget_history  if current_number == num_bytes ] )
  return BoundField ( self , field , name )
 from django . utils . encoding import smart_text , force_str , force_text
  def __init__ ( self , name , value , attrs , choices ) :
 use_grouping = settings . USE_L10N and settings . USE_THOUSAND_SEPARATOR
                  if not self . fail_silently :
          __str__ = serialize_headers
                  from django . core . servers . fastcgi import FASTCGI_OPTIONS
  except OSError as e :
              data = file . read ( chunk_size )
 hhmm = '%02d%02d' % divmod ( abs ( offset ) , 60 )
    class SafeData ( object ) :
  else :
               for h in logger . handlers [ : ] :
              if isinstance ( other , Promise ) :
                   def dec ( func ) :
   def __len__ ( self ) :
 if safe and arg != ';' :
                              t = get_template ( file_name )
  else :
    def emit_pre_migrate_signal ( create_models , verbosity , interactive , db ) :
   if self . no_obsolete :
          tag , this_value_expr , max_value_expr , max_width , as_ , asvar = bits
              for name , value in props . items ( ) :
 if css_classes :
 fixture_name = os . path . basename ( fixture_name )
  except LookupError :
              list_ = super ( MultiValueDict , self ) . __getitem__ ( key )
          if find_command ( program ) is None :
  setattr ( self . _wrapped , name , value )
              for error in self . error_list :
 if is_templatized :
 if obj_list is None :
                  opfunc . __name__ = opname
 self . name = name
                  trimmed = trim_url ( middle )
 def __init__ ( self , dt ) :
 from django . utils . encoding import force_text
                  qs = qs . order_by ( self . model . _meta . pk . name )
                      filename = filename . encode ( 'utf-8' )
          return cls . __new__ ( cls , * args )
 if is_ignored ( file_path , self . ignore_patterns ) :
 self . regex = regex
    class DeserializationError ( Exception ) :
   opts = new_class . _meta = ModelFormOptions ( getattr ( new_class , 'Meta' , None ) )
   attrs = flatatt ( attrs ) if attrs else ''
              raise ValidationError ( errors )
                          self . stdout . write ( 'ignoring file %s in %s\n' % ( filename , dirpath ) )
              msg = self . style . HTTP_INFO ( msg )
import os
 instance . keyOrder = [ ]
  while RUN_RELOADER :
   class UTC ( tzinfo ) :
          from django . db . models . fields . related import RelatedObject
              return get_template ( template_name , dirs )
                  if tag . lower ( ) != self . cdata_tag :
  except ( OSError , TypeError ) :
                          continue
  if plen < ( alen - dlen ) or plen > alen :
 field_list = [ ]
              for module in get_format_modules ( lang ) :
 boolean_attrs = [ ]
  try :
 from django . utils . encoding import force_bytes , python_2_unicode_compatible
  pickled = pickle . dumps ( value , pickle . HIGHEST_PROTOCOL )
 self . current_token = self . next_token ( )
 content = content . encode ( 'utf-8' )
  elif disable_existing :
 return do_ifequal ( parser , token , False )
   super_set ( key , value )
                       field_value = getInnerText ( node ) . strip ( )
 s_len = 0
                          new_filenames . append ( os . path . join ( dirpath , filename ) )
                      declared_fields . pop ( attr )
              del self . _headers [ header . lower ( ) ]
  except DatabaseError as e :
 clean = lambda self , x : len ( x )
              self . months = months
 self . username = settings . EMAIL_HOST_USER if username is None else username
    def filepath_to_uri ( path ) :
 if commit :
                          for sql in sql_list :
    def __setitem__ ( self , key , value ) :
 from django . forms . forms import DeclarativeFieldsMetaclass , BaseForm
 for char in self . add_truncation_text ( '' , truncate ) :
  return attrs
          self . _validate_unique = True
     for handler in handlers :
          if not hasattr ( self , '_queryset' ) :
      return trim_whitespace_re . sub ( ' ' , s . strip ( ) )
                      raise NoReverseMatch (  "%s is not a registered namespace inside '%s'" %  ( key , ':' . join ( resolved_path ) ) )
              pass
   if script_url :
 if callable ( initial_value ) :
          wsgi_opts = {  'maxSpare' : int ( options [ "maxspare" ] ) ,  'minSpare' : int ( options [ "minspare" ] ) ,  'maxThreads' : int ( options [ "maxchildren" ] ) ,  }
                                  d = d [ idx ]
 def add ( value , arg ) :
 FormSet = modelformset_factory ( model , ** kwargs )
  self . lookups = tuple ( var . split ( VARIABLE_ATTRIBUTE_SEPARATOR ) )
              self . style_func = style_func
 s = MLStripper ( )
 newlines = property ( lambda self : self . file . newlines )
 with io . open ( orig_file , encoding = settings . FILE_CHARSET ) as fp :
      from django . utils import timezone
          if self . verbosity >= 1 :
  if migration_name == "zero" :
          for node in self . nodelist :
 from django . utils import six
  else :
 if fp is None :
  if labels is not None :
              if hasattr ( data , 'read' ) :
 result . key = key
 key = plist . pop ( 0 ) . lower ( ) . decode ( 'ascii' )
   for migration in merge_migrations :
  else :
   level = config . pop ( 'level' , None )
 for header in cc_delim_re . split ( response [ 'Vary' ] ) :
              for field , error_list in self . error_dict . items ( ) :
  __import__ ( name )
   if t . token_type == TOKEN_BLOCK :
  except KeyError :
  value = connections [ db ] . ops . process_clob ( row [ 1 ] )
  return self . _encoding
             if iri is None :
          return self . _create_attachments ( msg )
   def add_filters ( self , filterer , filters ) :
 from django . core . serializers import base
 handler . startDocument ( )
  self . _init_translation_catalog ( )
   class Command ( BaseCommand ) :
 from django . template . context import ( BaseContext , Context , RequestContext ,  ContextPopException )
                  return 1 << 31
 self . render_value = render_value
                          obj = settings . TEMPLATE_STRING_IF_INVALID
 import random as random_module
 self . buffer = self . buffer [ size : ]
  if '.' in hextets [ - 1 ] :
  lines = [ ]
              self . _client = self . _lib . Client ( self . _servers )
  return repr ( list ( self ) )
 hour , minute = divmod ( timezone , 60 )
          self . _upload_handlers = [ uploadhandler . load_handler ( handler , self )  for handler in settings . FILE_UPLOAD_HANDLERS ]
 def __init__ ( self , flo , chunk_size = 64 * 1024 ) :
  if fields is not None and f . name not in fields :
  self . DSTDIFF = self . DSTOFFSET - self . STDOFFSET
          return self . paginator . validate_number ( self . number - 1 )
    def b64_encode ( s ) :
 from django . utils . translation import trans_real
  for attr in self . rendering_attrs :
   def clear ( self ) :
 from django . core . management . utils import ( handle_extensions , find_command ,  popen_wrapper )
   if i == 0 and not is_writable ( npath ( base_path + '.mo' ) ) :
 connection = connection or get_connection ( username = auth_user ,  password = auth_password ,  fail_silently = fail_silently )
 existing = list ( root . manager . loggerDict )
  handler . addQuickElement ( "id" , unique_id )
    @ register . filter ( is_safe = True )
                field_name = field_node . getAttribute ( "name" )
 if value != '' :
    if item [ 'enclosure' ] is not None :
 from django . core . management . utils import handle_extensions
    def get_deserializer ( format ) :
                  self . load_label ( fixture_label )
   if options . get ( 'no_wrap' ) :
      if used_name != guessed_filename :
                      raise CommandError ( "More than one migration matches '%s' in app '%s'. Please be more specific." % (  migration_name , app_label ) )
  handler . addQuickElement ( "id" , self . feed [ 'id' ] )
  return media
              return import_string ( key_func )
    def parse_bits ( parser , bits , params , varargs , varkw , defaults ,  takes_context , name ) :
 if settings . USE_TZ :
                  return default
                      space = line . find ( ' ' ) + 1
              escaped = True
    def write_items ( self , handler ) :
              value = self . make_bytes ( value )
  self . file_path = os . path . abspath ( self . file_path )
      if isinstance ( message , SafeData ) :
   def tag ( self ) :
              dklen = None
      def __init__ ( self , name ) :
     def __len__ ( self ) :
  self . stream . write ( "]" )
  from itertools import chain
 from decimal import Decimal , InvalidOperation , Context , ROUND_HALF_UP
              for item in six . iteritems ( dict_ ) :
     @ python_2_unicode_compatible
                      opt_label += '='
  language_code_prefix_re = re . compile ( r'^/([\w-]+)(/|$)' )
   def as_json ( self , escape_html = False ) :
      help = "Prints the CREATE INDEX SQL statements for the given model module name(s)."
              return
 break
 import calendar
   else :
                      self . empty_variable ( token )
  if self . match is None or self . match_re . search ( f ) :
 lookups . appendlist ( pattern . callback , ( bits , p_pattern , pattern . default_args ) )
                  self . _template_response_middleware . insert ( 0 , mw_instance . process_template_response )
              c = SimpleCookie ( )
 return other_dict
          return SafeText ( s )
              template = self . template_with_initial
               raise MultiPartParserError ( "Invalid content length: %r" % content_length )
 from django . core . management . color import color_style , no_style
   name = '.' . join ( parts )
                          out . write ( ' #\n' )
 if not ( bits . scheme and bits . netloc ) :
 if six . PY2 :
              connection_params [ 'timeout' ] = self . timeout
 import warnings
              retval = handler . upload_complete ( )
   seen_data . add ( data )
  elif autoescape :
  if fields is not None and f . name not in fields :
 sys . stdin . close ( )
  from django . conf import settings
 for lib in builtins :
                            walk_to_end ( ch , pattern_iter )
 comment_lineno_cache = None
                  raise CommandError ( "App '%s' does not have migrations (you cannot selectively sync unmigrated apps)" % app_label )
          errors = [ ]
                  m = _html_parser . attrfind . match ( rawdata , k )
 if print_ is None :
  randint = random . randrange ( 100000 )
  else :
 try :
   def list ( self , * args , ** kwargs ) :
              logging . _releaseLock ( )
                  self . close ( )
    if callable ( callback ) :
          if parse_until :
 handler . addQuickElement ( "link" , "" , { "href" : item [ 'link' ] , "rel" : "alternate" } )
   else :
  sites = [ ]
  if tok . next :
              res = to_digits [ 0 ]
              for reference , receivers in obj . unresolved_references . items ( ) :
 try :
              return
   requires_system_checks = False
              self . address_family = socket . AF_INET6
              yield key , self [ key ]
                  token = Token ( TOKEN_VAR , token_string [ 2 : - 2 ] . strip ( ) )
  if value is not result :
 super ( NullBooleanSelect , self ) . __init__ ( attrs , choices )
  if PY3 :
 if options [ 'verbosity' ] > 0 :
  elif isinstance ( timezone , six . string_types ) and pytz is not None :
  if last == 3 :
  else :
           defaults , _ = parser . parse_args ( args = [ ] )
  for attr in self . child_nodelists :
              self . clear ( )
      _meth_func = "im_func"
                      cls . __unicode__ = cls . __text_cast
 from django . utils import six
 def wrapper ( cls ) :
 self . orphans = int ( orphans )
 def __init__ ( self , language ) :
          parser . add_argument ( '--database' , action = 'store' , dest = 'database' ,  default = DEFAULT_DB_ALIAS , help = 'Nominates a database onto which to '  'open a shell. Defaults to the "default" database.' )
     class CsrfTokenNode ( Node ) :
 return WEEKDAYS_ABBR [ self . data . weekday ( ) ]
               timeout = - 1
          raise NotImplementedError ( 'subclasses of Origin must provide a reload() method' )
                      if not pythonrc :
  return self . __cast ( ) == other
    @ wraps ( func )
   def _get_choices ( self ) :
      from shutil import copystat
 if dirname and not os . path . exists ( dirname ) :
  from django . core . exceptions import ImproperlyConfigured
               return True
 __nonzero__ = new_method_proxy ( bool )
   def get ( self , key , default = None , version = None ) :
 try :
 if domain :
     self . loaded_object_count += loaded_objects_in_fixture
  def __new__ ( cls , * args , ** kwargs ) :
  elif param in kwargs :
                        tt = ( 2037 , ) + tt [ 1 : ]
              self . extra_context [ name ] = var
                      middle = middle [ : - len ( closing ) ]
 parser . add_argument ( '--noreload' , action = 'store_false' , dest = 'use_reloader' , default = True ,  help = 'Tells Django to NOT use the auto-reloader.' )
    else :
 self . verbosity = options . get ( 'verbosity' )
              return ""
import warnings
  with connections [ db ] . cursor ( ) as cursor :
 c = [ ]
 self . backout = [ ]
 notifier . stop ( )
          name = args [ - 1 ]
    class SignatureExpired ( BadSignature ) :
                  name = match . lastgroup
                   break
 return MONTHS_3 [ self . data . month ]
 if file_ :
          t = get_template ( template_name , dirs )
            if 'forloop' in context :
 msgs , errors , status = popen_wrapper ( args )
              return value + arg
  else :
def deconstructible ( * args , ** kwargs ) :
   if six . PY3 :
          return key in caches [ DEFAULT_CACHE_ALIAS ]
              return path , ''
                  if status != STATUS_OK :
 def management_form ( self ) :
 condition = TemplateIfParser ( parser , bits ) . parse ( )
              name = self . _pk_field . name
 self . blocks = dict ( ( n . name , n ) for n in nodelist . get_nodes_by_type ( BlockNode ) )
 from django . db import connection
 if self . parent_name . filters or isinstance ( self . parent_name . var , Variable ) :
                  raise ValidationError (  self . error_messages [ 'invalid_choice' ] ,  code = 'invalid_choice' ,  params = { 'value' : val } ,  )
  from django . core . management . base import BaseCommand , CommandError
              return None
              return timedelta ( seconds = - time . altzone )
   def compile_function_error ( self , token , e ) :
                  qs = self . model . _default_manager . get_queryset ( )
              self . mod = old
      options = FASTCGI_OPTIONS . copy ( )
                              message_context = message_context . strip ( "'" )
  raise CommandError ( "%r is not a valid %s name. Please %s." %  ( name , app_or_project , message ) )
 self . app_name = app_name
             self . _choices = self . widget . choices = list ( value )
      class VerbatimNode ( Node ) :
          result = copy . copy ( self )
   finally :
 if is_templatized :
                  replaces . extend ( migration . replaces )
 index_output . append ( "CREATE %sINDEX %s ON %s (%s);" %  ( unique , qn ( '%s_%s' % ( tablename , f . name ) ) , qn ( tablename ) ,  qn ( f . name ) ) )
 return import_string ( path ) ( * args , ** kwargs )
              for f in chain . from_iterable ( l [ 1 ] for l in self . _files . lists ( ) ) :
 if six . PY2 and isinstance ( rawdata , six . text_type ) :
 unhandled_params = list ( params )
                  raise CommandError (  "AppCommand cannot handle app '%s' in legacy mode "  "because it doesn't have a models module."  % app_config . label )
  from django . core . cache . backends . base import BaseCache , DEFAULT_TIMEOUT
 return obj
  subject = self . format_subject ( subject )
                   call_command ( 'loaddata' , 'initial_data' , ** options )
          return self
   else :
  from django . utils import termcolors
   def tokenize ( self ) :
 if p >= 0 :
  import time
  def __init__ ( self , streaming_content = ( ) , * args , ** kwargs ) :
   def handle_app_config ( self , app_config , ** options ) :
 ctx = hashlib . md5 ( )
 import sys
 module = import_module ( '%s.management.commands.%s' % ( app_name , name ) )
          result = super ( MultiValueField , self ) . __deepcopy__ ( memo )
                  orig_vars . pop ( slots_var )
 FormSet . fk = fk
  root = nonlocal_root [ 0 ] = oldroot [ NEXT ]
              response . add_post_render_callback ( _set_response_etag )
              obj_pk = obj . _get_pk_val ( )
    def handle ( self , * test_labels , ** options ) :
 total_forms = max ( initial_forms , self . min_num ) + self . extra
 warnings . warn ( "'get_cache' is deprecated in favor of 'caches'." ,  RemovedInDjango19Warning , stacklevel = 2 )
   return BlockNode ( block_name , nodelist )
  return attrs
    if hasattr ( hashlib , "pbkdf2_hmac" ) :
 return iter ( self . forms )
 if processors is None :
                          self . stdout . write ( "    - %s\n" % operation . describe ( ) )
          if not value :
   def prepare_value ( self , value ) :
  for i in range ( 0 , self . total_form_count ( ) ) :
 if cleaned_line . endswith ( ";" ) :
 input_formats = formats . get_format_lazy ( 'TIME_INPUT_FORMATS' )
 re_escaped = re . compile ( r'\\(.)' )
 num_args = 0
   quant = [ ]
 self . _post_clean ( )
 self . _clean_form ( )
                  chunk = self . _read_limited ( )
           current_fields = [ ]
 if attrs :
 def reset_cache ( ** kwargs ) :
  try :
   try :
    signals . request_finished . connect ( cache . close )
 exclude = [ ]
          return super ( FileInput , self ) . render ( name , None , attrs = attrs )
 self . _cache = _caches . setdefault ( name , { } )
              chunk_size = self . DEFAULT_CHUNK_SIZE
 return node_class ( takes_context , args , kwargs )
   return key , pdict
  except ImportError as e :
              super ( TypedMultipleChoiceField , self ) . validate ( value )
 return tempdir
  except AttributeError :
          return ord ( buf [ i ] )
  if self . instance . pk is not None :
 fixture_name , ser_fmt , cmp_fmt = self . parse_name ( fixture_label )
                           if isinstance ( current , BaseContext ) and getattr ( type ( current ) , bit ) :
    def lazy ( func , * resultclasses ) :
  except ImportError as e :
                  closable . close ( )
 BASE56_ALPHABET = '23456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnpqrstuvwxyz'
 request = sys . modules [ __name__ + ".moves.urllib_request" ]
          int_part_gd = ''
          msg = "[%s] %s\n" % ( self . log_date_time_string ( ) , format % args )
  else :
 self . msguniq_options = self . msguniq_options [ : ] + [ '--no-wrap' ]
     class DateField ( BaseTemporalField ) :
 choices = [ ( i , i ) for i in range ( 1 , 32 ) ]
   def get_templatetags_modules ( ) :
                      with connection . cursor ( ) as cursor :
    def get_major_version ( version = None ) :
 return wrap ( value , int ( arg ) )
   def luhn ( candidate ) :
 if self . compare ( cleaned , self . limit_value ) :
              if opname not in roots :
 if not hasattr ( other_dict , '__getitem__' ) :
 token = parser . next_token ( )
    except OSError :
   def __getstate__ ( self ) :
                  return template . render ( context )
 setattr ( base , new_method_name , old_method )
 syear = "%04d" % ( dt . year , )
 data = json . dumps ( data , cls = encoder )
 try :
                random . seed (  hashlib . sha256 (  ( "%s%s%s" % (  random . getstate ( ) ,  time . time ( ) ,  settings . SECRET_KEY ) ) . encode ( 'utf-8' )  ) . digest ( ) )
 self . field_name = field_name
  if _default is None :
                   continue
import logging
              handler . addQuickElement ( "pubDate" , rfc2822_date ( item [ 'pubdate' ] ) )
 def __getitem__ ( self , key ) :
          return self . tokens . pop ( 0 )
                          if name not in logging . _handlers :
              TYPE = FIELD
 return e
          raise ValueError ( "Not a string literal: %r" % s )
                      stream . close ( )
      abspathu = abspath
                      raise ValueError (  "%s.process_response didn't return an "  "HttpResponse object. It returned None instead."  % ( middleware_method . __self__ . __class__ . __name__ ) )
  if isinstance ( value , datetime . time ) :
 return base_lang in settings . LANGUAGES_BIDI
    executor = MigrationExecutor ( connection , self . migration_progress_callback )
  else :
 self . queryset = field . queryset
              base = sup_cls . media
  def handle_field ( self , obj , field ) :
 admin = 'admin'
              path = safe_join ( self . location , name )
  return wraps ( func ) ( _dec )
 try :
  import re
 k = match . end ( )
     class AppCommand ( BaseCommand ) :
                      import logging . handlers
      format_key = 'DATETIME_INPUT_FORMATS'
  except KeyError :
  if self . data . minute == 0 and self . data . hour == 12 :
 self . file . seek ( pos )
    class HttpResponseBase ( six . Iterator ) :
      tagfind = re . compile ( '([a-zA-Z][-.a-zA-Z0-9:_]*)(?:\s|/(?!>))*' )
  from . import Error , Tags , register
              return t . to_language ( )
                  self . stdout . write ( "  No migrations to apply." )
          return self . name
    @ register . filter ( is_safe = True )
              e , tb = sys . exc_info ( ) [ 1 : ]
   objects = serializers . deserialize ( ser_fmt , fixture ,  using = self . using , ignorenonexistent = self . ignore )
  return [ None , None ]
   return new_value
 import sys
                  i = 365
   path , module = name . rsplit ( '.' , 1 )
   class InvalidCacheBackendError ( ImproperlyConfigured ) :
 try :
 if self . choices :
 pass
              return [ ]
 for formset in formsets :
 @ stringfilter
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
               iter ( second_item )
 for header in headerlist :
  else :
     try :
                  raise ImproperlyConfigured ( 'Could not create directory for saving email messages: %s (%s)' % ( self . file_path , err ) )
   class BaseHandler ( object ) :
  msg [ name ] = value
 from django . dispatch import receiver
  choice_input_class = None
     return d
              handler . addQuickElement ( "description" , item [ 'description' ] )
  else :
  for potfile in potfiles :
                return ( self . __newobj__ , ( self . __class__ , ) , self . __getstate__ ( ) )
  @ total_ordering
   def set ( self , key , value , timeout = DEFAULT_TIMEOUT , version = None ) :
          super ( ComboField , self ) . __init__ ( * args , ** kwargs )
 from django . utils import six
                  prefixed_name = self . add_prefix ( name )
  else :
     class DeserializedObject ( object ) :
      child_nodelists = ( 'nodelist_true' , 'nodelist_false' )
 from django . utils . six . moves . urllib . parse import urlparse
              cached = _format_cache [ cache_key ]
      @ lru_cache . lru_cache ( maxsize = None )
  else :
   def _clean_fields ( self ) :
   flup_module = 'server.' + options [ 'protocol' ]
              output = ''
                  raise ValueError ( 'empty_label list/tuple must have 3 elements.' )
     def make_origin ( display_name , loader , name , dirs ) :
                  mw_instance = mw_class ( )
 try :
          return value
 if tag in self . CDATA_CONTENT_ELEMENTS :
        def is_aware ( value ) :
   def render ( self , context ) :
   self . indent ( 1 )
  elif len ( options . args ) < 1 :
 def __init__ ( self , name , sysid , pubid ) :
                      answer = six . moves . input ( "Do you wish to proceed? [yN] " )
   self . _post_parse_error = False
          __slots__ = 'hashvalue'
  else :
          self . _request_middleware = self . _view_middleware = self . _template_response_middleware = self . _response_middleware = self . _exception_middleware = None
  else :
                          self . _close_files ( )
   def add_truncation_text ( self , text , truncate = None ) :
              try :
  field_desc += ')'
                  kwargs [ 'to_field' ] = self . fk . rel . field_name
  else :
    self . choices = list ( choices )
  escapejs = allow_lazy ( escapejs , six . text_type )
          if isinstance ( settings . TIME_ZONE , six . string_types ) and pytz is not None :
  elif name == 'string' :
      def b ( s ) :
   def upload_complete ( self ) :
              raise TemplateSyntaxError ( "Searching for value. Expected another "  "value but found end of string: %s" %  subject )
     if os . path . exists ( name ) :
 try :
          changeset = None
 notifier = pyinotify . Notifier ( wm , EventHandler ( ) )
                      self . setlistdefault ( key ) . extend ( value_list )
                          g = g . strip ( "'" )
 return self . _callback
                    self . translate = True
 neg_inf = - 1e200 * 1e200
    if isinstance ( self . regex , six . string_types ) :
              raise DjangoUnicodeDecodeError ( s , * e . args )
              lookup_view_s = "%s.%s" % ( m , n )
 from django . utils . text import unescape_entities
 inverse_match = False
          return False
          path = os . environ . get ( 'PATH' , '' ) . split ( os . pathsep )
  if not cls :
              return EndToken
 if conflicts :
   if pop_context :
 from django . db import connections , DEFAULT_DB_ALIAS
 self . json_kwargs . pop ( 'fields' , None )
              password = digest ( password ) . digest ( )
                  continue
   if six . PY3 :
              self . fetch_command ( subcommand ) . run_from_argv ( self . argv )
                  self . _body = self . read ( )
  return super ( PasswordInput , self ) . render ( name , value , attrs )
 get_function_globals = operator . attrgetter ( _func_globals )
                          raise
 handlers = self . _upload_handlers
   def size ( self , name ) :
 return ResolverMatch ( sub_match . func , sub_match . args , sub_match_dict , sub_match . url_name , self . app_name or sub_match . app_name , [ self . namespace ] + sub_match . namespaces )
  options [ option ] = value
                          raise CommandError ( "Unknown application: %s" % app_label )
  token = Token ( TOKEN_BLOCK , block_content )
  bits = arg . split ( ',' )
  else :
 bits = token . split_contents ( ) [ 1 : ]
  import os
   def render_js ( self ) :
  ALLOWED_VARIABLE_CHARS = ( 'abcdefghijklmnopqrstuvwxyz'  'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_.' )
   if formfield_callback is None :
 for name in loggers :
    def get_unique_error_message ( self , unique_check ) :
 from django . core . exceptions import ImproperlyConfigured
  else :
                     return FILE_INPUT_CONTRADICTION
  if token . token_type == 0 :
 kwargs = {  'label' : getattr ( form . fields . get ( name ) , 'label' , capfirst ( self . fk . verbose_name ) )  }
                      value = getattr ( self , 'clean_%s' % name ) ( )
    for app_config in apps . get_app_configs ( ) :
                      os . makedirs ( self . default_locale_path )
              start , end = match . span ( )
                      raise NoReverseMatch ( "%s is not a registered namespace" %  key )
 self . validators . append ( self . _regex_validator )
  else :
 t = getattr ( _active , "value" , None )
              return None
              result = self . _resolve ( )
 hextet = ip_str . split ( '::' )
 return remove_tags ( value , tags )
 for f in file_list :
 try :
 if result is not None :
 ns_pattern = ''
    def filter_function ( self , func , ** flags ) :
   def execute ( self ) :
 from django . core . files . utils import FileProxyMixin
                  regex = self . _regex
  if f . db_index :
  return value
   if sys . version_info >= ( 2 , 7 , 2 ) :
  table_name_filter = options . get ( 'table_name_filter' )
    class Command ( BaseCommand ) :
 method = kwargs . pop ( 'method' )
   if options [ "pidfile" ] :
  else :
   if not changed :
   if self . verbosity > 0 or self . interactive :
  elif len ( app_labels ) > 1 :
   def all ( self ) :
                def __wrapper__ ( self , * args , ** kw ) :
    if url :
  try :
  import functools
 raise NotImplementedError ( 'subclasses of BaseCache must provide a set() method' )
              raise ValidationError ( self . message , code = self . code )
 from django . utils import six
  else :
  from django . apps import apps
                  self . check ( )
 try :
  if options [ 'umask' ] :
          return ''
          try :
 import mimetypes
  self . startElement ( name , attrs )
          node . source = token . source
          self . vars = variables
              return '(NOT (%s: %s))' % ( self . connector , ', ' . join ( [ str ( c ) for c  in self . children ] ) )
                  ch , escaped = next ( pattern_iter )
          retval = self . expression ( )
                           continue
 import sys
 self . POST = QueryDict ( mutable = True )
              connections [ self . using ] . close ( )
              yield node
          return "(%s %r)" % ( self . id , self . value )
          key = self . make_key ( key , version = version )
   def extract ( self ) :
                      if inplural :
  else :
          raise Exception ( "This %s instance is not writable" % self . __class__ . __name__ )
              kwargs [ 'widget' ] = widgets [ f . name ]
   def strptime ( self , value , format ) :
          items = _iteritems
  except _BASE64_DECODE_ERROR :
  else :
 @ stringfilter
   if errors :
   def connection ( self ) :
   if self . verbosity > 1 :
           value = timezone . normalize ( value )
  for item in self . items :
  from django . core . exceptions import ValidationError
 self . add_root_elements ( handler )
     class BaseDatabaseCache ( BaseCache ) :
  value = b'' . join ( self . make_bytes ( chunk ) for chunk in value )
   if self . verbosity > 0 :
          return tuple ( a for a in WRAPPER_ASSIGNMENTS if hasattr ( fn , a ) )
              return url
              return
 self . _errors = None
 if result :
     class TemporaryFileUploadHandler ( FileUploadHandler ) :
   def lock ( f , flags ) :
 chunks = [ ]
          ending = self . ending if ending is None else ending
 super ( ManagementForm , self ) . __init__ ( * args , ** kwargs )
  def chunks ( self , chunk_size = None ) :
   @ streaming_content . setter
          instance = super ( SortedDict , cls ) . __new__ ( cls , * args , ** kwargs )
  else :
 logger = logging . getLogger ( name )
 import types
              if isinstance ( self . _regex , six . string_types ) :
          self . token = token
 class SubWidget ( object ) :
 rfcdate = formatdate ( epoch_seconds )
 field_notes = [ ]
 contents = format_html ( '<label{0}>{1}</label>' , attrs , contents )
  return flat
   value = value . astimezone ( timezone )
  except KeyError :
   class SimpleLazyObject ( LazyObject ) :
 return func
  return format_html (  '<ul class="errorlist">{0}</ul>' ,  format_html_join ( '' , '<li>{0}{1}</li>' , ( ( k , force_text ( v ) ) for k , v in self . items ( ) ) )  )
              return False
  def __init__ ( self , query_string = None , mutable = False , encoding = None ) :
   if hasattr ( f , 'seek' ) and callable ( f . seek ) :
                          raise CommandError ( "Unknown model: %s.%s" % ( app_label , model_label ) )
  return 'th'
  else :
   def prepare_value ( self , value ) :
   super ( ValidationError , self ) . __init__ ( message , code , params )
 from django . core . urlresolvers import set_script_prefix
 from django . utils . encoding import force_str
  else :
    self . base_fields [ MIN_NUM_FORM_COUNT ] = IntegerField ( required = False , widget = HiddenInput )
      mapping = { 'openblock' : BLOCK_TAG_START ,  'closeblock' : BLOCK_TAG_END ,  'openvariable' : VARIABLE_TAG_START ,  'closevariable' : VARIABLE_TAG_END ,  'openbrace' : SINGLE_BRACE_START ,  'closebrace' : SINGLE_BRACE_END ,  'opencomment' : COMMENT_TAG_START ,  'closecomment' : COMMENT_TAG_END ,  }
     app_template_dirs = calculate_app_template_dirs ( )
          self . widgets = [ w ( ) if isinstance ( w , type ) else w for w in widgets ]
  from collections import OrderedDict
  return self . handle_noargs ( ** options )
    def render ( self ) :
   def set_many ( self , data , timeout = DEFAULT_TIMEOUT , version = None ) :
 from django . forms . formsets import BaseFormSet , formset_factory
    else :
    return quote ( force_bytes ( path ) . replace ( b"\\" , b"/" ) , safe = b"/~!*()'" )
 import re
  except AttributeError :
 def find_fixtures ( self , fixture_label ) :
 try :
 self . _headers [ header . lower ( ) ] = ( header , value )
 RFC1123_DATE = re . compile ( r'^\w{3}, %s %s %s %s GMT$' % ( __D , __M , __Y , __T ) )
    def send_messages ( self , messages ) :
  self . backout . append ( self . pointer )
      unlink = os . unlink
  elif token . token_type == 1 :
                          with open ( pythonrc ) as handle :
          tried = [ ]
 pop = complain
  kwargs [ 'number' ] = number_value
          return not settings . DEBUG
          return super ( type ( dt ) , dt ) . strftime ( fmt )
  if cache_timeout < 0 :
  return I18N_MODIFIED if filename . endswith ( '.mo' ) else FILE_MODIFIED
              field_params [ 'max_length' ] = int ( row [ 3 ] )
 doublecolon_len = 0
from django . conf import settings
  if getattr ( func , 'needs_autoescape' , False ) :
 memo [ id ( self ) ] = result
                  definition [ 'fg' ] = fg
   repo_dir = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) )
    class ContextDict ( dict ) :
          self . path , self . match , self . recursive = path , match , recursive
    _urllib_robotparser_moved_attributes = [  MovedAttribute ( "RobotFileParser" , "robotparser" , "urllib.robotparser" ) ,  ]
 final_output = [ ]
                  if isinstance ( field , FileField ) :
   class Command ( BaseCommand ) :
    def add_metaclass ( metaclass ) :
 _meth_self = "im_self"
                      help_text = help_text_html % force_text ( field . help_text )
     csrf_token = context . get ( 'csrf_token' , None )
          if "=" in x :
  result = user_function ( * args , ** kwds )
          return date ( self . year , self . month , self . day )
    def _has_changed ( self , initial , data ) :
 super ( BaseModelForm , self ) . __init__ ( data , files , auto_id , prefix , object_data ,  error_class , label_suffix , empty_permitted )
  return wrapper
 overlapped = OVERLAPPED ( )
 LOCK_EX = fcntl . LOCK_EX
                  msgs = msgs . decode ( 'utf-8' )
    def get_language_from_path ( path ) :
 self . years = range ( this_year , this_year + 10 )
  self . validate_name ( name , app_or_project )
 commands . update ( { name : app_config . name for name in find_commands ( path ) } )
 force_str = force_text
             root = logging . root
  def add_arguments ( self , parser ) :
  if unhandled_params :
  else :
    def setdefault ( self , key , default ) :
          signature = base64_hmac ( self . salt + 'signer' , value , self . key )
              activate ( self . language )
 REQUEST = property ( _get_request )
 exc_value . __cause__ = exc
    def dict ( self ) :
                      return
 result = [ ]
 from django . utils . timezone import is_aware
 super ( ComboField , self ) . clean ( value )
                  msgs = fp . read ( )
  return render_value_in_context ( output , context )
    if settings . is_overridden ( 'TEMPLATE_LOADERS' ) :
 class ChoiceFieldRenderer ( object ) :
 fp = kwargs . pop ( "file" , sys . stdout )
          min_num = DEFAULT_MIN_NUM
 self . default_locale_path = self . locale_paths [ 0 ]
 self . command_stack = [ ]
  subclass = type ( "Migration" , ( Migration , ) , {  "dependencies" : [ ( app_label , migration . name ) for migration in merge_migrations ] ,  } )
                      for ( k , v ) in type_ . __dict__ . items ( ) :
  else :
    def __getitem__ ( self , header ) :
                          extracted . close ( )
     ret_ip = [ ]
    def modelform_factory ( model , form = ModelForm , fields = None , exclude = None ,  formfield_callback = None , widgets = None , localized_fields = None ,  labels = None , help_texts = None , error_messages = None ) :
   if not changes and self . verbosity >= 1 :
              pathext = [ '' ]
  cookiedict = { }
 if CONTEXT_SEPARATOR in result :
  else :
   def __copy__ ( self ) :
              raise CommandError ( "This script should be run from the Django Git "  "checkout or your project or app tree, or with "  "the settings module specified." )
 from django . utils . dateformat import format , time_format
 return mark_safe ( '\n' . join ( [ six . text_type ( self . management_form ) , forms ] ) )
   def write ( self , content ) :
          if not self . render_value :
   def handle ( self , ** options ) :
   def reader_leaves ( self ) :
  except IOError as e :
              self . stream . write ( "\n" )
 for match in tag_re . finditer ( self . template_string ) :
 base_lang = get_language ( ) . split ( '-' ) [ 0 ]
 simple_email_re = re . compile ( r'^\S+@\S+\.\S+$' )
   class Command ( TemplateCommand ) :
   def m ( self ) :
              self . stdout . write ( "No conflicts detected to merge." )
  else :
 self . to_field = kwargs . pop ( "to_field" , None )
  raise
 last [ NEXT ] = root [ PREV ] = cache [ key ] = link
  if path . exists ( absolute_path ) :
 if self . verbosity >= 1 and sql :
                  match = True
              token = self . next_token ( )
                      if f . rel and f . rel . to not in to_delete :
  elif not isinstance ( value , ( list , tuple ) ) :
  naiveip_re = re . compile ( r"""^(?: (?P<addr>     (?P<ipv4>\d{1,3}(?:\.\d{1,3}){3}) |         # IPv4 address     (?P<ipv6>\[[a-fA-F0-9:]+\]) |               # IPv6 address     (?P<fqdn>[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*) # FQDN ):)?(?P<port>\d+)$""" , re . X )
                              title += " (%s squashed migrations)" % len ( graph . nodes [ plan_node ] . replaces )
    if response . has_header ( 'Vary' ) :
  Meta = type ( str ( 'Meta' ) , parent , attrs )
               logger . removeHandler ( handler )
          key = self . make_key ( key , version = version )
                                  handler . new_file ( field_name , file_name ,  content_type , content_length ,  charset , content_type_extra )
  return _decorator
                      sub_tried = e . args [ 0 ] . get ( 'tried' )
   if response is None :
   def _delete ( self , fname ) :
              signals . got_request_exception . send ( sender = self . __class__ , request = request )
              msg = "Invalid HTTP_HOST header: %r." % host
 from django . core . management . color import no_style
 from django . forms . widgets import ( SelectMultiple , HiddenInput ,  MultipleHiddenInput )
  def add_arguments ( self , parser ) :
          return ZERO
 if match :
   else :
   resolver_match = resolver . resolve ( request . path_info )
   def is_multipart ( self ) :
 from django . core . exceptions import SuspiciousFileOperation
 g = generator . Generator ( fp , mangle_from_ = False )
              try :
  return response
  with open ( new_path , 'wb' ) as new_file :
     if i >= self . initial_form_count ( ) and i >= self . min_num :
  self . cleaned_data [ name ] = value
     headerlist = [ ]
